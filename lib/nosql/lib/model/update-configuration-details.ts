/**
 * NoSQL Database API
 * The control plane API for NoSQL Database Cloud Service HTTPS
provides endpoints to perform NDCS operations, including creation
and deletion of tables and indexes; population and access of data
in tables; and access of table usage metrics.

 * OpenAPI spec version: 20190828
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A tenancy or service-level configuration. The discriminator value
 * {@code UpdateConfigurationDetails.environment} must match the service's
 * environment type.
 *
 */
export interface UpdateConfigurationDetails {
  "environment": string;
}

export namespace UpdateConfigurationDetails {
  export function getJsonObj(obj: UpdateConfigurationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "environment" in obj && obj.environment) {
      switch (obj.environment) {
        case "MULTI_TENANCY":
          return model.UpdateMultiTenancyConfigurationDetails.getJsonObj(
            <model.UpdateMultiTenancyConfigurationDetails>(<object>jsonObj),
            true
          );
        case "HOSTED":
          return model.UpdateHostedConfigurationDetails.getJsonObj(
            <model.UpdateHostedConfigurationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.environment}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: UpdateConfigurationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "environment" in obj && obj.environment) {
      switch (obj.environment) {
        case "MULTI_TENANCY":
          return model.UpdateMultiTenancyConfigurationDetails.getDeserializedJsonObj(
            <model.UpdateMultiTenancyConfigurationDetails>(<object>jsonObj),
            true
          );
        case "HOSTED":
          return model.UpdateHostedConfigurationDetails.getDeserializedJsonObj(
            <model.UpdateHostedConfigurationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.environment}`);
      }
    }
    return jsonObj;
  }
}
