/**
 * Web Application Acceleration and Security Services API
 * OCI Web Application Acceleration and Security Services
 * OpenAPI spec version: 20181116
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { WaasClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class WaasWaiter {
  public constructor(private client: WaasClient, private readonly config?: WaiterConfiguration) {}

  /**
   * Waits forAddressList till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAddressListResponse | null (null in case of 404 response)
   */
  public async forAddressList(
    request: serviceRequests.GetAddressListRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetAddressListResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAddressList(request),
      response => targetStates.includes(response.addressList.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forCertificate till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCertificateResponse | null (null in case of 404 response)
   */
  public async forCertificate(
    request: serviceRequests.GetCertificateRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetCertificateResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCertificate(request),
      response => targetStates.includes(response.certificate.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forCustomProtectionRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCustomProtectionRuleResponse | null (null in case of 404 response)
   */
  public async forCustomProtectionRule(
    request: serviceRequests.GetCustomProtectionRuleRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetCustomProtectionRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCustomProtectionRule(request),
      response => targetStates.includes(response.customProtectionRule.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forWaasPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetWaasPolicyResponse | null (null in case of 404 response)
   */
  public async forWaasPolicy(
    request: serviceRequests.GetWaasPolicyRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetWaasPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getWaasPolicy(request),
      response => targetStates.includes(response.waasPolicy.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
