/**
 * Oracle Cloud Migrations API
 * A description of the Oracle Cloud Migrations API.
 * OpenAPI spec version: 20220919
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { MigrationClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class MigrationWaiter {
  public constructor(
    private client: MigrationClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forMigration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMigrationResponse | null (null in case of 404 response)
   */
  public async forMigration(
    request: serviceRequests.GetMigrationRequest,
    ...targetStates: models.Migration.LifecycleState[]
  ): Promise<serviceResponses.GetMigrationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMigration(request),
      response => targetStates.includes(response.migration.lifecycleState!),
      targetStates.includes(models.Migration.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMigrationAsset till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMigrationAssetResponse | null (null in case of 404 response)
   */
  public async forMigrationAsset(
    request: serviceRequests.GetMigrationAssetRequest,
    ...targetStates: models.MigrationAsset.LifecycleState[]
  ): Promise<serviceResponses.GetMigrationAssetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMigrationAsset(request),
      response => targetStates.includes(response.migrationAsset.lifecycleState!),
      targetStates.includes(models.MigrationAsset.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMigrationPlan till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMigrationPlanResponse | null (null in case of 404 response)
   */
  public async forMigrationPlan(
    request: serviceRequests.GetMigrationPlanRequest,
    ...targetStates: models.MigrationPlan.LifecycleState[]
  ): Promise<serviceResponses.GetMigrationPlanResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMigrationPlan(request),
      response => targetStates.includes(response.migrationPlan.lifecycleState!),
      targetStates.includes(models.MigrationPlan.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forReplicationSchedule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetReplicationScheduleResponse | null (null in case of 404 response)
   */
  public async forReplicationSchedule(
    request: serviceRequests.GetReplicationScheduleRequest,
    ...targetStates: models.ReplicationSchedule.LifecycleState[]
  ): Promise<serviceResponses.GetReplicationScheduleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getReplicationSchedule(request),
      response => targetStates.includes(response.replicationSchedule.lifecycleState!),
      targetStates.includes(models.ReplicationSchedule.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetAsset till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetAssetResponse | null (null in case of 404 response)
   */
  public async forTargetAsset(
    request: serviceRequests.GetTargetAssetRequest,
    ...targetStates: models.TargetAsset.LifecycleState[]
  ): Promise<serviceResponses.GetTargetAssetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetAsset(request),
      response => targetStates.includes(response.targetAsset.lifecycleState!),
      targetStates.includes(models.TargetAsset.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
