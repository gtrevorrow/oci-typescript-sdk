/**
 * Oracle Cloud Migrations API
 * A description of the Oracle Cloud Migrations API.
 * OpenAPI spec version: 20220919
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Migration strategy for the resource to be migrated.
 */
export interface ResourceAssessmentStrategy {
  /**
   * The type of resource.
   */
  "resourceType": ResourceAssessmentStrategy.ResourceType;

  "strategyType": string;
}

export namespace ResourceAssessmentStrategy {
  export enum ResourceType {
    Cpu = "CPU",
    Memory = "MEMORY",
    All = "ALL",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ResourceAssessmentStrategy): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "strategyType" in obj && obj.strategyType) {
      switch (obj.strategyType) {
        case "PEAK":
          return model.PeakResourceAssessmentStrategy.getJsonObj(
            <model.PeakResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "PERCENTILE":
          return model.PercentileResourceAssessmentStrategy.getJsonObj(
            <model.PercentileResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "AVERAGE":
          return model.AverageResourceAssessmentStrategy.getJsonObj(
            <model.AverageResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "AS_IS":
          return model.AsIsResourceAssessmentStrategy.getJsonObj(
            <model.AsIsResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.strategyType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ResourceAssessmentStrategy): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "strategyType" in obj && obj.strategyType) {
      switch (obj.strategyType) {
        case "PEAK":
          return model.PeakResourceAssessmentStrategy.getDeserializedJsonObj(
            <model.PeakResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "PERCENTILE":
          return model.PercentileResourceAssessmentStrategy.getDeserializedJsonObj(
            <model.PercentileResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "AVERAGE":
          return model.AverageResourceAssessmentStrategy.getDeserializedJsonObj(
            <model.AverageResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        case "AS_IS":
          return model.AsIsResourceAssessmentStrategy.getDeserializedJsonObj(
            <model.AsIsResourceAssessmentStrategy>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.strategyType}`);
      }
    }
    return jsonObj;
  }
}
