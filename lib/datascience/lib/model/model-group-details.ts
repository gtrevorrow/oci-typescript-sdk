/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The model group details.
 */
export interface ModelGroupDetails {
  /**
   * An array of custom metadata details for the model group.
   */
  "customMetadataList"?: Array<model.CustomMetadata>;

  "type": string;
}

export namespace ModelGroupDetails {
  export function getJsonObj(obj: ModelGroupDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "customMetadataList": obj.customMetadataList
          ? obj.customMetadataList.map(item => {
              return model.CustomMetadata.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "HETEROGENEOUS":
          return model.HeterogeneousModelGroupDetails.getJsonObj(
            <model.HeterogeneousModelGroupDetails>(<object>jsonObj),
            true
          );
        case "STACKED":
          return model.StackedModelGroupDetails.getJsonObj(
            <model.StackedModelGroupDetails>(<object>jsonObj),
            true
          );
        case "HOMOGENEOUS":
          return model.HomogeneousModelGroupDetails.getJsonObj(
            <model.HomogeneousModelGroupDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ModelGroupDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "customMetadataList": obj.customMetadataList
          ? obj.customMetadataList.map(item => {
              return model.CustomMetadata.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "HETEROGENEOUS":
          return model.HeterogeneousModelGroupDetails.getDeserializedJsonObj(
            <model.HeterogeneousModelGroupDetails>(<object>jsonObj),
            true
          );
        case "STACKED":
          return model.StackedModelGroupDetails.getDeserializedJsonObj(
            <model.StackedModelGroupDetails>(<object>jsonObj),
            true
          );
        case "HOMOGENEOUS":
          return model.HomogeneousModelGroupDetails.getDeserializedJsonObj(
            <model.HomogeneousModelGroupDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
