/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Detail of each StepRun.
 */
export interface PipelineStepRun {
  /**
   * The date and time the pipeline step run was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeStarted": Date;
  /**
   * The date and time the pipeline step run finshed executing in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeFinished"?: Date;
  /**
   * The name of the step.
   */
  "stepName": string;
  /**
   * The state of the step run.
   */
  "lifecycleState"?: PipelineStepRun.LifecycleState;
  /**
   * Details of the state of the step run.
   */
  "lifecycleDetails"?: string;

  "stepType": string;
}

export namespace PipelineStepRun {
  export enum LifecycleState {
    Waiting = "WAITING",
    Accepted = "ACCEPTED",
    InProgress = "IN_PROGRESS",
    Failed = "FAILED",
    Succeeded = "SUCCEEDED",
    Canceling = "CANCELING",
    Canceled = "CANCELED",
    Deleted = "DELETED",
    Skipped = "SKIPPED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: PipelineStepRun): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "stepType" in obj && obj.stepType) {
      switch (obj.stepType) {
        case "CONTAINER":
          return model.PipelineContainerStepRun.getJsonObj(
            <model.PipelineContainerStepRun>(<object>jsonObj),
            true
          );
        case "CUSTOM_SCRIPT":
          return model.PipelineCustomScriptStepRun.getJsonObj(
            <model.PipelineCustomScriptStepRun>(<object>jsonObj),
            true
          );
        case "ML_JOB":
          return model.PipelineMLJobStepRun.getJsonObj(
            <model.PipelineMLJobStepRun>(<object>jsonObj),
            true
          );
        case "DATAFLOW":
          return model.PipelineDataflowStepRun.getJsonObj(
            <model.PipelineDataflowStepRun>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.stepType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PipelineStepRun): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "stepType" in obj && obj.stepType) {
      switch (obj.stepType) {
        case "CONTAINER":
          return model.PipelineContainerStepRun.getDeserializedJsonObj(
            <model.PipelineContainerStepRun>(<object>jsonObj),
            true
          );
        case "CUSTOM_SCRIPT":
          return model.PipelineCustomScriptStepRun.getDeserializedJsonObj(
            <model.PipelineCustomScriptStepRun>(<object>jsonObj),
            true
          );
        case "ML_JOB":
          return model.PipelineMLJobStepRun.getDeserializedJsonObj(
            <model.PipelineMLJobStepRun>(<object>jsonObj),
            true
          );
        case "DATAFLOW":
          return model.PipelineDataflowStepRun.getDeserializedJsonObj(
            <model.PipelineDataflowStepRun>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.stepType}`);
      }
    }
    return jsonObj;
  }
}
