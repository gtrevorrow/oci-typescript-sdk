/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The trigger of the schedule can be UNIX cron or iCal expression or simple interval
 */
export interface ScheduleTrigger {
  /**
   * The schedule starting date time, if null, System set the time when schedule is created.
   * Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   */
  "timeStart"?: Date;
  /**
   * The schedule end date time, if null, the schedule will never expire.
   * Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   */
  "timeEnd"?: Date;

  "triggerType": string;
}

export namespace ScheduleTrigger {
  export function getJsonObj(obj: ScheduleTrigger): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "triggerType" in obj && obj.triggerType) {
      switch (obj.triggerType) {
        case "ICAL":
          return model.ScheduleICalTrigger.getJsonObj(
            <model.ScheduleICalTrigger>(<object>jsonObj),
            true
          );
        case "INTERVAL":
          return model.ScheduleIntervalTrigger.getJsonObj(
            <model.ScheduleIntervalTrigger>(<object>jsonObj),
            true
          );
        case "CRON":
          return model.ScheduleCronTrigger.getJsonObj(
            <model.ScheduleCronTrigger>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.triggerType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ScheduleTrigger): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "triggerType" in obj && obj.triggerType) {
      switch (obj.triggerType) {
        case "ICAL":
          return model.ScheduleICalTrigger.getDeserializedJsonObj(
            <model.ScheduleICalTrigger>(<object>jsonObj),
            true
          );
        case "INTERVAL":
          return model.ScheduleIntervalTrigger.getDeserializedJsonObj(
            <model.ScheduleIntervalTrigger>(<object>jsonObj),
            true
          );
        case "CRON":
          return model.ScheduleCronTrigger.getDeserializedJsonObj(
            <model.ScheduleCronTrigger>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.triggerType}`);
      }
    }
    return jsonObj;
  }
}
