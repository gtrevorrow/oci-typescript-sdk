/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Scaling configuration for the metric expression rule.
 *
 */
export interface ScalingConfiguration {
  /**
    * The period of time that the condition defined in the alarm must persist before the alarm state
* changes from \"OK\" to \"FIRING\" or vice versa. For example, a value of 5 minutes means that the
* alarm must persist in breaching the condition for five minutes before the alarm updates its
* state to \"FIRING\"; likewise, the alarm must persist in not breaching the condition for five
* minutes before the alarm updates its state to \"OK.\"
* <p>
The duration is specified as a string in ISO 8601 format ({@code PT10M} for ten minutes or {@code PT1H}
* for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
* 
    */
  "pendingDuration"?: string;
  /**
   * The value is used for adjusting the count of instances by.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "instanceCountAdjustment"?: number;

  "scalingConfigurationType": string;
}

export namespace ScalingConfiguration {
  export function getJsonObj(obj: ScalingConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "scalingConfigurationType" in obj && obj.scalingConfigurationType) {
      switch (obj.scalingConfigurationType) {
        case "QUERY":
          return model.CustomExpressionQueryScalingConfiguration.getJsonObj(
            <model.CustomExpressionQueryScalingConfiguration>(<object>jsonObj),
            true
          );
        case "THRESHOLD":
          return model.PredefinedExpressionThresholdScalingConfiguration.getJsonObj(
            <model.PredefinedExpressionThresholdScalingConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.scalingConfigurationType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ScalingConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "scalingConfigurationType" in obj && obj.scalingConfigurationType) {
      switch (obj.scalingConfigurationType) {
        case "QUERY":
          return model.CustomExpressionQueryScalingConfiguration.getDeserializedJsonObj(
            <model.CustomExpressionQueryScalingConfiguration>(<object>jsonObj),
            true
          );
        case "THRESHOLD":
          return model.PredefinedExpressionThresholdScalingConfiguration.getDeserializedJsonObj(
            <model.PredefinedExpressionThresholdScalingConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.scalingConfigurationType}`);
      }
    }
    return jsonObj;
  }
}
