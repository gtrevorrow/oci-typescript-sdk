/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Globally distributed database shard based on exadbxs.
 */
export interface CreateDistributedDatabaseShardWithExadbXsDetails
  extends model.CreateDistributedDatabaseShardDetails {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VmCluster.
   */
  "vmClusterId": string;
  /**
   * The admin password for the shard associated with Globally distributed database.
   */
  "adminPassword": string;
  /**
   * The collection of [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer VmClusterIds.
   */
  "peerVmClusterIds"?: Array<string>;
  /**
   * The shard space name for the Globally distributed database. Shard space for existing shard cannot be changed, once shard is created.
   * Shard space name shall be used while creation of new shards.
   *
   */
  "shardSpace"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and {@code kmsKeyId} are required for Customer Managed Keys.
   */
  "vaultId"?: string;
  /**
   * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
   */
  "kmsKeyId"?: string;
  /**
   * The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions.
   *
   */
  "kmsKeyVersionId"?: string;

  "source": string;
}

export namespace CreateDistributedDatabaseShardWithExadbXsDetails {
  export function getJsonObj(
    obj: CreateDistributedDatabaseShardWithExadbXsDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateDistributedDatabaseShardDetails.getJsonObj(
            obj
          ) as CreateDistributedDatabaseShardWithExadbXsDetails)),
      ...{}
    };

    return jsonObj;
  }
  export const source = "EXADB_XS";
  export function getDeserializedJsonObj(
    obj: CreateDistributedDatabaseShardWithExadbXsDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateDistributedDatabaseShardDetails.getDeserializedJsonObj(
            obj
          ) as CreateDistributedDatabaseShardWithExadbXsDetails)),
      ...{}
    };

    return jsonObj;
  }
}
