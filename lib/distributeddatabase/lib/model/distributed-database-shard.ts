/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Globally distributed database shard.
 */
export interface DistributedDatabaseShard {
  /**
   * Name of the shard.
   */
  "name": string;
  /**
   * The time the shard was created. An RFC3339 formatted datetime string
   */
  "timeCreated": Date;
  /**
   * The time the shard was last updated. An RFC3339 formatted datetime string
   */
  "timeUpdated": Date;

  "source": string;
}

export namespace DistributedDatabaseShard {
  export function getJsonObj(obj: DistributedDatabaseShard): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "source" in obj && obj.source) {
      switch (obj.source) {
        case "EXADB_XS":
          return model.DistributedDatabaseShardWithExadbXs.getJsonObj(
            <model.DistributedDatabaseShardWithExadbXs>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.source}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DistributedDatabaseShard): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "source" in obj && obj.source) {
      switch (obj.source) {
        case "EXADB_XS":
          return model.DistributedDatabaseShardWithExadbXs.getDeserializedJsonObj(
            <model.DistributedDatabaseShardWithExadbXs>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.source}`);
      }
    }
    return jsonObj;
  }
}
