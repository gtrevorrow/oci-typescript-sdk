/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DistributedAutonomousDbServiceWaiter } from "./distributedautonomousdbservice-waiter";
import { DistributedDbPrivateEndpointServiceWaiter } from "./distributeddbprivateendpointservice-waiter";
import { DistributedDbServiceWaiter } from "./distributeddbservice-waiter";
import { DistributedDbWorkRequestServiceWaiter } from "./distributeddbworkrequestservice-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DistributedAutonomousDbServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DistributedAutonomousDbServiceClient {
  protected static serviceEndpointTemplate = "https://globaldb.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DistributedAutonomousDbServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DistributedAutonomousDbService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("distributeddatabase")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("distributeddatabase");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20250101";
    if (this.logger)
      this.logger.info(`DistributedAutonomousDbServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DistributedAutonomousDbServiceClient.serviceEndpointTemplate,
        this._region,
        DistributedAutonomousDbServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DistributedAutonomousDbServiceClient.serviceEndpointTemplate,
        this._regionId,
        DistributedAutonomousDbServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DistributedAutonomousDbServiceClient.serviceEndpointTemplate,
      region,
      DistributedAutonomousDbServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DistributedAutonomousDbServiceClient.serviceEndpointTemplate,
      regionId,
      DistributedAutonomousDbServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DistributedAutonomousDbServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DistributedAutonomousDbServiceWaiter {
    this._waiters = new DistributedAutonomousDbServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DistributedAutonomousDbServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Add new Global database services control(GDS CTL) node for the Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddDistributedAutonomousDatabaseGdsControlNodeRequest
   * @return AddDistributedAutonomousDatabaseGdsControlNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/AddDistributedAutonomousDatabaseGdsControlNode.ts.html |here} to see how to use AddDistributedAutonomousDatabaseGdsControlNode API.
   */
  public async addDistributedAutonomousDatabaseGdsControlNode(
    addDistributedAutonomousDatabaseGdsControlNodeRequest: requests.AddDistributedAutonomousDatabaseGdsControlNodeRequest
  ): Promise<responses.AddDistributedAutonomousDatabaseGdsControlNodeResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#addDistributedAutonomousDatabaseGdsControlNode."
      );
    const operationName = "addDistributedAutonomousDatabaseGdsControlNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        addDistributedAutonomousDatabaseGdsControlNodeRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addDistributedAutonomousDatabaseGdsControlNodeRequest.opcRequestId,
      "if-match": addDistributedAutonomousDatabaseGdsControlNodeRequest.ifMatch,
      "opc-retry-token": addDistributedAutonomousDatabaseGdsControlNodeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDistributedAutonomousDatabaseGdsControlNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/addGdsControlNode",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDistributedAutonomousDatabaseGdsControlNodeRequest.addDistributedAutonomousDatabaseGdsControlNodeDetails,
        "AddDistributedAutonomousDatabaseGdsControlNodeDetails",
        model.AddDistributedAutonomousDatabaseGdsControlNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDistributedAutonomousDatabaseGdsControlNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the Globally distributed autonomous database and its dependent resources to the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDistributedAutonomousDatabaseCompartmentRequest
   * @return ChangeDistributedAutonomousDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedAutonomousDatabaseCompartment.ts.html |here} to see how to use ChangeDistributedAutonomousDatabaseCompartment API.
   */
  public async changeDistributedAutonomousDatabaseCompartment(
    changeDistributedAutonomousDatabaseCompartmentRequest: requests.ChangeDistributedAutonomousDatabaseCompartmentRequest
  ): Promise<responses.ChangeDistributedAutonomousDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#changeDistributedAutonomousDatabaseCompartment."
      );
    const operationName = "changeDistributedAutonomousDatabaseCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        changeDistributedAutonomousDatabaseCompartmentRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDistributedAutonomousDatabaseCompartmentRequest.opcRequestId,
      "if-match": changeDistributedAutonomousDatabaseCompartmentRequest.ifMatch,
      "opc-retry-token": changeDistributedAutonomousDatabaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDistributedAutonomousDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDistributedAutonomousDatabaseCompartmentRequest.changeDistributedAutonomousDatabaseCompartmentDetails,
        "ChangeDistributedAutonomousDatabaseCompartmentDetails",
        model.ChangeDistributedAutonomousDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDistributedAutonomousDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Configure new Global Service Manager(GSM aka shard manager) instances for the Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureDistributedAutonomousDatabaseGsmsRequest
   * @return ConfigureDistributedAutonomousDatabaseGsmsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedAutonomousDatabaseGsms.ts.html |here} to see how to use ConfigureDistributedAutonomousDatabaseGsms API.
   */
  public async configureDistributedAutonomousDatabaseGsms(
    configureDistributedAutonomousDatabaseGsmsRequest: requests.ConfigureDistributedAutonomousDatabaseGsmsRequest
  ): Promise<responses.ConfigureDistributedAutonomousDatabaseGsmsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#configureDistributedAutonomousDatabaseGsms."
      );
    const operationName = "configureDistributedAutonomousDatabaseGsms";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        configureDistributedAutonomousDatabaseGsmsRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureDistributedAutonomousDatabaseGsmsRequest.opcRetryToken,
      "opc-request-id": configureDistributedAutonomousDatabaseGsmsRequest.opcRequestId,
      "if-match": configureDistributedAutonomousDatabaseGsmsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureDistributedAutonomousDatabaseGsmsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/configureGsms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        configureDistributedAutonomousDatabaseGsmsRequest.configureDistributedAutonomousDatabaseGsmsDetails,
        "ConfigureDistributedAutonomousDatabaseGsmsDetails",
        model.ConfigureDistributedAutonomousDatabaseGsmsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureDistributedAutonomousDatabaseGsmsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Once all components of Globally distributed autonomous database are provisioned, and signed GSM certificates are successfully uploaded, this
   * api shall be invoked to configure sharding on the Globally distributed autonomous database. Note that this 'ConfigureSharding' API also needs to be
   * invoked after successfully adding a new shard to the Globally distributed autonomous database using PATCH api. If this API is not
   * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
   * the Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureDistributedAutonomousDatabaseShardingRequest
   * @return ConfigureDistributedAutonomousDatabaseShardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedAutonomousDatabaseSharding.ts.html |here} to see how to use ConfigureDistributedAutonomousDatabaseSharding API.
   */
  public async configureDistributedAutonomousDatabaseSharding(
    configureDistributedAutonomousDatabaseShardingRequest: requests.ConfigureDistributedAutonomousDatabaseShardingRequest
  ): Promise<responses.ConfigureDistributedAutonomousDatabaseShardingResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#configureDistributedAutonomousDatabaseSharding."
      );
    const operationName = "configureDistributedAutonomousDatabaseSharding";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        configureDistributedAutonomousDatabaseShardingRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {
      "isRebalanceRequired":
        configureDistributedAutonomousDatabaseShardingRequest.isRebalanceRequired
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureDistributedAutonomousDatabaseShardingRequest.opcRetryToken,
      "opc-request-id": configureDistributedAutonomousDatabaseShardingRequest.opcRequestId,
      "if-match": configureDistributedAutonomousDatabaseShardingRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureDistributedAutonomousDatabaseShardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/configureSharding",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureDistributedAutonomousDatabaseShardingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDistributedAutonomousDatabaseRequest
   * @return CreateDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedAutonomousDatabase.ts.html |here} to see how to use CreateDistributedAutonomousDatabase API.
   */
  public async createDistributedAutonomousDatabase(
    createDistributedAutonomousDatabaseRequest: requests.CreateDistributedAutonomousDatabaseRequest
  ): Promise<responses.CreateDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#createDistributedAutonomousDatabase."
      );
    const operationName = "createDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDistributedAutonomousDatabaseRequest.opcRetryToken,
      "opc-request-id": createDistributedAutonomousDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDistributedAutonomousDatabaseRequest.createDistributedAutonomousDatabaseDetails,
        "CreateDistributedAutonomousDatabaseDetails",
        model.CreateDistributedAutonomousDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDistributedAutonomousDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedAutonomousDatabase",
        bodyModel: model.DistributedAutonomousDatabase,
        type: "model.DistributedAutonomousDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Terminate the given Globally distributed autonomous databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDistributedAutonomousDatabaseRequest
   * @return DeleteDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedAutonomousDatabase.ts.html |here} to see how to use DeleteDistributedAutonomousDatabase API.
   */
  public async deleteDistributedAutonomousDatabase(
    deleteDistributedAutonomousDatabaseRequest: requests.DeleteDistributedAutonomousDatabaseRequest
  ): Promise<responses.DeleteDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#deleteDistributedAutonomousDatabase."
      );
    const operationName = "deleteDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        deleteDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDistributedAutonomousDatabaseRequest.opcRequestId,
      "opc-retry-token": deleteDistributedAutonomousDatabaseRequest.opcRetryToken,
      "if-match": deleteDistributedAutonomousDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDistributedAutonomousDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the common certificate signing request for GSMs. Download the <globalautonomousdb-prefix>.csr file from
   * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
   * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
   * generate wallets for the GSM instances of the Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
   * @return DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequest API.
   */
  public async downloadDistributedAutonomousDatabaseGsmCertificateSigningRequest(
    downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest: requests.DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
  ): Promise<responses.DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#downloadDistributedAutonomousDatabaseGsmCertificateSigningRequest."
      );
    const operationName = "downloadDistributedAutonomousDatabaseGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id":
        downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token":
        downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/downloadGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
        >{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the certificate signing request for GSM instances of the Globally distributed autonomous database. Once certificate signing
   * request is generated, then customers can download the certificate signing request using
   * 'downloadGsmCertificateSigningRequest' api call.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
   * @return GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequest API.
   */
  public async generateDistributedAutonomousDatabaseGsmCertificateSigningRequest(
    generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest: requests.GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
  ): Promise<responses.GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#generateDistributedAutonomousDatabaseGsmCertificateSigningRequest."
      );
    const operationName = "generateDistributedAutonomousDatabaseGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {
      "caBundleId":
        generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.caBundleId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id":
        generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token":
        generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/generateGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
        >{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the wallet associated with Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateDistributedAutonomousDatabaseWalletRequest
   * @return GenerateDistributedAutonomousDatabaseWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedAutonomousDatabaseWallet.ts.html |here} to see how to use GenerateDistributedAutonomousDatabaseWallet API.
   */
  public async generateDistributedAutonomousDatabaseWallet(
    generateDistributedAutonomousDatabaseWalletRequest: requests.GenerateDistributedAutonomousDatabaseWalletRequest
  ): Promise<responses.GenerateDistributedAutonomousDatabaseWalletResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#generateDistributedAutonomousDatabaseWallet."
      );
    const operationName = "generateDistributedAutonomousDatabaseWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        generateDistributedAutonomousDatabaseWalletRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateDistributedAutonomousDatabaseWalletRequest.opcRequestId,
      "if-match": generateDistributedAutonomousDatabaseWalletRequest.ifMatch,
      "opc-retry-token": generateDistributedAutonomousDatabaseWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateDistributedAutonomousDatabaseWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/generateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateDistributedAutonomousDatabaseWalletRequest.generateDistributedAutonomousDatabaseWalletDetails,
        "GenerateDistributedAutonomousDatabaseWalletDetails",
        model.GenerateDistributedAutonomousDatabaseWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateDistributedAutonomousDatabaseWalletResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Globally distributed autonomous database identified by given id.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDistributedAutonomousDatabaseRequest
   * @return GetDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedAutonomousDatabase.ts.html |here} to see how to use GetDistributedAutonomousDatabase API.
   */
  public async getDistributedAutonomousDatabase(
    getDistributedAutonomousDatabaseRequest: requests.GetDistributedAutonomousDatabaseRequest
  ): Promise<responses.GetDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#getDistributedAutonomousDatabase."
      );
    const operationName = "getDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        getDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {
      "metadata": getDistributedAutonomousDatabaseRequest.metadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getDistributedAutonomousDatabaseRequest.ifNoneMatch,
      "opc-request-id": getDistributedAutonomousDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDistributedAutonomousDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedAutonomousDatabase",
        bodyModel: model.DistributedAutonomousDatabase,
        type: "model.DistributedAutonomousDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of Globally distributed autonomous databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDistributedAutonomousDatabasesRequest
   * @return ListDistributedAutonomousDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedAutonomousDatabases.ts.html |here} to see how to use ListDistributedAutonomousDatabases API.
   */
  public async listDistributedAutonomousDatabases(
    listDistributedAutonomousDatabasesRequest: requests.ListDistributedAutonomousDatabasesRequest
  ): Promise<responses.ListDistributedAutonomousDatabasesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#listDistributedAutonomousDatabases."
      );
    const operationName = "listDistributedAutonomousDatabases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDistributedAutonomousDatabasesRequest.compartmentId,
      "lifecycleState": listDistributedAutonomousDatabasesRequest.lifecycleState,
      "limit": listDistributedAutonomousDatabasesRequest.limit,
      "page": listDistributedAutonomousDatabasesRequest.page,
      "sortOrder": listDistributedAutonomousDatabasesRequest.sortOrder,
      "sortBy": listDistributedAutonomousDatabasesRequest.sortBy,
      "displayName": listDistributedAutonomousDatabasesRequest.displayName,
      "dbDeploymentType": listDistributedAutonomousDatabasesRequest.dbDeploymentType,
      "metadata": listDistributedAutonomousDatabasesRequest.metadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDistributedAutonomousDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDistributedAutonomousDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDistributedAutonomousDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "distributedAutonomousDatabaseCollection",
        bodyModel: model.DistributedAutonomousDatabaseCollection,
        type: "model.DistributedAutonomousDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patch operation to add, remove or update shards to the Globally distributed autonomous database topology. In single patch
   * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
   * and remove in single operation is not allowed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchDistributedAutonomousDatabaseRequest
   * @return PatchDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/PatchDistributedAutonomousDatabase.ts.html |here} to see how to use PatchDistributedAutonomousDatabase API.
   */
  public async patchDistributedAutonomousDatabase(
    patchDistributedAutonomousDatabaseRequest: requests.PatchDistributedAutonomousDatabaseRequest
  ): Promise<responses.PatchDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#patchDistributedAutonomousDatabase."
      );
    const operationName = "patchDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        patchDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchDistributedAutonomousDatabaseRequest.ifMatch,
      "opc-retry-token": patchDistributedAutonomousDatabaseRequest.opcRetryToken,
      "opc-request-id": patchDistributedAutonomousDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchDistributedAutonomousDatabaseRequest.patchDistributedAutonomousDatabaseDetails,
        "PatchDistributedAutonomousDatabaseDetails",
        model.PatchDistributedAutonomousDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchDistributedAutonomousDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Rotate passwords for different components of the Globally distributed autonomous database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RotateDistributedAutonomousDatabasePasswordsRequest
   * @return RotateDistributedAutonomousDatabasePasswordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/RotateDistributedAutonomousDatabasePasswords.ts.html |here} to see how to use RotateDistributedAutonomousDatabasePasswords API.
   */
  public async rotateDistributedAutonomousDatabasePasswords(
    rotateDistributedAutonomousDatabasePasswordsRequest: requests.RotateDistributedAutonomousDatabasePasswordsRequest
  ): Promise<responses.RotateDistributedAutonomousDatabasePasswordsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#rotateDistributedAutonomousDatabasePasswords."
      );
    const operationName = "rotateDistributedAutonomousDatabasePasswords";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        rotateDistributedAutonomousDatabasePasswordsRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": rotateDistributedAutonomousDatabasePasswordsRequest.opcRequestId,
      "if-match": rotateDistributedAutonomousDatabasePasswordsRequest.ifMatch,
      "opc-retry-token": rotateDistributedAutonomousDatabasePasswordsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rotateDistributedAutonomousDatabasePasswordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/rotateDbPasswords",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RotateDistributedAutonomousDatabasePasswordsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start the shards, catalog and GSMs of Globally distributed autonomous database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartDistributedAutonomousDatabaseRequest
   * @return StartDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StartDistributedAutonomousDatabase.ts.html |here} to see how to use StartDistributedAutonomousDatabase API.
   */
  public async startDistributedAutonomousDatabase(
    startDistributedAutonomousDatabaseRequest: requests.StartDistributedAutonomousDatabaseRequest
  ): Promise<responses.StartDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#startDistributedAutonomousDatabase."
      );
    const operationName = "startDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        startDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startDistributedAutonomousDatabaseRequest.opcRetryToken,
      "opc-request-id": startDistributedAutonomousDatabaseRequest.opcRequestId,
      "if-match": startDistributedAutonomousDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/startDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartDistributedAutonomousDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stop the shards, catalog and GSM instances for the Globally distributed autonomous database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopDistributedAutonomousDatabaseRequest
   * @return StopDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StopDistributedAutonomousDatabase.ts.html |here} to see how to use StopDistributedAutonomousDatabase API.
   */
  public async stopDistributedAutonomousDatabase(
    stopDistributedAutonomousDatabaseRequest: requests.StopDistributedAutonomousDatabaseRequest
  ): Promise<responses.StopDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#stopDistributedAutonomousDatabase."
      );
    const operationName = "stopDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        stopDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopDistributedAutonomousDatabaseRequest.opcRetryToken,
      "opc-request-id": stopDistributedAutonomousDatabaseRequest.opcRequestId,
      "if-match": stopDistributedAutonomousDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/stopDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopDistributedAutonomousDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of the Globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDistributedAutonomousDatabaseRequest
   * @return UpdateDistributedAutonomousDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedAutonomousDatabase.ts.html |here} to see how to use UpdateDistributedAutonomousDatabase API.
   */
  public async updateDistributedAutonomousDatabase(
    updateDistributedAutonomousDatabaseRequest: requests.UpdateDistributedAutonomousDatabaseRequest
  ): Promise<responses.UpdateDistributedAutonomousDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#updateDistributedAutonomousDatabase."
      );
    const operationName = "updateDistributedAutonomousDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        updateDistributedAutonomousDatabaseRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDistributedAutonomousDatabaseRequest.opcRequestId,
      "if-match": updateDistributedAutonomousDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDistributedAutonomousDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDistributedAutonomousDatabaseRequest.updateDistributedAutonomousDatabaseDetails,
        "UpdateDistributedAutonomousDatabaseDetails",
        model.UpdateDistributedAutonomousDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDistributedAutonomousDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedAutonomousDatabase",
        bodyModel: model.DistributedAutonomousDatabase,
        type: "model.DistributedAutonomousDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
   * Globally distributed autonomous database. Customer shall provide the CA signed certificate key details by adding the certificate
   * in request body.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest
   * @return UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet API.
   */
  public async uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet(
    uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest: requests.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest
  ): Promise<
    responses.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletResponse
  > {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet."
      );
    const operationName = "uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id":
        uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.opcRequestId,
      "if-match":
        uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.ifMatch,
      "opc-retry-token":
        uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/uploadSignedCertificateAndGenerateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest.uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletDetails,
        "UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletDetails",
        model.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletDetails
          .getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletResponse
        >{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validate the network connectivity between components of the globally distributed autonomous database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ValidateDistributedAutonomousDatabaseNetworkRequest
   * @return ValidateDistributedAutonomousDatabaseNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ValidateDistributedAutonomousDatabaseNetwork.ts.html |here} to see how to use ValidateDistributedAutonomousDatabaseNetwork API.
   */
  public async validateDistributedAutonomousDatabaseNetwork(
    validateDistributedAutonomousDatabaseNetworkRequest: requests.ValidateDistributedAutonomousDatabaseNetworkRequest
  ): Promise<responses.ValidateDistributedAutonomousDatabaseNetworkResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedAutonomousDbServiceClient#validateDistributedAutonomousDatabaseNetwork."
      );
    const operationName = "validateDistributedAutonomousDatabaseNetwork";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedAutonomousDatabaseId}":
        validateDistributedAutonomousDatabaseNetworkRequest.distributedAutonomousDatabaseId
    };

    const queryParams = {
      "isSurrogate": validateDistributedAutonomousDatabaseNetworkRequest.isSurrogate,
      "resourceName": validateDistributedAutonomousDatabaseNetworkRequest.resourceName,
      "shardGroup": validateDistributedAutonomousDatabaseNetworkRequest.shardGroup
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": validateDistributedAutonomousDatabaseNetworkRequest.ifMatch,
      "opc-retry-token": validateDistributedAutonomousDatabaseNetworkRequest.opcRetryToken,
      "opc-request-id": validateDistributedAutonomousDatabaseNetworkRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateDistributedAutonomousDatabaseNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedAutonomousDatabases/{distributedAutonomousDatabaseId}/actions/validateNetwork",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateDistributedAutonomousDatabaseNetworkResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum DistributedDbPrivateEndpointServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DistributedDbPrivateEndpointServiceClient {
  protected static serviceEndpointTemplate = "https://globaldb.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DistributedDbPrivateEndpointServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DistributedDbPrivateEndpointService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("distributeddatabase")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("distributeddatabase");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20250101";
    if (this.logger)
      this.logger.info(
        `DistributedDbPrivateEndpointServiceClient endpoint set to ${this._endpoint}`
      );
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DistributedDbPrivateEndpointServiceClient.serviceEndpointTemplate,
        this._region,
        DistributedDbPrivateEndpointServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DistributedDbPrivateEndpointServiceClient.serviceEndpointTemplate,
        this._regionId,
        DistributedDbPrivateEndpointServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DistributedDbPrivateEndpointServiceClient.serviceEndpointTemplate,
      region,
      DistributedDbPrivateEndpointServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DistributedDbPrivateEndpointServiceClient.serviceEndpointTemplate,
      regionId,
      DistributedDbPrivateEndpointServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DistributedDbPrivateEndpointServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    config?: common.WaiterConfiguration
  ): DistributedDbPrivateEndpointServiceWaiter {
    this._waiters = new DistributedDbPrivateEndpointServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DistributedDbPrivateEndpointServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the DistributedDatabasePrivateEndpoint to the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDistributedDatabasePrivateEndpointCompartmentRequest
   * @return ChangeDistributedDatabasePrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDatabasePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDistributedDatabasePrivateEndpointCompartment API.
   */
  public async changeDistributedDatabasePrivateEndpointCompartment(
    changeDistributedDatabasePrivateEndpointCompartmentRequest: requests.ChangeDistributedDatabasePrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeDistributedDatabasePrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#changeDistributedDatabasePrivateEndpointCompartment."
      );
    const operationName = "changeDistributedDatabasePrivateEndpointCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabasePrivateEndpointId}":
        changeDistributedDatabasePrivateEndpointCompartmentRequest.distributedDatabasePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDistributedDatabasePrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changeDistributedDatabasePrivateEndpointCompartmentRequest.ifMatch,
      "opc-retry-token": changeDistributedDatabasePrivateEndpointCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDistributedDatabasePrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedDatabasePrivateEndpoints/{distributedDatabasePrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDistributedDatabasePrivateEndpointCompartmentRequest.changeDistributedDatabasePrivateEndpointCompartmentDetails,
        "ChangeDistributedDatabasePrivateEndpointCompartmentDetails",
        model.ChangeDistributedDatabasePrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDistributedDatabasePrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a DistributedDatabasePrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDistributedDatabasePrivateEndpointRequest
   * @return CreateDistributedDatabasePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use CreateDistributedDatabasePrivateEndpoint API.
   */
  public async createDistributedDatabasePrivateEndpoint(
    createDistributedDatabasePrivateEndpointRequest: requests.CreateDistributedDatabasePrivateEndpointRequest
  ): Promise<responses.CreateDistributedDatabasePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#createDistributedDatabasePrivateEndpoint."
      );
    const operationName = "createDistributedDatabasePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDistributedDatabasePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createDistributedDatabasePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDistributedDatabasePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabasePrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDistributedDatabasePrivateEndpointRequest.createDistributedDatabasePrivateEndpointDetails,
        "CreateDistributedDatabasePrivateEndpointDetails",
        model.CreateDistributedDatabasePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDistributedDatabasePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabasePrivateEndpoint",
        bodyModel: model.DistributedDatabasePrivateEndpoint,
        type: "model.DistributedDatabasePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the given DistributedDatabasePrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDistributedDatabasePrivateEndpointRequest
   * @return DeleteDistributedDatabasePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use DeleteDistributedDatabasePrivateEndpoint API.
   */
  public async deleteDistributedDatabasePrivateEndpoint(
    deleteDistributedDatabasePrivateEndpointRequest: requests.DeleteDistributedDatabasePrivateEndpointRequest
  ): Promise<responses.DeleteDistributedDatabasePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#deleteDistributedDatabasePrivateEndpoint."
      );
    const operationName = "deleteDistributedDatabasePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabasePrivateEndpointId}":
        deleteDistributedDatabasePrivateEndpointRequest.distributedDatabasePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDistributedDatabasePrivateEndpointRequest.opcRequestId,
      "opc-retry-token": deleteDistributedDatabasePrivateEndpointRequest.opcRetryToken,
      "if-match": deleteDistributedDatabasePrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDistributedDatabasePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabasePrivateEndpoints/{distributedDatabasePrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDistributedDatabasePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the DistributedDatabasePrivateEndpoint resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDistributedDatabasePrivateEndpointRequest
   * @return GetDistributedDatabasePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use GetDistributedDatabasePrivateEndpoint API.
   */
  public async getDistributedDatabasePrivateEndpoint(
    getDistributedDatabasePrivateEndpointRequest: requests.GetDistributedDatabasePrivateEndpointRequest
  ): Promise<responses.GetDistributedDatabasePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#getDistributedDatabasePrivateEndpoint."
      );
    const operationName = "getDistributedDatabasePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabasePrivateEndpointId}":
        getDistributedDatabasePrivateEndpointRequest.distributedDatabasePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getDistributedDatabasePrivateEndpointRequest.ifNoneMatch,
      "opc-request-id": getDistributedDatabasePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDistributedDatabasePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabasePrivateEndpoints/{distributedDatabasePrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDistributedDatabasePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabasePrivateEndpoint",
        bodyModel: model.DistributedDatabasePrivateEndpoint,
        type: "model.DistributedDatabasePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of DistributedDatabasePrivateEndpoints.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDistributedDatabasePrivateEndpointsRequest
   * @return ListDistributedDatabasePrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedDatabasePrivateEndpoints.ts.html |here} to see how to use ListDistributedDatabasePrivateEndpoints API.
   */
  public async listDistributedDatabasePrivateEndpoints(
    listDistributedDatabasePrivateEndpointsRequest: requests.ListDistributedDatabasePrivateEndpointsRequest
  ): Promise<responses.ListDistributedDatabasePrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#listDistributedDatabasePrivateEndpoints."
      );
    const operationName = "listDistributedDatabasePrivateEndpoints";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDistributedDatabasePrivateEndpointsRequest.compartmentId,
      "lifecycleState": listDistributedDatabasePrivateEndpointsRequest.lifecycleState,
      "limit": listDistributedDatabasePrivateEndpointsRequest.limit,
      "page": listDistributedDatabasePrivateEndpointsRequest.page,
      "sortOrder": listDistributedDatabasePrivateEndpointsRequest.sortOrder,
      "sortBy": listDistributedDatabasePrivateEndpointsRequest.sortBy,
      "displayName": listDistributedDatabasePrivateEndpointsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDistributedDatabasePrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDistributedDatabasePrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabasePrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDistributedDatabasePrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabasePrivateEndpointCollection",
        bodyModel: model.DistributedDatabasePrivateEndpointCollection,
        type: "model.DistributedDatabasePrivateEndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Reinstates the proxy instance associated with the DistributedDatabasePrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ReinstateProxyInstanceRequest
   * @return ReinstateProxyInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ReinstateProxyInstance.ts.html |here} to see how to use ReinstateProxyInstance API.
   */
  public async reinstateProxyInstance(
    reinstateProxyInstanceRequest: requests.ReinstateProxyInstanceRequest
  ): Promise<responses.ReinstateProxyInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#reinstateProxyInstance."
      );
    const operationName = "reinstateProxyInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabasePrivateEndpointId}":
        reinstateProxyInstanceRequest.distributedDatabasePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": reinstateProxyInstanceRequest.opcRequestId,
      "if-match": reinstateProxyInstanceRequest.ifMatch,
      "opc-retry-token": reinstateProxyInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      reinstateProxyInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedDatabasePrivateEndpoints/{distributedDatabasePrivateEndpointId}/actions/reinstateProxyInstance",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ReinstateProxyInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of DistributedDatabasePrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDistributedDatabasePrivateEndpointRequest
   * @return UpdateDistributedDatabasePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use UpdateDistributedDatabasePrivateEndpoint API.
   */
  public async updateDistributedDatabasePrivateEndpoint(
    updateDistributedDatabasePrivateEndpointRequest: requests.UpdateDistributedDatabasePrivateEndpointRequest
  ): Promise<responses.UpdateDistributedDatabasePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbPrivateEndpointServiceClient#updateDistributedDatabasePrivateEndpoint."
      );
    const operationName = "updateDistributedDatabasePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabasePrivateEndpointId}":
        updateDistributedDatabasePrivateEndpointRequest.distributedDatabasePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateDistributedDatabasePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": updateDistributedDatabasePrivateEndpointRequest.opcRequestId,
      "if-match": updateDistributedDatabasePrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDistributedDatabasePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabasePrivateEndpoints/{distributedDatabasePrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDistributedDatabasePrivateEndpointRequest.updateDistributedDatabasePrivateEndpointDetails,
        "UpdateDistributedDatabasePrivateEndpointDetails",
        model.UpdateDistributedDatabasePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDistributedDatabasePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabasePrivateEndpoint",
        bodyModel: model.DistributedDatabasePrivateEndpoint,
        type: "model.DistributedDatabasePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum DistributedDbServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DistributedDbServiceClient {
  protected static serviceEndpointTemplate = "https://globaldb.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DistributedDbServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DistributedDbService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("distributeddatabase")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("distributeddatabase");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20250101";
    if (this.logger)
      this.logger.info(`DistributedDbServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DistributedDbServiceClient.serviceEndpointTemplate,
        this._region,
        DistributedDbServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DistributedDbServiceClient.serviceEndpointTemplate,
        this._regionId,
        DistributedDbServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DistributedDbServiceClient.serviceEndpointTemplate,
      region,
      DistributedDbServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DistributedDbServiceClient.serviceEndpointTemplate,
      regionId,
      DistributedDbServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DistributedDbServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DistributedDbServiceWaiter {
    this._waiters = new DistributedDbServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DistributedDbServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Add new Global database services control(GDS CTL) node for the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddDistributedDatabaseGdsControlNodeRequest
   * @return AddDistributedDatabaseGdsControlNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/AddDistributedDatabaseGdsControlNode.ts.html |here} to see how to use AddDistributedDatabaseGdsControlNode API.
   */
  public async addDistributedDatabaseGdsControlNode(
    addDistributedDatabaseGdsControlNodeRequest: requests.AddDistributedDatabaseGdsControlNodeRequest
  ): Promise<responses.AddDistributedDatabaseGdsControlNodeResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#addDistributedDatabaseGdsControlNode."
      );
    const operationName = "addDistributedDatabaseGdsControlNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": addDistributedDatabaseGdsControlNodeRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addDistributedDatabaseGdsControlNodeRequest.opcRequestId,
      "if-match": addDistributedDatabaseGdsControlNodeRequest.ifMatch,
      "opc-retry-token": addDistributedDatabaseGdsControlNodeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDistributedDatabaseGdsControlNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/addGdsControlNode",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDistributedDatabaseGdsControlNodeRequest.addDistributedDatabaseGdsControlNodeDetails,
        "AddDistributedDatabaseGdsControlNodeDetails",
        model.AddDistributedDatabaseGdsControlNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDistributedDatabaseGdsControlNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the Globally distributed database and its dependent resources to the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDistributedDatabaseCompartmentRequest
   * @return ChangeDistributedDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDatabaseCompartment.ts.html |here} to see how to use ChangeDistributedDatabaseCompartment API.
   */
  public async changeDistributedDatabaseCompartment(
    changeDistributedDatabaseCompartmentRequest: requests.ChangeDistributedDatabaseCompartmentRequest
  ): Promise<responses.ChangeDistributedDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#changeDistributedDatabaseCompartment."
      );
    const operationName = "changeDistributedDatabaseCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": changeDistributedDatabaseCompartmentRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDistributedDatabaseCompartmentRequest.opcRequestId,
      "if-match": changeDistributedDatabaseCompartmentRequest.ifMatch,
      "opc-retry-token": changeDistributedDatabaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDistributedDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDistributedDatabaseCompartmentRequest.changeDistributedDatabaseCompartmentDetails,
        "ChangeDistributedDatabaseCompartmentDetails",
        model.ChangeDistributedDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDistributedDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Change the DbBackupConfig for the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDistributedDbBackupConfigRequest
   * @return ChangeDistributedDbBackupConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDbBackupConfig.ts.html |here} to see how to use ChangeDistributedDbBackupConfig API.
   */
  public async changeDistributedDbBackupConfig(
    changeDistributedDbBackupConfigRequest: requests.ChangeDistributedDbBackupConfigRequest
  ): Promise<responses.ChangeDistributedDbBackupConfigResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#changeDistributedDbBackupConfig."
      );
    const operationName = "changeDistributedDbBackupConfig";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": changeDistributedDbBackupConfigRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDistributedDbBackupConfigRequest.opcRequestId,
      "if-match": changeDistributedDbBackupConfigRequest.ifMatch,
      "opc-retry-token": changeDistributedDbBackupConfigRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDistributedDbBackupConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/changeDbBackupConfig",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDistributedDbBackupConfigRequest.changeDistributedDbBackupConfigDetails,
        "ChangeDistributedDbBackupConfigDetails",
        model.ChangeDistributedDbBackupConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDistributedDbBackupConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Configure new Global Service Manager(GSM aka shard manager) instances for the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureDistributedDatabaseGsmsRequest
   * @return ConfigureDistributedDatabaseGsmsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedDatabaseGsms.ts.html |here} to see how to use ConfigureDistributedDatabaseGsms API.
   */
  public async configureDistributedDatabaseGsms(
    configureDistributedDatabaseGsmsRequest: requests.ConfigureDistributedDatabaseGsmsRequest
  ): Promise<responses.ConfigureDistributedDatabaseGsmsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#configureDistributedDatabaseGsms."
      );
    const operationName = "configureDistributedDatabaseGsms";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": configureDistributedDatabaseGsmsRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureDistributedDatabaseGsmsRequest.opcRetryToken,
      "opc-request-id": configureDistributedDatabaseGsmsRequest.opcRequestId,
      "if-match": configureDistributedDatabaseGsmsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureDistributedDatabaseGsmsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/configureGsms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        configureDistributedDatabaseGsmsRequest.configureDistributedDatabaseGsmsDetails,
        "ConfigureDistributedDatabaseGsmsDetails",
        model.ConfigureDistributedDatabaseGsmsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureDistributedDatabaseGsmsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Once all components of Globally distributed database are provisioned, and signed GSM certificates are successfully uploaded, this
   * api shall be invoked to configure sharding on the Globally distributed database. Note that this 'ConfigureSharding' API also needs to be
   * invoked after successfully adding a new shard to the Globally distributed database using PATCH api. If this API is not
   * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
   * the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureDistributedDatabaseShardingRequest
   * @return ConfigureDistributedDatabaseShardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedDatabaseSharding.ts.html |here} to see how to use ConfigureDistributedDatabaseSharding API.
   */
  public async configureDistributedDatabaseSharding(
    configureDistributedDatabaseShardingRequest: requests.ConfigureDistributedDatabaseShardingRequest
  ): Promise<responses.ConfigureDistributedDatabaseShardingResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#configureDistributedDatabaseSharding."
      );
    const operationName = "configureDistributedDatabaseSharding";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": configureDistributedDatabaseShardingRequest.distributedDatabaseId
    };

    const queryParams = {
      "isRebalanceRequired": configureDistributedDatabaseShardingRequest.isRebalanceRequired
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureDistributedDatabaseShardingRequest.opcRetryToken,
      "opc-request-id": configureDistributedDatabaseShardingRequest.opcRequestId,
      "if-match": configureDistributedDatabaseShardingRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureDistributedDatabaseShardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/configureSharding",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureDistributedDatabaseShardingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDistributedDatabaseRequest
   * @return CreateDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedDatabase.ts.html |here} to see how to use CreateDistributedDatabase API.
   */
  public async createDistributedDatabase(
    createDistributedDatabaseRequest: requests.CreateDistributedDatabaseRequest
  ): Promise<responses.CreateDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#createDistributedDatabase.");
    const operationName = "createDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDistributedDatabaseRequest.opcRetryToken,
      "opc-request-id": createDistributedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDistributedDatabaseRequest.createDistributedDatabaseDetails,
        "CreateDistributedDatabaseDetails",
        model.CreateDistributedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDistributedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabase",
        bodyModel: model.DistributedDatabase,
        type: "model.DistributedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Terminate the given Globally distributed databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDistributedDatabaseRequest
   * @return DeleteDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedDatabase.ts.html |here} to see how to use DeleteDistributedDatabase API.
   */
  public async deleteDistributedDatabase(
    deleteDistributedDatabaseRequest: requests.DeleteDistributedDatabaseRequest
  ): Promise<responses.DeleteDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#deleteDistributedDatabase.");
    const operationName = "deleteDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": deleteDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDistributedDatabaseRequest.opcRequestId,
      "opc-retry-token": deleteDistributedDatabaseRequest.opcRetryToken,
      "if-match": deleteDistributedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDistributedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the common certificate signing request for GSMs. Download the <globaldb-prefix>.csr file from
   * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
   * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
   * generate wallets for the GSM instances of the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadDistributedDatabaseGsmCertificateSigningRequestRequest
   * @return DownloadDistributedDatabaseGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DownloadDistributedDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadDistributedDatabaseGsmCertificateSigningRequest API.
   */
  public async downloadDistributedDatabaseGsmCertificateSigningRequest(
    downloadDistributedDatabaseGsmCertificateSigningRequestRequest: requests.DownloadDistributedDatabaseGsmCertificateSigningRequestRequest
  ): Promise<responses.DownloadDistributedDatabaseGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#downloadDistributedDatabaseGsmCertificateSigningRequest."
      );
    const operationName = "downloadDistributedDatabaseGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}":
        downloadDistributedDatabaseGsmCertificateSigningRequestRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadDistributedDatabaseGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": downloadDistributedDatabaseGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token":
        downloadDistributedDatabaseGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadDistributedDatabaseGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedDatabases/{distributedDatabaseId}/actions/downloadGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.DownloadDistributedDatabaseGsmCertificateSigningRequestResponse
        >{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the certificate signing request for GSM instances of the Globally distributed database. Once certificate signing
   * request is generated, then customers can download the certificate signing request using
   * 'downloadGsmCertificateSigningRequest' api call.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateDistributedDatabaseGsmCertificateSigningRequestRequest
   * @return GenerateDistributedDatabaseGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateDistributedDatabaseGsmCertificateSigningRequest API.
   */
  public async generateDistributedDatabaseGsmCertificateSigningRequest(
    generateDistributedDatabaseGsmCertificateSigningRequestRequest: requests.GenerateDistributedDatabaseGsmCertificateSigningRequestRequest
  ): Promise<responses.GenerateDistributedDatabaseGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#generateDistributedDatabaseGsmCertificateSigningRequest."
      );
    const operationName = "generateDistributedDatabaseGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}":
        generateDistributedDatabaseGsmCertificateSigningRequestRequest.distributedDatabaseId
    };

    const queryParams = {
      "caBundleId": generateDistributedDatabaseGsmCertificateSigningRequestRequest.caBundleId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateDistributedDatabaseGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": generateDistributedDatabaseGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token":
        generateDistributedDatabaseGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateDistributedDatabaseGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedDatabases/{distributedDatabaseId}/actions/generateGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.GenerateDistributedDatabaseGsmCertificateSigningRequestResponse
        >{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the wallet associated with Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateDistributedDatabaseWalletRequest
   * @return GenerateDistributedDatabaseWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedDatabaseWallet.ts.html |here} to see how to use GenerateDistributedDatabaseWallet API.
   */
  public async generateDistributedDatabaseWallet(
    generateDistributedDatabaseWalletRequest: requests.GenerateDistributedDatabaseWalletRequest
  ): Promise<responses.GenerateDistributedDatabaseWalletResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#generateDistributedDatabaseWallet."
      );
    const operationName = "generateDistributedDatabaseWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": generateDistributedDatabaseWalletRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateDistributedDatabaseWalletRequest.opcRequestId,
      "if-match": generateDistributedDatabaseWalletRequest.ifMatch,
      "opc-retry-token": generateDistributedDatabaseWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateDistributedDatabaseWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/generateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateDistributedDatabaseWalletRequest.generateDistributedDatabaseWalletDetails,
        "GenerateDistributedDatabaseWalletDetails",
        model.GenerateDistributedDatabaseWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateDistributedDatabaseWalletResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Globally distributed database identified by given id.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDistributedDatabaseRequest
   * @return GetDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedDatabase.ts.html |here} to see how to use GetDistributedDatabase API.
   */
  public async getDistributedDatabase(
    getDistributedDatabaseRequest: requests.GetDistributedDatabaseRequest
  ): Promise<responses.GetDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#getDistributedDatabase.");
    const operationName = "getDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": getDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {
      "metadata": getDistributedDatabaseRequest.metadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getDistributedDatabaseRequest.ifNoneMatch,
      "opc-request-id": getDistributedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDistributedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabase",
        bodyModel: model.DistributedDatabase,
        type: "model.DistributedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of Globally distributed databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDistributedDatabasesRequest
   * @return ListDistributedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedDatabases.ts.html |here} to see how to use ListDistributedDatabases API.
   */
  public async listDistributedDatabases(
    listDistributedDatabasesRequest: requests.ListDistributedDatabasesRequest
  ): Promise<responses.ListDistributedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#listDistributedDatabases.");
    const operationName = "listDistributedDatabases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDistributedDatabasesRequest.compartmentId,
      "lifecycleState": listDistributedDatabasesRequest.lifecycleState,
      "limit": listDistributedDatabasesRequest.limit,
      "page": listDistributedDatabasesRequest.page,
      "sortOrder": listDistributedDatabasesRequest.sortOrder,
      "sortBy": listDistributedDatabasesRequest.sortBy,
      "displayName": listDistributedDatabasesRequest.displayName,
      "dbDeploymentType": listDistributedDatabasesRequest.dbDeploymentType,
      "metadata": listDistributedDatabasesRequest.metadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDistributedDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDistributedDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDistributedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabaseCollection",
        bodyModel: model.DistributedDatabaseCollection,
        type: "model.DistributedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patch operation to add, remove or update shards to the Globally distributed database topology. In single patch
   * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
   * and remove in single operation is not allowed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchDistributedDatabaseRequest
   * @return PatchDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/PatchDistributedDatabase.ts.html |here} to see how to use PatchDistributedDatabase API.
   */
  public async patchDistributedDatabase(
    patchDistributedDatabaseRequest: requests.PatchDistributedDatabaseRequest
  ): Promise<responses.PatchDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#patchDistributedDatabase.");
    const operationName = "patchDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": patchDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchDistributedDatabaseRequest.ifMatch,
      "opc-retry-token": patchDistributedDatabaseRequest.opcRetryToken,
      "opc-request-id": patchDistributedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchDistributedDatabaseRequest.patchDistributedDatabaseDetails,
        "PatchDistributedDatabaseDetails",
        model.PatchDistributedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchDistributedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Rotate passwords for different components of the Globally distributed database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RotateDistributedDatabasePasswordsRequest
   * @return RotateDistributedDatabasePasswordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/RotateDistributedDatabasePasswords.ts.html |here} to see how to use RotateDistributedDatabasePasswords API.
   */
  public async rotateDistributedDatabasePasswords(
    rotateDistributedDatabasePasswordsRequest: requests.RotateDistributedDatabasePasswordsRequest
  ): Promise<responses.RotateDistributedDatabasePasswordsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#rotateDistributedDatabasePasswords."
      );
    const operationName = "rotateDistributedDatabasePasswords";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": rotateDistributedDatabasePasswordsRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": rotateDistributedDatabasePasswordsRequest.opcRequestId,
      "if-match": rotateDistributedDatabasePasswordsRequest.ifMatch,
      "opc-retry-token": rotateDistributedDatabasePasswordsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rotateDistributedDatabasePasswordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/rotateDbPasswords",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RotateDistributedDatabasePasswordsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start the shards, catalog and GSMs of Globally distributed database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartDistributedDatabaseRequest
   * @return StartDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StartDistributedDatabase.ts.html |here} to see how to use StartDistributedDatabase API.
   */
  public async startDistributedDatabase(
    startDistributedDatabaseRequest: requests.StartDistributedDatabaseRequest
  ): Promise<responses.StartDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#startDistributedDatabase.");
    const operationName = "startDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": startDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startDistributedDatabaseRequest.opcRetryToken,
      "opc-request-id": startDistributedDatabaseRequest.opcRequestId,
      "if-match": startDistributedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/startDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartDistributedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stop the shards, catalog and GSM instances for the Globally distributed database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopDistributedDatabaseRequest
   * @return StopDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StopDistributedDatabase.ts.html |here} to see how to use StopDistributedDatabase API.
   */
  public async stopDistributedDatabase(
    stopDistributedDatabaseRequest: requests.StopDistributedDatabaseRequest
  ): Promise<responses.StopDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#stopDistributedDatabase.");
    const operationName = "stopDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": stopDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopDistributedDatabaseRequest.opcRetryToken,
      "opc-request-id": stopDistributedDatabaseRequest.opcRequestId,
      "if-match": stopDistributedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/stopDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopDistributedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of the Globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDistributedDatabaseRequest
   * @return UpdateDistributedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedDatabase.ts.html |here} to see how to use UpdateDistributedDatabase API.
   */
  public async updateDistributedDatabase(
    updateDistributedDatabaseRequest: requests.UpdateDistributedDatabaseRequest
  ): Promise<responses.UpdateDistributedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbServiceClient#updateDistributedDatabase.");
    const operationName = "updateDistributedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": updateDistributedDatabaseRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDistributedDatabaseRequest.opcRequestId,
      "if-match": updateDistributedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDistributedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDistributedDatabaseRequest.updateDistributedDatabaseDetails,
        "UpdateDistributedDatabaseDetails",
        model.UpdateDistributedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDistributedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "distributedDatabase",
        bodyModel: model.DistributedDatabase,
        type: "model.DistributedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
   * Globally distributed database. Customer shall provide the CA signed certificate key details by adding the certificate
   * in request body.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest
   * @return UploadDistributedDatabaseSignedCertificateAndGenerateWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UploadDistributedDatabaseSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadDistributedDatabaseSignedCertificateAndGenerateWallet API.
   */
  public async uploadDistributedDatabaseSignedCertificateAndGenerateWallet(
    uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest: requests.UploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest
  ): Promise<responses.UploadDistributedDatabaseSignedCertificateAndGenerateWalletResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#uploadDistributedDatabaseSignedCertificateAndGenerateWallet."
      );
    const operationName = "uploadDistributedDatabaseSignedCertificateAndGenerateWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}":
        uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.distributedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id":
        uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.opcRequestId,
      "if-match": uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.ifMatch,
      "opc-retry-token":
        uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/distributedDatabases/{distributedDatabaseId}/actions/uploadSignedCertificateAndGenerateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest.uploadDistributedDatabaseSignedCertificateAndGenerateWalletDetails,
        "UploadDistributedDatabaseSignedCertificateAndGenerateWalletDetails",
        model.UploadDistributedDatabaseSignedCertificateAndGenerateWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.UploadDistributedDatabaseSignedCertificateAndGenerateWalletResponse
        >{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validate the network connectivity between components of the globally distributed database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ValidateDistributedDatabaseNetworkRequest
   * @return ValidateDistributedDatabaseNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ValidateDistributedDatabaseNetwork.ts.html |here} to see how to use ValidateDistributedDatabaseNetwork API.
   */
  public async validateDistributedDatabaseNetwork(
    validateDistributedDatabaseNetworkRequest: requests.ValidateDistributedDatabaseNetworkRequest
  ): Promise<responses.ValidateDistributedDatabaseNetworkResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbServiceClient#validateDistributedDatabaseNetwork."
      );
    const operationName = "validateDistributedDatabaseNetwork";
    const apiReferenceLink = "";
    const pathParams = {
      "{distributedDatabaseId}": validateDistributedDatabaseNetworkRequest.distributedDatabaseId
    };

    const queryParams = {
      "isSurrogate": validateDistributedDatabaseNetworkRequest.isSurrogate,
      "resourceName": validateDistributedDatabaseNetworkRequest.resourceName,
      "shardGroup": validateDistributedDatabaseNetworkRequest.shardGroup
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": validateDistributedDatabaseNetworkRequest.ifMatch,
      "opc-retry-token": validateDistributedDatabaseNetworkRequest.opcRetryToken,
      "opc-request-id": validateDistributedDatabaseNetworkRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateDistributedDatabaseNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/distributedDatabases/{distributedDatabaseId}/actions/validateNetwork",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateDistributedDatabaseNetworkResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum DistributedDbWorkRequestServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DistributedDbWorkRequestServiceClient {
  protected static serviceEndpointTemplate = "https://globaldb.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DistributedDbWorkRequestServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DistributedDbWorkRequestService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("distributeddatabase")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("distributeddatabase");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20250101";
    if (this.logger)
      this.logger.info(`DistributedDbWorkRequestServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DistributedDbWorkRequestServiceClient.serviceEndpointTemplate,
        this._region,
        DistributedDbWorkRequestServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DistributedDbWorkRequestServiceClient.serviceEndpointTemplate,
        this._regionId,
        DistributedDbWorkRequestServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DistributedDbWorkRequestServiceClient.serviceEndpointTemplate,
      region,
      DistributedDbWorkRequestServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DistributedDbWorkRequestServiceClient.serviceEndpointTemplate,
      regionId,
      DistributedDbWorkRequestServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DistributedDbWorkRequestServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DistributedDbWorkRequestServiceWaiter {
    this._waiters = new DistributedDbWorkRequestServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DistributedDbWorkRequestServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DistributedDbWorkRequestServiceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbWorkRequestServiceClient#listWorkRequestErrors."
      );
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbWorkRequestServiceClient#listWorkRequestLogs."
      );
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DistributedDbWorkRequestServiceClient#listWorkRequests."
      );
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
