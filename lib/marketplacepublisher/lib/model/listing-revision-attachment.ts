/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A attachment for the listing revision. User can provide an external URL/upload a file
 */
export interface ListingRevisionAttachment {
  /**
   * Unique OCID identifier for the listing revision attachment.
   */
  "id": string;
  /**
   * The unique identifier for the compartment.
   */
  "compartmentId": string;
  /**
   * The unique identifier of the listing revision that the specified attachment belongs to.
   */
  "listingRevisionId": string;
  /**
   * Name of the listing revision attachment.
   */
  "displayName": string;
  /**
   * Description of the listing revision attachment.
   */
  "description"?: string;
  /**
   * The current state of the attachment.
   */
  "lifecycleState": ListingRevisionAttachment.LifecycleState;
  /**
   * The time the attachment was created. An RFC3339 formatted datetime string.
   */
  "timeCreated": Date;
  /**
   * The time the attachment was updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated": Date;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "attachmentType": string;
}

export namespace ListingRevisionAttachment {
  export enum LifecycleState {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Deleted = "DELETED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ListingRevisionAttachment): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "attachmentType" in obj && obj.attachmentType) {
      switch (obj.attachmentType) {
        case "RELATED_DOCUMENT":
          return model.RelatedDocumentAttachment.getJsonObj(
            <model.RelatedDocumentAttachment>(<object>jsonObj),
            true
          );
        case "SCREENSHOT":
          return model.ScreenShotAttachment.getJsonObj(
            <model.ScreenShotAttachment>(<object>jsonObj),
            true
          );
        case "VIDEO":
          return model.VideoAttachment.getJsonObj(<model.VideoAttachment>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.attachmentType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ListingRevisionAttachment): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "attachmentType" in obj && obj.attachmentType) {
      switch (obj.attachmentType) {
        case "RELATED_DOCUMENT":
          return model.RelatedDocumentAttachment.getDeserializedJsonObj(
            <model.RelatedDocumentAttachment>(<object>jsonObj),
            true
          );
        case "SCREENSHOT":
          return model.ScreenShotAttachment.getDeserializedJsonObj(
            <model.ScreenShotAttachment>(<object>jsonObj),
            true
          );
        case "VIDEO":
          return model.VideoAttachment.getDeserializedJsonObj(
            <model.VideoAttachment>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.attachmentType}`);
      }
    }
    return jsonObj;
  }
}
