/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20241201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Base model object for the artifacts.
 */
export interface Artifact {
  /**
   * Unique OCID identifier for the artifact.
   */
  "id": string;
  /**
   * A display name for the artifact.
   */
  "displayName": string;
  /**
   * The current status for the Artifact.
   */
  "status": Artifact.Status;
  /**
   * Status notes for the Artifact.
   */
  "statusNotes"?: string;
  /**
   * The current state for the Artifact.
   */
  "lifecycleState": Artifact.LifecycleState;
  /**
    * The date and time the artifact was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
* <p>
Example: {@code 2022-09-15T21:10:29.600Z}
* 
    */
  "timeCreated": Date;
  /**
   * The unique identifier for the compartment.
   */
  "compartmentId": string;
  /**
   * The unique identifier for the publisher.
   */
  "publisherId": string;
  /**
    * The date and time the artifact was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
* <p>
Example: {@code 2022-09-15T21:10:29.600Z}
* 
    */
  "timeUpdated": Date;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "artifactType": string;
}

export namespace Artifact {
  export enum Status {
    InProgress = "IN_PROGRESS",
    Available = "AVAILABLE",
    Unavailable = "UNAVAILABLE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Artifact): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "artifactType" in obj && obj.artifactType) {
      switch (obj.artifactType) {
        case "MACHINE_IMAGE":
          return model.MachineImageArtifact.getJsonObj(
            <model.MachineImageArtifact>(<object>jsonObj),
            true
          );
        case "STACK":
          return model.StackArtifact.getJsonObj(<model.StackArtifact>(<object>jsonObj), true);
        case "CONTAINER_IMAGE":
          return model.ContainerImageArtifact.getJsonObj(
            <model.ContainerImageArtifact>(<object>jsonObj),
            true
          );
        case "HELM_CHART":
          return model.KubernetesImageArtifact.getJsonObj(
            <model.KubernetesImageArtifact>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.artifactType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Artifact): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "artifactType" in obj && obj.artifactType) {
      switch (obj.artifactType) {
        case "MACHINE_IMAGE":
          return model.MachineImageArtifact.getDeserializedJsonObj(
            <model.MachineImageArtifact>(<object>jsonObj),
            true
          );
        case "STACK":
          return model.StackArtifact.getDeserializedJsonObj(
            <model.StackArtifact>(<object>jsonObj),
            true
          );
        case "CONTAINER_IMAGE":
          return model.ContainerImageArtifact.getDeserializedJsonObj(
            <model.ContainerImageArtifact>(<object>jsonObj),
            true
          );
        case "HELM_CHART":
          return model.KubernetesImageArtifact.getDeserializedJsonObj(
            <model.KubernetesImageArtifact>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.artifactType}`);
      }
    }
    return jsonObj;
  }
}
