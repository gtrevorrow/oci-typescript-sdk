/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20241201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The model for an Oracle Cloud Infrastructure Marketplace Publisher listing revision.
 */
export interface ListingRevision {
  /**
   * Unique OCID identifier for the listing revision in Marketplace Publisher.
   */
  "id": string;
  /**
   * The unique identifier for the listing this revision belongs to.
   */
  "listingId": string;
  /**
   * The unique identifier for the compartment.
   */
  "compartmentId"?: string;
  /**
   * The name for the listing revision.
   */
  "displayName": string;
  /**
   * The revision number for the listing revision. This is an internal attribute
   */
  "revisionNumber"?: string;
  /**
   * Single line introduction for the listing revision.
   */
  "headline": string;
  /**
   * The tagline of the listing revision.
   */
  "tagline"?: string;
  /**
   * Keywords associated with the listing revision.
   */
  "keywords"?: string;
  /**
   * A short description for the listing revision.
   */
  "shortDescription"?: string;
  /**
   * Usage information for the listing revision.
   */
  "usageInformation"?: string;
  /**
   * A long description for the listing revision.
   */
  "longDescription"?: string;
  /**
   * The time the listing revision was created. An RFC3339 formatted datetime string.
   */
  "timeCreated": Date;
  /**
   * The time the listing revision was updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated": Date;
  "contentLanguage"?: model.LanguageItem;
  /**
   * Languages supported by the publisher for the listing revision.
   */
  "supportedlanguages"?: Array<model.LanguageItem>;
  /**
   * Contact information to use to get support from the publisher for the listing revision.
   */
  "supportContacts"?: Array<model.SupportContact>;
  /**
   * Links to support resources for the listing revision.
   */
  "supportLinks"?: Array<model.NamedLink>;
  "icon"?: model.ListingRevisionIconAttachment;
  /**
   * The current status for the Listing revision.
   */
  "status": ListingRevision.Status;
  /**
   * Status notes for the listing revision.
   */
  "statusNotes"?: string;
  /**
   * The current state of the listing revision.
   */
  "lifecycleState": ListingRevision.LifecycleState;
  /**
   * The listing's package type. Populated from the listing.
   */
  "packageType"?: model.PackageType;
  /**
   * Additional metadata key/value pairs for the listing revision summary.
   *
   */
  "extendedMetadata"?: { [key: string]: string };
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "listingType": string;
}

export namespace ListingRevision {
  export enum Status {
    New = "NEW",
    PendingReview = "PENDING_REVIEW",
    ReviewInProgress = "REVIEW_IN_PROGRESS",
    Rejected = "REJECTED",
    Approved = "APPROVED",
    PublishInProgress = "PUBLISH_IN_PROGRESS",
    PublishFailed = "PUBLISH_FAILED",
    Published = "PUBLISHED",
    PublishAsPrivateFailed = "PUBLISH_AS_PRIVATE_FAILED",
    PublishedAsPrivate = "PUBLISHED_AS_PRIVATE",
    PublishAsPrivateInProgress = "PUBLISH_AS_PRIVATE_IN_PROGRESS",
    UnpublishInProgress = "UNPUBLISH_IN_PROGRESS",
    Unpublished = "UNPUBLISHED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ListingRevision): object {
    const jsonObj = {
      ...obj,
      ...{
        "contentLanguage": obj.contentLanguage
          ? model.LanguageItem.getJsonObj(obj.contentLanguage)
          : undefined,
        "supportedlanguages": obj.supportedlanguages
          ? obj.supportedlanguages.map(item => {
              return model.LanguageItem.getJsonObj(item);
            })
          : undefined,
        "supportContacts": obj.supportContacts
          ? obj.supportContacts.map(item => {
              return model.SupportContact.getJsonObj(item);
            })
          : undefined,
        "supportLinks": obj.supportLinks
          ? obj.supportLinks.map(item => {
              return model.NamedLink.getJsonObj(item);
            })
          : undefined,
        "icon": obj.icon ? model.ListingRevisionIconAttachment.getJsonObj(obj.icon) : undefined
      }
    };

    if (obj && "listingType" in obj && obj.listingType) {
      switch (obj.listingType) {
        case "SERVICE":
          return model.ServiceListingRevision.getJsonObj(
            <model.ServiceListingRevision>(<object>jsonObj),
            true
          );
        case "LEAD_GENERATION":
          return model.LeadGenListingRevision.getJsonObj(
            <model.LeadGenListingRevision>(<object>jsonObj),
            true
          );
        case "OCI_APPLICATION":
          return model.OciListingRevision.getJsonObj(
            <model.OciListingRevision>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.listingType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ListingRevision): object {
    const jsonObj = {
      ...obj,
      ...{
        "contentLanguage": obj.contentLanguage
          ? model.LanguageItem.getDeserializedJsonObj(obj.contentLanguage)
          : undefined,
        "supportedlanguages": obj.supportedlanguages
          ? obj.supportedlanguages.map(item => {
              return model.LanguageItem.getDeserializedJsonObj(item);
            })
          : undefined,
        "supportContacts": obj.supportContacts
          ? obj.supportContacts.map(item => {
              return model.SupportContact.getDeserializedJsonObj(item);
            })
          : undefined,
        "supportLinks": obj.supportLinks
          ? obj.supportLinks.map(item => {
              return model.NamedLink.getDeserializedJsonObj(item);
            })
          : undefined,
        "icon": obj.icon
          ? model.ListingRevisionIconAttachment.getDeserializedJsonObj(obj.icon)
          : undefined
      }
    };

    if (obj && "listingType" in obj && obj.listingType) {
      switch (obj.listingType) {
        case "SERVICE":
          return model.ServiceListingRevision.getDeserializedJsonObj(
            <model.ServiceListingRevision>(<object>jsonObj),
            true
          );
        case "LEAD_GENERATION":
          return model.LeadGenListingRevision.getDeserializedJsonObj(
            <model.LeadGenListingRevision>(<object>jsonObj),
            true
          );
        case "OCI_APPLICATION":
          return model.OciListingRevision.getDeserializedJsonObj(
            <model.OciListingRevision>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.listingType}`);
      }
    }
    return jsonObj;
  }
}
