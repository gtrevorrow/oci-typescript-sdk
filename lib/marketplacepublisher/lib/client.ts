/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { AttachmentWaiter } from "./attachment-waiter";
import { MarketplacePublisherWaiter } from "./marketplacepublisher-waiter";
import { OfferWaiter } from "./offer-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AttachmentApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AttachmentClient {
  protected static serviceEndpointTemplate =
    "https://marketplace-publisher.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": AttachmentWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Attachment";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("marketplacepublisher")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("marketplacepublisher");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`AttachmentClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        AttachmentClient.serviceEndpointTemplate,
        this._region,
        AttachmentClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        AttachmentClient.serviceEndpointTemplate,
        this._regionId,
        AttachmentClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AttachmentClient.serviceEndpointTemplate,
      region,
      AttachmentClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AttachmentClient.serviceEndpointTemplate,
      regionId,
      AttachmentClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new AttachmentWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): AttachmentWaiter {
    this._waiters = new AttachmentWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): AttachmentWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Creates a new Attachment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAttachmentRequest
   * @return CreateAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateAttachment.ts.html |here} to see how to use CreateAttachment API.
   */
  public async createAttachment(
    createAttachmentRequest: requests.CreateAttachmentRequest
  ): Promise<responses.CreateAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation AttachmentClient#createAttachment.");
    const operationName = "createAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": createAttachmentRequest.offerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAttachmentRequest.opcRetryToken,
      "opc-request-id": createAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/attachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAttachmentRequest.createAttachmentDetails,
        "CreateAttachmentDetails",
        model.CreateAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "attachment",
        bodyModel: model.Attachment,
        type: "model.Attachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Attachment resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAttachmentRequest
   * @return DeleteAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteAttachment.ts.html |here} to see how to use DeleteAttachment API.
   */
  public async deleteAttachment(
    deleteAttachmentRequest: requests.DeleteAttachmentRequest
  ): Promise<responses.DeleteAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation AttachmentClient#deleteAttachment.");
    const operationName = "deleteAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": deleteAttachmentRequest.offerId,
      "{attachmentId}": deleteAttachmentRequest.attachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAttachmentRequest.ifMatch,
      "opc-request-id": deleteAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/attachments/{attachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Attachment by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAttachmentRequest
   * @return GetAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetAttachment.ts.html |here} to see how to use GetAttachment API.
   */
  public async getAttachment(
    getAttachmentRequest: requests.GetAttachmentRequest
  ): Promise<responses.GetAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation AttachmentClient#getAttachment.");
    const operationName = "getAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": getAttachmentRequest.offerId,
      "{attachmentId}": getAttachmentRequest.attachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/attachments/{attachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "attachment",
        bodyModel: model.Attachment,
        type: "model.Attachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Attachment content by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAttachmentContentRequest
   * @return GetAttachmentContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetAttachmentContent.ts.html |here} to see how to use GetAttachmentContent API.
   */
  public async getAttachmentContent(
    getAttachmentContentRequest: requests.GetAttachmentContentRequest
  ): Promise<responses.GetAttachmentContentResponse> {
    if (this.logger) this.logger.debug("Calling operation AttachmentClient#getAttachmentContent.");
    const operationName = "getAttachmentContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": getAttachmentContentRequest.offerId,
      "{attachmentId}": getAttachmentContentRequest.attachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAttachmentContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAttachmentContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/attachments/{attachmentId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAttachmentContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Attachments. Requires either the BuyerCompartmentId or the SellerCompartmentId params. If neither or both are provided, then the API will return a 400.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAttachmentsRequest
   * @return ListAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListAttachments.ts.html |here} to see how to use ListAttachments API.
   */
  public async listAttachments(
    listAttachmentsRequest: requests.ListAttachmentsRequest
  ): Promise<responses.ListAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation AttachmentClient#listAttachments.");
    const operationName = "listAttachments";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": listAttachmentsRequest.offerId
    };

    const queryParams = {
      "buyerCompartmentId": listAttachmentsRequest.buyerCompartmentId,
      "sellerCompartmentId": listAttachmentsRequest.sellerCompartmentId,
      "lifecycleState": listAttachmentsRequest.lifecycleState,
      "displayName": listAttachmentsRequest.displayName,
      "id": listAttachmentsRequest.id,
      "limit": listAttachmentsRequest.limit,
      "page": listAttachmentsRequest.page,
      "sortOrder": listAttachmentsRequest.sortOrder,
      "sortBy": listAttachmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAttachmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/attachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "attachmentCollection",
        bodyModel: model.AttachmentCollection,
        type: "model.AttachmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum MarketplacePublisherApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MarketplacePublisherClient {
  protected static serviceEndpointTemplate =
    "https://marketplace-publisher.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": MarketplacePublisherWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "MarketplacePublisher";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("marketplacepublisher")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("marketplacepublisher");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger)
      this.logger.info(`MarketplacePublisherClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        MarketplacePublisherClient.serviceEndpointTemplate,
        this._region,
        MarketplacePublisherClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        MarketplacePublisherClient.serviceEndpointTemplate,
        this._regionId,
        MarketplacePublisherClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MarketplacePublisherClient.serviceEndpointTemplate,
      region,
      MarketplacePublisherClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MarketplacePublisherClient.serviceEndpointTemplate,
      regionId,
      MarketplacePublisherClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new MarketplacePublisherWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): MarketplacePublisherWaiter {
    this._waiters = new MarketplacePublisherWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): MarketplacePublisherWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Mark the Term Version identified by the id as active
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ActivateTermVersionRequest
   * @return ActivateTermVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ActivateTermVersion.ts.html |here} to see how to use ActivateTermVersion API.
   */
  public async activateTermVersion(
    activateTermVersionRequest: requests.ActivateTermVersionRequest
  ): Promise<responses.ActivateTermVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#activateTermVersion.");
    const operationName = "activateTermVersion";
    const apiReferenceLink = "";
    const pathParams = {
      "{termVersionId}": activateTermVersionRequest.termVersionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateTermVersionRequest.ifMatch,
      "opc-request-id": activateTermVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateTermVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions/{termVersionId}/actions/Activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateTermVersionResponse>{},
        body: await response.json(),
        bodyKey: "termVersion",
        bodyModel: model.TermVersion,
        type: "model.TermVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cascade delete the listing and its subresources.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CascadingDeleteListingRequest
   * @return CascadingDeleteListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CascadingDeleteListing.ts.html |here} to see how to use CascadingDeleteListing API.
   */
  public async cascadingDeleteListing(
    cascadingDeleteListingRequest: requests.CascadingDeleteListingRequest
  ): Promise<responses.CascadingDeleteListingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#cascadingDeleteListing.");
    const operationName = "cascadingDeleteListing";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingId}": cascadingDeleteListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cascadingDeleteListingRequest.ifMatch,
      "opc-request-id": cascadingDeleteListingRequest.opcRequestId,
      "opc-retry-token": cascadingDeleteListingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cascadingDeleteListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/actions/cascadingDelete",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CascadingDeleteListingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cascade delete listing revision and its subresources.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CascadingDeleteListingRevisionRequest
   * @return CascadingDeleteListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CascadingDeleteListingRevision.ts.html |here} to see how to use CascadingDeleteListingRevision API.
   */
  public async cascadingDeleteListingRevision(
    cascadingDeleteListingRevisionRequest: requests.CascadingDeleteListingRevisionRequest
  ): Promise<responses.CascadingDeleteListingRevisionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#cascadingDeleteListingRevision."
      );
    const operationName = "cascadingDeleteListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": cascadingDeleteListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cascadingDeleteListingRevisionRequest.ifMatch,
      "opc-request-id": cascadingDeleteListingRevisionRequest.opcRequestId,
      "opc-retry-token": cascadingDeleteListingRevisionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cascadingDeleteListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/cascadingDelete",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CascadingDeleteListingRevisionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified artifact to the specified compartment within the same tenancy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeArtifactCompartmentRequest
   * @return ChangeArtifactCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ChangeArtifactCompartment.ts.html |here} to see how to use ChangeArtifactCompartment API.
   */
  public async changeArtifactCompartment(
    changeArtifactCompartmentRequest: requests.ChangeArtifactCompartmentRequest
  ): Promise<responses.ChangeArtifactCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#changeArtifactCompartment.");
    const operationName = "changeArtifactCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{artifactId}": changeArtifactCompartmentRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeArtifactCompartmentRequest.opcRetryToken,
      "opc-request-id": changeArtifactCompartmentRequest.opcRequestId,
      "if-match": changeArtifactCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeArtifactCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts/{artifactId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeArtifactCompartmentRequest.changeArtifactCompartmentDetails,
        "ChangeArtifactCompartmentDetails",
        model.ChangeArtifactCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeArtifactCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a listing from one compartment to another
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeListingCompartmentRequest
   * @return ChangeListingCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ChangeListingCompartment.ts.html |here} to see how to use ChangeListingCompartment API.
   */
  public async changeListingCompartment(
    changeListingCompartmentRequest: requests.ChangeListingCompartmentRequest
  ): Promise<responses.ChangeListingCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#changeListingCompartment.");
    const operationName = "changeListingCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingId}": changeListingCompartmentRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeListingCompartmentRequest.opcRetryToken,
      "opc-request-id": changeListingCompartmentRequest.opcRequestId,
      "if-match": changeListingCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeListingCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeListingCompartmentRequest.changeListingCompartmentDetails,
        "ChangeListingCompartmentDetails",
        model.ChangeListingCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeListingCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision to New status
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeListingRevisionToNewStatusRequest
   * @return ChangeListingRevisionToNewStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ChangeListingRevisionToNewStatus.ts.html |here} to see how to use ChangeListingRevisionToNewStatus API.
   */
  public async changeListingRevisionToNewStatus(
    changeListingRevisionToNewStatusRequest: requests.ChangeListingRevisionToNewStatusRequest
  ): Promise<responses.ChangeListingRevisionToNewStatusResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#changeListingRevisionToNewStatus."
      );
    const operationName = "changeListingRevisionToNewStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": changeListingRevisionToNewStatusRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeListingRevisionToNewStatusRequest.ifMatch,
      "opc-request-id": changeListingRevisionToNewStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeListingRevisionToNewStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/changeToNewStatus",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeListingRevisionToNewStatusResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a term from one compartment to another
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeTermCompartmentRequest
   * @return ChangeTermCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ChangeTermCompartment.ts.html |here} to see how to use ChangeTermCompartment API.
   */
  public async changeTermCompartment(
    changeTermCompartmentRequest: requests.ChangeTermCompartmentRequest
  ): Promise<responses.ChangeTermCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#changeTermCompartment.");
    const operationName = "changeTermCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{termId}": changeTermCompartmentRequest.termId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeTermCompartmentRequest.opcRetryToken,
      "opc-request-id": changeTermCompartmentRequest.opcRequestId,
      "if-match": changeTermCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeTermCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms/{termId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTermCompartmentRequest.changeTermCompartmentDetails,
        "ChangeTermCompartmentDetails",
        model.ChangeTermCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTermCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Clone the published/withdrawn Listing Revision identified by the identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CloneListingRevisionRequest
   * @return CloneListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CloneListingRevision.ts.html |here} to see how to use CloneListingRevision API.
   */
  public async cloneListingRevision(
    cloneListingRevisionRequest: requests.CloneListingRevisionRequest
  ): Promise<responses.CloneListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#cloneListingRevision.");
    const operationName = "cloneListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": cloneListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cloneListingRevisionRequest.ifMatch,
      "opc-request-id": cloneListingRevisionRequest.opcRequestId,
      "opc-retry-token": cloneListingRevisionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cloneListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/clone",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CloneListingRevisionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new artifact in your compartment.
* You must specify your compartment ID in the request object.
* <p>
You must also specify a *name* for the artifact(although it can be an empty string). It does not
* have to be unique, and you can change it anytime with {@link #updateArtifact(UpdateArtifactRequest) updateArtifact}..
* <p>
You must also specify a *artifactType* for the artifact. Allowed values are CONTAINER_IMAGE and HELM_CHART
* <p>
You must also provide the container or helm chart registry details for the corresponding images.
* Oracle container registry details (Registry/Concepts/registryoverview.htm).
* <p>
After you send your request, the new object's `status` will temporarily be IN_PROGRESS and `lifecycleState` will be CREATING.
* Before using the object, first make sure its `lifecycleState` has changed to ACTIVE and the status has changed to \u2018AVAILABLE\u2019 for the new Artifact.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateArtifactRequest
     * @return CreateArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateArtifact.ts.html |here} to see how to use CreateArtifact API.
     */
  public async createArtifact(
    createArtifactRequest: requests.CreateArtifactRequest
  ): Promise<responses.CreateArtifactResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#createArtifact.");
    const operationName = "createArtifact";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createArtifactRequest.opcRetryToken,
      "opc-request-id": createArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createArtifactRequest.createArtifactDetails,
        "CreateArtifactDetails",
        model.CreateArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new listing in your compartment.
* You must specify your compartment ID in the request object.
* <p>
You must also specify a *name* for the listing and cannot be updated later.
* <p>
You must also specify a *packageType* for the listing. Allowed values are CONTAINER_IMAGE and HELM_CHART
* <p>
After you send your request, the new object's `lifecycleState` will be CREATING.
* Before using the object, first make sure its `lifecycleState` has changed to ACTIVE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateListingRequest
     * @return CreateListingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateListing.ts.html |here} to see how to use CreateListing API.
     */
  public async createListing(
    createListingRequest: requests.CreateListingRequest
  ): Promise<responses.CreateListingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#createListing.");
    const operationName = "createListing";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createListingRequest.opcRetryToken,
      "opc-request-id": createListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListingRequest.createListingDetails,
        "CreateListingDetails",
        model.CreateListingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListingResponse>{},
        body: await response.json(),
        bodyKey: "listing",
        bodyModel: model.Listing,
        type: "model.Listing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Listing Revision.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateListingRevisionRequest
   * @return CreateListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateListingRevision.ts.html |here} to see how to use CreateListingRevision API.
   */
  public async createListingRevision(
    createListingRevisionRequest: requests.CreateListingRevisionRequest
  ): Promise<responses.CreateListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#createListingRevision.");
    const operationName = "createListingRevision";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createListingRevisionRequest.opcRetryToken,
      "opc-request-id": createListingRevisionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListingRevisionRequest.createListingRevisionDetails,
        "CreateListingRevisionDetails",
        model.CreateListingRevisionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListingRevisionResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new listing revision attachment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateListingRevisionAttachmentRequest
   * @return CreateListingRevisionAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateListingRevisionAttachment.ts.html |here} to see how to use CreateListingRevisionAttachment API.
   */
  public async createListingRevisionAttachment(
    createListingRevisionAttachmentRequest: requests.CreateListingRevisionAttachmentRequest
  ): Promise<responses.CreateListingRevisionAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#createListingRevisionAttachment."
      );
    const operationName = "createListingRevisionAttachment";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createListingRevisionAttachmentRequest.opcRetryToken,
      "opc-request-id": createListingRevisionAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListingRevisionAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListingRevisionAttachmentRequest.createListingRevisionAttachmentDetails,
        "CreateListingRevisionAttachmentDetails",
        model.CreateListingRevisionAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListingRevisionAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionAttachment",
        bodyModel: model.ListingRevisionAttachment,
        type: "model.ListingRevisionAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Listing Revision Note.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateListingRevisionNoteRequest
   * @return CreateListingRevisionNoteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateListingRevisionNote.ts.html |here} to see how to use CreateListingRevisionNote API.
   */
  public async createListingRevisionNote(
    createListingRevisionNoteRequest: requests.CreateListingRevisionNoteRequest
  ): Promise<responses.CreateListingRevisionNoteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#createListingRevisionNote.");
    const operationName = "createListingRevisionNote";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createListingRevisionNoteRequest.opcRetryToken,
      "opc-request-id": createListingRevisionNoteRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListingRevisionNoteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionNotes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListingRevisionNoteRequest.createListingRevisionNoteDetails,
        "CreateListingRevisionNoteDetails",
        model.CreateListingRevisionNoteDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListingRevisionNoteResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionNote",
        bodyModel: model.ListingRevisionNote,
        type: "model.ListingRevisionNote",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Listing Revision Package.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateListingRevisionPackageRequest
   * @return CreateListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateListingRevisionPackage.ts.html |here} to see how to use CreateListingRevisionPackage API.
   */
  public async createListingRevisionPackage(
    createListingRevisionPackageRequest: requests.CreateListingRevisionPackageRequest
  ): Promise<responses.CreateListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#createListingRevisionPackage."
      );
    const operationName = "createListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createListingRevisionPackageRequest.opcRetryToken,
      "opc-request-id": createListingRevisionPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListingRevisionPackageRequest.createListingRevisionPackageDetails,
        "CreateListingRevisionPackageDetails",
        model.CreateListingRevisionPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListingRevisionPackageResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionPackage",
        bodyModel: model.ListingRevisionPackage,
        type: "model.ListingRevisionPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Term.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTermRequest
   * @return CreateTermResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateTerm.ts.html |here} to see how to use CreateTerm API.
   */
  public async createTerm(
    createTermRequest: requests.CreateTermRequest
  ): Promise<responses.CreateTermResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#createTerm.");
    const operationName = "createTerm";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTermRequest.opcRetryToken,
      "opc-request-id": createTermRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTermRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTermRequest.createTermDetails,
        "CreateTermDetails",
        model.CreateTermDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTermResponse>{},
        body: await response.json(),
        bodyKey: "term",
        bodyModel: model.Term,
        type: "model.Term",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Term Version.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTermVersionRequest
   * @return CreateTermVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateTermVersion.ts.html |here} to see how to use CreateTermVersion API.
   */
  public async createTermVersion(
    createTermVersionRequest: requests.CreateTermVersionRequest
  ): Promise<responses.CreateTermVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#createTermVersion.");
    const operationName = "createTermVersion";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": createTermVersionRequest.opcRetryToken,
      "opc-request-id": createTermVersionRequest.opcRequestId,
      "display-name": createTermVersionRequest.displayName,
      "term-id": createTermVersionRequest.termId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTermVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions",
      method: "POST",
      bodyContent: createTermVersionRequest.createTermVersionContent,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTermVersionResponse>{},
        body: await response.json(),
        bodyKey: "termVersion",
        bodyModel: model.TermVersion,
        type: "model.TermVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified artifact.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteArtifactRequest
   * @return DeleteArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteArtifact.ts.html |here} to see how to use DeleteArtifact API.
   */
  public async deleteArtifact(
    deleteArtifactRequest: requests.DeleteArtifactRequest
  ): Promise<responses.DeleteArtifactResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#deleteArtifact.");
    const operationName = "deleteArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{artifactId}": deleteArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteArtifactRequest.ifMatch,
      "opc-request-id": deleteArtifactRequest.opcRequestId,
      "opc-retry-token": deleteArtifactRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts/{artifactId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listing by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteListingRequest
   * @return DeleteListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteListing.ts.html |here} to see how to use DeleteListing API.
   */
  public async deleteListing(
    deleteListingRequest: requests.DeleteListingRequest
  ): Promise<responses.DeleteListingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#deleteListing.");
    const operationName = "deleteListing";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingId}": deleteListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteListingRequest.ifMatch,
      "opc-request-id": deleteListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listing by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteListingRevisionRequest
   * @return DeleteListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteListingRevision.ts.html |here} to see how to use DeleteListingRevision API.
   */
  public async deleteListingRevision(
    deleteListingRevisionRequest: requests.DeleteListingRevisionRequest
  ): Promise<responses.DeleteListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#deleteListingRevision.");
    const operationName = "deleteListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": deleteListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteListingRevisionRequest.ifMatch,
      "opc-request-id": deleteListingRevisionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListingRevisionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listing revision attachment by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteListingRevisionAttachmentRequest
   * @return DeleteListingRevisionAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteListingRevisionAttachment.ts.html |here} to see how to use DeleteListingRevisionAttachment API.
   */
  public async deleteListingRevisionAttachment(
    deleteListingRevisionAttachmentRequest: requests.DeleteListingRevisionAttachmentRequest
  ): Promise<responses.DeleteListingRevisionAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#deleteListingRevisionAttachment."
      );
    const operationName = "deleteListingRevisionAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionAttachmentId}":
        deleteListingRevisionAttachmentRequest.listingRevisionAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteListingRevisionAttachmentRequest.ifMatch,
      "opc-request-id": deleteListingRevisionAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListingRevisionAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments/{listingRevisionAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListingRevisionAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listing revision note by the identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteListingRevisionNoteRequest
   * @return DeleteListingRevisionNoteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteListingRevisionNote.ts.html |here} to see how to use DeleteListingRevisionNote API.
   */
  public async deleteListingRevisionNote(
    deleteListingRevisionNoteRequest: requests.DeleteListingRevisionNoteRequest
  ): Promise<responses.DeleteListingRevisionNoteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#deleteListingRevisionNote.");
    const operationName = "deleteListingRevisionNote";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionNoteId}": deleteListingRevisionNoteRequest.listingRevisionNoteId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteListingRevisionNoteRequest.ifMatch,
      "opc-request-id": deleteListingRevisionNoteRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListingRevisionNoteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionNotes/{listingRevisionNoteId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListingRevisionNoteResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listing revision package by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteListingRevisionPackageRequest
   * @return DeleteListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteListingRevisionPackage.ts.html |here} to see how to use DeleteListingRevisionPackage API.
   */
  public async deleteListingRevisionPackage(
    deleteListingRevisionPackageRequest: requests.DeleteListingRevisionPackageRequest
  ): Promise<responses.DeleteListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#deleteListingRevisionPackage."
      );
    const operationName = "deleteListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}": deleteListingRevisionPackageRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteListingRevisionPackageRequest.ifMatch,
      "opc-request-id": deleteListingRevisionPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListingRevisionPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Term by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTermRequest
   * @return DeleteTermResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteTerm.ts.html |here} to see how to use DeleteTerm API.
   */
  public async deleteTerm(
    deleteTermRequest: requests.DeleteTermRequest
  ): Promise<responses.DeleteTermResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#deleteTerm.");
    const operationName = "deleteTerm";
    const apiReferenceLink = "";
    const pathParams = {
      "{termId}": deleteTermRequest.termId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTermRequest.ifMatch,
      "opc-request-id": deleteTermRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTermRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms/{termId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTermResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Term by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTermVersionRequest
   * @return DeleteTermVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteTermVersion.ts.html |here} to see how to use DeleteTermVersion API.
   */
  public async deleteTermVersion(
    deleteTermVersionRequest: requests.DeleteTermVersionRequest
  ): Promise<responses.DeleteTermVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#deleteTermVersion.");
    const operationName = "deleteTermVersion";
    const apiReferenceLink = "";
    const pathParams = {
      "{termVersionId}": deleteTermVersionRequest.termVersionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTermVersionRequest.ifMatch,
      "opc-request-id": deleteTermVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTermVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions/{termVersionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTermVersionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified artifact's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetArtifactRequest
   * @return GetArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetArtifact.ts.html |here} to see how to use GetArtifact API.
   */
  public async getArtifact(
    getArtifactRequest: requests.GetArtifactRequest
  ): Promise<responses.GetArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getArtifact.");
    const operationName = "getArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{artifactId}": getArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts/{artifactId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetArtifactResponse>{},
        body: await response.json(),
        bodyKey: "artifact",
        bodyModel: model.Artifact,
        type: "model.Artifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified category's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCategoryRequest
   * @return GetCategoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetCategory.ts.html |here} to see how to use GetCategory API.
   */
  public async getCategory(
    getCategoryRequest: requests.GetCategoryRequest
  ): Promise<responses.GetCategoryResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getCategory.");
    const operationName = "getCategory";
    const apiReferenceLink = "";
    const pathParams = {
      "{categoryCode}": getCategoryRequest.categoryCode
    };

    const queryParams = {
      "compartmentId": getCategoryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCategoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCategoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories/{categoryCode}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCategoryResponse>{},
        body: await response.json(),
        bodyKey: "category",
        bodyModel: model.Category,
        type: "model.Category",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for a listing.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetListingRequest
   * @return GetListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetListing.ts.html |here} to see how to use GetListing API.
   */
  public async getListing(
    getListingRequest: requests.GetListingRequest
  ): Promise<responses.GetListingResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getListing.");
    const operationName = "getListing";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingId}": getListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingResponse>{},
        body: await response.json(),
        bodyKey: "listing",
        bodyModel: model.Listing,
        type: "model.Listing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for a listing revision.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetListingRevisionRequest
   * @return GetListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetListingRevision.ts.html |here} to see how to use GetListingRevision API.
   */
  public async getListingRevision(
    getListingRevisionRequest: requests.GetListingRevisionRequest
  ): Promise<responses.GetListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getListingRevision.");
    const operationName = "getListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": getListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRevisionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingRevisionResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of the specified listing revision attachment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetListingRevisionAttachmentRequest
   * @return GetListingRevisionAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetListingRevisionAttachment.ts.html |here} to see how to use GetListingRevisionAttachment API.
   */
  public async getListingRevisionAttachment(
    getListingRevisionAttachmentRequest: requests.GetListingRevisionAttachmentRequest
  ): Promise<responses.GetListingRevisionAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#getListingRevisionAttachment."
      );
    const operationName = "getListingRevisionAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionAttachmentId}":
        getListingRevisionAttachmentRequest.listingRevisionAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRevisionAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRevisionAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments/{listingRevisionAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingRevisionAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionAttachment",
        bodyModel: model.ListingRevisionAttachment,
        type: "model.ListingRevisionAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get note details by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetListingRevisionNoteRequest
   * @return GetListingRevisionNoteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetListingRevisionNote.ts.html |here} to see how to use GetListingRevisionNote API.
   */
  public async getListingRevisionNote(
    getListingRevisionNoteRequest: requests.GetListingRevisionNoteRequest
  ): Promise<responses.GetListingRevisionNoteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getListingRevisionNote.");
    const operationName = "getListingRevisionNote";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionNoteId}": getListingRevisionNoteRequest.listingRevisionNoteId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRevisionNoteRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRevisionNoteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionNotes/{listingRevisionNoteId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingRevisionNoteResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionNote",
        bodyModel: model.ListingRevisionNote,
        type: "model.ListingRevisionNote",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of the specified version of a package.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetListingRevisionPackageRequest
   * @return GetListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetListingRevisionPackage.ts.html |here} to see how to use GetListingRevisionPackage API.
   */
  public async getListingRevisionPackage(
    getListingRevisionPackageRequest: requests.GetListingRevisionPackageRequest
  ): Promise<responses.GetListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getListingRevisionPackage.");
    const operationName = "getListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}": getListingRevisionPackageRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRevisionPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingRevisionPackageResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionPackage",
        bodyModel: model.ListingRevisionPackage,
        type: "model.ListingRevisionPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified market's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMarketRequest
   * @return GetMarketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetMarket.ts.html |here} to see how to use GetMarket API.
   */
  public async getMarket(
    getMarketRequest: requests.GetMarketRequest
  ): Promise<responses.GetMarketResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getMarket.");
    const operationName = "getMarket";
    const apiReferenceLink = "";
    const pathParams = {
      "{marketCode}": getMarketRequest.marketCode
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMarketRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMarketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/markets/{marketCode}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMarketResponse>{},
        body: await response.json(),
        bodyKey: "market",
        bodyModel: model.Market,
        type: "model.Market",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Product by code identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProductRequest
   * @return GetProductResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetProduct.ts.html |here} to see how to use GetProduct API.
   */
  public async getProduct(
    getProductRequest: requests.GetProductRequest
  ): Promise<responses.GetProductResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getProduct.");
    const operationName = "getProduct";
    const apiReferenceLink = "";
    const pathParams = {
      "{productCode}": getProductRequest.productCode
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProductRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProductRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/products/{productCode}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProductResponse>{},
        body: await response.json(),
        bodyKey: "product",
        bodyModel: model.Product,
        type: "model.Product",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Publisher by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPublisherRequest
   * @return GetPublisherResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetPublisher.ts.html |here} to see how to use GetPublisher API.
   */
  public async getPublisher(
    getPublisherRequest: requests.GetPublisherRequest
  ): Promise<responses.GetPublisherResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getPublisher.");
    const operationName = "getPublisher";
    const apiReferenceLink = "";
    const pathParams = {
      "{publisherId}": getPublisherRequest.publisherId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublisherRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublisherRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publishers/{publisherId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublisherResponse>{},
        body: await response.json(),
        bodyKey: "publisher",
        bodyModel: model.Publisher,
        type: "model.Publisher",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Term by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTermRequest
   * @return GetTermResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetTerm.ts.html |here} to see how to use GetTerm API.
   */
  public async getTerm(
    getTermRequest: requests.GetTermRequest
  ): Promise<responses.GetTermResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#getTerm.");
    const operationName = "getTerm";
    const apiReferenceLink = "";
    const pathParams = {
      "{termId}": getTermRequest.termId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTermRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTermRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms/{termId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTermResponse>{},
        body: await response.json(),
        bodyKey: "term",
        bodyModel: model.Term,
        type: "model.Term",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Term Version by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTermVersionRequest
   * @return GetTermVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetTermVersion.ts.html |here} to see how to use GetTermVersion API.
   */
  public async getTermVersion(
    getTermVersionRequest: requests.GetTermVersionRequest
  ): Promise<responses.GetTermVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getTermVersion.");
    const operationName = "getTermVersion";
    const apiReferenceLink = "";
    const pathParams = {
      "{termVersionId}": getTermVersionRequest.termVersionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTermVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTermVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions/{termVersionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTermVersionResponse>{},
        body: await response.json(),
        bodyKey: "termVersion",
        bodyModel: model.TermVersion,
        type: "model.TermVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the artifacts in your compartment. You must specify your compartment's OCID as the value for
   * the compartment ID.
   * For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListArtifactsRequest
   * @return ListArtifactsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListArtifacts.ts.html |here} to see how to use ListArtifacts API.
   */
  public async listArtifacts(
    listArtifactsRequest: requests.ListArtifactsRequest
  ): Promise<responses.ListArtifactsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listArtifacts.");
    const operationName = "listArtifacts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listArtifactsRequest.compartmentId,
      "lifecycleState": listArtifactsRequest.lifecycleState,
      "displayName": listArtifactsRequest.displayName,
      "status": listArtifactsRequest.status,
      "limit": listArtifactsRequest.limit,
      "page": listArtifactsRequest.page,
      "sortOrder": listArtifactsRequest.sortOrder,
      "sortBy": listArtifactsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listArtifactsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listArtifactsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListArtifactsResponse>{},
        body: await response.json(),
        bodyKey: "artifactCollection",
        bodyModel: model.ArtifactCollection,
        type: "model.ArtifactCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the categories in your compartment. You must specify your compartment's OCID as the value for
   * the compartment ID.
   * For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCategoriesRequest
   * @return ListCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListCategories.ts.html |here} to see how to use ListCategories API.
   */
  public async listCategories(
    listCategoriesRequest: requests.ListCategoriesRequest
  ): Promise<responses.ListCategoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listCategories.");
    const operationName = "listCategories";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listCategoriesRequest.limit,
      "page": listCategoriesRequest.page,
      "compartmentId": listCategoriesRequest.compartmentId,
      "productCode": listCategoriesRequest.productCode,
      "sortOrder": listCategoriesRequest.sortOrder,
      "sortBy": listCategoriesRequest.sortBy,
      "name": listCategoriesRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "categoryCollection",
        bodyModel: model.CategoryCollection,
        type: "model.CategoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of attachments for a listing revision in a compartment
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListListingRevisionAttachmentsRequest
   * @return ListListingRevisionAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListListingRevisionAttachments.ts.html |here} to see how to use ListListingRevisionAttachments API.
   */
  public async listListingRevisionAttachments(
    listListingRevisionAttachmentsRequest: requests.ListListingRevisionAttachmentsRequest
  ): Promise<responses.ListListingRevisionAttachmentsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#listListingRevisionAttachments."
      );
    const operationName = "listListingRevisionAttachments";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "listingRevisionId": listListingRevisionAttachmentsRequest.listingRevisionId,
      "displayName": listListingRevisionAttachmentsRequest.displayName,
      "lifecycleState": listListingRevisionAttachmentsRequest.lifecycleState,
      "compartmentId": listListingRevisionAttachmentsRequest.compartmentId,
      "limit": listListingRevisionAttachmentsRequest.limit,
      "page": listListingRevisionAttachmentsRequest.page,
      "sortOrder": listListingRevisionAttachmentsRequest.sortOrder,
      "sortBy": listListingRevisionAttachmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingRevisionAttachmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingRevisionAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingRevisionAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionAttachmentCollection",
        bodyModel: model.ListingRevisionAttachmentCollection,
        type: "model.ListingRevisionAttachmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of notes for a listing revision.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListListingRevisionNotesRequest
   * @return ListListingRevisionNotesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListListingRevisionNotes.ts.html |here} to see how to use ListListingRevisionNotes API.
   */
  public async listListingRevisionNotes(
    listListingRevisionNotesRequest: requests.ListListingRevisionNotesRequest
  ): Promise<responses.ListListingRevisionNotesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listListingRevisionNotes.");
    const operationName = "listListingRevisionNotes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listListingRevisionNotesRequest.compartmentId,
      "listingRevisionId": listListingRevisionNotesRequest.listingRevisionId,
      "limit": listListingRevisionNotesRequest.limit,
      "page": listListingRevisionNotesRequest.page,
      "sortOrder": listListingRevisionNotesRequest.sortOrder,
      "sortBy": listListingRevisionNotesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingRevisionNotesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingRevisionNotesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionNotes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingRevisionNotesResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionNoteCollection",
        bodyModel: model.ListingRevisionNoteCollection,
        type: "model.ListingRevisionNoteCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of packages for a listing revision.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListListingRevisionPackagesRequest
   * @return ListListingRevisionPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListListingRevisionPackages.ts.html |here} to see how to use ListListingRevisionPackages API.
   */
  public async listListingRevisionPackages(
    listListingRevisionPackagesRequest: requests.ListListingRevisionPackagesRequest
  ): Promise<responses.ListListingRevisionPackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#listListingRevisionPackages."
      );
    const operationName = "listListingRevisionPackages";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listListingRevisionPackagesRequest.compartmentId,
      "listingRevisionId": listListingRevisionPackagesRequest.listingRevisionId,
      "displayName": listListingRevisionPackagesRequest.displayName,
      "lifecycleState": listListingRevisionPackagesRequest.lifecycleState,
      "limit": listListingRevisionPackagesRequest.limit,
      "page": listListingRevisionPackagesRequest.page,
      "sortOrder": listListingRevisionPackagesRequest.sortOrder,
      "sortBy": listListingRevisionPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingRevisionPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingRevisionPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingRevisionPackagesResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionPackageCollection",
        bodyModel: model.ListingRevisionPackageCollection,
        type: "model.ListingRevisionPackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the list of listing revisions for a specific listing ID, compartment ID or listing revision status.
* <p>
You can specify your compartment's OCID as the value for the compartment ID.
* For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListListingRevisionsRequest
     * @return ListListingRevisionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListListingRevisions.ts.html |here} to see how to use ListListingRevisions API.
     */
  public async listListingRevisions(
    listListingRevisionsRequest: requests.ListListingRevisionsRequest
  ): Promise<responses.ListListingRevisionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listListingRevisions.");
    const operationName = "listListingRevisions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "listingId": listListingRevisionsRequest.listingId,
      "displayName": listListingRevisionsRequest.displayName,
      "lifecycleState": listListingRevisionsRequest.lifecycleState,
      "compartmentId": listListingRevisionsRequest.compartmentId,
      "listingRevisionStatus": listListingRevisionsRequest.listingRevisionStatus,
      "limit": listListingRevisionsRequest.limit,
      "page": listListingRevisionsRequest.page,
      "sortOrder": listListingRevisionsRequest.sortOrder,
      "sortBy": listListingRevisionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingRevisionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingRevisionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingRevisionsResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionCollection",
        bodyModel: model.ListingRevisionCollection,
        type: "model.ListingRevisionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the listings in your compartment. You must specify your compartment's OCID as the value for
   * the compartment ID.
   * For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListListingsRequest
   * @return ListListingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListListings.ts.html |here} to see how to use ListListings API.
   */
  public async listListings(
    listListingsRequest: requests.ListListingsRequest
  ): Promise<responses.ListListingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listListings.");
    const operationName = "listListings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listListingsRequest.compartmentId,
      "lifecycleState": listListingsRequest.lifecycleState,
      "name": listListingsRequest.name,
      "limit": listListingsRequest.limit,
      "page": listListingsRequest.page,
      "sortOrder": listListingsRequest.sortOrder,
      "sortBy": listListingsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingsResponse>{},
        body: await response.json(),
        bodyKey: "listingCollection",
        bodyModel: model.ListingCollection,
        type: "model.ListingCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the markets in your compartment. You must specify your compartment's OCID as the value for
   * the compartment ID.
   * For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMarketsRequest
   * @return ListMarketsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListMarkets.ts.html |here} to see how to use ListMarkets API.
   */
  public async listMarkets(
    listMarketsRequest: requests.ListMarketsRequest
  ): Promise<responses.ListMarketsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#listMarkets.");
    const operationName = "listMarkets";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listMarketsRequest.limit,
      "page": listMarketsRequest.page,
      "compartmentId": listMarketsRequest.compartmentId,
      "sortOrder": listMarketsRequest.sortOrder,
      "sortBy": listMarketsRequest.sortBy,
      "name": listMarketsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMarketsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMarketsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/markets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMarketsResponse>{},
        body: await response.json(),
        bodyKey: "marketCollection",
        bodyModel: model.MarketCollection,
        type: "model.MarketCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the products in your compartment. You must specify your compartment's OCID as the value for
   * the compartment ID.
   * For information about OCIDs, see Resource Identifiers (Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProductsRequest
   * @return ListProductsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListProducts.ts.html |here} to see how to use ListProducts API.
   */
  public async listProducts(
    listProductsRequest: requests.ListProductsRequest
  ): Promise<responses.ListProductsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listProducts.");
    const operationName = "listProducts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listProductsRequest.limit,
      "page": listProductsRequest.page,
      "compartmentId": listProductsRequest.compartmentId,
      "sortOrder": listProductsRequest.sortOrder,
      "sortBy": listProductsRequest.sortBy,
      "name": listProductsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProductsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProductsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/products",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProductsResponse>{},
        body: await response.json(),
        bodyKey: "productCollection",
        bodyModel: model.ProductCollection,
        type: "model.ProductCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of publishers.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPublishersRequest
   * @return ListPublishersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListPublishers.ts.html |here} to see how to use ListPublishers API.
   */
  public async listPublishers(
    listPublishersRequest: requests.ListPublishersRequest
  ): Promise<responses.ListPublishersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listPublishers.");
    const operationName = "listPublishers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listPublishersRequest.limit,
      "page": listPublishersRequest.page,
      "compartmentId": listPublishersRequest.compartmentId,
      "sortOrder": listPublishersRequest.sortOrder,
      "sortBy": listPublishersRequest.sortBy,
      "name": listPublishersRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublishersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublishersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publishers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublishersResponse>{},
        body: await response.json(),
        bodyKey: "publisherCollection",
        bodyModel: model.PublisherCollection,
        type: "model.PublisherCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of the publisher term versions.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTermVersionsRequest
   * @return ListTermVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListTermVersions.ts.html |here} to see how to use ListTermVersions API.
   */
  public async listTermVersions(
    listTermVersionsRequest: requests.ListTermVersionsRequest
  ): Promise<responses.ListTermVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listTermVersions.");
    const operationName = "listTermVersions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "termId": listTermVersionsRequest.termId,
      "compartmentId": listTermVersionsRequest.compartmentId,
      "limit": listTermVersionsRequest.limit,
      "page": listTermVersionsRequest.page,
      "sortOrder": listTermVersionsRequest.sortOrder,
      "sortBy": listTermVersionsRequest.sortBy,
      "displayName": listTermVersionsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTermVersionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTermVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTermVersionsResponse>{},
        body: await response.json(),
        bodyKey: "termVersionCollection",
        bodyModel: model.TermVersionCollection,
        type: "model.TermVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of the publisher terms.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTermsRequest
   * @return ListTermsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListTerms.ts.html |here} to see how to use ListTerms API.
   */
  public async listTerms(
    listTermsRequest: requests.ListTermsRequest
  ): Promise<responses.ListTermsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#listTerms.");
    const operationName = "listTerms";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listTermsRequest.limit,
      "page": listTermsRequest.page,
      "compartmentId": listTermsRequest.compartmentId,
      "sortOrder": listTermsRequest.sortOrder,
      "sortBy": listTermsRequest.sortBy,
      "name": listTermsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTermsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTermsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTermsResponse>{},
        body: await response.json(),
        bodyKey: "termCollection",
        bodyModel: model.TermCollection,
        type: "model.TermCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Mark the Listing Revision Package identified by the id and package version as default
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MarkListingRevisionPackageAsDefaultRequest
   * @return MarkListingRevisionPackageAsDefaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/MarkListingRevisionPackageAsDefault.ts.html |here} to see how to use MarkListingRevisionPackageAsDefault API.
   */
  public async markListingRevisionPackageAsDefault(
    markListingRevisionPackageAsDefaultRequest: requests.MarkListingRevisionPackageAsDefaultRequest
  ): Promise<responses.MarkListingRevisionPackageAsDefaultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#markListingRevisionPackageAsDefault."
      );
    const operationName = "markListingRevisionPackageAsDefault";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}":
        markListingRevisionPackageAsDefaultRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": markListingRevisionPackageAsDefaultRequest.ifMatch,
      "opc-request-id": markListingRevisionPackageAsDefaultRequest.opcRequestId,
      "opc-retry-token": markListingRevisionPackageAsDefaultRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      markListingRevisionPackageAsDefaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}/actions/markAsDefault",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MarkListingRevisionPackageAsDefaultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish the Listing revision identified by Identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PublishListingRevisionRequest
   * @return PublishListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/PublishListingRevision.ts.html |here} to see how to use PublishListingRevision API.
   */
  public async publishListingRevision(
    publishListingRevisionRequest: requests.PublishListingRevisionRequest
  ): Promise<responses.PublishListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#publishListingRevision.");
    const operationName = "publishListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": publishListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": publishListingRevisionRequest.ifMatch,
      "opc-request-id": publishListingRevisionRequest.opcRequestId,
      "opc-retry-token": publishListingRevisionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishListingRevisionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision to PublishAsPrivate
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PublishListingRevisionAsPrivateRequest
   * @return PublishListingRevisionAsPrivateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/PublishListingRevisionAsPrivate.ts.html |here} to see how to use PublishListingRevisionAsPrivate API.
   */
  public async publishListingRevisionAsPrivate(
    publishListingRevisionAsPrivateRequest: requests.PublishListingRevisionAsPrivateRequest
  ): Promise<responses.PublishListingRevisionAsPrivateResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#publishListingRevisionAsPrivate."
      );
    const operationName = "publishListingRevisionAsPrivate";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": publishListingRevisionAsPrivateRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": publishListingRevisionAsPrivateRequest.ifMatch,
      "opc-request-id": publishListingRevisionAsPrivateRequest.opcRequestId,
      "opc-retry-token": publishListingRevisionAsPrivateRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishListingRevisionAsPrivateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/publishAsPrivate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        publishListingRevisionAsPrivateRequest.publishListingRevisionAsPrivateDetails,
        "PublishListingRevisionAsPrivateDetails",
        model.PublishListingRevisionAsPrivateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishListingRevisionAsPrivateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision Package to publish status
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PublishListingRevisionPackageRequest
   * @return PublishListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/PublishListingRevisionPackage.ts.html |here} to see how to use PublishListingRevisionPackage API.
   */
  public async publishListingRevisionPackage(
    publishListingRevisionPackageRequest: requests.PublishListingRevisionPackageRequest
  ): Promise<responses.PublishListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#publishListingRevisionPackage."
      );
    const operationName = "publishListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}": publishListingRevisionPackageRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": publishListingRevisionPackageRequest.ifMatch,
      "opc-request-id": publishListingRevisionPackageRequest.opcRequestId,
      "opc-retry-token": publishListingRevisionPackageRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishListingRevisionPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the Listing Revision identified by the id for review
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SubmitListingRevisionForReviewRequest
   * @return SubmitListingRevisionForReviewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/SubmitListingRevisionForReview.ts.html |here} to see how to use SubmitListingRevisionForReview API.
   */
  public async submitListingRevisionForReview(
    submitListingRevisionForReviewRequest: requests.SubmitListingRevisionForReviewRequest
  ): Promise<responses.SubmitListingRevisionForReviewResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#submitListingRevisionForReview."
      );
    const operationName = "submitListingRevisionForReview";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": submitListingRevisionForReviewRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": submitListingRevisionForReviewRequest.ifMatch,
      "opc-request-id": submitListingRevisionForReviewRequest.opcRequestId,
      "opc-retry-token": submitListingRevisionForReviewRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      submitListingRevisionForReviewRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/submitForReview",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        submitListingRevisionForReviewRequest.submitListingRevisionForReviewDetails,
        "SubmitListingRevisionForReviewDetails",
        model.SubmitListingRevisionForReviewDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SubmitListingRevisionForReviewResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision Package to Unpublish status
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UnPublishListingRevisionPackageRequest
   * @return UnPublishListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UnPublishListingRevisionPackage.ts.html |here} to see how to use UnPublishListingRevisionPackage API.
   */
  public async unPublishListingRevisionPackage(
    unPublishListingRevisionPackageRequest: requests.UnPublishListingRevisionPackageRequest
  ): Promise<responses.UnPublishListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#unPublishListingRevisionPackage."
      );
    const operationName = "unPublishListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}": unPublishListingRevisionPackageRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unPublishListingRevisionPackageRequest.ifMatch,
      "opc-request-id": unPublishListingRevisionPackageRequest.opcRequestId,
      "opc-retry-token": unPublishListingRevisionPackageRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unPublishListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}/actions/unPublish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UnPublishListingRevisionPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified artifact identified by the id.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateArtifactRequest
   * @return UpdateArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateArtifact.ts.html |here} to see how to use UpdateArtifact API.
   */
  public async updateArtifact(
    updateArtifactRequest: requests.UpdateArtifactRequest
  ): Promise<responses.UpdateArtifactResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#updateArtifact.");
    const operationName = "updateArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{artifactId}": updateArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateArtifactRequest.ifMatch,
      "opc-request-id": updateArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts/{artifactId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateArtifactRequest.updateArtifactDetails,
        "UpdateArtifactDetails",
        model.UpdateArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Listing identified by the id.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRequest
   * @return UpdateListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListing.ts.html |here} to see how to use UpdateListing API.
   */
  public async updateListing(
    updateListingRequest: requests.UpdateListingRequest
  ): Promise<responses.UpdateListingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#updateListing.");
    const operationName = "updateListing";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingId}": updateListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateListingRequest.ifMatch,
      "opc-request-id": updateListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListingRequest.updateListingDetails,
        "UpdateListingDetails",
        model.UpdateListingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingResponse>{},
        body: await response.json(),
        bodyKey: "listing",
        bodyModel: model.Listing,
        type: "model.Listing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRevisionRequest
   * @return UpdateListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListingRevision.ts.html |here} to see how to use UpdateListingRevision API.
   */
  public async updateListingRevision(
    updateListingRevisionRequest: requests.UpdateListingRevisionRequest
  ): Promise<responses.UpdateListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#updateListingRevision.");
    const operationName = "updateListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": updateListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateListingRevisionRequest.ifMatch,
      "opc-request-id": updateListingRevisionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListingRevisionRequest.updateListingRevisionDetails,
        "UpdateListingRevisionDetails",
        model.UpdateListingRevisionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingRevisionResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision Attachment
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRevisionAttachmentRequest
   * @return UpdateListingRevisionAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListingRevisionAttachment.ts.html |here} to see how to use UpdateListingRevisionAttachment API.
   */
  public async updateListingRevisionAttachment(
    updateListingRevisionAttachmentRequest: requests.UpdateListingRevisionAttachmentRequest
  ): Promise<responses.UpdateListingRevisionAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#updateListingRevisionAttachment."
      );
    const operationName = "updateListingRevisionAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionAttachmentId}":
        updateListingRevisionAttachmentRequest.listingRevisionAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateListingRevisionAttachmentRequest.ifMatch,
      "opc-request-id": updateListingRevisionAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRevisionAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments/{listingRevisionAttachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListingRevisionAttachmentRequest.updateListingRevisionAttachmentDetails,
        "UpdateListingRevisionAttachmentDetails",
        model.UpdateListingRevisionAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingRevisionAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionAttachment",
        bodyModel: model.ListingRevisionAttachment,
        type: "model.ListingRevisionAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a file to listing revision attachment
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRevisionAttachmentContentRequest
   * @return UpdateListingRevisionAttachmentContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListingRevisionAttachmentContent.ts.html |here} to see how to use UpdateListingRevisionAttachmentContent API.
   */
  public async updateListingRevisionAttachmentContent(
    updateListingRevisionAttachmentContentRequest: requests.UpdateListingRevisionAttachmentContentRequest
  ): Promise<responses.UpdateListingRevisionAttachmentContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#updateListingRevisionAttachmentContent."
      );
    const operationName = "updateListingRevisionAttachmentContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionAttachmentId}":
        updateListingRevisionAttachmentContentRequest.listingRevisionAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateListingRevisionAttachmentContentRequest.ifMatch,
      "opc-request-id": updateListingRevisionAttachmentContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRevisionAttachmentContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionAttachments/{listingRevisionAttachmentId}/content",
      method: "PUT",
      bodyContent:
        updateListingRevisionAttachmentContentRequest.updateListingRevisionAttachmentContent,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingRevisionAttachmentContentResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionAttachment",
        bodyModel: model.ListingRevisionAttachment,
        type: "model.ListingRevisionAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRevisionIconContentRequest
   * @return UpdateListingRevisionIconContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListingRevisionIconContent.ts.html |here} to see how to use UpdateListingRevisionIconContent API.
   */
  public async updateListingRevisionIconContent(
    updateListingRevisionIconContentRequest: requests.UpdateListingRevisionIconContentRequest
  ): Promise<responses.UpdateListingRevisionIconContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#updateListingRevisionIconContent."
      );
    const operationName = "updateListingRevisionIconContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": updateListingRevisionIconContentRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateListingRevisionIconContentRequest.ifMatch,
      "opc-request-id": updateListingRevisionIconContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRevisionIconContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/icon/content",
      method: "PUT",
      bodyContent: updateListingRevisionIconContentRequest.updateListingRevisionIconContent,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingRevisionIconContentResponse>{},
        body: await response.json(),
        bodyKey: "listingRevision",
        bodyModel: model.ListingRevision,
        type: "model.ListingRevision",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Listing Revision Package.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateListingRevisionPackageRequest
   * @return UpdateListingRevisionPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateListingRevisionPackage.ts.html |here} to see how to use UpdateListingRevisionPackage API.
   */
  public async updateListingRevisionPackage(
    updateListingRevisionPackageRequest: requests.UpdateListingRevisionPackageRequest
  ): Promise<responses.UpdateListingRevisionPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplacePublisherClient#updateListingRevisionPackage."
      );
    const operationName = "updateListingRevisionPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionPackageId}": updateListingRevisionPackageRequest.listingRevisionPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateListingRevisionPackageRequest.ifMatch,
      "opc-request-id": updateListingRevisionPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListingRevisionPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisionPackages/{listingRevisionPackageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListingRevisionPackageRequest.updateListingRevisionPackageDetails,
        "UpdateListingRevisionPackageDetails",
        model.UpdateListingRevisionPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListingRevisionPackageResponse>{},
        body: await response.json(),
        bodyKey: "listingRevisionPackage",
        bodyModel: model.ListingRevisionPackage,
        type: "model.ListingRevisionPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Term
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTermRequest
   * @return UpdateTermResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateTerm.ts.html |here} to see how to use UpdateTerm API.
   */
  public async updateTerm(
    updateTermRequest: requests.UpdateTermRequest
  ): Promise<responses.UpdateTermResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplacePublisherClient#updateTerm.");
    const operationName = "updateTerm";
    const apiReferenceLink = "";
    const pathParams = {
      "{termId}": updateTermRequest.termId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTermRequest.ifMatch,
      "opc-request-id": updateTermRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTermRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terms/{termId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTermRequest.updateTermDetails,
        "UpdateTermDetails",
        model.UpdateTermDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTermResponse>{},
        body: await response.json(),
        bodyKey: "term",
        bodyModel: model.Term,
        type: "model.Term",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Term Version
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTermVersionRequest
   * @return UpdateTermVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateTermVersion.ts.html |here} to see how to use UpdateTermVersion API.
   */
  public async updateTermVersion(
    updateTermVersionRequest: requests.UpdateTermVersionRequest
  ): Promise<responses.UpdateTermVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#updateTermVersion.");
    const operationName = "updateTermVersion";
    const apiReferenceLink = "";
    const pathParams = {
      "{termVersionId}": updateTermVersionRequest.termVersionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTermVersionRequest.ifMatch,
      "opc-request-id": updateTermVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTermVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions/{termVersionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTermVersionRequest.updateTermVersionDetails,
        "UpdateTermVersionDetails",
        model.UpdateTermVersionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTermVersionResponse>{},
        body: await response.json(),
        bodyKey: "termVersion",
        bodyModel: model.TermVersion,
        type: "model.TermVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Term Version attachment
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTermVersionContentRequest
   * @return UpdateTermVersionContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateTermVersionContent.ts.html |here} to see how to use UpdateTermVersionContent API.
   */
  public async updateTermVersionContent(
    updateTermVersionContentRequest: requests.UpdateTermVersionContentRequest
  ): Promise<responses.UpdateTermVersionContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#updateTermVersionContent.");
    const operationName = "updateTermVersionContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{termVersionId}": updateTermVersionContentRequest.termVersionId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateTermVersionContentRequest.ifMatch,
      "opc-request-id": updateTermVersionContentRequest.opcRequestId,
      "display-name": updateTermVersionContentRequest.displayName
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTermVersionContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/termVersions/{termVersionId}/content",
      method: "PUT",
      bodyContent: updateTermVersionContentRequest.updateTermVersionContent,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTermVersionContentResponse>{},
        body: await response.json(),
        bodyKey: "termVersion",
        bodyModel: model.TermVersion,
        type: "model.TermVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validate and publish artifact.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ValidateAndPublishArtifactRequest
   * @return ValidateAndPublishArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ValidateAndPublishArtifact.ts.html |here} to see how to use ValidateAndPublishArtifact API.
   */
  public async validateAndPublishArtifact(
    validateAndPublishArtifactRequest: requests.ValidateAndPublishArtifactRequest
  ): Promise<responses.ValidateAndPublishArtifactResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#validateAndPublishArtifact.");
    const operationName = "validateAndPublishArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{artifactId}": validateAndPublishArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": validateAndPublishArtifactRequest.ifMatch,
      "opc-request-id": validateAndPublishArtifactRequest.opcRequestId,
      "opc-retry-token": validateAndPublishArtifactRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateAndPublishArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/artifacts/{artifactId}/actions/validateAndPublish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateAndPublishArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the Listing Revision identified by the id as Withdraw/UnPublished.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param WithdrawListingRevisionRequest
   * @return WithdrawListingRevisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/WithdrawListingRevision.ts.html |here} to see how to use WithdrawListingRevision API.
   */
  public async withdrawListingRevision(
    withdrawListingRevisionRequest: requests.WithdrawListingRevisionRequest
  ): Promise<responses.WithdrawListingRevisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplacePublisherClient#withdrawListingRevision.");
    const operationName = "withdrawListingRevision";
    const apiReferenceLink = "";
    const pathParams = {
      "{listingRevisionId}": withdrawListingRevisionRequest.listingRevisionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": withdrawListingRevisionRequest.ifMatch,
      "opc-request-id": withdrawListingRevisionRequest.opcRequestId,
      "opc-retry-token": withdrawListingRevisionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      withdrawListingRevisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listingRevisions/{listingRevisionId}/actions/withdraw",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.WithdrawListingRevisionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OfferApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OfferClient {
  protected static serviceEndpointTemplate =
    "https://marketplace-publisher.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OfferWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Offer";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("marketplacepublisher")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("marketplacepublisher");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`OfferClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OfferClient.serviceEndpointTemplate,
        this._region,
        OfferClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OfferClient.serviceEndpointTemplate,
        this._regionId,
        OfferClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OfferClient.serviceEndpointTemplate,
      region,
      OfferClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OfferClient.serviceEndpointTemplate,
      regionId,
      OfferClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OfferWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OfferWaiter {
    this._waiters = new OfferWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OfferWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Creates a new Offer.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOfferRequest
   * @return CreateOfferResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/CreateOffer.ts.html |here} to see how to use CreateOffer API.
   */
  public async createOffer(
    createOfferRequest: requests.CreateOfferRequest
  ): Promise<responses.CreateOfferResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#createOffer.");
    const operationName = "createOffer";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOfferRequest.opcRetryToken,
      "opc-request-id": createOfferRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOfferRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOfferRequest.createOfferDetails,
        "CreateOfferDetails",
        model.CreateOfferDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOfferResponse>{},
        body: await response.json(),
        bodyKey: "offer",
        bodyModel: model.Offer,
        type: "model.Offer",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an Offer resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOfferRequest
   * @return DeleteOfferResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/DeleteOffer.ts.html |here} to see how to use DeleteOffer API.
   */
  public async deleteOffer(
    deleteOfferRequest: requests.DeleteOfferRequest
  ): Promise<responses.DeleteOfferResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#deleteOffer.");
    const operationName = "deleteOffer";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": deleteOfferRequest.offerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOfferRequest.ifMatch,
      "opc-request-id": deleteOfferRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOfferRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOfferResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an Offer by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOfferRequest
   * @return GetOfferResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetOffer.ts.html |here} to see how to use GetOffer API.
   */
  public async getOffer(
    getOfferRequest: requests.GetOfferRequest
  ): Promise<responses.GetOfferResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#getOffer.");
    const operationName = "getOffer";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": getOfferRequest.offerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOfferRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOfferRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOfferResponse>{},
        body: await response.json(),
        bodyKey: "offer",
        bodyModel: model.Offer,
        type: "model.Offer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an Offer internal details by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOfferInternalDetailRequest
   * @return GetOfferInternalDetailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/GetOfferInternalDetail.ts.html |here} to see how to use GetOfferInternalDetail API.
   */
  public async getOfferInternalDetail(
    getOfferInternalDetailRequest: requests.GetOfferInternalDetailRequest
  ): Promise<responses.GetOfferInternalDetailResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#getOfferInternalDetail.");
    const operationName = "getOfferInternalDetail";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": getOfferInternalDetailRequest.offerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOfferInternalDetailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOfferInternalDetailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}/internalDetails",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOfferInternalDetailResponse>{},
        body: await response.json(),
        bodyKey: "offerInternalDetail",
        bodyModel: model.OfferInternalDetail,
        type: "model.OfferInternalDetail",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Offers. Requires either the BuyerCompartmentId or the SellerCompartmentId params. If neither or both are provided, then the API will return a 400.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOffersRequest
   * @return ListOffersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/ListOffers.ts.html |here} to see how to use ListOffers API.
   */
  public async listOffers(
    listOffersRequest: requests.ListOffersRequest
  ): Promise<responses.ListOffersResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#listOffers.");
    const operationName = "listOffers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "buyerCompartmentId": listOffersRequest.buyerCompartmentId,
      "sellerCompartmentId": listOffersRequest.sellerCompartmentId,
      "lifecycleState": listOffersRequest.lifecycleState,
      "displayName": listOffersRequest.displayName,
      "id": listOffersRequest.id,
      "limit": listOffersRequest.limit,
      "page": listOffersRequest.page,
      "sortOrder": listOffersRequest.sortOrder,
      "sortBy": listOffersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOffersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOffersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOffersResponse>{},
        body: await response.json(),
        bodyKey: "offerCollection",
        bodyModel: model.OfferCollection,
        type: "model.OfferCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Offer
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOfferRequest
   * @return UpdateOfferResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplacepublisher/UpdateOffer.ts.html |here} to see how to use UpdateOffer API.
   */
  public async updateOffer(
    updateOfferRequest: requests.UpdateOfferRequest
  ): Promise<responses.UpdateOfferResponse> {
    if (this.logger) this.logger.debug("Calling operation OfferClient#updateOffer.");
    const operationName = "updateOffer";
    const apiReferenceLink = "";
    const pathParams = {
      "{offerId}": updateOfferRequest.offerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOfferRequest.ifMatch,
      "opc-request-id": updateOfferRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOfferRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/offers/{offerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOfferRequest.updateOfferDetails,
        "UpdateOfferDetails",
        model.UpdateOfferDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOfferResponse>{},
        body: await response.json(),
        bodyKey: "offer",
        bodyModel: model.Offer,
        type: "model.Offer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
