/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20241201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { MarketplacePublisherClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class MarketplacePublisherWaiter {
  public constructor(
    private client: MarketplacePublisherClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forArtifact till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetArtifactResponse | null (null in case of 404 response)
   */
  public async forArtifact(
    request: serviceRequests.GetArtifactRequest,
    ...targetStates: models.Artifact.LifecycleState[]
  ): Promise<serviceResponses.GetArtifactResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getArtifact(request),
      response => targetStates.includes(response.artifact.lifecycleState!),
      targetStates.includes(models.Artifact.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCategory till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCategoryResponse
   */
  public async forCategory(
    request: serviceRequests.GetCategoryRequest,
    ...targetStates: models.Category.LifecycleState[]
  ): Promise<serviceResponses.GetCategoryResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getCategory(request),
      response => targetStates.includes(response.category.lifecycleState!)
    );
  }

  /**
   * Waits forLead till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetLeadResponse | null (null in case of 404 response)
   */
  public async forLead(
    request: serviceRequests.GetLeadRequest,
    ...targetStates: models.Lead.LifecycleState[]
  ): Promise<serviceResponses.GetLeadResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getLead(request),
      response => targetStates.includes(response.lead.lifecycleState!),
      targetStates.includes(models.Lead.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forListing till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetListingResponse | null (null in case of 404 response)
   */
  public async forListing(
    request: serviceRequests.GetListingRequest,
    ...targetStates: models.Listing.LifecycleState[]
  ): Promise<serviceResponses.GetListingResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getListing(request),
      response => targetStates.includes(response.listing.lifecycleState!),
      targetStates.includes(models.Listing.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forListingRevision till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetListingRevisionResponse | null (null in case of 404 response)
   */
  public async forListingRevision(
    request: serviceRequests.GetListingRevisionRequest,
    ...targetStates: models.ListingRevision.LifecycleState[]
  ): Promise<serviceResponses.GetListingRevisionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getListingRevision(request),
      response => targetStates.includes(response.listingRevision.lifecycleState!),
      targetStates.includes(models.ListingRevision.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forListingRevisionAttachment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetListingRevisionAttachmentResponse | null (null in case of 404 response)
   */
  public async forListingRevisionAttachment(
    request: serviceRequests.GetListingRevisionAttachmentRequest,
    ...targetStates: models.ListingRevisionAttachment.LifecycleState[]
  ): Promise<serviceResponses.GetListingRevisionAttachmentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getListingRevisionAttachment(request),
      response => targetStates.includes(response.listingRevisionAttachment.lifecycleState!),
      targetStates.includes(models.ListingRevisionAttachment.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forListingRevisionNote till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetListingRevisionNoteResponse | null (null in case of 404 response)
   */
  public async forListingRevisionNote(
    request: serviceRequests.GetListingRevisionNoteRequest,
    ...targetStates: models.ListingRevisionNote.LifecycleState[]
  ): Promise<serviceResponses.GetListingRevisionNoteResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getListingRevisionNote(request),
      response => targetStates.includes(response.listingRevisionNote.lifecycleState!),
      targetStates.includes(models.ListingRevisionNote.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forListingRevisionPackage till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetListingRevisionPackageResponse | null (null in case of 404 response)
   */
  public async forListingRevisionPackage(
    request: serviceRequests.GetListingRevisionPackageRequest,
    ...targetStates: models.ListingRevisionPackage.LifecycleState[]
  ): Promise<serviceResponses.GetListingRevisionPackageResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getListingRevisionPackage(request),
      response => targetStates.includes(response.listingRevisionPackage.lifecycleState!),
      targetStates.includes(models.ListingRevisionPackage.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMarket till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMarketResponse
   */
  public async forMarket(
    request: serviceRequests.GetMarketRequest,
    ...targetStates: models.Market.LifecycleState[]
  ): Promise<serviceResponses.GetMarketResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getMarket(request),
      response => targetStates.includes(response.market.lifecycleState!)
    );
  }

  /**
   * Waits forProduct till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProductResponse
   */
  public async forProduct(
    request: serviceRequests.GetProductRequest,
    ...targetStates: models.Product.LifecycleState[]
  ): Promise<serviceResponses.GetProductResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getProduct(request),
      response => targetStates.includes(response.product.lifecycleState!)
    );
  }

  /**
   * Waits forSupportDoc till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSupportDocResponse
   */
  public async forSupportDoc(
    request: serviceRequests.GetSupportDocRequest,
    ...targetStates: models.SupportDoc.LifecycleState[]
  ): Promise<serviceResponses.GetSupportDocResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getSupportDoc(request),
      response => targetStates.includes(response.supportDoc.lifecycleState!)
    );
  }

  /**
   * Waits forTerm till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTermResponse
   */
  public async forTerm(
    request: serviceRequests.GetTermRequest,
    ...targetStates: models.Term.LifecycleState[]
  ): Promise<serviceResponses.GetTermResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getTerm(request),
      response => targetStates.includes(response.term.lifecycleState!)
    );
  }

  /**
   * Waits forTermVersion till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTermVersionResponse
   */
  public async forTermVersion(
    request: serviceRequests.GetTermVersionRequest,
    ...targetStates: models.TermVersion.LifecycleState[]
  ): Promise<serviceResponses.GetTermVersionResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getTermVersion(request),
      response => targetStates.includes(response.termVersion.lifecycleState!)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
