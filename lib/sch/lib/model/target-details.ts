/**
 * Connector Hub API
 * Use the Connector Hub API to transfer data between services in Oracle Cloud Infrastructure.
For more information about Connector Hub, see
[the Connector Hub documentation](/iaas/Content/connector-hub/home.htm).
Connector Hub is formerly known as Service Connector Hub.

 * OpenAPI spec version: 20200909
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An object that represents the target of the flow defined by the connector.
 * An example target is a stream (Streaming service).
 * For more information about flows defined by connectors, see
 * [Overview of Connector Hub](https://docs.cloud.oracle.com/iaas/Content/connector-hub/overview.htm).
 * For configuration instructions, see
 * [Creating a Connector](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector.htm).
 *
 */
export interface TargetDetails {
  "kind": string;
}

export namespace TargetDetails {
  export function getJsonObj(obj: TargetDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "kind" in obj && obj.kind) {
      switch (obj.kind) {
        case "notifications":
          return model.NotificationsTargetDetails.getJsonObj(
            <model.NotificationsTargetDetails>(<object>jsonObj),
            true
          );
        case "objectStorage":
          return model.ObjectStorageTargetDetails.getJsonObj(
            <model.ObjectStorageTargetDetails>(<object>jsonObj),
            true
          );
        case "monitoring":
          return model.MonitoringTargetDetails.getJsonObj(
            <model.MonitoringTargetDetails>(<object>jsonObj),
            true
          );
        case "functions":
          return model.FunctionsTargetDetails.getJsonObj(
            <model.FunctionsTargetDetails>(<object>jsonObj),
            true
          );
        case "loggingAnalytics":
          return model.LoggingAnalyticsTargetDetails.getJsonObj(
            <model.LoggingAnalyticsTargetDetails>(<object>jsonObj),
            true
          );
        case "streaming":
          return model.StreamingTargetDetails.getJsonObj(
            <model.StreamingTargetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.kind}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: TargetDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "kind" in obj && obj.kind) {
      switch (obj.kind) {
        case "notifications":
          return model.NotificationsTargetDetails.getDeserializedJsonObj(
            <model.NotificationsTargetDetails>(<object>jsonObj),
            true
          );
        case "objectStorage":
          return model.ObjectStorageTargetDetails.getDeserializedJsonObj(
            <model.ObjectStorageTargetDetails>(<object>jsonObj),
            true
          );
        case "monitoring":
          return model.MonitoringTargetDetails.getDeserializedJsonObj(
            <model.MonitoringTargetDetails>(<object>jsonObj),
            true
          );
        case "functions":
          return model.FunctionsTargetDetails.getDeserializedJsonObj(
            <model.FunctionsTargetDetails>(<object>jsonObj),
            true
          );
        case "loggingAnalytics":
          return model.LoggingAnalyticsTargetDetails.getDeserializedJsonObj(
            <model.LoggingAnalyticsTargetDetails>(<object>jsonObj),
            true
          );
        case "streaming":
          return model.StreamingTargetDetails.getDeserializedJsonObj(
            <model.StreamingTargetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.kind}`);
      }
    }
    return jsonObj;
  }
}
