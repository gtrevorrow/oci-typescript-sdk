/**
 * Connector Hub API
 * Use the Connector Hub API to transfer data between services in Oracle Cloud Infrastructure.
For more information about Connector Hub, see
[the Connector Hub documentation](/iaas/Content/connector-hub/home.htm).
Connector Hub is formerly known as Service Connector Hub.

 * OpenAPI spec version: 20200909
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The destination function for data transferred from the source.
 * For configuration instructions, see
 * [Creating a Connector](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector.htm).
 *
 */
export interface FunctionsTargetDetails extends model.TargetDetails {
  /**
   * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function.
   *
   */
  "functionId": string;
  /**
   * The batch rollover size in kilobytes.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "batchSizeInKbs"?: number;
  /**
   * The batch rollover size in number of messages.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "batchSizeInNum"?: number;
  /**
   * The batch rollover time in seconds.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "batchTimeInSec"?: number;

  "kind": string;
}

export namespace FunctionsTargetDetails {
  export function getJsonObj(obj: FunctionsTargetDetails, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.TargetDetails.getJsonObj(obj) as FunctionsTargetDetails)),
      ...{}
    };

    return jsonObj;
  }
  export const kind = "functions";
  export function getDeserializedJsonObj(
    obj: FunctionsTargetDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.TargetDetails.getDeserializedJsonObj(obj) as FunctionsTargetDetails)),
      ...{}
    };

    return jsonObj;
  }
}
