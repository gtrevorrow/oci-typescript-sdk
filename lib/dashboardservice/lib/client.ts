/**
 * Dashboards API
 * Use the Oracle Cloud Infrastructure Dashboards service API to manage dashboards in the Console. 
Dashboards provide an organized and customizable view of resources and their metrics in the Console.
For more information, see [Dashboards](/Content/Dashboards/home.htm).

**Important:** Resources for the Dashboards service are created in the tenacy's home region.
Although it is possible to create dashboard and dashboard group resources in regions other than the home region,
you won't be able to view those resources in the Console.
Therefore, creating resources outside of the home region is not recommended.

 * OpenAPI spec version: 20210731
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DashboardWaiter } from "./dashboard-waiter";
import { DashboardGroupWaiter } from "./dashboardgroup-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DashboardApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DashboardClient {
  protected static serviceEndpointTemplate = "https://dashboard.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DashboardWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Dashboard";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dashboardservice")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dashboardservice");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210731";
    if (this.logger) this.logger.info(`DashboardClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DashboardClient.serviceEndpointTemplate,
        this._region,
        DashboardClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DashboardClient.serviceEndpointTemplate,
        this._regionId,
        DashboardClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DashboardClient.serviceEndpointTemplate,
      region,
      DashboardClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DashboardClient.serviceEndpointTemplate,
      regionId,
      DashboardClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DashboardWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DashboardWaiter {
    this._waiters = new DashboardWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DashboardWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a Dashboard resource from one dashboardGroup identifier to another. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDashboardGroupRequest
   * @return ChangeDashboardGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/ChangeDashboardGroup.ts.html |here} to see how to use ChangeDashboardGroup API.
   */
  public async changeDashboardGroup(
    changeDashboardGroupRequest: requests.ChangeDashboardGroupRequest
  ): Promise<responses.ChangeDashboardGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#changeDashboardGroup.");
    const operationName = "changeDashboardGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/Dashboard/ChangeDashboardGroup";
    const pathParams = {
      "{dashboardId}": changeDashboardGroupRequest.dashboardId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDashboardGroupRequest.ifMatch,
      "opc-request-id": changeDashboardGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDashboardGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards/{dashboardId}/actions/changeDashboardGroup",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDashboardGroupRequest.changeDashboardGroupDetails,
        "ChangeDashboardGroupDetails",
        model.ChangeDashboardGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDashboardGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new dashboard in the dashboard group's compartment using the details provided in request body.
   * <p>
   **Caution:** Resources for the Dashboard service are created in the tenacy's home region.
   * Although it is possible to create dashboard resource in regions other than the home region,
   * you won't be able to view those resources in the Console.
   * Therefore, creating resources outside of the home region is not recommended.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDashboardRequest
   * @return CreateDashboardResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/CreateDashboard.ts.html |here} to see how to use CreateDashboard API.
   */
  public async createDashboard(
    createDashboardRequest: requests.CreateDashboardRequest
  ): Promise<responses.CreateDashboardResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#createDashboard.");
    const operationName = "createDashboard";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/Dashboard/CreateDashboard";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDashboardRequest.opcRetryToken,
      "opc-request-id": createDashboardRequest.opcRequestId,
      "opc-cross-region": createDashboardRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDashboardRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDashboardRequest.createDashboardDetails,
        "CreateDashboardDetails",
        model.CreateDashboardDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDashboardResponse>{},
        body: await response.json(),
        bodyKey: "dashboard",
        bodyModel: model.Dashboard,
        type: "model.Dashboard",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified dashboard. Uses the dashboard's OCID to determine which dashboard to delete.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDashboardRequest
   * @return DeleteDashboardResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/DeleteDashboard.ts.html |here} to see how to use DeleteDashboard API.
   */
  public async deleteDashboard(
    deleteDashboardRequest: requests.DeleteDashboardRequest
  ): Promise<responses.DeleteDashboardResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#deleteDashboard.");
    const operationName = "deleteDashboard";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/Dashboard/DeleteDashboard";
    const pathParams = {
      "{dashboardId}": deleteDashboardRequest.dashboardId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDashboardRequest.ifMatch,
      "opc-request-id": deleteDashboardRequest.opcRequestId,
      "opc-cross-region": deleteDashboardRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDashboardRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards/{dashboardId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDashboardResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified dashboard's information. Uses the dashboard's OCID to determine which dashboard to retrieve.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDashboardRequest
   * @return GetDashboardResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/GetDashboard.ts.html |here} to see how to use GetDashboard API.
   */
  public async getDashboard(
    getDashboardRequest: requests.GetDashboardRequest
  ): Promise<responses.GetDashboardResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#getDashboard.");
    const operationName = "getDashboard";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/Dashboard/GetDashboard";
    const pathParams = {
      "{dashboardId}": getDashboardRequest.dashboardId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDashboardRequest.opcRequestId,
      "opc-cross-region": getDashboardRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDashboardRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards/{dashboardId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDashboardResponse>{},
        body: await response.json(),
        bodyKey: "dashboard",
        bodyModel: model.Dashboard,
        type: "model.Dashboard",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of dashboards with a specific dashboard group ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDashboardsRequest
   * @return ListDashboardsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/ListDashboards.ts.html |here} to see how to use ListDashboards API.
   */
  public async listDashboards(
    listDashboardsRequest: requests.ListDashboardsRequest
  ): Promise<responses.ListDashboardsResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#listDashboards.");
    const operationName = "listDashboards";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardCollection/ListDashboards";
    const pathParams = {};

    const queryParams = {
      "dashboardGroupId": listDashboardsRequest.dashboardGroupId,
      "lifecycleState": listDashboardsRequest.lifecycleState,
      "displayName": listDashboardsRequest.displayName,
      "id": listDashboardsRequest.id,
      "limit": listDashboardsRequest.limit,
      "page": listDashboardsRequest.page,
      "sortOrder": listDashboardsRequest.sortOrder,
      "sortBy": listDashboardsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDashboardsRequest.opcRequestId,
      "opc-cross-region": listDashboardsRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDashboardsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDashboardsResponse>{},
        body: await response.json(),
        bodyKey: "dashboardCollection",
        bodyModel: model.DashboardCollection,
        type: "model.DashboardCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified dashboard. Uses the dashboard's OCID to determine which dashboard to update.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDashboardRequest
   * @return UpdateDashboardResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/UpdateDashboard.ts.html |here} to see how to use UpdateDashboard API.
   */
  public async updateDashboard(
    updateDashboardRequest: requests.UpdateDashboardRequest
  ): Promise<responses.UpdateDashboardResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardClient#updateDashboard.");
    const operationName = "updateDashboard";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/Dashboard/UpdateDashboard";
    const pathParams = {
      "{dashboardId}": updateDashboardRequest.dashboardId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDashboardRequest.ifMatch,
      "opc-request-id": updateDashboardRequest.opcRequestId,
      "opc-cross-region": updateDashboardRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDashboardRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboards/{dashboardId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDashboardRequest.updateDashboardDetails,
        "UpdateDashboardDetails",
        model.UpdateDashboardDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDashboardResponse>{},
        body: await response.json(),
        bodyKey: "dashboard",
        bodyModel: model.Dashboard,
        type: "model.Dashboard",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum DashboardGroupApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DashboardGroupClient {
  protected static serviceEndpointTemplate = "https://dashboard.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DashboardGroupWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DashboardGroup";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dashboardservice")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dashboardservice");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210731";
    if (this.logger) this.logger.info(`DashboardGroupClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DashboardGroupClient.serviceEndpointTemplate,
        this._region,
        DashboardGroupClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DashboardGroupClient.serviceEndpointTemplate,
        this._regionId,
        DashboardGroupClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DashboardGroupClient.serviceEndpointTemplate,
      region,
      DashboardGroupClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DashboardGroupClient.serviceEndpointTemplate,
      regionId,
      DashboardGroupClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DashboardGroupWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DashboardGroupWaiter {
    this._waiters = new DashboardGroupWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DashboardGroupWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a DashboardGroup resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDashboardGroupCompartmentRequest
   * @return ChangeDashboardGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/ChangeDashboardGroupCompartment.ts.html |here} to see how to use ChangeDashboardGroupCompartment API.
   */
  public async changeDashboardGroupCompartment(
    changeDashboardGroupCompartmentRequest: requests.ChangeDashboardGroupCompartmentRequest
  ): Promise<responses.ChangeDashboardGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DashboardGroupClient#changeDashboardGroupCompartment.");
    const operationName = "changeDashboardGroupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroup/ChangeDashboardGroupCompartment";
    const pathParams = {
      "{dashboardGroupId}": changeDashboardGroupCompartmentRequest.dashboardGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDashboardGroupCompartmentRequest.ifMatch,
      "opc-request-id": changeDashboardGroupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDashboardGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups/{dashboardGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDashboardGroupCompartmentRequest.changeDashboardGroupCompartmentDetails,
        "ChangeDashboardGroupCompartmentDetails",
        model.ChangeDashboardGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDashboardGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new dashboard group using the details provided in request body.
   * <p>
   **Caution:** Resources for the Dashboard service are created in the tenacy's home region.
   * Although it is possible to create dashboard group resource in regions other than the home region,
   * you won't be able to view those resources in the Console.
   * Therefore, creating resources outside of the home region is not recommended.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDashboardGroupRequest
   * @return CreateDashboardGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/CreateDashboardGroup.ts.html |here} to see how to use CreateDashboardGroup API.
   */
  public async createDashboardGroup(
    createDashboardGroupRequest: requests.CreateDashboardGroupRequest
  ): Promise<responses.CreateDashboardGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DashboardGroupClient#createDashboardGroup.");
    const operationName = "createDashboardGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroup/CreateDashboardGroup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDashboardGroupRequest.opcRetryToken,
      "opc-request-id": createDashboardGroupRequest.opcRequestId,
      "opc-cross-region": createDashboardGroupRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDashboardGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDashboardGroupRequest.createDashboardGroupDetails,
        "CreateDashboardGroupDetails",
        model.CreateDashboardGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDashboardGroupResponse>{},
        body: await response.json(),
        bodyKey: "dashboardGroup",
        bodyModel: model.DashboardGroup,
        type: "model.DashboardGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified dashboard group. Uses the dashboard group's OCID to determine which dashboard group to delete.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDashboardGroupRequest
   * @return DeleteDashboardGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/DeleteDashboardGroup.ts.html |here} to see how to use DeleteDashboardGroup API.
   */
  public async deleteDashboardGroup(
    deleteDashboardGroupRequest: requests.DeleteDashboardGroupRequest
  ): Promise<responses.DeleteDashboardGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DashboardGroupClient#deleteDashboardGroup.");
    const operationName = "deleteDashboardGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroup/DeleteDashboardGroup";
    const pathParams = {
      "{dashboardGroupId}": deleteDashboardGroupRequest.dashboardGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDashboardGroupRequest.ifMatch,
      "opc-request-id": deleteDashboardGroupRequest.opcRequestId,
      "opc-cross-region": deleteDashboardGroupRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDashboardGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups/{dashboardGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDashboardGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified dashboard group's information. Uses the dashboard group's OCID to determine which dashboard to retrieve.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDashboardGroupRequest
   * @return GetDashboardGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/GetDashboardGroup.ts.html |here} to see how to use GetDashboardGroup API.
   */
  public async getDashboardGroup(
    getDashboardGroupRequest: requests.GetDashboardGroupRequest
  ): Promise<responses.GetDashboardGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation DashboardGroupClient#getDashboardGroup.");
    const operationName = "getDashboardGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroup/GetDashboardGroup";
    const pathParams = {
      "{dashboardGroupId}": getDashboardGroupRequest.dashboardGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDashboardGroupRequest.opcRequestId,
      "opc-cross-region": getDashboardGroupRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDashboardGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups/{dashboardGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDashboardGroupResponse>{},
        body: await response.json(),
        bodyKey: "dashboardGroup",
        bodyModel: model.DashboardGroup,
        type: "model.DashboardGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of dashboard groups with a specific compartment ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDashboardGroupsRequest
   * @return ListDashboardGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/ListDashboardGroups.ts.html |here} to see how to use ListDashboardGroups API.
   */
  public async listDashboardGroups(
    listDashboardGroupsRequest: requests.ListDashboardGroupsRequest
  ): Promise<responses.ListDashboardGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DashboardGroupClient#listDashboardGroups.");
    const operationName = "listDashboardGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroupCollection/ListDashboardGroups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDashboardGroupsRequest.compartmentId,
      "lifecycleState": listDashboardGroupsRequest.lifecycleState,
      "displayName": listDashboardGroupsRequest.displayName,
      "id": listDashboardGroupsRequest.id,
      "limit": listDashboardGroupsRequest.limit,
      "page": listDashboardGroupsRequest.page,
      "sortOrder": listDashboardGroupsRequest.sortOrder,
      "sortBy": listDashboardGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDashboardGroupsRequest.opcRequestId,
      "opc-cross-region": listDashboardGroupsRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDashboardGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDashboardGroupsResponse>{},
        body: await response.json(),
        bodyKey: "dashboardGroupCollection",
        bodyModel: model.DashboardGroupCollection,
        type: "model.DashboardGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified dashboard group. Uses the dashboard group's OCID to determine which dashboard group to update.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDashboardGroupRequest
   * @return UpdateDashboardGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dashboardservice/UpdateDashboardGroup.ts.html |here} to see how to use UpdateDashboardGroup API.
   */
  public async updateDashboardGroup(
    updateDashboardGroupRequest: requests.UpdateDashboardGroupRequest
  ): Promise<responses.UpdateDashboardGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DashboardGroupClient#updateDashboardGroup.");
    const operationName = "updateDashboardGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/dashboard/20210731/DashboardGroup/UpdateDashboardGroup";
    const pathParams = {
      "{dashboardGroupId}": updateDashboardGroupRequest.dashboardGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDashboardGroupRequest.ifMatch,
      "opc-request-id": updateDashboardGroupRequest.opcRequestId,
      "opc-cross-region": updateDashboardGroupRequest.opcCrossRegion
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDashboardGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dashboardGroups/{dashboardGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDashboardGroupRequest.updateDashboardGroupDetails,
        "UpdateDashboardGroupDetails",
        model.UpdateDashboardGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDashboardGroupResponse>{},
        body: await response.json(),
        bodyKey: "dashboardGroup",
        bodyModel: model.DashboardGroup,
        type: "model.DashboardGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
