/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
For more information, see [Data Catalog](https://docs.oracle.com/iaas/data-catalog/home.htm).

 * OpenAPI spec version: 20190325
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Lineage for an object.
 */
export interface ObjectLineage {
  /**
   * Object level at which the lineage is returned.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "level": number;
  /**
   * Direction of the lineage returned.
   */
  "direction": model.LineageDirection;
  /**
   * Set of objects that are involved in the lineage.
   */
  "objects"?: Array<model.LineageObject>;
  /**
   * Set of relationships between the objects in the 'objects' set.
   */
  "relationships"?: Array<model.LineageRelationship>;
  /**
   * A map of maps that contains additional information in explanation of the lineage returned. The map keys are
   * categories of information and the values are maps of annotation names to their corresponding values.
   * Every annotation is contained inside a category.
   * Example: {@code {\"annotations\": { \"category\": { \"key\": \"value\"}}}}
   *
   */
  "annotations"?: { [key: string]: { [key: string]: string } };
}

export namespace ObjectLineage {
  export function getJsonObj(obj: ObjectLineage): object {
    const jsonObj = {
      ...obj,
      ...{
        "objects": obj.objects
          ? obj.objects.map(item => {
              return model.LineageObject.getJsonObj(item);
            })
          : undefined,
        "relationships": obj.relationships
          ? obj.relationships.map(item => {
              return model.LineageRelationship.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ObjectLineage): object {
    const jsonObj = {
      ...obj,
      ...{
        "objects": obj.objects
          ? obj.objects.map(item => {
              return model.LineageObject.getDeserializedJsonObj(item);
            })
          : undefined,
        "relationships": obj.relationships
          ? obj.relationships.map(item => {
              return model.LineageRelationship.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
