/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Monitored Resource Credential Details.
 *
 */
export interface MonitoredResourceCredential {
  /**
   * The source type and source name combination, delimited with (.) separator.
   * {source type}.{source name} and source type max char limit is 63.
   *
   */
  "source"?: string;
  /**
   * The name of the credential, within the context of the source.
   */
  "name"?: string;
  /**
   * The type of the credential ( ex. JMXCreds,DBCreds).
   */
  "type"?: string;
  /**
   * The user-specified textual description of the credential.
   */
  "description"?: string;

  "credentialType": string;
}

export namespace MonitoredResourceCredential {
  export function getJsonObj(obj: MonitoredResourceCredential): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "credentialType" in obj && obj.credentialType) {
      switch (obj.credentialType) {
        case "EXISTING":
          return model.PreExistingCredentials.getJsonObj(
            <model.PreExistingCredentials>(<object>jsonObj),
            true
          );
        case "ENCRYPTED":
          return model.EncryptedCredentials.getJsonObj(
            <model.EncryptedCredentials>(<object>jsonObj),
            true
          );
        case "PLAINTEXT":
          return model.PlainTextCredentials.getJsonObj(
            <model.PlainTextCredentials>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.credentialType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MonitoredResourceCredential): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "credentialType" in obj && obj.credentialType) {
      switch (obj.credentialType) {
        case "EXISTING":
          return model.PreExistingCredentials.getDeserializedJsonObj(
            <model.PreExistingCredentials>(<object>jsonObj),
            true
          );
        case "ENCRYPTED":
          return model.EncryptedCredentials.getDeserializedJsonObj(
            <model.EncryptedCredentials>(<object>jsonObj),
            true
          );
        case "PLAINTEXT":
          return model.PlainTextCredentials.getDeserializedJsonObj(
            <model.PlainTextCredentials>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.credentialType}`);
      }
    }
    return jsonObj;
  }
}
