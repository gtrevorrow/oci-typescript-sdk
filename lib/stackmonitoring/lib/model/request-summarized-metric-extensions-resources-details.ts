/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Filtering criteria data to be specified in the request. Either metricExtensionId or compartmentId must be passed even when no other filter property is passed.
 */
export interface RequestSummarizedMetricExtensionsResourcesDetails {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of Metric Extension resource
   */
  "metricExtensionId"?: string;
  /**
   * Resource type to which Metric Extension applies
   */
  "resourceType"?: string;
  /**
   * Compartment Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)
   */
  "compartmentId"?: string;
  /**
   * Filter to return metric extensions based on input enable status i.e. Enabled/Disabled
   */
  "associationStatus"?: RequestSummarizedMetricExtensionsResourcesDetails.AssociationStatus;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of Monitored Resource
   */
  "resourceId"?: string;
  /**
   * The field to group by
   */
  "groupBy"?: RequestSummarizedMetricExtensionsResourcesDetails.GroupBy;
  /**
   * Result will ne sorted by this parameter value
   */
  "sortBy"?: RequestSummarizedMetricExtensionsResourcesDetails.SortBy;
  /**
   * Sort orders
   */
  "sortOrder"?: RequestSummarizedMetricExtensionsResourcesDetails.SortOrder;
}

export namespace RequestSummarizedMetricExtensionsResourcesDetails {
  export enum AssociationStatus {
    Enabled = "ENABLED",
    Disabled = "DISABLED"
  }

  export enum GroupBy {
    MetricExtensionId = "METRIC_EXTENSION_ID"
  }

  export enum SortBy {
    Count = "COUNT"
  }

  export enum SortOrder {
    Asc = "ASC",
    Desc = "DESC"
  }

  export function getJsonObj(obj: RequestSummarizedMetricExtensionsResourcesDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(
    obj: RequestSummarizedMetricExtensionsResourcesDetails
  ): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
