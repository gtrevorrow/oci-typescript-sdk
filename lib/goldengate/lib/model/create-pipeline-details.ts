/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details with which to create a pipeline.
 *
 */
export interface CreatePipelineDetails {
  /**
   * An object's Display Name.
   *
   */
  "displayName": string;
  /**
   * Metadata about this specific object.
   *
   */
  "description"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
   *
   */
  "compartmentId": string;
  /**
   * The Oracle license model that applies to a Deployment.
   *
   */
  "licenseModel": model.LicenseModel;
  /**
    * A simple key-value pair that is applied without any predefined name, type, or scope. Exists
* for cross-compatibility only.
* <p>
Example: {@code {\"bar-key\": \"value\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * Tags defined for this resource. Each key is predefined and scoped to a namespace.
* <p>
Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Locks associated with this resource.
   */
  "locks"?: Array<model.ResourceLock>;
  "sourceConnectionDetails": model.SourcePipelineConnectionDetails;
  "targetConnectionDetails": model.TargetPipelineConnectionDetails;

  "recipeType": string;
}

export namespace CreatePipelineDetails {
  export function getJsonObj(obj: CreatePipelineDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getJsonObj(item);
            })
          : undefined,
        "sourceConnectionDetails": obj.sourceConnectionDetails
          ? model.SourcePipelineConnectionDetails.getJsonObj(obj.sourceConnectionDetails)
          : undefined,
        "targetConnectionDetails": obj.targetConnectionDetails
          ? model.TargetPipelineConnectionDetails.getJsonObj(obj.targetConnectionDetails)
          : undefined
      }
    };

    if (obj && "recipeType" in obj && obj.recipeType) {
      switch (obj.recipeType) {
        case "ZERO_ETL":
          return model.CreateZeroEtlPipelineDetails.getJsonObj(
            <model.CreateZeroEtlPipelineDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.recipeType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreatePipelineDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getDeserializedJsonObj(item);
            })
          : undefined,
        "sourceConnectionDetails": obj.sourceConnectionDetails
          ? model.SourcePipelineConnectionDetails.getDeserializedJsonObj(
              obj.sourceConnectionDetails
            )
          : undefined,
        "targetConnectionDetails": obj.targetConnectionDetails
          ? model.TargetPipelineConnectionDetails.getDeserializedJsonObj(
              obj.targetConnectionDetails
            )
          : undefined
      }
    };

    if (obj && "recipeType" in obj && obj.recipeType) {
      switch (obj.recipeType) {
        case "ZERO_ETL":
          return model.CreateZeroEtlPipelineDetails.getDeserializedJsonObj(
            <model.CreateZeroEtlPipelineDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.recipeType}`);
      }
    }
    return jsonObj;
  }
}
