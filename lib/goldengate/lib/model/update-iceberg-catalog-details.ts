/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information to update a catalog of given type used in an Iceberg connection.
 *
 */
export interface UpdateIcebergCatalogDetails {
  "catalogType": string;
}

export namespace UpdateIcebergCatalogDetails {
  export function getJsonObj(obj: UpdateIcebergCatalogDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "catalogType" in obj && obj.catalogType) {
      switch (obj.catalogType) {
        case "REST":
          return model.UpdateRestIcebergCatalogDetails.getJsonObj(
            <model.UpdateRestIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "POLARIS":
          return model.UpdatePolarisIcebergCatalogDetails.getJsonObj(
            <model.UpdatePolarisIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "NESSIE":
          return model.UpdateNessieIcebergCatalogDetails.getJsonObj(
            <model.UpdateNessieIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "HADOOP":
          return model.UpdateHadoopIcebergCatalogDetails.getJsonObj(
            <model.UpdateHadoopIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "GLUE":
          return model.UpdateGlueIcebergCatalogDetails.getJsonObj(
            <model.UpdateGlueIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.catalogType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: UpdateIcebergCatalogDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "catalogType" in obj && obj.catalogType) {
      switch (obj.catalogType) {
        case "REST":
          return model.UpdateRestIcebergCatalogDetails.getDeserializedJsonObj(
            <model.UpdateRestIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "POLARIS":
          return model.UpdatePolarisIcebergCatalogDetails.getDeserializedJsonObj(
            <model.UpdatePolarisIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "NESSIE":
          return model.UpdateNessieIcebergCatalogDetails.getDeserializedJsonObj(
            <model.UpdateNessieIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "HADOOP":
          return model.UpdateHadoopIcebergCatalogDetails.getDeserializedJsonObj(
            <model.UpdateHadoopIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        case "GLUE":
          return model.UpdateGlueIcebergCatalogDetails.getDeserializedJsonObj(
            <model.UpdateGlueIcebergCatalogDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.catalogType}`);
      }
    }
    return jsonObj;
  }
}
