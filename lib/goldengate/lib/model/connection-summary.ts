/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of the Connection.
 *
 */
export interface ConnectionSummary {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the connection being
   * referenced.
   *
   */
  "id": string;
  /**
   * An object's Display Name.
   *
   */
  "displayName": string;
  /**
   * Metadata about this specific object.
   *
   */
  "description"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
   *
   */
  "compartmentId": string;
  /**
    * A simple key-value pair that is applied without any predefined name, type, or scope. Exists
* for cross-compatibility only.
* <p>
Example: {@code {\"bar-key\": \"value\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * Tags defined for this resource. Each key is predefined and scoped to a namespace.
* <p>
Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
    * The system tags associated with this resource, if any. The system tags are set by Oracle
* Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more
* information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {orcl-cloud: {free-tier-retain: true}}}
* 
    */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Possible lifecycle states for connection.
   *
   */
  "lifecycleState": string;
  /**
   * Describes the object's current state in detail. For example, it can be used to provide
   * actionable information for a resource in a Failed state.
   *
   */
  "lifecycleDetails"?: string;
  /**
   * The time the resource was created. The format is defined by
   * [RFC3339](https://tools.ietf.org/html/rfc3339), such as {@code 2016-08-25T21:10:29.600Z}.
   *
   */
  "timeCreated": Date;
  /**
   * The time the resource was last updated. The format is defined by
   * [RFC3339](https://tools.ietf.org/html/rfc3339), such as {@code 2016-08-25T21:10:29.600Z}.
   *
   */
  "timeUpdated": Date;
  /**
   * Refers to the customer's vault OCID.
   * If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate
   * to manage secrets contained within this vault.
   *
   */
  "vaultId"?: string;
  /**
   * Refers to the customer's master key OCID.
   * If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
   *
   */
  "keyId"?: string;
  /**
   * List of ingress IP addresses from where the GoldenGate deployment connects to this connection's privateIp.
   * Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
   *
   */
  "ingressIps"?: Array<model.IngressIpDetails>;
  /**
   * An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
   *
   */
  "nsgIds"?: Array<string>;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
   *
   */
  "subnetId"?: string;
  /**
   * Controls the network traffic direction to the target:
   * SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service's network to public hosts. Cannot be used for private targets.
   * SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment's private endpoint through the deployment's subnet.
   * DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
   *
   */
  "routingMethod"?: model.RoutingMethod;
  /**
   * Locks associated with this resource.
   */
  "locks"?: Array<model.ResourceLock>;
  /**
   * Indicates that sensitive attributes are provided via Secrets.
   *
   */
  "doesUseSecretIds"?: boolean;

  "connectionType": string;
}

export namespace ConnectionSummary {
  export function getJsonObj(obj: ConnectionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "ingressIps": obj.ingressIps
          ? obj.ingressIps.map(item => {
              return model.IngressIpDetails.getJsonObj(item);
            })
          : undefined,

        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "GOLDENGATE":
          return model.GoldenGateConnectionSummary.getJsonObj(
            <model.GoldenGateConnectionSummary>(<object>jsonObj),
            true
          );
        case "KAFKA_SCHEMA_REGISTRY":
          return model.KafkaSchemaRegistryConnectionSummary.getJsonObj(
            <model.KafkaSchemaRegistryConnectionSummary>(<object>jsonObj),
            true
          );
        case "JAVA_MESSAGE_SERVICE":
          return model.JavaMessageServiceConnectionSummary.getJsonObj(
            <model.JavaMessageServiceConnectionSummary>(<object>jsonObj),
            true
          );
        case "MICROSOFT_SQLSERVER":
          return model.MicrosoftSqlserverConnectionSummary.getJsonObj(
            <model.MicrosoftSqlserverConnectionSummary>(<object>jsonObj),
            true
          );
        case "ORACLE_NOSQL":
          return model.OracleNosqlConnectionSummary.getJsonObj(
            <model.OracleNosqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "ORACLE":
          return model.OracleConnectionSummary.getJsonObj(
            <model.OracleConnectionSummary>(<object>jsonObj),
            true
          );
        case "SNOWFLAKE":
          return model.SnowflakeConnectionSummary.getJsonObj(
            <model.SnowflakeConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_KINESIS":
          return model.AmazonKinesisConnectionSummary.getJsonObj(
            <model.AmazonKinesisConnectionSummary>(<object>jsonObj),
            true
          );
        case "REDIS":
          return model.RedisConnectionSummary.getJsonObj(
            <model.RedisConnectionSummary>(<object>jsonObj),
            true
          );
        case "OCI_OBJECT_STORAGE":
          return model.OciObjectStorageConnectionSummary.getJsonObj(
            <model.OciObjectStorageConnectionSummary>(<object>jsonObj),
            true
          );
        case "AZURE_DATA_LAKE_STORAGE":
          return model.AzureDataLakeStorageConnectionSummary.getJsonObj(
            <model.AzureDataLakeStorageConnectionSummary>(<object>jsonObj),
            true
          );
        case "AZURE_SYNAPSE_ANALYTICS":
          return model.AzureSynapseConnectionSummary.getJsonObj(
            <model.AzureSynapseConnectionSummary>(<object>jsonObj),
            true
          );
        case "MONGODB":
          return model.MongoDbConnectionSummary.getJsonObj(
            <model.MongoDbConnectionSummary>(<object>jsonObj),
            true
          );
        case "GOOGLE_BIGQUERY":
          return model.GoogleBigQueryConnectionSummary.getJsonObj(
            <model.GoogleBigQueryConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_S3":
          return model.AmazonS3ConnectionSummary.getJsonObj(
            <model.AmazonS3ConnectionSummary>(<object>jsonObj),
            true
          );
        case "POSTGRESQL":
          return model.PostgresqlConnectionSummary.getJsonObj(
            <model.PostgresqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.MysqlConnectionSummary.getJsonObj(
            <model.MysqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "GENERIC":
          return model.GenericConnectionSummary.getJsonObj(
            <model.GenericConnectionSummary>(<object>jsonObj),
            true
          );
        case "KAFKA":
          return model.KafkaConnectionSummary.getJsonObj(
            <model.KafkaConnectionSummary>(<object>jsonObj),
            true
          );
        case "ELASTICSEARCH":
          return model.ElasticsearchConnectionSummary.getJsonObj(
            <model.ElasticsearchConnectionSummary>(<object>jsonObj),
            true
          );
        case "DB2":
          return model.Db2ConnectionSummary.getJsonObj(
            <model.Db2ConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_REDSHIFT":
          return model.AmazonRedshiftConnectionSummary.getJsonObj(
            <model.AmazonRedshiftConnectionSummary>(<object>jsonObj),
            true
          );
        case "HDFS":
          return model.HdfsConnectionSummary.getJsonObj(
            <model.HdfsConnectionSummary>(<object>jsonObj),
            true
          );
        case "GOOGLE_CLOUD_STORAGE":
          return model.GoogleCloudStorageConnectionSummary.getJsonObj(
            <model.GoogleCloudStorageConnectionSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ConnectionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "ingressIps": obj.ingressIps
          ? obj.ingressIps.map(item => {
              return model.IngressIpDetails.getDeserializedJsonObj(item);
            })
          : undefined,

        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "GOLDENGATE":
          return model.GoldenGateConnectionSummary.getDeserializedJsonObj(
            <model.GoldenGateConnectionSummary>(<object>jsonObj),
            true
          );
        case "KAFKA_SCHEMA_REGISTRY":
          return model.KafkaSchemaRegistryConnectionSummary.getDeserializedJsonObj(
            <model.KafkaSchemaRegistryConnectionSummary>(<object>jsonObj),
            true
          );
        case "JAVA_MESSAGE_SERVICE":
          return model.JavaMessageServiceConnectionSummary.getDeserializedJsonObj(
            <model.JavaMessageServiceConnectionSummary>(<object>jsonObj),
            true
          );
        case "MICROSOFT_SQLSERVER":
          return model.MicrosoftSqlserverConnectionSummary.getDeserializedJsonObj(
            <model.MicrosoftSqlserverConnectionSummary>(<object>jsonObj),
            true
          );
        case "ORACLE_NOSQL":
          return model.OracleNosqlConnectionSummary.getDeserializedJsonObj(
            <model.OracleNosqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "ORACLE":
          return model.OracleConnectionSummary.getDeserializedJsonObj(
            <model.OracleConnectionSummary>(<object>jsonObj),
            true
          );
        case "SNOWFLAKE":
          return model.SnowflakeConnectionSummary.getDeserializedJsonObj(
            <model.SnowflakeConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_KINESIS":
          return model.AmazonKinesisConnectionSummary.getDeserializedJsonObj(
            <model.AmazonKinesisConnectionSummary>(<object>jsonObj),
            true
          );
        case "REDIS":
          return model.RedisConnectionSummary.getDeserializedJsonObj(
            <model.RedisConnectionSummary>(<object>jsonObj),
            true
          );
        case "OCI_OBJECT_STORAGE":
          return model.OciObjectStorageConnectionSummary.getDeserializedJsonObj(
            <model.OciObjectStorageConnectionSummary>(<object>jsonObj),
            true
          );
        case "AZURE_DATA_LAKE_STORAGE":
          return model.AzureDataLakeStorageConnectionSummary.getDeserializedJsonObj(
            <model.AzureDataLakeStorageConnectionSummary>(<object>jsonObj),
            true
          );
        case "AZURE_SYNAPSE_ANALYTICS":
          return model.AzureSynapseConnectionSummary.getDeserializedJsonObj(
            <model.AzureSynapseConnectionSummary>(<object>jsonObj),
            true
          );
        case "MONGODB":
          return model.MongoDbConnectionSummary.getDeserializedJsonObj(
            <model.MongoDbConnectionSummary>(<object>jsonObj),
            true
          );
        case "GOOGLE_BIGQUERY":
          return model.GoogleBigQueryConnectionSummary.getDeserializedJsonObj(
            <model.GoogleBigQueryConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_S3":
          return model.AmazonS3ConnectionSummary.getDeserializedJsonObj(
            <model.AmazonS3ConnectionSummary>(<object>jsonObj),
            true
          );
        case "POSTGRESQL":
          return model.PostgresqlConnectionSummary.getDeserializedJsonObj(
            <model.PostgresqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.MysqlConnectionSummary.getDeserializedJsonObj(
            <model.MysqlConnectionSummary>(<object>jsonObj),
            true
          );
        case "GENERIC":
          return model.GenericConnectionSummary.getDeserializedJsonObj(
            <model.GenericConnectionSummary>(<object>jsonObj),
            true
          );
        case "KAFKA":
          return model.KafkaConnectionSummary.getDeserializedJsonObj(
            <model.KafkaConnectionSummary>(<object>jsonObj),
            true
          );
        case "ELASTICSEARCH":
          return model.ElasticsearchConnectionSummary.getDeserializedJsonObj(
            <model.ElasticsearchConnectionSummary>(<object>jsonObj),
            true
          );
        case "DB2":
          return model.Db2ConnectionSummary.getDeserializedJsonObj(
            <model.Db2ConnectionSummary>(<object>jsonObj),
            true
          );
        case "AMAZON_REDSHIFT":
          return model.AmazonRedshiftConnectionSummary.getDeserializedJsonObj(
            <model.AmazonRedshiftConnectionSummary>(<object>jsonObj),
            true
          );
        case "HDFS":
          return model.HdfsConnectionSummary.getDeserializedJsonObj(
            <model.HdfsConnectionSummary>(<object>jsonObj),
            true
          );
        case "GOOGLE_CLOUD_STORAGE":
          return model.GoogleCloudStorageConnectionSummary.getDeserializedJsonObj(
            <model.GoogleCloudStorageConnectionSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
      }
    }
    return jsonObj;
  }
}
