/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Represents the metadata of a Elasticsearch Connection.
 *
 */
export interface ElasticsearchConnection extends model.Connection {
  /**
   * The Elasticsearch technology type.
   */
  "technologyType": ElasticsearchConnection.TechnologyType;
  /**
   * Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.
   * If port is not specified, it defaults to 9200.
   * Used for establishing the initial connection to the Elasticsearch cluster.
   * Example: {@code \"server1.example.com:4000,server2.example.com:4000\"}
   *
   */
  "servers": string;
  /**
   * Security protocol for Elasticsearch
   */
  "securityProtocol": ElasticsearchConnection.SecurityProtocol;
  /**
   * Authentication type for Elasticsearch.
   */
  "authenticationType": ElasticsearchConnection.AuthenticationType;
  /**
   * The username Oracle GoldenGate uses to connect the associated system of the given technology.
   * This username must already exist and be available by the system/application to be connected to
   * and must conform to the case sensitivty requirments defined in it.
   *
   */
  "username"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored.
   * The password Oracle GoldenGate uses to connect the associated system of the given technology.
   * It must conform to the specific security requirements including length, case sensitivity, and so on.
   * If secretId is used plaintext field must not be provided.
   * Note: When provided, 'password' field must not be provided.
   *
   */
  "passwordSecretId"?: string;

  "connectionType": string;
}

export namespace ElasticsearchConnection {
  export enum TechnologyType {
    Elasticsearch = "ELASTICSEARCH",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum SecurityProtocol {
    Plain = "PLAIN",
    Tls = "TLS",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AuthenticationType {
    None = "NONE",
    Basic = "BASIC",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ElasticsearchConnection, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Connection.getJsonObj(obj) as ElasticsearchConnection)),
      ...{}
    };

    return jsonObj;
  }
  export const connectionType = "ELASTICSEARCH";
  export function getDeserializedJsonObj(
    obj: ElasticsearchConnection,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.Connection.getDeserializedJsonObj(obj) as ElasticsearchConnection)),
      ...{}
    };

    return jsonObj;
  }
}
