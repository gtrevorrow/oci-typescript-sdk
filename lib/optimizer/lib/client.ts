/**
 * Cloud Advisor API
 * Use the Cloud Advisor API to find potential inefficiencies in your tenancy and address them.
Cloud Advisor can help you save money, improve performance, strengthen system resilience, and improve security.
For more information, see [Cloud Advisor](https://docs.oracle.com/iaas/Content/CloudAdvisor/Concepts/cloudadvisoroverview.htm).

 * OpenAPI spec version: 20200606
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { OptimizerWaiter } from "./optimizer-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OptimizerApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OptimizerClient {
  protected static serviceEndpointTemplate = "https://optimizer.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OptimizerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Optimizer";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("optimizer")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("optimizer");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200606";
    if (this.logger) this.logger.info(`OptimizerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OptimizerClient.serviceEndpointTemplate,
        this._region,
        OptimizerClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OptimizerClient.serviceEndpointTemplate,
        this._regionId,
        OptimizerClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OptimizerClient.serviceEndpointTemplate,
      region,
      OptimizerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OptimizerClient.serviceEndpointTemplate,
      regionId,
      OptimizerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OptimizerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OptimizerWaiter {
    this._waiters = new OptimizerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OptimizerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Applies the specified recommendations to the resources.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkApplyRecommendationsRequest
   * @return BulkApplyRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/BulkApplyRecommendations.ts.html |here} to see how to use BulkApplyRecommendations API.
   */
  public async bulkApplyRecommendations(
    bulkApplyRecommendationsRequest: requests.BulkApplyRecommendationsRequest
  ): Promise<responses.BulkApplyRecommendationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OptimizerClient#bulkApplyRecommendations.");
    const operationName = "bulkApplyRecommendations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Recommendation/BulkApplyRecommendations";
    const pathParams = {
      "{recommendationId}": bulkApplyRecommendationsRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkApplyRecommendationsRequest.opcRequestId,
      "opc-retry-token": bulkApplyRecommendationsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkApplyRecommendationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}/actions/bulkApplyRecommendations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkApplyRecommendationsRequest.bulkApplyRecommendationsDetails,
        "BulkApplyRecommendationsDetails",
        model.BulkApplyRecommendationsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkApplyRecommendationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new profile.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProfileRequest
   * @return CreateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/CreateProfile.ts.html |here} to see how to use CreateProfile API.
   */
  public async createProfile(
    createProfileRequest: requests.CreateProfileRequest
  ): Promise<responses.CreateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#createProfile.");
    const operationName = "createProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Profile/CreateProfile";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProfileRequest.opcRequestId,
      "opc-retry-token": createProfileRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProfileRequest.createProfileDetails,
        "CreateProfileDetails",
        model.CreateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified profile. Uses the profile's OCID to determine which profile to delete.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProfileRequest
   * @return DeleteProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/DeleteProfile.ts.html |here} to see how to use DeleteProfile API.
   */
  public async deleteProfile(
    deleteProfileRequest: requests.DeleteProfileRequest
  ): Promise<responses.DeleteProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#deleteProfile.");
    const operationName = "deleteProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Profile/DeleteProfile";
    const pathParams = {
      "{profileId}": deleteProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProfileRequest.ifMatch,
      "opc-request-id": deleteProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProfileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Queries the Cloud Advisor resource actions that are supported.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param FilterResourceActionsRequest
   * @return FilterResourceActionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/FilterResourceActions.ts.html |here} to see how to use FilterResourceActions API.
   */
  public async filterResourceActions(
    filterResourceActionsRequest: requests.FilterResourceActionsRequest
  ): Promise<responses.FilterResourceActionsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#filterResourceActions.");
    const operationName = "filterResourceActions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ResourceActionSummary/FilterResourceActions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": filterResourceActionsRequest.compartmentId,
      "compartmentIdInSubtree": filterResourceActionsRequest.compartmentIdInSubtree,
      "recommendationId": filterResourceActionsRequest.recommendationId,
      "recommendationName": filterResourceActionsRequest.recommendationName,
      "childTenancyIds": filterResourceActionsRequest.childTenancyIds,
      "includeOrganization": filterResourceActionsRequest.includeOrganization,
      "includeResourceMetadata": filterResourceActionsRequest.includeResourceMetadata,
      "limit": filterResourceActionsRequest.limit,
      "page": filterResourceActionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": filterResourceActionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      filterResourceActionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/filterResourceActions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        filterResourceActionsRequest.queryDetails,
        "QueryDetails",
        model.QueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.FilterResourceActionsResponse>{},
        body: await response.json(),
        bodyKey: "resourceActionCollection",
        bodyModel: model.ResourceActionCollection,
        type: "model.ResourceActionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the category that corresponds to the specified OCID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCategoryRequest
   * @return GetCategoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetCategory.ts.html |here} to see how to use GetCategory API.
   */
  public async getCategory(
    getCategoryRequest: requests.GetCategoryRequest
  ): Promise<responses.GetCategoryResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getCategory.");
    const operationName = "getCategory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Category/GetCategory";
    const pathParams = {
      "{categoryId}": getCategoryRequest.categoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCategoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCategoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories/{categoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCategoryResponse>{},
        body: await response.json(),
        bodyKey: "category",
        bodyModel: model.Category,
        type: "model.Category",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Cloud Advisor enrollment status.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetEnrollmentStatusRequest
   * @return GetEnrollmentStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetEnrollmentStatus.ts.html |here} to see how to use GetEnrollmentStatus API.
   */
  public async getEnrollmentStatus(
    getEnrollmentStatusRequest: requests.GetEnrollmentStatusRequest
  ): Promise<responses.GetEnrollmentStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getEnrollmentStatus.");
    const operationName = "getEnrollmentStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/EnrollmentStatus/GetEnrollmentStatus";
    const pathParams = {
      "{enrollmentStatusId}": getEnrollmentStatusRequest.enrollmentStatusId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEnrollmentStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEnrollmentStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus/{enrollmentStatusId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEnrollmentStatusResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatus",
        bodyModel: model.EnrollmentStatus,
        type: "model.EnrollmentStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified profile's information. Uses the profile's OCID to determine which profile to retrieve.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProfileRequest
   * @return GetProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetProfile.ts.html |here} to see how to use GetProfile API.
   */
  public async getProfile(
    getProfileRequest: requests.GetProfileRequest
  ): Promise<responses.GetProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getProfile.");
    const operationName = "getProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Profile/GetProfile";
    const pathParams = {
      "{profileId}": getProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the recommendation for the specified OCID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRecommendationRequest
   * @return GetRecommendationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetRecommendation.ts.html |here} to see how to use GetRecommendation API.
   */
  public async getRecommendation(
    getRecommendationRequest: requests.GetRecommendationRequest
  ): Promise<responses.GetRecommendationResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getRecommendation.");
    const operationName = "getRecommendation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Recommendation/GetRecommendation";
    const pathParams = {
      "{recommendationId}": getRecommendationRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRecommendationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRecommendationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRecommendationResponse>{},
        body: await response.json(),
        bodyKey: "recommendation",
        bodyModel: model.Recommendation,
        type: "model.Recommendation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the resource action that corresponds to the specified OCID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetResourceActionRequest
   * @return GetResourceActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetResourceAction.ts.html |here} to see how to use GetResourceAction API.
   */
  public async getResourceAction(
    getResourceActionRequest: requests.GetResourceActionRequest
  ): Promise<responses.GetResourceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getResourceAction.");
    const operationName = "getResourceAction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ResourceAction/GetResourceAction";
    const pathParams = {
      "{resourceActionId}": getResourceActionRequest.resourceActionId
    };

    const queryParams = {
      "includeResourceMetadata": getResourceActionRequest.includeResourceMetadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResourceActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResourceActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions/{resourceActionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResourceActionResponse>{},
        body: await response.json(),
        bodyKey: "resourceAction",
        bodyModel: model.ResourceAction,
        type: "model.ResourceAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request associated with the specified ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the supported Cloud Advisor categories.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCategoriesRequest
   * @return ListCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListCategories.ts.html |here} to see how to use ListCategories API.
   */
  public async listCategories(
    listCategoriesRequest: requests.ListCategoriesRequest
  ): Promise<responses.ListCategoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listCategories.");
    const operationName = "listCategories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/CategorySummary/ListCategories";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCategoriesRequest.compartmentId,
      "compartmentIdInSubtree": listCategoriesRequest.compartmentIdInSubtree,
      "childTenancyIds": listCategoriesRequest.childTenancyIds,
      "includeOrganization": listCategoriesRequest.includeOrganization,
      "name": listCategoriesRequest.name,
      "limit": listCategoriesRequest.limit,
      "page": listCategoriesRequest.page,
      "sortOrder": listCategoriesRequest.sortOrder,
      "sortBy": listCategoriesRequest.sortBy,
      "lifecycleState": listCategoriesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "categoryCollection",
        bodyModel: model.CategoryCollection,
        type: "model.CategoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor enrollment statuses.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListEnrollmentStatusesRequest
   * @return ListEnrollmentStatusesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListEnrollmentStatuses.ts.html |here} to see how to use ListEnrollmentStatuses API.
   */
  public async listEnrollmentStatuses(
    listEnrollmentStatusesRequest: requests.ListEnrollmentStatusesRequest
  ): Promise<responses.ListEnrollmentStatusesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listEnrollmentStatuses.");
    const operationName = "listEnrollmentStatuses";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/EnrollmentStatusSummary/ListEnrollmentStatuses";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEnrollmentStatusesRequest.compartmentId,
      "limit": listEnrollmentStatusesRequest.limit,
      "page": listEnrollmentStatusesRequest.page,
      "sortOrder": listEnrollmentStatusesRequest.sortOrder,
      "sortBy": listEnrollmentStatusesRequest.sortBy,
      "lifecycleState": listEnrollmentStatusesRequest.lifecycleState,
      "status": listEnrollmentStatusesRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEnrollmentStatusesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEnrollmentStatusesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEnrollmentStatusesResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatusCollection",
        bodyModel: model.EnrollmentStatusCollection,
        type: "model.EnrollmentStatusCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists changes to the recommendations based on user activity.
   * For example, lists when recommendations have been implemented, dismissed, postponed, or reactivated.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListHistoriesRequest
   * @return ListHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListHistories.ts.html |here} to see how to use ListHistories API.
   */
  public async listHistories(
    listHistoriesRequest: requests.ListHistoriesRequest
  ): Promise<responses.ListHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listHistories.");
    const operationName = "listHistories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/HistorySummary/ListHistories";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listHistoriesRequest.compartmentId,
      "compartmentIdInSubtree": listHistoriesRequest.compartmentIdInSubtree,
      "name": listHistoriesRequest.name,
      "recommendationName": listHistoriesRequest.recommendationName,
      "recommendationId": listHistoriesRequest.recommendationId,
      "resourceType": listHistoriesRequest.resourceType,
      "limit": listHistoriesRequest.limit,
      "page": listHistoriesRequest.page,
      "sortOrder": listHistoriesRequest.sortOrder,
      "sortBy": listHistoriesRequest.sortBy,
      "lifecycleState": listHistoriesRequest.lifecycleState,
      "status": listHistoriesRequest.status,
      "includeResourceMetadata": listHistoriesRequest.includeResourceMetadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listHistoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listHistoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/histories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "historyCollection",
        bodyModel: model.HistoryCollection,
        type: "model.HistoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the existing profile levels.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProfileLevelsRequest
   * @return ListProfileLevelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListProfileLevels.ts.html |here} to see how to use ListProfileLevels API.
   */
  public async listProfileLevels(
    listProfileLevelsRequest: requests.ListProfileLevelsRequest
  ): Promise<responses.ListProfileLevelsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listProfileLevels.");
    const operationName = "listProfileLevels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ProfileLevelSummary/ListProfileLevels";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProfileLevelsRequest.compartmentId,
      "compartmentIdInSubtree": listProfileLevelsRequest.compartmentIdInSubtree,
      "name": listProfileLevelsRequest.name,
      "recommendationName": listProfileLevelsRequest.recommendationName,
      "limit": listProfileLevelsRequest.limit,
      "page": listProfileLevelsRequest.page,
      "sortOrder": listProfileLevelsRequest.sortOrder,
      "sortBy": listProfileLevelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfileLevelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProfileLevelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profileLevels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfileLevelsResponse>{},
        body: await response.json(),
        bodyKey: "profileLevelCollection",
        bodyModel: model.ProfileLevelCollection,
        type: "model.ProfileLevelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the existing profiles.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProfilesRequest
   * @return ListProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListProfiles.ts.html |here} to see how to use ListProfiles API.
   */
  public async listProfiles(
    listProfilesRequest: requests.ListProfilesRequest
  ): Promise<responses.ListProfilesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listProfiles.");
    const operationName = "listProfiles";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ProfileSummary/ListProfiles";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProfilesRequest.compartmentId,
      "name": listProfilesRequest.name,
      "limit": listProfilesRequest.limit,
      "page": listProfilesRequest.page,
      "sortOrder": listProfilesRequest.sortOrder,
      "sortBy": listProfilesRequest.sortBy,
      "lifecycleState": listProfilesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfilesResponse>{},
        body: await response.json(),
        bodyKey: "profileCollection",
        bodyModel: model.ProfileCollection,
        type: "model.ProfileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the existing strategies.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRecommendationStrategiesRequest
   * @return ListRecommendationStrategiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListRecommendationStrategies.ts.html |here} to see how to use ListRecommendationStrategies API.
   */
  public async listRecommendationStrategies(
    listRecommendationStrategiesRequest: requests.ListRecommendationStrategiesRequest
  ): Promise<responses.ListRecommendationStrategiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OptimizerClient#listRecommendationStrategies.");
    const operationName = "listRecommendationStrategies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/RecommendationStrategySummary/ListRecommendationStrategies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecommendationStrategiesRequest.compartmentId,
      "compartmentIdInSubtree": listRecommendationStrategiesRequest.compartmentIdInSubtree,
      "name": listRecommendationStrategiesRequest.name,
      "recommendationName": listRecommendationStrategiesRequest.recommendationName,
      "limit": listRecommendationStrategiesRequest.limit,
      "page": listRecommendationStrategiesRequest.page,
      "sortOrder": listRecommendationStrategiesRequest.sortOrder,
      "sortBy": listRecommendationStrategiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecommendationStrategiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecommendationStrategiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendationStrategies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecommendationStrategiesResponse>{},
        body: await response.json(),
        bodyKey: "recommendationStrategyCollection",
        bodyModel: model.RecommendationStrategyCollection,
        type: "model.RecommendationStrategyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor recommendations that are currently supported.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRecommendationsRequest
   * @return ListRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
   */
  public async listRecommendations(
    listRecommendationsRequest: requests.ListRecommendationsRequest
  ): Promise<responses.ListRecommendationsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listRecommendations.");
    const operationName = "listRecommendations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/RecommendationSummary/ListRecommendations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecommendationsRequest.compartmentId,
      "compartmentIdInSubtree": listRecommendationsRequest.compartmentIdInSubtree,
      "categoryId": listRecommendationsRequest.categoryId,
      "categoryName": listRecommendationsRequest.categoryName,
      "childTenancyIds": listRecommendationsRequest.childTenancyIds,
      "includeOrganization": listRecommendationsRequest.includeOrganization,
      "name": listRecommendationsRequest.name,
      "limit": listRecommendationsRequest.limit,
      "page": listRecommendationsRequest.page,
      "sortOrder": listRecommendationsRequest.sortOrder,
      "sortBy": listRecommendationsRequest.sortBy,
      "lifecycleState": listRecommendationsRequest.lifecycleState,
      "status": listRecommendationsRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecommendationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecommendationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecommendationsResponse>{},
        body: await response.json(),
        bodyKey: "recommendationCollection",
        bodyModel: model.RecommendationCollection,
        type: "model.RecommendationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the fields that are indexed for querying and their associated value types.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListResourceActionQueryableFieldsRequest
   * @return ListResourceActionQueryableFieldsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListResourceActionQueryableFields.ts.html |here} to see how to use ListResourceActionQueryableFields API.
   */
  public async listResourceActionQueryableFields(
    listResourceActionQueryableFieldsRequest: requests.ListResourceActionQueryableFieldsRequest
  ): Promise<responses.ListResourceActionQueryableFieldsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OptimizerClient#listResourceActionQueryableFields.");
    const operationName = "listResourceActionQueryableFields";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/QueryableFieldSummary/ListResourceActionQueryableFields";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceActionQueryableFieldsRequest.compartmentId,
      "compartmentIdInSubtree": listResourceActionQueryableFieldsRequest.compartmentIdInSubtree,
      "limit": listResourceActionQueryableFieldsRequest.limit,
      "page": listResourceActionQueryableFieldsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceActionQueryableFieldsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceActionQueryableFieldsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions/actions/getQueryableFields",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceActionQueryableFieldsResponse>{},
        body: await response.json(),
        bodyKey: "queryableFieldCollection",
        bodyModel: model.QueryableFieldCollection,
        type: "model.QueryableFieldCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor resource actions that are supported.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListResourceActionsRequest
   * @return ListResourceActionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListResourceActions.ts.html |here} to see how to use ListResourceActions API.
   */
  public async listResourceActions(
    listResourceActionsRequest: requests.ListResourceActionsRequest
  ): Promise<responses.ListResourceActionsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listResourceActions.");
    const operationName = "listResourceActions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ResourceActionSummary/ListResourceActions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceActionsRequest.compartmentId,
      "compartmentIdInSubtree": listResourceActionsRequest.compartmentIdInSubtree,
      "recommendationId": listResourceActionsRequest.recommendationId,
      "recommendationName": listResourceActionsRequest.recommendationName,
      "childTenancyIds": listResourceActionsRequest.childTenancyIds,
      "includeOrganization": listResourceActionsRequest.includeOrganization,
      "name": listResourceActionsRequest.name,
      "resourceType": listResourceActionsRequest.resourceType,
      "limit": listResourceActionsRequest.limit,
      "page": listResourceActionsRequest.page,
      "sortOrder": listResourceActionsRequest.sortOrder,
      "sortBy": listResourceActionsRequest.sortBy,
      "lifecycleState": listResourceActionsRequest.lifecycleState,
      "status": listResourceActionsRequest.status,
      "includeResourceMetadata": listResourceActionsRequest.includeResourceMetadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceActionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceActionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceActionsResponse>{},
        body: await response.json(),
        bodyKey: "resourceActionCollection",
        bodyModel: model.ResourceActionCollection,
        type: "model.ResourceActionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists errors associated with the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the logs associated with the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in the tenancy. The tenancy is the root compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the enrollment status of the tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateEnrollmentStatusRequest
   * @return UpdateEnrollmentStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateEnrollmentStatus.ts.html |here} to see how to use UpdateEnrollmentStatus API.
   */
  public async updateEnrollmentStatus(
    updateEnrollmentStatusRequest: requests.UpdateEnrollmentStatusRequest
  ): Promise<responses.UpdateEnrollmentStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateEnrollmentStatus.");
    const operationName = "updateEnrollmentStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/EnrollmentStatus/UpdateEnrollmentStatus";
    const pathParams = {
      "{enrollmentStatusId}": updateEnrollmentStatusRequest.enrollmentStatusId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateEnrollmentStatusRequest.opcRequestId,
      "if-match": updateEnrollmentStatusRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEnrollmentStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus/{enrollmentStatusId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEnrollmentStatusRequest.updateEnrollmentStatusDetails,
        "UpdateEnrollmentStatusDetails",
        model.UpdateEnrollmentStatusDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEnrollmentStatusResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatus",
        bodyModel: model.EnrollmentStatus,
        type: "model.EnrollmentStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified profile. Uses the profile's OCID to determine which profile to update.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProfileRequest
   * @return UpdateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateProfile.ts.html |here} to see how to use UpdateProfile API.
   */
  public async updateProfile(
    updateProfileRequest: requests.UpdateProfileRequest
  ): Promise<responses.UpdateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateProfile.");
    const operationName = "updateProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Profile/UpdateProfile";
    const pathParams = {
      "{profileId}": updateProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProfileRequest.ifMatch,
      "opc-request-id": updateProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProfileRequest.updateProfileDetails,
        "UpdateProfileDetails",
        model.UpdateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the recommendation that corresponds to the specified OCID.
   * Use this operation to implement the following actions:
   * <p>
   * Postpone recommendation
   *   * Dismiss recommendation
   *   * Reactivate recommendation
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateRecommendationRequest
   * @return UpdateRecommendationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateRecommendation.ts.html |here} to see how to use UpdateRecommendation API.
   */
  public async updateRecommendation(
    updateRecommendationRequest: requests.UpdateRecommendationRequest
  ): Promise<responses.UpdateRecommendationResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateRecommendation.");
    const operationName = "updateRecommendation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/Recommendation/UpdateRecommendation";
    const pathParams = {
      "{recommendationId}": updateRecommendationRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateRecommendationRequest.opcRequestId,
      "if-match": updateRecommendationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRecommendationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRecommendationRequest.updateRecommendationDetails,
        "UpdateRecommendationDetails",
        model.UpdateRecommendationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRecommendationResponse>{},
        body: await response.json(),
        bodyKey: "recommendation",
        bodyModel: model.Recommendation,
        type: "model.Recommendation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the resource action that corresponds to the specified OCID.
   * Use this operation to implement the following actions:
   * <p>
   * Postpone resource action
   *   * Ignore resource action
   *   * Reactivate resource action
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateResourceActionRequest
   * @return UpdateResourceActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateResourceAction.ts.html |here} to see how to use UpdateResourceAction API.
   */
  public async updateResourceAction(
    updateResourceActionRequest: requests.UpdateResourceActionRequest
  ): Promise<responses.UpdateResourceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateResourceAction.");
    const operationName = "updateResourceAction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/advisor/20200606/ResourceAction/UpdateResourceAction";
    const pathParams = {
      "{resourceActionId}": updateResourceActionRequest.resourceActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateResourceActionRequest.opcRequestId,
      "if-match": updateResourceActionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateResourceActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions/{resourceActionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResourceActionRequest.updateResourceActionDetails,
        "UpdateResourceActionDetails",
        model.UpdateResourceActionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResourceActionResponse>{},
        body: await response.json(),
        bodyKey: "resourceAction",
        bodyModel: model.ResourceAction,
        type: "model.ResourceAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
