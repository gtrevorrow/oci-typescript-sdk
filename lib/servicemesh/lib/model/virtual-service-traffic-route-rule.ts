/**
 * Service Mesh API
 * Use the Service Mesh API to manage mesh, virtual service, access policy and other mesh related items.
 * OpenAPI spec version: 20220615
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Rule for routing incoming virtual service traffic to a version.
 */
export interface VirtualServiceTrafficRouteRule {
  /**
   * The destination of the request.
   */
  "destinations": Array<model.VirtualDeploymentTrafficRuleTarget>;

  "type": string;
}

export namespace VirtualServiceTrafficRouteRule {
  export function getJsonObj(obj: VirtualServiceTrafficRouteRule): object {
    const jsonObj = {
      ...obj,
      ...{
        "destinations": obj.destinations
          ? obj.destinations.map(item => {
              return model.VirtualDeploymentTrafficRuleTarget.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "TCP":
          return model.TcpVirtualServiceTrafficRouteRule.getJsonObj(
            <model.TcpVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        case "TLS_PASSTHROUGH":
          return model.TlsPassthroughVirtualServiceTrafficRouteRule.getJsonObj(
            <model.TlsPassthroughVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        case "HTTP":
          return model.HttpVirtualServiceTrafficRouteRule.getJsonObj(
            <model.HttpVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: VirtualServiceTrafficRouteRule): object {
    const jsonObj = {
      ...obj,
      ...{
        "destinations": obj.destinations
          ? obj.destinations.map(item => {
              return model.VirtualDeploymentTrafficRuleTarget.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "TCP":
          return model.TcpVirtualServiceTrafficRouteRule.getDeserializedJsonObj(
            <model.TcpVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        case "TLS_PASSTHROUGH":
          return model.TlsPassthroughVirtualServiceTrafficRouteRule.getDeserializedJsonObj(
            <model.TlsPassthroughVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        case "HTTP":
          return model.HttpVirtualServiceTrafficRouteRule.getDeserializedJsonObj(
            <model.HttpVirtualServiceTrafficRouteRule>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
