/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20230831
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { FleetAppsManagementWaiter } from "./fleetappsmanagement-waiter";
import { FleetAppsManagementAdminWaiter } from "./fleetappsmanagementadmin-waiter";
import { FleetAppsManagementMaintenanceWindowWaiter } from "./fleetappsmanagementmaintenancewindow-waiter";
import { FleetAppsManagementOperationsWaiter } from "./fleetappsmanagementoperations-waiter";
import { FleetAppsManagementRunbooksWaiter } from "./fleetappsmanagementrunbooks-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FleetAppsManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetAppsManagementClient {
  protected static serviceEndpointTemplate = "https://fams.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetAppsManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetAppsManagement";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetappsmanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetappsmanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230831";
    if (this.logger)
      this.logger.info(`FleetAppsManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetAppsManagementClient.serviceEndpointTemplate,
        this._region,
        FleetAppsManagementClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetAppsManagementClient.serviceEndpointTemplate,
        this._regionId,
        FleetAppsManagementClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetAppsManagementClient.serviceEndpointTemplate,
      region,
      FleetAppsManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetAppsManagementClient.serviceEndpointTemplate,
      regionId,
      FleetAppsManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetAppsManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FleetAppsManagementWaiter {
    this._waiters = new FleetAppsManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetAppsManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Check if Fleet Application Management tags can be added to the resources.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CheckResourceTaggingRequest
   * @return CheckResourceTaggingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CheckResourceTagging.ts.html |here} to see how to use CheckResourceTagging API.
   */
  public async checkResourceTagging(
    checkResourceTaggingRequest: requests.CheckResourceTaggingRequest
  ): Promise<responses.CheckResourceTaggingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#checkResourceTagging.");
    const operationName = "checkResourceTagging";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": checkResourceTaggingRequest.opcRetryToken,
      "opc-request-id": checkResourceTaggingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      checkResourceTaggingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/actions/checkResourceTagging",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        checkResourceTaggingRequest.checkResourceTaggingDetails,
        "CheckResourceTaggingDetails",
        model.CheckResourceTaggingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CheckResourceTaggingResponse>{},
        body: await response.json(),
        bodyKey: "resourceTagCheckDetails",
        bodyModel: model.ResourceTagCheckDetails,
        type: "model.ResourceTagCheckDetails",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Confirm targets to be managed for a Fleet.
   * Only targets that are confirmed will be managed by Fleet Application Management
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfirmTargetsRequest
   * @return ConfirmTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ConfirmTargets.ts.html |here} to see how to use ConfirmTargets API.
   */
  public async confirmTargets(
    confirmTargetsRequest: requests.ConfirmTargetsRequest
  ): Promise<responses.ConfirmTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#confirmTargets.");
    const operationName = "confirmTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": confirmTargetsRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": confirmTargetsRequest.opcRetryToken,
      "opc-request-id": confirmTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      confirmTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/confirmTargets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        confirmTargetsRequest.confirmTargetsDetails,
        "ConfirmTargetsDetails",
        model.ConfirmTargetsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfirmTargetsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a product, environment, group, or generic type of fleet in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFleetRequest
   * @return CreateFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateFleet.ts.html |here} to see how to use CreateFleet API.
   */
  public async createFleet(
    createFleetRequest: requests.CreateFleetRequest
  ): Promise<responses.CreateFleetResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#createFleet.");
    const operationName = "createFleet";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFleetRequest.opcRetryToken,
      "opc-request-id": createFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFleetRequest.createFleetDetails,
        "CreateFleetDetails",
        model.CreateFleetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFleetResponse>{},
        body: await response.json(),
        bodyKey: "fleet",
        bodyModel: model.Fleet,
        type: "model.Fleet",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add credentials to a fleet in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFleetCredentialRequest
   * @return CreateFleetCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateFleetCredential.ts.html |here} to see how to use CreateFleetCredential API.
   */
  public async createFleetCredential(
    createFleetCredentialRequest: requests.CreateFleetCredentialRequest
  ): Promise<responses.CreateFleetCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#createFleetCredential.");
    const operationName = "createFleetCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": createFleetCredentialRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFleetCredentialRequest.opcRetryToken,
      "opc-request-id": createFleetCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFleetCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFleetCredentialRequest.createFleetCredentialDetails,
        "CreateFleetCredentialDetails",
        model.CreateFleetCredentialDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFleetCredentialResponse>{},
        body: await response.json(),
        bodyKey: "fleetCredential",
        bodyModel: model.FleetCredential,
        type: "model.FleetCredential",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add an existing global property to a fleet in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFleetPropertyRequest
   * @return CreateFleetPropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateFleetProperty.ts.html |here} to see how to use CreateFleetProperty API.
   */
  public async createFleetProperty(
    createFleetPropertyRequest: requests.CreateFleetPropertyRequest
  ): Promise<responses.CreateFleetPropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#createFleetProperty.");
    const operationName = "createFleetProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": createFleetPropertyRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFleetPropertyRequest.opcRetryToken,
      "opc-request-id": createFleetPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFleetPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProperties",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFleetPropertyRequest.createFleetPropertyDetails,
        "CreateFleetPropertyDetails",
        model.CreateFleetPropertyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFleetPropertyResponse>{},
        body: await response.json(),
        bodyKey: "fleetProperty",
        bodyModel: model.FleetProperty,
        type: "model.FleetProperty",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add resource to a fleet in\u00A0Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFleetResourceRequest
   * @return CreateFleetResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateFleetResource.ts.html |here} to see how to use CreateFleetResource API.
   */
  public async createFleetResource(
    createFleetResourceRequest: requests.CreateFleetResourceRequest
  ): Promise<responses.CreateFleetResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#createFleetResource.");
    const operationName = "createFleetResource";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": createFleetResourceRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFleetResourceRequest.opcRetryToken,
      "opc-request-id": createFleetResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFleetResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetResources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFleetResourceRequest.createFleetResourceDetails,
        "CreateFleetResourceDetails",
        model.CreateFleetResourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFleetResourceResponse>{},
        body: await response.json(),
        bodyKey: "fleetResource",
        bodyModel: model.FleetResource,
        type: "model.FleetResource",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a fleet in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFleetRequest
   * @return DeleteFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteFleet.ts.html |here} to see how to use DeleteFleet API.
   */
  public async deleteFleet(
    deleteFleetRequest: requests.DeleteFleetRequest
  ): Promise<responses.DeleteFleetResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#deleteFleet.");
    const operationName = "deleteFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFleetRequest.ifMatch,
      "opc-request-id": deleteFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFleetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a credential associated with a fleet product or application in\u00A0Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFleetCredentialRequest
   * @return DeleteFleetCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteFleetCredential.ts.html |here} to see how to use DeleteFleetCredential API.
   */
  public async deleteFleetCredential(
    deleteFleetCredentialRequest: requests.DeleteFleetCredentialRequest
  ): Promise<responses.DeleteFleetCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#deleteFleetCredential.");
    const operationName = "deleteFleetCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetCredentialId}": deleteFleetCredentialRequest.fleetCredentialId,
      "{fleetId}": deleteFleetCredentialRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFleetCredentialRequest.ifMatch,
      "opc-request-id": deleteFleetCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFleetCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetCredentials/{fleetCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFleetCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a property associated with a fleet in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFleetPropertyRequest
   * @return DeleteFleetPropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteFleetProperty.ts.html |here} to see how to use DeleteFleetProperty API.
   */
  public async deleteFleetProperty(
    deleteFleetPropertyRequest: requests.DeleteFleetPropertyRequest
  ): Promise<responses.DeleteFleetPropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#deleteFleetProperty.");
    const operationName = "deleteFleetProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetPropertyId}": deleteFleetPropertyRequest.fleetPropertyId,
      "{fleetId}": deleteFleetPropertyRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFleetPropertyRequest.ifMatch,
      "opc-request-id": deleteFleetPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFleetPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProperties/{fleetPropertyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFleetPropertyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a resource from the fleet in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFleetResourceRequest
   * @return DeleteFleetResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteFleetResource.ts.html |here} to see how to use DeleteFleetResource API.
   */
  public async deleteFleetResource(
    deleteFleetResourceRequest: requests.DeleteFleetResourceRequest
  ): Promise<responses.DeleteFleetResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#deleteFleetResource.");
    const operationName = "deleteFleetResource";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetResourceId}": deleteFleetResourceRequest.fleetResourceId,
      "{fleetId}": deleteFleetResourceRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFleetResourceRequest.ifMatch,
      "opc-request-id": deleteFleetResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFleetResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetResources/{fleetResourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFleetResourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate compliance reports for a Fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateComplianceReportRequest
   * @return GenerateComplianceReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GenerateComplianceReport.ts.html |here} to see how to use GenerateComplianceReport API.
   */
  public async generateComplianceReport(
    generateComplianceReportRequest: requests.GenerateComplianceReportRequest
  ): Promise<responses.GenerateComplianceReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#generateComplianceReport.");
    const operationName = "generateComplianceReport";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": generateComplianceReportRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": generateComplianceReportRequest.opcRetryToken,
      "opc-request-id": generateComplianceReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateComplianceReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/generateComplianceReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateComplianceReportRequest.generateComplianceReportDetails,
        "GenerateComplianceReportDetails",
        model.GenerateComplianceReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateComplianceReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve compliance report for a fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetComplianceReportRequest
   * @return GetComplianceReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetComplianceReport.ts.html |here} to see how to use GetComplianceReport API.
   */
  public async getComplianceReport(
    getComplianceReportRequest: requests.GetComplianceReportRequest
  ): Promise<responses.GetComplianceReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#getComplianceReport.");
    const operationName = "getComplianceReport";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getComplianceReportRequest.fleetId,
      "{complianceReportId}": getComplianceReportRequest.complianceReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getComplianceReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComplianceReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/complianceReports/{complianceReportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComplianceReportResponse>{},
        body: await response.json(),
        bodyKey: "complianceReport",
        bodyModel: model.ComplianceReport,
        type: "model.ComplianceReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a fleet in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetRequest
   * @return GetFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetFleet.ts.html |here} to see how to use GetFleet API.
   */
  public async getFleet(
    getFleetRequest: requests.GetFleetRequest
  ): Promise<responses.GetFleetResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#getFleet.");
    const operationName = "getFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetResponse>{},
        body: await response.json(),
        bodyKey: "fleet",
        bodyModel: model.Fleet,
        type: "model.Fleet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a FleetCredential by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetCredentialRequest
   * @return GetFleetCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetFleetCredential.ts.html |here} to see how to use GetFleetCredential API.
   */
  public async getFleetCredential(
    getFleetCredentialRequest: requests.GetFleetCredentialRequest
  ): Promise<responses.GetFleetCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#getFleetCredential.");
    const operationName = "getFleetCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetCredentialId}": getFleetCredentialRequest.fleetCredentialId,
      "{fleetId}": getFleetCredentialRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetCredentials/{fleetCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetCredentialResponse>{},
        body: await response.json(),
        bodyKey: "fleetCredential",
        bodyModel: model.FleetCredential,
        type: "model.FleetCredential",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Fleet Property by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetPropertyRequest
   * @return GetFleetPropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetFleetProperty.ts.html |here} to see how to use GetFleetProperty API.
   */
  public async getFleetProperty(
    getFleetPropertyRequest: requests.GetFleetPropertyRequest
  ): Promise<responses.GetFleetPropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#getFleetProperty.");
    const operationName = "getFleetProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetPropertyId}": getFleetPropertyRequest.fleetPropertyId,
      "{fleetId}": getFleetPropertyRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProperties/{fleetPropertyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetPropertyResponse>{},
        body: await response.json(),
        bodyKey: "fleetProperty",
        bodyModel: model.FleetProperty,
        type: "model.FleetProperty",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Fleet Resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetResourceRequest
   * @return GetFleetResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetFleetResource.ts.html |here} to see how to use GetFleetResource API.
   */
  public async getFleetResource(
    getFleetResourceRequest: requests.GetFleetResourceRequest
  ): Promise<responses.GetFleetResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#getFleetResource.");
    const operationName = "getFleetResource";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetResourceId}": getFleetResourceRequest.fleetResourceId,
      "{fleetId}": getFleetResourceRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetResources/{fleetResourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetResourceResponse>{},
        body: await response.json(),
        bodyKey: "fleetResource",
        bodyModel: model.FleetResource,
        type: "model.FleetResource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of AnnouncementSummary items.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAnnouncementsRequest
   * @return ListAnnouncementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListAnnouncements.ts.html |here} to see how to use ListAnnouncements API.
   */
  public async listAnnouncements(
    listAnnouncementsRequest: requests.ListAnnouncementsRequest
  ): Promise<responses.ListAnnouncementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listAnnouncements.");
    const operationName = "listAnnouncements";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "summaryContains": listAnnouncementsRequest.summaryContains,
      "displayName": listAnnouncementsRequest.displayName,
      "limit": listAnnouncementsRequest.limit,
      "page": listAnnouncementsRequest.page,
      "sortOrder": listAnnouncementsRequest.sortOrder,
      "sortBy": listAnnouncementsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAnnouncementsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAnnouncementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/announcements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAnnouncementsResponse>{},
        body: await response.json(),
        bodyKey: "announcementCollection",
        bodyModel: model.AnnouncementCollection,
        type: "model.AnnouncementCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List credentials in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetCredentialsRequest
   * @return ListFleetCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleetCredentials.ts.html |here} to see how to use ListFleetCredentials API.
   */
  public async listFleetCredentials(
    listFleetCredentialsRequest: requests.ListFleetCredentialsRequest
  ): Promise<responses.ListFleetCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listFleetCredentials.");
    const operationName = "listFleetCredentials";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetCredentialsRequest.fleetId
    };

    const queryParams = {
      "compartmentId": listFleetCredentialsRequest.compartmentId,
      "lifecycleState": listFleetCredentialsRequest.lifecycleState,
      "displayName": listFleetCredentialsRequest.displayName,
      "resourceId": listFleetCredentialsRequest.resourceId,
      "target": listFleetCredentialsRequest.target,
      "credentialLevel": listFleetCredentialsRequest.credentialLevel,
      "id": listFleetCredentialsRequest.id,
      "limit": listFleetCredentialsRequest.limit,
      "page": listFleetCredentialsRequest.page,
      "sortOrder": listFleetCredentialsRequest.sortOrder,
      "sortBy": listFleetCredentialsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetCredentialsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "fleetCredentialCollection",
        bodyModel: model.FleetCredentialCollection,
        type: "model.FleetCredentialCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of products associated with the confirmed targets.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetProductsRequest
   * @return ListFleetProductsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleetProducts.ts.html |here} to see how to use ListFleetProducts API.
   */
  public async listFleetProducts(
    listFleetProductsRequest: requests.ListFleetProductsRequest
  ): Promise<responses.ListFleetProductsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listFleetProducts.");
    const operationName = "listFleetProducts";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetProductsRequest.fleetId
    };

    const queryParams = {
      "compartmentId": listFleetProductsRequest.compartmentId,
      "resourceId": listFleetProductsRequest.resourceId,
      "resourceDisplayName": listFleetProductsRequest.resourceDisplayName,
      "displayName": listFleetProductsRequest.displayName,
      "limit": listFleetProductsRequest.limit,
      "page": listFleetProductsRequest.page,
      "sortOrder": listFleetProductsRequest.sortOrder,
      "sortBy": listFleetProductsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetProductsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetProductsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProducts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetProductsResponse>{},
        body: await response.json(),
        bodyKey: "fleetProductCollection",
        bodyModel: model.FleetProductCollection,
        type: "model.FleetProductCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List fleet properties in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetPropertiesRequest
   * @return ListFleetPropertiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleetProperties.ts.html |here} to see how to use ListFleetProperties API.
   */
  public async listFleetProperties(
    listFleetPropertiesRequest: requests.ListFleetPropertiesRequest
  ): Promise<responses.ListFleetPropertiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listFleetProperties.");
    const operationName = "listFleetProperties";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetPropertiesRequest.fleetId
    };

    const queryParams = {
      "compartmentId": listFleetPropertiesRequest.compartmentId,
      "lifecycleState": listFleetPropertiesRequest.lifecycleState,
      "displayName": listFleetPropertiesRequest.displayName,
      "id": listFleetPropertiesRequest.id,
      "limit": listFleetPropertiesRequest.limit,
      "page": listFleetPropertiesRequest.page,
      "sortOrder": listFleetPropertiesRequest.sortOrder,
      "sortBy": listFleetPropertiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetPropertiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetPropertiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProperties",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetPropertiesResponse>{},
        body: await response.json(),
        bodyKey: "fleetPropertyCollection",
        bodyModel: model.FleetPropertyCollection,
        type: "model.FleetPropertyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List resources for a fleet in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetResourcesRequest
   * @return ListFleetResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleetResources.ts.html |here} to see how to use ListFleetResources API.
   */
  public async listFleetResources(
    listFleetResourcesRequest: requests.ListFleetResourcesRequest
  ): Promise<responses.ListFleetResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listFleetResources.");
    const operationName = "listFleetResources";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetResourcesRequest.fleetId
    };

    const queryParams = {
      "tenancyId": listFleetResourcesRequest.tenancyId,
      "lifecycleState": listFleetResourcesRequest.lifecycleState,
      "displayName": listFleetResourcesRequest.displayName,
      "id": listFleetResourcesRequest.id,
      "fleetResourceType": listFleetResourcesRequest.fleetResourceType,
      "limit": listFleetResourcesRequest.limit,
      "page": listFleetResourcesRequest.page,
      "sortOrder": listFleetResourcesRequest.sortOrder,
      "sortBy": listFleetResourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetResources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetResourcesResponse>{},
        body: await response.json(),
        bodyKey: "fleetResourceCollection",
        bodyModel: model.FleetResourceCollection,
        type: "model.FleetResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of all confirmed targets within a fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetTargetsRequest
   * @return ListFleetTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleetTargets.ts.html |here} to see how to use ListFleetTargets API.
   */
  public async listFleetTargets(
    listFleetTargetsRequest: requests.ListFleetTargetsRequest
  ): Promise<responses.ListFleetTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listFleetTargets.");
    const operationName = "listFleetTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetTargetsRequest.fleetId
    };

    const queryParams = {
      "displayName": listFleetTargetsRequest.displayName,
      "product": listFleetTargetsRequest.product,
      "resourceId": listFleetTargetsRequest.resourceId,
      "resourceDisplayName": listFleetTargetsRequest.resourceDisplayName,
      "limit": listFleetTargetsRequest.limit,
      "page": listFleetTargetsRequest.page,
      "sortOrder": listFleetTargetsRequest.sortOrder,
      "sortBy": listFleetTargetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetTargets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetTargetsResponse>{},
        body: await response.json(),
        bodyKey: "fleetTargetCollection",
        bodyModel: model.FleetTargetCollection,
        type: "model.FleetTargetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Fleets in the specified Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetsRequest
   * @return ListFleetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListFleets.ts.html |here} to see how to use ListFleets API.
   */
  public async listFleets(
    listFleetsRequest: requests.ListFleetsRequest
  ): Promise<responses.ListFleetsResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#listFleets.");
    const operationName = "listFleets";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "lifecycleState": listFleetsRequest.lifecycleState,
      "compartmentId": listFleetsRequest.compartmentId,
      "fleetType": listFleetsRequest.fleetType,
      "applicationType": listFleetsRequest.applicationType,
      "product": listFleetsRequest.product,
      "environmentType": listFleetsRequest.environmentType,
      "displayName": listFleetsRequest.displayName,
      "id": listFleetsRequest.id,
      "limit": listFleetsRequest.limit,
      "page": listFleetsRequest.page,
      "sortOrder": listFleetsRequest.sortOrder,
      "sortBy": listFleetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetsResponse>{},
        body: await response.json(),
        bodyKey: "fleetCollection",
        bodyModel: model.FleetCollection,
        type: "model.FleetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of InventoryResources.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListInventoryResourcesRequest
   * @return ListInventoryResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListInventoryResources.ts.html |here} to see how to use ListInventoryResources API.
   */
  public async listInventoryResources(
    listInventoryResourcesRequest: requests.ListInventoryResourcesRequest
  ): Promise<responses.ListInventoryResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listInventoryResources.");
    const operationName = "listInventoryResources";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInventoryResourcesRequest.compartmentId,
      "lifecycleState": listInventoryResourcesRequest.lifecycleState,
      "displayName": listInventoryResourcesRequest.displayName,
      "resourceRegion": listInventoryResourcesRequest.resourceRegion,
      "resourceCompartmentId": listInventoryResourcesRequest.resourceCompartmentId,
      "definedTagEquals": listInventoryResourcesRequest.definedTagEquals,
      "freeformTagEquals": listInventoryResourcesRequest.freeformTagEquals,
      "inventoryProperties": listInventoryResourcesRequest.inventoryProperties,
      "matchingCriteria": listInventoryResourcesRequest.matchingCriteria,
      "limit": listInventoryResourcesRequest.limit,
      "page": listInventoryResourcesRequest.page,
      "sortOrder": listInventoryResourcesRequest.sortOrder,
      "sortBy": listInventoryResourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInventoryResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInventoryResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/inventoryResources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInventoryResourcesResponse>{},
        body: await response.json(),
        bodyKey: "inventoryResourceCollection",
        bodyModel: model.InventoryResourceCollection,
        type: "model.InventoryResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return all targets belonging to the resources within a fleet.
   * It will include both confirmed and unconfirmed targets.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTargetsRequest
   * @return ListTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListTargets.ts.html |here} to see how to use ListTargets API.
   */
  public async listTargets(
    listTargetsRequest: requests.ListTargetsRequest
  ): Promise<responses.ListTargetsResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#listTargets.");
    const operationName = "listTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listTargetsRequest.fleetId
    };

    const queryParams = {
      "displayName": listTargetsRequest.displayName,
      "limit": listTargetsRequest.limit,
      "page": listTargetsRequest.page,
      "sortOrder": listTargetsRequest.sortOrder,
      "sortBy": listTargetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/targets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetsResponse>{},
        body: await response.json(),
        bodyKey: "fleetTargetCollection",
        bodyModel: model.FleetTargetCollection,
        type: "model.FleetTargetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request validation for resources within a fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestResourceValidationRequest
   * @return RequestResourceValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/RequestResourceValidation.ts.html |here} to see how to use RequestResourceValidation API.
   */
  public async requestResourceValidation(
    requestResourceValidationRequest: requests.RequestResourceValidationRequest
  ): Promise<responses.RequestResourceValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#requestResourceValidation.");
    const operationName = "requestResourceValidation";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestResourceValidationRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": requestResourceValidationRequest.opcRetryToken,
      "opc-request-id": requestResourceValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestResourceValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestResourceValidation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestResourceValidationRequest.requestResourceValidationDetails,
        "RequestResourceValidationDetails",
        model.RequestResourceValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestResourceValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Confirm targets to be managed for a Fleet.
   * Only targets that are confirmed will be managed by Fleet Application Management
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestTargetDiscoveryRequest
   * @return RequestTargetDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/RequestTargetDiscovery.ts.html |here} to see how to use RequestTargetDiscovery API.
   */
  public async requestTargetDiscovery(
    requestTargetDiscoveryRequest: requests.RequestTargetDiscoveryRequest
  ): Promise<responses.RequestTargetDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#requestTargetDiscovery.");
    const operationName = "requestTargetDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestTargetDiscoveryRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": requestTargetDiscoveryRequest.opcRetryToken,
      "opc-request-id": requestTargetDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestTargetDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestTargetDiscovery",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestTargetDiscoveryRequest.requestTargetDiscoveryDetails,
        "RequestTargetDiscoveryDetails",
        model.RequestTargetDiscoveryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestTargetDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update fleet information in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetRequest
   * @return UpdateFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateFleet.ts.html |here} to see how to use UpdateFleet API.
   */
  public async updateFleet(
    updateFleetRequest: requests.UpdateFleetRequest
  ): Promise<responses.UpdateFleetResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetAppsManagementClient#updateFleet.");
    const operationName = "updateFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetRequest.ifMatch,
      "opc-request-id": updateFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetRequest.updateFleetDetails,
        "UpdateFleetDetails",
        model.UpdateFleetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetResponse>{},
        body: await response.json(),
        bodyKey: "fleet",
        bodyModel: model.Fleet,
        type: "model.Fleet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Edit credentials associated with a product or application in\u00A0Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetCredentialRequest
   * @return UpdateFleetCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateFleetCredential.ts.html |here} to see how to use UpdateFleetCredential API.
   */
  public async updateFleetCredential(
    updateFleetCredentialRequest: requests.UpdateFleetCredentialRequest
  ): Promise<responses.UpdateFleetCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#updateFleetCredential.");
    const operationName = "updateFleetCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetCredentialId}": updateFleetCredentialRequest.fleetCredentialId,
      "{fleetId}": updateFleetCredentialRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetCredentialRequest.ifMatch,
      "opc-request-id": updateFleetCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetCredentials/{fleetCredentialId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetCredentialRequest.updateFleetCredentialDetails,
        "UpdateFleetCredentialDetails",
        model.UpdateFleetCredentialDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Edit a property associated with a fleet in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetPropertyRequest
   * @return UpdateFleetPropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateFleetProperty.ts.html |here} to see how to use UpdateFleetProperty API.
   */
  public async updateFleetProperty(
    updateFleetPropertyRequest: requests.UpdateFleetPropertyRequest
  ): Promise<responses.UpdateFleetPropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#updateFleetProperty.");
    const operationName = "updateFleetProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetPropertyId}": updateFleetPropertyRequest.fleetPropertyId,
      "{fleetId}": updateFleetPropertyRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetPropertyRequest.ifMatch,
      "opc-request-id": updateFleetPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetProperties/{fleetPropertyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetPropertyRequest.updateFleetPropertyDetails,
        "UpdateFleetPropertyDetails",
        model.UpdateFleetPropertyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetPropertyResponse>{},
        body: await response.json(),
        bodyKey: "fleetProperty",
        bodyModel: model.FleetProperty,
        type: "model.FleetProperty",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the FleetResource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetResourceRequest
   * @return UpdateFleetResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateFleetResource.ts.html |here} to see how to use UpdateFleetResource API.
   */
  public async updateFleetResource(
    updateFleetResourceRequest: requests.UpdateFleetResourceRequest
  ): Promise<responses.UpdateFleetResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementClient#updateFleetResource.");
    const operationName = "updateFleetResource";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetResourceId}": updateFleetResourceRequest.fleetResourceId,
      "{fleetId}": updateFleetResourceRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetResourceRequest.ifMatch,
      "opc-request-id": updateFleetResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/fleetResources/{fleetResourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetResourceRequest.updateFleetResourceDetails,
        "UpdateFleetResourceDetails",
        model.UpdateFleetResourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetResourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum FleetAppsManagementAdminApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetAppsManagementAdminClient {
  protected static serviceEndpointTemplate = "https://fams.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetAppsManagementAdminWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetAppsManagementAdmin";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetappsmanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetappsmanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230831";
    if (this.logger)
      this.logger.info(`FleetAppsManagementAdminClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetAppsManagementAdminClient.serviceEndpointTemplate,
        this._region,
        FleetAppsManagementAdminClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetAppsManagementAdminClient.serviceEndpointTemplate,
        this._regionId,
        FleetAppsManagementAdminClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetAppsManagementAdminClient.serviceEndpointTemplate,
      region,
      FleetAppsManagementAdminClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetAppsManagementAdminClient.serviceEndpointTemplate,
      regionId,
      FleetAppsManagementAdminClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetAppsManagementAdminWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FleetAppsManagementAdminWaiter {
    this._waiters = new FleetAppsManagementAdminWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetAppsManagementAdminWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Creates a CompliancePolicyRule.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateCompliancePolicyRuleRequest
   * @return CreateCompliancePolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateCompliancePolicyRule.ts.html |here} to see how to use CreateCompliancePolicyRule API.
   */
  public async createCompliancePolicyRule(
    createCompliancePolicyRuleRequest: requests.CreateCompliancePolicyRuleRequest
  ): Promise<responses.CreateCompliancePolicyRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#createCompliancePolicyRule."
      );
    const operationName = "createCompliancePolicyRule";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCompliancePolicyRuleRequest.opcRetryToken,
      "opc-request-id": createCompliancePolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCompliancePolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicyRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCompliancePolicyRuleRequest.createCompliancePolicyRuleDetails,
        "CreateCompliancePolicyRuleDetails",
        model.CreateCompliancePolicyRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCompliancePolicyRuleResponse>{},
        body: await response.json(),
        bodyKey: "compliancePolicyRule",
        bodyModel: model.CompliancePolicyRule,
        type: "model.CompliancePolicyRule",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Onboard a tenant to Fleet Application Management.
   * The onboarding process lets Fleet Application Management create a few required policies that you need to start using it and its features.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOnboardingRequest
   * @return CreateOnboardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateOnboarding.ts.html |here} to see how to use CreateOnboarding API.
   */
  public async createOnboarding(
    createOnboardingRequest: requests.CreateOnboardingRequest
  ): Promise<responses.CreateOnboardingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#createOnboarding.");
    const operationName = "createOnboarding";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOnboardingRequest.opcRetryToken,
      "opc-request-id": createOnboardingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOnboardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnboardingRequest.createOnboardingDetails,
        "CreateOnboardingDetails",
        model.CreateOnboardingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnboardingResponse>{},
        body: await response.json(),
        bodyKey: "onboarding",
        bodyModel: model.Onboarding,
        type: "model.Onboarding",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new PlatformConfiguration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePlatformConfigurationRequest
   * @return CreatePlatformConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreatePlatformConfiguration.ts.html |here} to see how to use CreatePlatformConfiguration API.
   */
  public async createPlatformConfiguration(
    createPlatformConfigurationRequest: requests.CreatePlatformConfigurationRequest
  ): Promise<responses.CreatePlatformConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#createPlatformConfiguration."
      );
    const operationName = "createPlatformConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPlatformConfigurationRequest.opcRetryToken,
      "opc-request-id": createPlatformConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPlatformConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/platformConfigurations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPlatformConfigurationRequest.createPlatformConfigurationDetails,
        "CreatePlatformConfigurationDetails",
        model.CreatePlatformConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePlatformConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "platformConfiguration",
        bodyModel: model.PlatformConfiguration,
        type: "model.PlatformConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a business-specific metadata property in Fleet Application Management and capture the business metadata classifications.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePropertyRequest
   * @return CreatePropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateProperty.ts.html |here} to see how to use CreateProperty API.
   */
  public async createProperty(
    createPropertyRequest: requests.CreatePropertyRequest
  ): Promise<responses.CreatePropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#createProperty.");
    const operationName = "createProperty";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPropertyRequest.opcRetryToken,
      "opc-request-id": createPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/properties",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPropertyRequest.createPropertyDetails,
        "CreatePropertyDetails",
        model.CreatePropertyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePropertyResponse>{},
        body: await response.json(),
        bodyKey: "property",
        bodyModel: model.Property,
        type: "model.Property",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a CompliancePolicyRule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCompliancePolicyRuleRequest
   * @return DeleteCompliancePolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteCompliancePolicyRule.ts.html |here} to see how to use DeleteCompliancePolicyRule API.
   */
  public async deleteCompliancePolicyRule(
    deleteCompliancePolicyRuleRequest: requests.DeleteCompliancePolicyRuleRequest
  ): Promise<responses.DeleteCompliancePolicyRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#deleteCompliancePolicyRule."
      );
    const operationName = "deleteCompliancePolicyRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{compliancePolicyRuleId}": deleteCompliancePolicyRuleRequest.compliancePolicyRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCompliancePolicyRuleRequest.ifMatch,
      "opc-request-id": deleteCompliancePolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCompliancePolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicyRules/{compliancePolicyRuleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCompliancePolicyRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes Fleet Application Management onboarding resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOnboardingRequest
   * @return DeleteOnboardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteOnboarding.ts.html |here} to see how to use DeleteOnboarding API.
   */
  public async deleteOnboarding(
    deleteOnboardingRequest: requests.DeleteOnboardingRequest
  ): Promise<responses.DeleteOnboardingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#deleteOnboarding.");
    const operationName = "deleteOnboarding";
    const apiReferenceLink = "";
    const pathParams = {
      "{onboardingId}": deleteOnboardingRequest.onboardingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOnboardingRequest.ifMatch,
      "opc-request-id": deleteOnboardingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOnboardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings/{onboardingId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOnboardingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a PlatformConfiguration resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePlatformConfigurationRequest
   * @return DeletePlatformConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeletePlatformConfiguration.ts.html |here} to see how to use DeletePlatformConfiguration API.
   */
  public async deletePlatformConfiguration(
    deletePlatformConfigurationRequest: requests.DeletePlatformConfigurationRequest
  ): Promise<responses.DeletePlatformConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#deletePlatformConfiguration."
      );
    const operationName = "deletePlatformConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{platformConfigurationId}": deletePlatformConfigurationRequest.platformConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePlatformConfigurationRequest.ifMatch,
      "opc-request-id": deletePlatformConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePlatformConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/platformConfigurations/{platformConfigurationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePlatformConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a property in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePropertyRequest
   * @return DeletePropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteProperty.ts.html |here} to see how to use DeleteProperty API.
   */
  public async deleteProperty(
    deletePropertyRequest: requests.DeletePropertyRequest
  ): Promise<responses.DeletePropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#deleteProperty.");
    const operationName = "deleteProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{propertyId}": deletePropertyRequest.propertyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePropertyRequest.ifMatch,
      "opc-request-id": deletePropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/properties/{propertyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePropertyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enable Policies for a newer version of Fleet Application Management
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EnableLatestPolicyRequest
   * @return EnableLatestPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/EnableLatestPolicy.ts.html |here} to see how to use EnableLatestPolicy API.
   */
  public async enableLatestPolicy(
    enableLatestPolicyRequest: requests.EnableLatestPolicyRequest
  ): Promise<responses.EnableLatestPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#enableLatestPolicy.");
    const operationName = "enableLatestPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{onboardingId}": enableLatestPolicyRequest.onboardingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableLatestPolicyRequest.ifMatch,
      "opc-request-id": enableLatestPolicyRequest.opcRequestId,
      "opc-retry-token": enableLatestPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableLatestPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings/{onboardingId}/actions/enableLatestPolicy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableLatestPolicyRequest.enableLatestPolicyDetails,
        "EnableLatestPolicyDetails",
        model.EnableLatestPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableLatestPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a CompliancePolicy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCompliancePolicyRequest
   * @return GetCompliancePolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetCompliancePolicy.ts.html |here} to see how to use GetCompliancePolicy API.
   */
  public async getCompliancePolicy(
    getCompliancePolicyRequest: requests.GetCompliancePolicyRequest
  ): Promise<responses.GetCompliancePolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#getCompliancePolicy.");
    const operationName = "getCompliancePolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{compliancePolicyId}": getCompliancePolicyRequest.compliancePolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCompliancePolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCompliancePolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicies/{compliancePolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCompliancePolicyResponse>{},
        body: await response.json(),
        bodyKey: "compliancePolicy",
        bodyModel: model.CompliancePolicy,
        type: "model.CompliancePolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a CompliancePolicyRule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCompliancePolicyRuleRequest
   * @return GetCompliancePolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetCompliancePolicyRule.ts.html |here} to see how to use GetCompliancePolicyRule API.
   */
  public async getCompliancePolicyRule(
    getCompliancePolicyRuleRequest: requests.GetCompliancePolicyRuleRequest
  ): Promise<responses.GetCompliancePolicyRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#getCompliancePolicyRule."
      );
    const operationName = "getCompliancePolicyRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{compliancePolicyRuleId}": getCompliancePolicyRuleRequest.compliancePolicyRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCompliancePolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCompliancePolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicyRules/{compliancePolicyRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCompliancePolicyRuleResponse>{},
        body: await response.json(),
        bodyKey: "compliancePolicyRule",
        bodyModel: model.CompliancePolicyRule,
        type: "model.CompliancePolicyRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Fleet Application Management Onboarding by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOnboardingRequest
   * @return GetOnboardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetOnboarding.ts.html |here} to see how to use GetOnboarding API.
   */
  public async getOnboarding(
    getOnboardingRequest: requests.GetOnboardingRequest
  ): Promise<responses.GetOnboardingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#getOnboarding.");
    const operationName = "getOnboarding";
    const apiReferenceLink = "";
    const pathParams = {
      "{onboardingId}": getOnboardingRequest.onboardingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOnboardingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOnboardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings/{onboardingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOnboardingResponse>{},
        body: await response.json(),
        bodyKey: "onboarding",
        bodyModel: model.Onboarding,
        type: "model.Onboarding",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a PlatformConfiguration by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPlatformConfigurationRequest
   * @return GetPlatformConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetPlatformConfiguration.ts.html |here} to see how to use GetPlatformConfiguration API.
   */
  public async getPlatformConfiguration(
    getPlatformConfigurationRequest: requests.GetPlatformConfigurationRequest
  ): Promise<responses.GetPlatformConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#getPlatformConfiguration."
      );
    const operationName = "getPlatformConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{platformConfigurationId}": getPlatformConfigurationRequest.platformConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPlatformConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPlatformConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/platformConfigurations/{platformConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPlatformConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "platformConfiguration",
        bodyModel: model.PlatformConfiguration,
        type: "model.PlatformConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Property by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPropertyRequest
   * @return GetPropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetProperty.ts.html |here} to see how to use GetProperty API.
   */
  public async getProperty(
    getPropertyRequest: requests.GetPropertyRequest
  ): Promise<responses.GetPropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#getProperty.");
    const operationName = "getProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{propertyId}": getPropertyRequest.propertyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/properties/{propertyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPropertyResponse>{},
        body: await response.json(),
        bodyKey: "property",
        bodyModel: model.Property,
        type: "model.Property",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of compliancePolicies.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCompliancePoliciesRequest
   * @return ListCompliancePoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListCompliancePolicies.ts.html |here} to see how to use ListCompliancePolicies API.
   */
  public async listCompliancePolicies(
    listCompliancePoliciesRequest: requests.ListCompliancePoliciesRequest
  ): Promise<responses.ListCompliancePoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#listCompliancePolicies.");
    const operationName = "listCompliancePolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCompliancePoliciesRequest.compartmentId,
      "lifecycleState": listCompliancePoliciesRequest.lifecycleState,
      "displayName": listCompliancePoliciesRequest.displayName,
      "id": listCompliancePoliciesRequest.id,
      "limit": listCompliancePoliciesRequest.limit,
      "page": listCompliancePoliciesRequest.page,
      "sortOrder": listCompliancePoliciesRequest.sortOrder,
      "sortBy": listCompliancePoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCompliancePoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCompliancePoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCompliancePoliciesResponse>{},
        body: await response.json(),
        bodyKey: "compliancePolicyCollection",
        bodyModel: model.CompliancePolicyCollection,
        type: "model.CompliancePolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of CompliancePolicyRules.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCompliancePolicyRulesRequest
   * @return ListCompliancePolicyRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListCompliancePolicyRules.ts.html |here} to see how to use ListCompliancePolicyRules API.
   */
  public async listCompliancePolicyRules(
    listCompliancePolicyRulesRequest: requests.ListCompliancePolicyRulesRequest
  ): Promise<responses.ListCompliancePolicyRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#listCompliancePolicyRules."
      );
    const operationName = "listCompliancePolicyRules";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCompliancePolicyRulesRequest.compartmentId,
      "displayName": listCompliancePolicyRulesRequest.displayName,
      "lifecycleState": listCompliancePolicyRulesRequest.lifecycleState,
      "patchName": listCompliancePolicyRulesRequest.patchName,
      "compliancePolicyId": listCompliancePolicyRulesRequest.compliancePolicyId,
      "id": listCompliancePolicyRulesRequest.id,
      "limit": listCompliancePolicyRulesRequest.limit,
      "page": listCompliancePolicyRulesRequest.page,
      "sortOrder": listCompliancePolicyRulesRequest.sortOrder,
      "sortBy": listCompliancePolicyRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCompliancePolicyRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCompliancePolicyRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicyRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCompliancePolicyRulesResponse>{},
        body: await response.json(),
        bodyKey: "compliancePolicyRuleCollection",
        bodyModel: model.CompliancePolicyRuleCollection,
        type: "model.CompliancePolicyRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of onboarding policy information for Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOnboardingPoliciesRequest
   * @return ListOnboardingPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListOnboardingPolicies.ts.html |here} to see how to use ListOnboardingPolicies API.
   */
  public async listOnboardingPolicies(
    listOnboardingPoliciesRequest: requests.ListOnboardingPoliciesRequest
  ): Promise<responses.ListOnboardingPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#listOnboardingPolicies.");
    const operationName = "listOnboardingPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listOnboardingPoliciesRequest.limit,
      "page": listOnboardingPoliciesRequest.page,
      "sortOrder": listOnboardingPoliciesRequest.sortOrder,
      "sortBy": listOnboardingPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnboardingPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOnboardingPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/OnboardingPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnboardingPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "onboardingPolicyCollection",
        bodyModel: model.OnboardingPolicyCollection,
        type: "model.OnboardingPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of onboarding information for the Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOnboardingsRequest
   * @return ListOnboardingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListOnboardings.ts.html |here} to see how to use ListOnboardings API.
   */
  public async listOnboardings(
    listOnboardingsRequest: requests.ListOnboardingsRequest
  ): Promise<responses.ListOnboardingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#listOnboardings.");
    const operationName = "listOnboardings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOnboardingsRequest.compartmentId,
      "lifecycleState": listOnboardingsRequest.lifecycleState,
      "id": listOnboardingsRequest.id,
      "limit": listOnboardingsRequest.limit,
      "page": listOnboardingsRequest.page,
      "sortOrder": listOnboardingsRequest.sortOrder,
      "sortBy": listOnboardingsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnboardingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOnboardingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnboardingsResponse>{},
        body: await response.json(),
        bodyKey: "onboardingCollection",
        bodyModel: model.OnboardingCollection,
        type: "model.OnboardingCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of PlatformConfiguration for Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPlatformConfigurationsRequest
   * @return ListPlatformConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListPlatformConfigurations.ts.html |here} to see how to use ListPlatformConfigurations API.
   */
  public async listPlatformConfigurations(
    listPlatformConfigurationsRequest: requests.ListPlatformConfigurationsRequest
  ): Promise<responses.ListPlatformConfigurationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#listPlatformConfigurations."
      );
    const operationName = "listPlatformConfigurations";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPlatformConfigurationsRequest.compartmentId,
      "lifecycleState": listPlatformConfigurationsRequest.lifecycleState,
      "displayName": listPlatformConfigurationsRequest.displayName,
      "id": listPlatformConfigurationsRequest.id,
      "configCategory": listPlatformConfigurationsRequest.configCategory,
      "limit": listPlatformConfigurationsRequest.limit,
      "page": listPlatformConfigurationsRequest.page,
      "sortOrder": listPlatformConfigurationsRequest.sortOrder,
      "sortBy": listPlatformConfigurationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPlatformConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPlatformConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/platformConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPlatformConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "platformConfigurationCollection",
        bodyModel: model.PlatformConfigurationCollection,
        type: "model.PlatformConfigurationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List properties and their values for a tenancy in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPropertiesRequest
   * @return ListPropertiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListProperties.ts.html |here} to see how to use ListProperties API.
   */
  public async listProperties(
    listPropertiesRequest: requests.ListPropertiesRequest
  ): Promise<responses.ListPropertiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#listProperties.");
    const operationName = "listProperties";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPropertiesRequest.compartmentId,
      "lifecycleState": listPropertiesRequest.lifecycleState,
      "displayName": listPropertiesRequest.displayName,
      "id": listPropertiesRequest.id,
      "scope": listPropertiesRequest.scope,
      "limit": listPropertiesRequest.limit,
      "page": listPropertiesRequest.page,
      "sortOrder": listPropertiesRequest.sortOrder,
      "sortBy": listPropertiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPropertiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPropertiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/properties",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPropertiesResponse>{},
        body: await response.json(),
        bodyKey: "propertyCollection",
        bodyModel: model.PropertyCollection,
        type: "model.PropertyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Onboarding setting
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ManageSettingsRequest
   * @return ManageSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ManageSettings.ts.html |here} to see how to use ManageSettings API.
   */
  public async manageSettings(
    manageSettingsRequest: requests.ManageSettingsRequest
  ): Promise<responses.ManageSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#manageSettings.");
    const operationName = "manageSettings";
    const apiReferenceLink = "";
    const pathParams = {
      "{onboardingId}": manageSettingsRequest.onboardingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": manageSettingsRequest.ifMatch,
      "opc-request-id": manageSettingsRequest.opcRequestId,
      "opc-retry-token": manageSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      manageSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings/{onboardingId}/actions/manageSettings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        manageSettingsRequest.manageSettingsDetails,
        "ManageSettingsDetails",
        model.ManageSettingsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ManageSettingsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a CompliancePolicyRule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateCompliancePolicyRuleRequest
   * @return UpdateCompliancePolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateCompliancePolicyRule.ts.html |here} to see how to use UpdateCompliancePolicyRule API.
   */
  public async updateCompliancePolicyRule(
    updateCompliancePolicyRuleRequest: requests.UpdateCompliancePolicyRuleRequest
  ): Promise<responses.UpdateCompliancePolicyRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#updateCompliancePolicyRule."
      );
    const operationName = "updateCompliancePolicyRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{compliancePolicyRuleId}": updateCompliancePolicyRuleRequest.compliancePolicyRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCompliancePolicyRuleRequest.ifMatch,
      "opc-request-id": updateCompliancePolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCompliancePolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compliancePolicyRules/{compliancePolicyRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCompliancePolicyRuleRequest.updateCompliancePolicyRuleDetails,
        "UpdateCompliancePolicyRuleDetails",
        model.UpdateCompliancePolicyRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCompliancePolicyRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Onboarding
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOnboardingRequest
   * @return UpdateOnboardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateOnboarding.ts.html |here} to see how to use UpdateOnboarding API.
   */
  public async updateOnboarding(
    updateOnboardingRequest: requests.UpdateOnboardingRequest
  ): Promise<responses.UpdateOnboardingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#updateOnboarding.");
    const operationName = "updateOnboarding";
    const apiReferenceLink = "";
    const pathParams = {
      "{onboardingId}": updateOnboardingRequest.onboardingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOnboardingRequest.ifMatch,
      "opc-request-id": updateOnboardingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnboardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/Onboardings/{onboardingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnboardingRequest.updateOnboardingDetails,
        "UpdateOnboardingDetails",
        model.UpdateOnboardingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnboardingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the PlatformConfiguration
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePlatformConfigurationRequest
   * @return UpdatePlatformConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdatePlatformConfiguration.ts.html |here} to see how to use UpdatePlatformConfiguration API.
   */
  public async updatePlatformConfiguration(
    updatePlatformConfigurationRequest: requests.UpdatePlatformConfigurationRequest
  ): Promise<responses.UpdatePlatformConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementAdminClient#updatePlatformConfiguration."
      );
    const operationName = "updatePlatformConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{platformConfigurationId}": updatePlatformConfigurationRequest.platformConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePlatformConfigurationRequest.ifMatch,
      "opc-request-id": updatePlatformConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePlatformConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/platformConfigurations/{platformConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePlatformConfigurationRequest.updatePlatformConfigurationDetails,
        "UpdatePlatformConfigurationDetails",
        model.UpdatePlatformConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePlatformConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a property in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePropertyRequest
   * @return UpdatePropertyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateProperty.ts.html |here} to see how to use UpdateProperty API.
   */
  public async updateProperty(
    updatePropertyRequest: requests.UpdatePropertyRequest
  ): Promise<responses.UpdatePropertyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementAdminClient#updateProperty.");
    const operationName = "updateProperty";
    const apiReferenceLink = "";
    const pathParams = {
      "{propertyId}": updatePropertyRequest.propertyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePropertyRequest.ifMatch,
      "opc-request-id": updatePropertyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePropertyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/properties/{propertyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePropertyRequest.updatePropertyDetails,
        "UpdatePropertyDetails",
        model.UpdatePropertyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePropertyResponse>{},
        body: await response.json(),
        bodyKey: "property",
        bodyModel: model.Property,
        type: "model.Property",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum FleetAppsManagementMaintenanceWindowApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetAppsManagementMaintenanceWindowClient {
  protected static serviceEndpointTemplate = "https://fams.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetAppsManagementMaintenanceWindowWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetAppsManagementMaintenanceWindow";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetappsmanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetappsmanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230831";
    if (this.logger)
      this.logger.info(
        `FleetAppsManagementMaintenanceWindowClient endpoint set to ${this._endpoint}`
      );
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetAppsManagementMaintenanceWindowClient.serviceEndpointTemplate,
        this._region,
        FleetAppsManagementMaintenanceWindowClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetAppsManagementMaintenanceWindowClient.serviceEndpointTemplate,
        this._regionId,
        FleetAppsManagementMaintenanceWindowClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetAppsManagementMaintenanceWindowClient.serviceEndpointTemplate,
      region,
      FleetAppsManagementMaintenanceWindowClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetAppsManagementMaintenanceWindowClient.serviceEndpointTemplate,
      regionId,
      FleetAppsManagementMaintenanceWindowClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetAppsManagementMaintenanceWindowWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    config?: common.WaiterConfiguration
  ): FleetAppsManagementMaintenanceWindowWaiter {
    this._waiters = new FleetAppsManagementMaintenanceWindowWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetAppsManagementMaintenanceWindowWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Create a maintenance window in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMaintenanceWindowRequest
   * @return CreateMaintenanceWindowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateMaintenanceWindow.ts.html |here} to see how to use CreateMaintenanceWindow API.
   */
  public async createMaintenanceWindow(
    createMaintenanceWindowRequest: requests.CreateMaintenanceWindowRequest
  ): Promise<responses.CreateMaintenanceWindowResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementMaintenanceWindowClient#createMaintenanceWindow."
      );
    const operationName = "createMaintenanceWindow";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMaintenanceWindowRequest.opcRetryToken,
      "opc-request-id": createMaintenanceWindowRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMaintenanceWindowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maintenanceWindows",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMaintenanceWindowRequest.createMaintenanceWindowDetails,
        "CreateMaintenanceWindowDetails",
        model.CreateMaintenanceWindowDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMaintenanceWindowResponse>{},
        body: await response.json(),
        bodyKey: "maintenanceWindow",
        bodyModel: model.MaintenanceWindow,
        type: "model.MaintenanceWindow",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a maintenance window in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMaintenanceWindowRequest
   * @return DeleteMaintenanceWindowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteMaintenanceWindow.ts.html |here} to see how to use DeleteMaintenanceWindow API.
   */
  public async deleteMaintenanceWindow(
    deleteMaintenanceWindowRequest: requests.DeleteMaintenanceWindowRequest
  ): Promise<responses.DeleteMaintenanceWindowResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementMaintenanceWindowClient#deleteMaintenanceWindow."
      );
    const operationName = "deleteMaintenanceWindow";
    const apiReferenceLink = "";
    const pathParams = {
      "{maintenanceWindowId}": deleteMaintenanceWindowRequest.maintenanceWindowId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMaintenanceWindowRequest.ifMatch,
      "opc-request-id": deleteMaintenanceWindowRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMaintenanceWindowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maintenanceWindows/{maintenanceWindowId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMaintenanceWindowResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details for a maintenance window in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMaintenanceWindowRequest
   * @return GetMaintenanceWindowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetMaintenanceWindow.ts.html |here} to see how to use GetMaintenanceWindow API.
   */
  public async getMaintenanceWindow(
    getMaintenanceWindowRequest: requests.GetMaintenanceWindowRequest
  ): Promise<responses.GetMaintenanceWindowResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementMaintenanceWindowClient#getMaintenanceWindow."
      );
    const operationName = "getMaintenanceWindow";
    const apiReferenceLink = "";
    const pathParams = {
      "{maintenanceWindowId}": getMaintenanceWindowRequest.maintenanceWindowId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMaintenanceWindowRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMaintenanceWindowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maintenanceWindows/{maintenanceWindowId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMaintenanceWindowResponse>{},
        body: await response.json(),
        bodyKey: "maintenanceWindow",
        bodyModel: model.MaintenanceWindow,
        type: "model.MaintenanceWindow",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List maintenance windows for a specified tenancy in\u00A0Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaintenanceWindowsRequest
   * @return ListMaintenanceWindowsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListMaintenanceWindows.ts.html |here} to see how to use ListMaintenanceWindows API.
   */
  public async listMaintenanceWindows(
    listMaintenanceWindowsRequest: requests.ListMaintenanceWindowsRequest
  ): Promise<responses.ListMaintenanceWindowsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementMaintenanceWindowClient#listMaintenanceWindows."
      );
    const operationName = "listMaintenanceWindows";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMaintenanceWindowsRequest.compartmentId,
      "lifecycleState": listMaintenanceWindowsRequest.lifecycleState,
      "displayName": listMaintenanceWindowsRequest.displayName,
      "timeScheduleStartGreaterThanOrEqualTo":
        listMaintenanceWindowsRequest.timeScheduleStartGreaterThanOrEqualTo,
      "id": listMaintenanceWindowsRequest.id,
      "limit": listMaintenanceWindowsRequest.limit,
      "page": listMaintenanceWindowsRequest.page,
      "sortOrder": listMaintenanceWindowsRequest.sortOrder,
      "sortBy": listMaintenanceWindowsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaintenanceWindowsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaintenanceWindowsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maintenanceWindows",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaintenanceWindowsResponse>{},
        body: await response.json(),
        bodyKey: "maintenanceWindowCollection",
        bodyModel: model.MaintenanceWindowCollection,
        type: "model.MaintenanceWindowCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a maintenance window in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMaintenanceWindowRequest
   * @return UpdateMaintenanceWindowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateMaintenanceWindow.ts.html |here} to see how to use UpdateMaintenanceWindow API.
   */
  public async updateMaintenanceWindow(
    updateMaintenanceWindowRequest: requests.UpdateMaintenanceWindowRequest
  ): Promise<responses.UpdateMaintenanceWindowResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementMaintenanceWindowClient#updateMaintenanceWindow."
      );
    const operationName = "updateMaintenanceWindow";
    const apiReferenceLink = "";
    const pathParams = {
      "{maintenanceWindowId}": updateMaintenanceWindowRequest.maintenanceWindowId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMaintenanceWindowRequest.ifMatch,
      "opc-request-id": updateMaintenanceWindowRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMaintenanceWindowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maintenanceWindows/{maintenanceWindowId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMaintenanceWindowRequest.updateMaintenanceWindowDetails,
        "UpdateMaintenanceWindowDetails",
        model.UpdateMaintenanceWindowDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMaintenanceWindowResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum FleetAppsManagementOperationsApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetAppsManagementOperationsClient {
  protected static serviceEndpointTemplate = "https://fams.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetAppsManagementOperationsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetAppsManagementOperations";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetappsmanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetappsmanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230831";
    if (this.logger)
      this.logger.info(`FleetAppsManagementOperationsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetAppsManagementOperationsClient.serviceEndpointTemplate,
        this._region,
        FleetAppsManagementOperationsClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetAppsManagementOperationsClient.serviceEndpointTemplate,
        this._regionId,
        FleetAppsManagementOperationsClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetAppsManagementOperationsClient.serviceEndpointTemplate,
      region,
      FleetAppsManagementOperationsClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetAppsManagementOperationsClient.serviceEndpointTemplate,
      regionId,
      FleetAppsManagementOperationsClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetAppsManagementOperationsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FleetAppsManagementOperationsWaiter {
    this._waiters = new FleetAppsManagementOperationsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetAppsManagementOperationsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Creates a new Patch.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePatchRequest
   * @return CreatePatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreatePatch.ts.html |here} to see how to use CreatePatch API.
   */
  public async createPatch(
    createPatchRequest: requests.CreatePatchRequest
  ): Promise<responses.CreatePatchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#createPatch.");
    const operationName = "createPatch";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPatchRequest.opcRetryToken,
      "opc-request-id": createPatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/patches",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPatchRequest.createPatchDetails,
        "CreatePatchDetails",
        model.CreatePatchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePatchResponse>{},
        body: await response.json(),
        bodyKey: "patch",
        bodyModel: model.Patch,
        type: "model.Patch",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a SchedulerDefinition to perform lifecycle operations.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSchedulerDefinitionRequest
   * @return CreateSchedulerDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateSchedulerDefinition.ts.html |here} to see how to use CreateSchedulerDefinition API.
   */
  public async createSchedulerDefinition(
    createSchedulerDefinitionRequest: requests.CreateSchedulerDefinitionRequest
  ): Promise<responses.CreateSchedulerDefinitionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#createSchedulerDefinition."
      );
    const operationName = "createSchedulerDefinition";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSchedulerDefinitionRequest.opcRetryToken,
      "opc-request-id": createSchedulerDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSchedulerDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSchedulerDefinitionRequest.createSchedulerDefinitionDetails,
        "CreateSchedulerDefinitionDetails",
        model.CreateSchedulerDefinitionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSchedulerDefinitionResponse>{},
        body: await response.json(),
        bodyKey: "schedulerDefinition",
        bodyModel: model.SchedulerDefinition,
        type: "model.SchedulerDefinition",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Patch resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePatchRequest
   * @return DeletePatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeletePatch.ts.html |here} to see how to use DeletePatch API.
   */
  public async deletePatch(
    deletePatchRequest: requests.DeletePatchRequest
  ): Promise<responses.DeletePatchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#deletePatch.");
    const operationName = "deletePatch";
    const apiReferenceLink = "";
    const pathParams = {
      "{patchId}": deletePatchRequest.patchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePatchRequest.ifMatch,
      "opc-request-id": deletePatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/patches/{patchId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePatchResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a SchedulerDefinition resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSchedulerDefinitionRequest
   * @return DeleteSchedulerDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteSchedulerDefinition.ts.html |here} to see how to use DeleteSchedulerDefinition API.
   */
  public async deleteSchedulerDefinition(
    deleteSchedulerDefinitionRequest: requests.DeleteSchedulerDefinitionRequest
  ): Promise<responses.DeleteSchedulerDefinitionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#deleteSchedulerDefinition."
      );
    const operationName = "deleteSchedulerDefinition";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerDefinitionId}": deleteSchedulerDefinitionRequest.schedulerDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSchedulerDefinitionRequest.ifMatch,
      "opc-request-id": deleteSchedulerDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSchedulerDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions/{schedulerDefinitionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSchedulerDefinitionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a lifecycle operation schedule in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSchedulerJobRequest
   * @return DeleteSchedulerJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteSchedulerJob.ts.html |here} to see how to use DeleteSchedulerJob API.
   */
  public async deleteSchedulerJob(
    deleteSchedulerJobRequest: requests.DeleteSchedulerJobRequest
  ): Promise<responses.DeleteSchedulerJobResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#deleteSchedulerJob."
      );
    const operationName = "deleteSchedulerJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": deleteSchedulerJobRequest.schedulerJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSchedulerJobRequest.ifMatch,
      "opc-request-id": deleteSchedulerJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSchedulerJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSchedulerJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate Compliance Report
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ExportComplianceReportRequest
   * @return ExportComplianceReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ExportComplianceReport.ts.html |here} to see how to use ExportComplianceReport API.
   */
  public async exportComplianceReport(
    exportComplianceReportRequest: requests.ExportComplianceReportRequest
  ): Promise<responses.ExportComplianceReportResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#exportComplianceReport."
      );
    const operationName = "exportComplianceReport";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": exportComplianceReportRequest.opcRetryToken,
      "if-match": exportComplianceReportRequest.ifMatch,
      "opc-request-id": exportComplianceReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportComplianceReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/complianceRecords/actions/exportComplianceReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportComplianceReportRequest.exportComplianceReportDetails,
        "ExportComplianceReportDetails",
        model.ExportComplianceReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportComplianceReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Task Execution by Identifier for a Resource within an action group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetExecutionRequest
   * @return GetExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetExecution.ts.html |here} to see how to use GetExecution API.
   */
  public async getExecution(
    getExecutionRequest: requests.GetExecutionRequest
  ): Promise<responses.GetExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#getExecution.");
    const operationName = "getExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": getExecutionRequest.schedulerJobId,
      "{jobActivityId}": getExecutionRequest.jobActivityId,
      "{resourceId}": getExecutionRequest.resourceId,
      "{executionId}": getExecutionRequest.executionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/resources/{resourceId}/executions/{executionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExecutionResponse>{},
        body: await response.json(),
        bodyKey: "execution",
        bodyModel: model.Execution,
        type: "model.Execution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets activity details by identifier for a job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobActivityRequest
   * @return GetJobActivityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetJobActivity.ts.html |here} to see how to use GetJobActivity API.
   */
  public async getJobActivity(
    getJobActivityRequest: requests.GetJobActivityRequest
  ): Promise<responses.GetJobActivityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#getJobActivity.");
    const operationName = "getJobActivity";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": getJobActivityRequest.schedulerJobId,
      "{jobActivityId}": getJobActivityRequest.jobActivityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobActivityRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobActivityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobActivityResponse>{},
        body: await response.json(),
        bodyKey: "jobActivity",
        bodyModel: model.JobActivity,
        type: "model.JobActivity",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Patch by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPatchRequest
   * @return GetPatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetPatch.ts.html |here} to see how to use GetPatch API.
   */
  public async getPatch(
    getPatchRequest: requests.GetPatchRequest
  ): Promise<responses.GetPatchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#getPatch.");
    const operationName = "getPatch";
    const apiReferenceLink = "";
    const pathParams = {
      "{patchId}": getPatchRequest.patchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/patches/{patchId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPatchResponse>{},
        body: await response.json(),
        bodyKey: "patch",
        bodyModel: model.Patch,
        type: "model.Patch",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a SchedulerDefinition that performs lifecycle management operations.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSchedulerDefinitionRequest
   * @return GetSchedulerDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetSchedulerDefinition.ts.html |here} to see how to use GetSchedulerDefinition API.
   */
  public async getSchedulerDefinition(
    getSchedulerDefinitionRequest: requests.GetSchedulerDefinitionRequest
  ): Promise<responses.GetSchedulerDefinitionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#getSchedulerDefinition."
      );
    const operationName = "getSchedulerDefinition";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerDefinitionId}": getSchedulerDefinitionRequest.schedulerDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSchedulerDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSchedulerDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions/{schedulerDefinitionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSchedulerDefinitionResponse>{},
        body: await response.json(),
        bodyKey: "schedulerDefinition",
        bodyModel: model.SchedulerDefinition,
        type: "model.SchedulerDefinition",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a lifecycle management operations job in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSchedulerJobRequest
   * @return GetSchedulerJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetSchedulerJob.ts.html |here} to see how to use GetSchedulerJob API.
   */
  public async getSchedulerJob(
    getSchedulerJobRequest: requests.GetSchedulerJobRequest
  ): Promise<responses.GetSchedulerJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#getSchedulerJob.");
    const operationName = "getSchedulerJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": getSchedulerJobRequest.schedulerJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSchedulerJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSchedulerJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSchedulerJobResponse>{},
        body: await response.json(),
        bodyKey: "schedulerJob",
        bodyModel: model.SchedulerJob,
        type: "model.SchedulerJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of complianceDetails.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComplianceRecordsRequest
   * @return ListComplianceRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListComplianceRecords.ts.html |here} to see how to use ListComplianceRecords API.
   */
  public async listComplianceRecords(
    listComplianceRecordsRequest: requests.ListComplianceRecordsRequest
  ): Promise<responses.ListComplianceRecordsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#listComplianceRecords."
      );
    const operationName = "listComplianceRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listComplianceRecordsRequest.compartmentId,
      "resourceId": listComplianceRecordsRequest.resourceId,
      "entityId": listComplianceRecordsRequest.entityId,
      "productName": listComplianceRecordsRequest.productName,
      "productStack": listComplianceRecordsRequest.productStack,
      "targetName": listComplianceRecordsRequest.targetName,
      "complianceState": listComplianceRecordsRequest.complianceState,
      "limit": listComplianceRecordsRequest.limit,
      "page": listComplianceRecordsRequest.page,
      "sortOrder": listComplianceRecordsRequest.sortOrder,
      "sortBy": listComplianceRecordsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComplianceRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComplianceRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/complianceRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComplianceRecordsResponse>{},
        body: await response.json(),
        bodyKey: "complianceRecordCollection",
        bodyModel: model.ComplianceRecordCollection,
        type: "model.ComplianceRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Task Executions for a Resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListExecutionsRequest
   * @return ListExecutionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListExecutions.ts.html |here} to see how to use ListExecutions API.
   */
  public async listExecutions(
    listExecutionsRequest: requests.ListExecutionsRequest
  ): Promise<responses.ListExecutionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#listExecutions.");
    const operationName = "listExecutions";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": listExecutionsRequest.schedulerJobId,
      "{jobActivityId}": listExecutionsRequest.jobActivityId,
      "{resourceId}": listExecutionsRequest.resourceId
    };

    const queryParams = {
      "resourceTaskId": listExecutionsRequest.resourceTaskId,
      "stepName": listExecutionsRequest.stepName,
      "targetName": listExecutionsRequest.targetName,
      "sequence": listExecutionsRequest.sequence,
      "limit": listExecutionsRequest.limit,
      "page": listExecutionsRequest.page,
      "sortOrder": listExecutionsRequest.sortOrder,
      "sortBy": listExecutionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/resources/{resourceId}/executions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "executionCollection",
        bodyModel: model.ExecutionCollection,
        type: "model.ExecutionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Patches.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPatchesRequest
   * @return ListPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListPatches.ts.html |here} to see how to use ListPatches API.
   */
  public async listPatches(
    listPatchesRequest: requests.ListPatchesRequest
  ): Promise<responses.ListPatchesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#listPatches.");
    const operationName = "listPatches";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPatchesRequest.compartmentId,
      "productId": listPatchesRequest.productId,
      "version": listPatchesRequest.version,
      "type": listPatchesRequest.type,
      "patchTypeId": listPatchesRequest.patchTypeId,
      "name": listPatchesRequest.name,
      "id": listPatchesRequest.id,
      "timeReleasedGreaterThanOrEqualTo": listPatchesRequest.timeReleasedGreaterThanOrEqualTo,
      "timeReleasedLessThan": listPatchesRequest.timeReleasedLessThan,
      "shouldCompliancePolicyRulesBeApplied":
        listPatchesRequest.shouldCompliancePolicyRulesBeApplied,
      "limit": listPatchesRequest.limit,
      "page": listPatchesRequest.page,
      "lifecycleState": listPatchesRequest.lifecycleState,
      "sortBy": listPatchesRequest.sortBy,
      "sortOrder": listPatchesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/patches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPatchesResponse>{},
        body: await response.json(),
        bodyKey: "patchCollection",
        bodyModel: model.PatchCollection,
        type: "model.PatchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of resources for an Activity Execution.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListResourcesRequest
   * @return ListResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListResources.ts.html |here} to see how to use ListResources API.
   */
  public async listResources(
    listResourcesRequest: requests.ListResourcesRequest
  ): Promise<responses.ListResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#listResources.");
    const operationName = "listResources";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": listResourcesRequest.schedulerJobId,
      "{jobActivityId}": listResourcesRequest.jobActivityId
    };

    const queryParams = {
      "resourceTaskId": listResourcesRequest.resourceTaskId,
      "stepName": listResourcesRequest.stepName,
      "targetName": listResourcesRequest.targetName,
      "sequence": listResourcesRequest.sequence,
      "limit": listResourcesRequest.limit,
      "page": listResourcesRequest.page,
      "sortOrder": listResourcesRequest.sortOrder,
      "sortBy": listResourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/resources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourcesResponse>{},
        body: await response.json(),
        bodyKey: "resourceCollection",
        bodyModel: model.ResourceCollection,
        type: "model.ResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ScheduledFleets.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListScheduledFleetsRequest
   * @return ListScheduledFleetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListScheduledFleets.ts.html |here} to see how to use ListScheduledFleets API.
   */
  public async listScheduledFleets(
    listScheduledFleetsRequest: requests.ListScheduledFleetsRequest
  ): Promise<responses.ListScheduledFleetsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#listScheduledFleets."
      );
    const operationName = "listScheduledFleets";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerDefinitionId}": listScheduledFleetsRequest.schedulerDefinitionId
    };

    const queryParams = {
      "compartmentId": listScheduledFleetsRequest.compartmentId,
      "displayName": listScheduledFleetsRequest.displayName,
      "limit": listScheduledFleetsRequest.limit,
      "page": listScheduledFleetsRequest.page,
      "sortOrder": listScheduledFleetsRequest.sortOrder,
      "sortBy": listScheduledFleetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScheduledFleetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScheduledFleetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions/{schedulerDefinitionId}/scheduledFleets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledFleetsResponse>{},
        body: await response.json(),
        bodyKey: "scheduledFleetCollection",
        bodyModel: model.ScheduledFleetCollection,
        type: "model.ScheduledFleetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all lifecycle management schedules in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSchedulerDefinitionsRequest
   * @return ListSchedulerDefinitionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListSchedulerDefinitions.ts.html |here} to see how to use ListSchedulerDefinitions API.
   */
  public async listSchedulerDefinitions(
    listSchedulerDefinitionsRequest: requests.ListSchedulerDefinitionsRequest
  ): Promise<responses.ListSchedulerDefinitionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#listSchedulerDefinitions."
      );
    const operationName = "listSchedulerDefinitions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSchedulerDefinitionsRequest.compartmentId,
      "lifecycleState": listSchedulerDefinitionsRequest.lifecycleState,
      "displayName": listSchedulerDefinitionsRequest.displayName,
      "product": listSchedulerDefinitionsRequest.product,
      "id": listSchedulerDefinitionsRequest.id,
      "maintenanceWindowId": listSchedulerDefinitionsRequest.maintenanceWindowId,
      "runbookId": listSchedulerDefinitionsRequest.runbookId,
      "fleetId": listSchedulerDefinitionsRequest.fleetId,
      "limit": listSchedulerDefinitionsRequest.limit,
      "page": listSchedulerDefinitionsRequest.page,
      "sortOrder": listSchedulerDefinitionsRequest.sortOrder,
      "sortBy": listSchedulerDefinitionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchedulerDefinitionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchedulerDefinitionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchedulerDefinitionsResponse>{},
        body: await response.json(),
        bodyKey: "schedulerDefinitionCollection",
        bodyModel: model.SchedulerDefinitionCollection,
        type: "model.SchedulerDefinitionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List scheduled lifecycle operation jobs in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSchedulerJobsRequest
   * @return ListSchedulerJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListSchedulerJobs.ts.html |here} to see how to use ListSchedulerJobs API.
   */
  public async listSchedulerJobs(
    listSchedulerJobsRequest: requests.ListSchedulerJobsRequest
  ): Promise<responses.ListSchedulerJobsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#listSchedulerJobs.");
    const operationName = "listSchedulerJobs";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSchedulerJobsRequest.compartmentId,
      "lifecycleState": listSchedulerJobsRequest.lifecycleState,
      "fleetId": listSchedulerJobsRequest.fleetId,
      "timeScheduledGreaterThanOrEqualTo":
        listSchedulerJobsRequest.timeScheduledGreaterThanOrEqualTo,
      "timeScheduledLessThan": listSchedulerJobsRequest.timeScheduledLessThan,
      "isRemediationJobNeeded": listSchedulerJobsRequest.isRemediationJobNeeded,
      "subState": listSchedulerJobsRequest.subState,
      "displayName": listSchedulerJobsRequest.displayName,
      "id": listSchedulerJobsRequest.id,
      "defintionId": listSchedulerJobsRequest.defintionId,
      "limit": listSchedulerJobsRequest.limit,
      "page": listSchedulerJobsRequest.page,
      "sortOrder": listSchedulerJobsRequest.sortOrder,
      "sortBy": listSchedulerJobsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchedulerJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchedulerJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchedulerJobsResponse>{},
        body: await response.json(),
        bodyKey: "schedulerJobCollection",
        bodyModel: model.SchedulerJobCollection,
        type: "model.SchedulerJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Steps for an Activity Execution.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListStepsRequest
   * @return ListStepsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListSteps.ts.html |here} to see how to use ListSteps API.
   */
  public async listSteps(
    listStepsRequest: requests.ListStepsRequest
  ): Promise<responses.ListStepsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#listSteps.");
    const operationName = "listSteps";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": listStepsRequest.schedulerJobId,
      "{jobActivityId}": listStepsRequest.jobActivityId
    };

    const queryParams = {
      "resourceTaskId": listStepsRequest.resourceTaskId,
      "stepName": listStepsRequest.stepName,
      "targetName": listStepsRequest.targetName,
      "sequence": listStepsRequest.sequence,
      "limit": listStepsRequest.limit,
      "page": listStepsRequest.page,
      "sortOrder": listStepsRequest.sortOrder,
      "sortBy": listStepsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStepsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStepsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}/jobActivities/{jobActivityId}/steps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStepsResponse>{},
        body: await response.json(),
        bodyKey: "stepCollection",
        bodyModel: model.StepCollection,
        type: "model.StepCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Manage execution actions for a Job like retrying or pausing a task.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ManageJobExecutionRequest
   * @return ManageJobExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ManageJobExecution.ts.html |here} to see how to use ManageJobExecution API.
   */
  public async manageJobExecution(
    manageJobExecutionRequest: requests.ManageJobExecutionRequest
  ): Promise<responses.ManageJobExecutionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#manageJobExecution."
      );
    const operationName = "manageJobExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": manageJobExecutionRequest.schedulerJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": manageJobExecutionRequest.opcRetryToken,
      "if-match": manageJobExecutionRequest.ifMatch,
      "opc-request-id": manageJobExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      manageJobExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}/actions/manageJobExecution",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        manageJobExecutionRequest.manageJobExecutionDetails,
        "ManageJobExecutionDetails",
        model.ManageJobExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ManageJobExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve  aggregated summary information of ComplianceRecords within a Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeComplianceRecordCountsRequest
   * @return SummarizeComplianceRecordCountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/SummarizeComplianceRecordCounts.ts.html |here} to see how to use SummarizeComplianceRecordCounts API.
   */
  public async summarizeComplianceRecordCounts(
    summarizeComplianceRecordCountsRequest: requests.SummarizeComplianceRecordCountsRequest
  ): Promise<responses.SummarizeComplianceRecordCountsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#summarizeComplianceRecordCounts."
      );
    const operationName = "summarizeComplianceRecordCounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeComplianceRecordCountsRequest.compartmentId,
      "limit": summarizeComplianceRecordCountsRequest.limit,
      "page": summarizeComplianceRecordCountsRequest.page,
      "sortOrder": summarizeComplianceRecordCountsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeComplianceRecordCountsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeComplianceRecordCountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/complianceRecordCounts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeComplianceRecordCountsResponse>{},
        body: await response.json(),
        bodyKey: "complianceRecordAggregationCollection",
        bodyModel: model.ComplianceRecordAggregationCollection,
        type: "model.ComplianceRecordAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve  aggregated summary information of Managed Entities within a Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeManagedEntityCountsRequest
   * @return SummarizeManagedEntityCountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/SummarizeManagedEntityCounts.ts.html |here} to see how to use SummarizeManagedEntityCounts API.
   */
  public async summarizeManagedEntityCounts(
    summarizeManagedEntityCountsRequest: requests.SummarizeManagedEntityCountsRequest
  ): Promise<responses.SummarizeManagedEntityCountsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#summarizeManagedEntityCounts."
      );
    const operationName = "summarizeManagedEntityCounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeManagedEntityCountsRequest.compartmentId,
      "limit": summarizeManagedEntityCountsRequest.limit,
      "page": summarizeManagedEntityCountsRequest.page,
      "sortOrder": summarizeManagedEntityCountsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeManagedEntityCountsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeManagedEntityCountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedEntityCounts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeManagedEntityCountsResponse>{},
        body: await response.json(),
        bodyKey: "managedEntityAggregationCollection",
        bodyModel: model.ManagedEntityAggregationCollection,
        type: "model.ManagedEntityAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve aggregated summary information of Scheduler Jobs within a Tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeSchedulerJobCountsRequest
   * @return SummarizeSchedulerJobCountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/SummarizeSchedulerJobCounts.ts.html |here} to see how to use SummarizeSchedulerJobCounts API.
   */
  public async summarizeSchedulerJobCounts(
    summarizeSchedulerJobCountsRequest: requests.SummarizeSchedulerJobCountsRequest
  ): Promise<responses.SummarizeSchedulerJobCountsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#summarizeSchedulerJobCounts."
      );
    const operationName = "summarizeSchedulerJobCounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSchedulerJobCountsRequest.compartmentId,
      "limit": summarizeSchedulerJobCountsRequest.limit,
      "page": summarizeSchedulerJobCountsRequest.page,
      "sortOrder": summarizeSchedulerJobCountsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSchedulerJobCountsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeSchedulerJobCountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobCounts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSchedulerJobCountsResponse>{},
        body: await response.json(),
        bodyKey: "schedulerJobAggregationCollection",
        bodyModel: model.SchedulerJobAggregationCollection,
        type: "model.SchedulerJobAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Patch
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePatchRequest
   * @return UpdatePatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdatePatch.ts.html |here} to see how to use UpdatePatch API.
   */
  public async updatePatch(
    updatePatchRequest: requests.UpdatePatchRequest
  ): Promise<responses.UpdatePatchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementOperationsClient#updatePatch.");
    const operationName = "updatePatch";
    const apiReferenceLink = "";
    const pathParams = {
      "{patchId}": updatePatchRequest.patchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePatchRequest.ifMatch,
      "opc-request-id": updatePatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/patches/{patchId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePatchRequest.updatePatchDetails,
        "UpdatePatchDetails",
        model.UpdatePatchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePatchResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the details of a SchedulerDefinition that performs lifecycle management operations.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSchedulerDefinitionRequest
   * @return UpdateSchedulerDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateSchedulerDefinition.ts.html |here} to see how to use UpdateSchedulerDefinition API.
   */
  public async updateSchedulerDefinition(
    updateSchedulerDefinitionRequest: requests.UpdateSchedulerDefinitionRequest
  ): Promise<responses.UpdateSchedulerDefinitionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#updateSchedulerDefinition."
      );
    const operationName = "updateSchedulerDefinition";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerDefinitionId}": updateSchedulerDefinitionRequest.schedulerDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSchedulerDefinitionRequest.ifMatch,
      "opc-request-id": updateSchedulerDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSchedulerDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerDefinitions/{schedulerDefinitionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSchedulerDefinitionRequest.updateSchedulerDefinitionDetails,
        "UpdateSchedulerDefinitionDetails",
        model.UpdateSchedulerDefinitionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSchedulerDefinitionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a lifecycle operation job schedule in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSchedulerJobRequest
   * @return UpdateSchedulerJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateSchedulerJob.ts.html |here} to see how to use UpdateSchedulerJob API.
   */
  public async updateSchedulerJob(
    updateSchedulerJobRequest: requests.UpdateSchedulerJobRequest
  ): Promise<responses.UpdateSchedulerJobResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetAppsManagementOperationsClient#updateSchedulerJob."
      );
    const operationName = "updateSchedulerJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{schedulerJobId}": updateSchedulerJobRequest.schedulerJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSchedulerJobRequest.ifMatch,
      "opc-request-id": updateSchedulerJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSchedulerJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedulerJobs/{schedulerJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSchedulerJobRequest.updateSchedulerJobDetails,
        "UpdateSchedulerJobDetails",
        model.UpdateSchedulerJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSchedulerJobResponse>{},
        body: await response.json(),
        bodyKey: "schedulerJob",
        bodyModel: model.SchedulerJob,
        type: "model.SchedulerJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum FleetAppsManagementRunbooksApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetAppsManagementRunbooksClient {
  protected static serviceEndpointTemplate = "https://fams.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetAppsManagementRunbooksWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetAppsManagementRunbooks";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetappsmanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetappsmanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230831";
    if (this.logger)
      this.logger.info(`FleetAppsManagementRunbooksClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetAppsManagementRunbooksClient.serviceEndpointTemplate,
        this._region,
        FleetAppsManagementRunbooksClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetAppsManagementRunbooksClient.serviceEndpointTemplate,
        this._regionId,
        FleetAppsManagementRunbooksClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetAppsManagementRunbooksClient.serviceEndpointTemplate,
      region,
      FleetAppsManagementRunbooksClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetAppsManagementRunbooksClient.serviceEndpointTemplate,
      regionId,
      FleetAppsManagementRunbooksClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetAppsManagementRunbooksWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FleetAppsManagementRunbooksWaiter {
    this._waiters = new FleetAppsManagementRunbooksWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetAppsManagementRunbooksWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Creates a new Runbook.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateRunbookRequest
   * @return CreateRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateRunbook.ts.html |here} to see how to use CreateRunbook API.
   */
  public async createRunbook(
    createRunbookRequest: requests.CreateRunbookRequest
  ): Promise<responses.CreateRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#createRunbook.");
    const operationName = "createRunbook";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRunbookRequest.opcRetryToken,
      "opc-request-id": createRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRunbookRequest.createRunbookDetails,
        "CreateRunbookDetails",
        model.CreateRunbookDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRunbookResponse>{},
        body: await response.json(),
        bodyKey: "runbook",
        bodyModel: model.Runbook,
        type: "model.Runbook",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Task.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTaskRecordRequest
   * @return CreateTaskRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/CreateTaskRecord.ts.html |here} to see how to use CreateTaskRecord API.
   */
  public async createTaskRecord(
    createTaskRecordRequest: requests.CreateTaskRecordRequest
  ): Promise<responses.CreateTaskRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#createTaskRecord.");
    const operationName = "createTaskRecord";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTaskRecordRequest.opcRetryToken,
      "opc-request-id": createTaskRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskRecords",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskRecordRequest.createTaskRecordDetails,
        "CreateTaskRecordDetails",
        model.CreateTaskRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskRecordResponse>{},
        body: await response.json(),
        bodyKey: "taskRecord",
        bodyModel: model.TaskRecord,
        type: "model.TaskRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Runbook resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteRunbookRequest
   * @return DeleteRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteRunbook.ts.html |here} to see how to use DeleteRunbook API.
   */
  public async deleteRunbook(
    deleteRunbookRequest: requests.DeleteRunbookRequest
  ): Promise<responses.DeleteRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#deleteRunbook.");
    const operationName = "deleteRunbook";
    const apiReferenceLink = "";
    const pathParams = {
      "{runbookId}": deleteRunbookRequest.runbookId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRunbookRequest.ifMatch,
      "opc-request-id": deleteRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks/{runbookId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRunbookResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Task Record resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTaskRecordRequest
   * @return DeleteTaskRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/DeleteTaskRecord.ts.html |here} to see how to use DeleteTaskRecord API.
   */
  public async deleteTaskRecord(
    deleteTaskRecordRequest: requests.DeleteTaskRecordRequest
  ): Promise<responses.DeleteTaskRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#deleteTaskRecord.");
    const operationName = "deleteTaskRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskRecordId}": deleteTaskRecordRequest.taskRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskRecordRequest.ifMatch,
      "opc-request-id": deleteTaskRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskRecords/{taskRecordId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskRecordResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a runbook in Fleet Application Management.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRunbookRequest
   * @return GetRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetRunbook.ts.html |here} to see how to use GetRunbook API.
   */
  public async getRunbook(
    getRunbookRequest: requests.GetRunbookRequest
  ): Promise<responses.GetRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#getRunbook.");
    const operationName = "getRunbook";
    const apiReferenceLink = "";
    const pathParams = {
      "{runbookId}": getRunbookRequest.runbookId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks/{runbookId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRunbookResponse>{},
        body: await response.json(),
        bodyKey: "runbook",
        bodyModel: model.Runbook,
        type: "model.Runbook",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Task by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTaskRecordRequest
   * @return GetTaskRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/GetTaskRecord.ts.html |here} to see how to use GetTaskRecord API.
   */
  public async getTaskRecord(
    getTaskRecordRequest: requests.GetTaskRecordRequest
  ): Promise<responses.GetTaskRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#getTaskRecord.");
    const operationName = "getTaskRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskRecordId}": getTaskRecordRequest.taskRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskRecords/{taskRecordId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskRecordResponse>{},
        body: await response.json(),
        bodyKey: "taskRecord",
        bodyModel: model.TaskRecord,
        type: "model.TaskRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List runbooks in Fleet Application Management.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRunbooksRequest
   * @return ListRunbooksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListRunbooks.ts.html |here} to see how to use ListRunbooks API.
   */
  public async listRunbooks(
    listRunbooksRequest: requests.ListRunbooksRequest
  ): Promise<responses.ListRunbooksResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#listRunbooks.");
    const operationName = "listRunbooks";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRunbooksRequest.compartmentId,
      "lifecycleState": listRunbooksRequest.lifecycleState,
      "displayName": listRunbooksRequest.displayName,
      "id": listRunbooksRequest.id,
      "type": listRunbooksRequest.type,
      "runbookRelevance": listRunbooksRequest.runbookRelevance,
      "platform": listRunbooksRequest.platform,
      "operation": listRunbooksRequest.operation,
      "limit": listRunbooksRequest.limit,
      "page": listRunbooksRequest.page,
      "sortOrder": listRunbooksRequest.sortOrder,
      "sortBy": listRunbooksRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRunbooksRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRunbooksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRunbooksResponse>{},
        body: await response.json(),
        bodyKey: "runbookCollection",
        bodyModel: model.RunbookCollection,
        type: "model.RunbookCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of TaskRecords.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTaskRecordsRequest
   * @return ListTaskRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/ListTaskRecords.ts.html |here} to see how to use ListTaskRecords API.
   */
  public async listTaskRecords(
    listTaskRecordsRequest: requests.ListTaskRecordsRequest
  ): Promise<responses.ListTaskRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#listTaskRecords.");
    const operationName = "listTaskRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTaskRecordsRequest.compartmentId,
      "platform": listTaskRecordsRequest.platform,
      "type": listTaskRecordsRequest.type,
      "displayName": listTaskRecordsRequest.displayName,
      "id": listTaskRecordsRequest.id,
      "limit": listTaskRecordsRequest.limit,
      "page": listTaskRecordsRequest.page,
      "lifecycleState": listTaskRecordsRequest.lifecycleState,
      "sortBy": listTaskRecordsRequest.sortBy,
      "sortOrder": listTaskRecordsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskRecordsResponse>{},
        body: await response.json(),
        bodyKey: "taskRecordCollection",
        bodyModel: model.TaskRecordCollection,
        type: "model.TaskRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish a Runbook.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PublishRunbookRequest
   * @return PublishRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/PublishRunbook.ts.html |here} to see how to use PublishRunbook API.
   */
  public async publishRunbook(
    publishRunbookRequest: requests.PublishRunbookRequest
  ): Promise<responses.PublishRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#publishRunbook.");
    const operationName = "publishRunbook";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": publishRunbookRequest.opcRetryToken,
      "if-match": publishRunbookRequest.ifMatch,
      "opc-request-id": publishRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks/actions/publishRunbook",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        publishRunbookRequest.publishRunbookDetails,
        "PublishRunbookDetails",
        model.PublishRunbookDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishRunbookResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish a Runbook.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SetDefaultRunbookRequest
   * @return SetDefaultRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/SetDefaultRunbook.ts.html |here} to see how to use SetDefaultRunbook API.
   */
  public async setDefaultRunbook(
    setDefaultRunbookRequest: requests.SetDefaultRunbookRequest
  ): Promise<responses.SetDefaultRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#setDefaultRunbook.");
    const operationName = "setDefaultRunbook";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": setDefaultRunbookRequest.opcRetryToken,
      "if-match": setDefaultRunbookRequest.ifMatch,
      "opc-request-id": setDefaultRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setDefaultRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks/actions/setDefaultRunbook",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setDefaultRunbookRequest.setDefaultRunbookDetails,
        "SetDefaultRunbookDetails",
        model.SetDefaultRunbookDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SetDefaultRunbookResponse>{},
        body: await response.json(),
        bodyKey: "runbook",
        bodyModel: model.Runbook,
        type: "model.Runbook",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Ronbook
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateRunbookRequest
   * @return UpdateRunbookResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateRunbook.ts.html |here} to see how to use UpdateRunbook API.
   */
  public async updateRunbook(
    updateRunbookRequest: requests.UpdateRunbookRequest
  ): Promise<responses.UpdateRunbookResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#updateRunbook.");
    const operationName = "updateRunbook";
    const apiReferenceLink = "";
    const pathParams = {
      "{runbookId}": updateRunbookRequest.runbookId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRunbookRequest.ifMatch,
      "opc-request-id": updateRunbookRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRunbookRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/runbooks/{runbookId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRunbookRequest.updateRunbookDetails,
        "UpdateRunbookDetails",
        model.UpdateRunbookDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRunbookResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Task
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTaskRecordRequest
   * @return UpdateTaskRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetappsmanagement/UpdateTaskRecord.ts.html |here} to see how to use UpdateTaskRecord API.
   */
  public async updateTaskRecord(
    updateTaskRecordRequest: requests.UpdateTaskRecordRequest
  ): Promise<responses.UpdateTaskRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetAppsManagementRunbooksClient#updateTaskRecord.");
    const operationName = "updateTaskRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskRecordId}": updateTaskRecordRequest.taskRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTaskRecordRequest.ifMatch,
      "opc-request-id": updateTaskRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTaskRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskRecords/{taskRecordId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTaskRecordRequest.updateTaskRecordDetails,
        "UpdateTaskRecordDetails",
        model.UpdateTaskRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTaskRecordResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
