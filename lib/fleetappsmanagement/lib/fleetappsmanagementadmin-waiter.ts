/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20230831
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FleetAppsManagementAdminClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class FleetAppsManagementAdminWaiter {
  public constructor(
    private client: FleetAppsManagementAdminClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forCompliancePolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCompliancePolicyResponse | null (null in case of 404 response)
   */
  public async forCompliancePolicy(
    request: serviceRequests.GetCompliancePolicyRequest,
    ...targetStates: models.CompliancePolicy.LifecycleState[]
  ): Promise<serviceResponses.GetCompliancePolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCompliancePolicy(request),
      response => targetStates.includes(response.compliancePolicy.lifecycleState!),
      targetStates.includes(models.CompliancePolicy.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCompliancePolicyRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCompliancePolicyRuleResponse | null (null in case of 404 response)
   */
  public async forCompliancePolicyRule(
    request: serviceRequests.GetCompliancePolicyRuleRequest,
    ...targetStates: models.CompliancePolicyRule.LifecycleState[]
  ): Promise<serviceResponses.GetCompliancePolicyRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCompliancePolicyRule(request),
      response => targetStates.includes(response.compliancePolicyRule.lifecycleState!),
      targetStates.includes(models.CompliancePolicyRule.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forOnboarding till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetOnboardingResponse | null (null in case of 404 response)
   */
  public async forOnboarding(
    request: serviceRequests.GetOnboardingRequest,
    ...targetStates: models.Onboarding.LifecycleState[]
  ): Promise<serviceResponses.GetOnboardingResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getOnboarding(request),
      response => targetStates.includes(response.onboarding.lifecycleState!),
      targetStates.includes(models.Onboarding.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forPlatformConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPlatformConfigurationResponse | null (null in case of 404 response)
   */
  public async forPlatformConfiguration(
    request: serviceRequests.GetPlatformConfigurationRequest,
    ...targetStates: models.PlatformConfiguration.LifecycleState[]
  ): Promise<serviceResponses.GetPlatformConfigurationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getPlatformConfiguration(request),
      response => targetStates.includes(response.platformConfiguration.lifecycleState!),
      targetStates.includes(models.PlatformConfiguration.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forProperty till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPropertyResponse | null (null in case of 404 response)
   */
  public async forProperty(
    request: serviceRequests.GetPropertyRequest,
    ...targetStates: models.Property.LifecycleState[]
  ): Promise<serviceResponses.GetPropertyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getProperty(request),
      response => targetStates.includes(response.property.lifecycleState!),
      targetStates.includes(models.Property.LifecycleState.Deleted)
    );
  }
}
