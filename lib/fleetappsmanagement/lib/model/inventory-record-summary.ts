/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20250228
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary information about an inventory target.
 */
export interface InventoryRecordSummary {
  /**
   * The OCID of the Inventory target.
   */
  "targetId": string;
  /**
   * Name of the target
   */
  "targetName": string;
  /**
   * Version of the product on the target
   */
  "version": string;
  /**
   * OCID of the resource associated with the target
   */
  "targetResourceId": string;
  /**
   * Name of the resource associated with the target
   */
  "targetResourceName"?: string;
  /**
   * OCID of the compartment to which the resource belongs to.
   */
  "compartmentId": string;
  /**
   * OCID of the product installed at the target path
   */
  "targetProductId"?: string;
  /**
   * Name of the product installed at the target path
   */
  "targetProductName": string;
  /**
   * OS installed on the resource associated with the target
   */
  "osType": string;
  /**
   * Architecture of the resource associated with the target
   */
  "architecture": string;
  /**
   * List of target properties
   */
  "properties": Array<model.InventoryRecordProperty>;
  /**
   * List of target components
   */
  "components": Array<model.InventoryRecordComponent>;
  /**
   * List of details on the patches currently installed on the target
   */
  "installedPatches": Array<model.InventoryRecordPatchDetails>;
  /**
   * The time this resource was created. An RFC3339 formatted datetime string.
   */
  "timeCreated"?: Date;
  /**
   * The time this resource was last updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated"?: Date;
  /**
   * The current state of the Inventory target.
   */
  "lifecycleState"?: string;
}

export namespace InventoryRecordSummary {
  export function getJsonObj(obj: InventoryRecordSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "properties": obj.properties
          ? obj.properties.map(item => {
              return model.InventoryRecordProperty.getJsonObj(item);
            })
          : undefined,
        "components": obj.components
          ? obj.components.map(item => {
              return model.InventoryRecordComponent.getJsonObj(item);
            })
          : undefined,
        "installedPatches": obj.installedPatches
          ? obj.installedPatches.map(item => {
              return model.InventoryRecordPatchDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: InventoryRecordSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "properties": obj.properties
          ? obj.properties.map(item => {
              return model.InventoryRecordProperty.getDeserializedJsonObj(item);
            })
          : undefined,
        "components": obj.components
          ? obj.components.map(item => {
              return model.InventoryRecordComponent.getDeserializedJsonObj(item);
            })
          : undefined,
        "installedPatches": obj.installedPatches
          ? obj.installedPatches.map(item => {
              return model.InventoryRecordPatchDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
