/**
 * Monitoring API
 * Use the Monitoring API to manage metric queries and alarms for assessing the health, capacity, and performance of your cloud resources.
Endpoints vary by operation. For PostMetricData, use the {@code telemetry-ingestion} endpoints; for all other operations, use the {@code telemetry} endpoints.
For more information, see
[the Monitoring documentation](https://docs.oracle.com/iaas/Content/Monitoring/home.htm).

 * OpenAPI spec version: 20180401
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Precondition for an alarm suppression within the suppression date and time range ({@code timeSuppressFrom} to {@code timeSuppressUntil}).
 *
 */
export interface SuppressionCondition {
  "conditionType": string;
}

export namespace SuppressionCondition {
  export function getJsonObj(obj: SuppressionCondition): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "conditionType" in obj && obj.conditionType) {
      switch (obj.conditionType) {
        case "RECURRENCE":
          return model.Recurrence.getJsonObj(<model.Recurrence>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.conditionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SuppressionCondition): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "conditionType" in obj && obj.conditionType) {
      switch (obj.conditionType) {
        case "RECURRENCE":
          return model.Recurrence.getDeserializedJsonObj(<model.Recurrence>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.conditionType}`);
      }
    }
    return jsonObj;
  }
}
