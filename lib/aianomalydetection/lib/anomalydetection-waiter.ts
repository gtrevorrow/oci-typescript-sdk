/**
 * Anomaly Detection API
 * OCI AI Service solutions can help Enterprise customers integrate AI into their products immediately by using our proven,
pre-trained/custom models or containers, and without a need to set up in house team of AI and ML experts.
This allows enterprises to focus on business drivers and development work rather than AI/ML operations, shortening the time to market.

 * OpenAPI spec version: 20210101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { AnomalyDetectionClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class AnomalyDetectionWaiter {
  public constructor(
    private client: AnomalyDetectionClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAiPrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAiPrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forAiPrivateEndpoint(
    request: serviceRequests.GetAiPrivateEndpointRequest,
    ...targetStates: models.AiPrivateEndpoint.LifecycleState[]
  ): Promise<serviceResponses.GetAiPrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAiPrivateEndpoint(request),
      response => targetStates.includes(response.aiPrivateEndpoint.lifecycleState!),
      targetStates.includes(models.AiPrivateEndpoint.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDataAsset till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataAssetResponse | null (null in case of 404 response)
   */
  public async forDataAsset(
    request: serviceRequests.GetDataAssetRequest,
    ...targetStates: models.DataAsset.LifecycleState[]
  ): Promise<serviceResponses.GetDataAssetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataAsset(request),
      response => targetStates.includes(response.dataAsset.lifecycleState!),
      targetStates.includes(models.DataAsset.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectAnomalyJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectAnomalyJobResponse
   */
  public async forDetectAnomalyJob(
    request: serviceRequests.GetDetectAnomalyJobRequest,
    ...targetStates: models.DetectAnomalyJob.LifecycleState[]
  ): Promise<serviceResponses.GetDetectAnomalyJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getDetectAnomalyJob(request),
      response => targetStates.includes(response.detectAnomalyJob.lifecycleState!)
    );
  }

  /**
   * Waits forModel till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetModelResponse | null (null in case of 404 response)
   */
  public async forModel(
    request: serviceRequests.GetModelRequest,
    ...targetStates: models.Model.LifecycleState[]
  ): Promise<serviceResponses.GetModelResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getModel(request),
      response => targetStates.includes(response.model.lifecycleState!),
      targetStates.includes(models.Model.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forProject till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProjectResponse | null (null in case of 404 response)
   */
  public async forProject(
    request: serviceRequests.GetProjectRequest,
    ...targetStates: models.Project.LifecycleState[]
  ): Promise<serviceResponses.GetProjectResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getProject(request),
      response => targetStates.includes(response.project.lifecycleState!),
      targetStates.includes(models.Project.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
