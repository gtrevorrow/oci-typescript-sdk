/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ManagementClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class ManagementWaiter {
  public constructor(
    private client: ManagementClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAuthenticationProvider till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAuthenticationProviderResponse | null (null in case of 404 response)
   */
  public async forAuthenticationProvider(
    request: serviceRequests.GetAuthenticationProviderRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetAuthenticationProviderResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAuthenticationProvider(request),
      response => targetStates.includes(response.authenticationProvider.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forChannel till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetChannelResponse | null (null in case of 404 response)
   */
  public async forChannel(
    request: serviceRequests.GetChannelRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetChannelResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getChannel(request),
      response => targetStates.includes(response.channel.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDigitalAssistant till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDigitalAssistantResponse | null (null in case of 404 response)
   */
  public async forDigitalAssistant(
    request: serviceRequests.GetDigitalAssistantRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDigitalAssistantResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDigitalAssistant(request),
      response => targetStates.includes(response.digitalAssistant.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDigitalAssistantParameter till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDigitalAssistantParameterResponse | null (null in case of 404 response)
   */
  public async forDigitalAssistantParameter(
    request: serviceRequests.GetDigitalAssistantParameterRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDigitalAssistantParameterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDigitalAssistantParameter(request),
      response => targetStates.includes(response.digitalAssistantParameter.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forOdaPrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetOdaPrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forOdaPrivateEndpoint(
    request: serviceRequests.GetOdaPrivateEndpointRequest,
    ...targetStates: models.OdaPrivateEndpoint.LifecycleState[]
  ): Promise<serviceResponses.GetOdaPrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getOdaPrivateEndpoint(request),
      response => targetStates.includes(response.odaPrivateEndpoint.lifecycleState!),
      targetStates.includes(models.OdaPrivateEndpoint.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forOdaPrivateEndpointAttachment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetOdaPrivateEndpointAttachmentResponse | null (null in case of 404 response)
   */
  public async forOdaPrivateEndpointAttachment(
    request: serviceRequests.GetOdaPrivateEndpointAttachmentRequest,
    ...targetStates: models.OdaPrivateEndpointAttachment.LifecycleState[]
  ): Promise<serviceResponses.GetOdaPrivateEndpointAttachmentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getOdaPrivateEndpointAttachment(request),
      response => targetStates.includes(response.odaPrivateEndpointAttachment.lifecycleState!),
      targetStates.includes(models.OdaPrivateEndpointAttachment.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forOdaPrivateEndpointScanProxy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetOdaPrivateEndpointScanProxyResponse | null (null in case of 404 response)
   */
  public async forOdaPrivateEndpointScanProxy(
    request: serviceRequests.GetOdaPrivateEndpointScanProxyRequest,
    ...targetStates: models.OdaPrivateEndpointScanProxy.LifecycleState[]
  ): Promise<serviceResponses.GetOdaPrivateEndpointScanProxyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getOdaPrivateEndpointScanProxy(request),
      response => targetStates.includes(response.odaPrivateEndpointScanProxy.lifecycleState!),
      targetStates.includes(models.OdaPrivateEndpointScanProxy.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSkill till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSkillResponse | null (null in case of 404 response)
   */
  public async forSkill(
    request: serviceRequests.GetSkillRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSkillResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSkill(request),
      response => targetStates.includes(response.skill.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSkillParameter till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSkillParameterResponse | null (null in case of 404 response)
   */
  public async forSkillParameter(
    request: serviceRequests.GetSkillParameterRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSkillParameterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSkillParameter(request),
      response => targetStates.includes(response.skillParameter.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTranslator till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTranslatorResponse | null (null in case of 404 response)
   */
  public async forTranslator(
    request: serviceRequests.GetTranslatorRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTranslatorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTranslator(request),
      response => targetStates.includes(response.translator.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }
}
