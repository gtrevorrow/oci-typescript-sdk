/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Metadata for a composite entity.
 */
export interface CompositeEntity extends model.Entity {
  /**
   * List of entity attributes.
   */
  "attributes": Array<model.EntityAttribute>;
  /**
   * List of entity actions.
   */
  "actions"?: Array<model.EntityAction>;
  "naturalLanguageMapping"?: model.EntityNaturalLanguageMapping;

  "type": string;
}

export namespace CompositeEntity {
  export function getJsonObj(obj: CompositeEntity, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Entity.getJsonObj(obj) as CompositeEntity)),
      ...{
        "attributes": obj.attributes
          ? obj.attributes.map(item => {
              return model.EntityAttribute.getJsonObj(item);
            })
          : undefined,
        "actions": obj.actions
          ? obj.actions.map(item => {
              return model.EntityAction.getJsonObj(item);
            })
          : undefined,
        "naturalLanguageMapping": obj.naturalLanguageMapping
          ? model.EntityNaturalLanguageMapping.getJsonObj(obj.naturalLanguageMapping)
          : undefined
      }
    };

    return jsonObj;
  }
  export const type = "COMPOSITE";
  export function getDeserializedJsonObj(obj: CompositeEntity, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Entity.getDeserializedJsonObj(obj) as CompositeEntity)),
      ...{
        "attributes": obj.attributes
          ? obj.attributes.map(item => {
              return model.EntityAttribute.getDeserializedJsonObj(item);
            })
          : undefined,
        "actions": obj.actions
          ? obj.actions.map(item => {
              return model.EntityAction.getDeserializedJsonObj(item);
            })
          : undefined,
        "naturalLanguageMapping": obj.naturalLanguageMapping
          ? model.EntityNaturalLanguageMapping.getDeserializedJsonObj(obj.naturalLanguageMapping)
          : undefined
      }
    };

    return jsonObj;
  }
}
