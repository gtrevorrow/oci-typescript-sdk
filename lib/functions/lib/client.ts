/**
 * Functions Service API
 * API for the Functions service.

 * OpenAPI spec version: 20181201
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { FunctionsManagementWaiter } from "./functionsmanagement-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FunctionsInvokeApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FunctionsInvokeClient {
  protected static serviceEndpointTemplate = "https://functions.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FunctionsInvoke";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("functions")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("functions");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181201";
    if (this.logger) this.logger.info(`FunctionsInvokeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Invokes a function
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param InvokeFunctionRequest
   * @return InvokeFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/InvokeFunction.ts.html |here} to see how to use InvokeFunction API.
   */
  public async invokeFunction(
    invokeFunctionRequest: requests.InvokeFunctionRequest
  ): Promise<responses.InvokeFunctionResponse> {
    if (this.logger) this.logger.debug("Calling operation FunctionsInvokeClient#invokeFunction.");
    const operationName = "invokeFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Function/InvokeFunction";
    const pathParams = {
      "{functionId}": invokeFunctionRequest.functionId
    };

    const queryParams = {};

    let headerParams = {
      "fn-intent": invokeFunctionRequest.fnIntent,
      "fn-invoke-type": invokeFunctionRequest.fnInvokeType,
      "opc-request-id": invokeFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      invokeFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions/{functionId}/actions/invoke",
      method: "POST",
      bodyContent: invokeFunctionRequest.invokeFunctionBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InvokeFunctionResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum FunctionsManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FunctionsManagementClient {
  protected static serviceEndpointTemplate = "https://functions.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FunctionsManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FunctionsManagement";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("functions")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("functions");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181201";
    if (this.logger)
      this.logger.info(`FunctionsManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FunctionsManagementClient.serviceEndpointTemplate,
        this._region,
        FunctionsManagementClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FunctionsManagementClient.serviceEndpointTemplate,
        this._regionId,
        FunctionsManagementClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FunctionsManagementClient.serviceEndpointTemplate,
      region,
      FunctionsManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FunctionsManagementClient.serviceEndpointTemplate,
      regionId,
      FunctionsManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FunctionsManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FunctionsManagementWaiter {
    this._waiters = new FunctionsManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FunctionsManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves an application into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see [Moving Resources Between Compartments](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeApplicationCompartmentRequest
   * @return ChangeApplicationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ChangeApplicationCompartment.ts.html |here} to see how to use ChangeApplicationCompartment API.
   */
  public async changeApplicationCompartment(
    changeApplicationCompartmentRequest: requests.ChangeApplicationCompartmentRequest
  ): Promise<responses.ChangeApplicationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FunctionsManagementClient#changeApplicationCompartment."
      );
    const operationName = "changeApplicationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Application/ChangeApplicationCompartment";
    const pathParams = {
      "{applicationId}": changeApplicationCompartmentRequest.applicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeApplicationCompartmentRequest.ifMatch,
      "opc-request-id": changeApplicationCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeApplicationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications/{applicationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeApplicationCompartmentRequest.changeApplicationCompartmentDetails,
        "ChangeApplicationCompartmentDetails",
        model.ChangeApplicationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeApplicationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new application.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateApplicationRequest
   * @return CreateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/CreateApplication.ts.html |here} to see how to use CreateApplication API.
   */
  public async createApplication(
    createApplicationRequest: requests.CreateApplicationRequest
  ): Promise<responses.CreateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#createApplication.");
    const operationName = "createApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Application/CreateApplication";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplicationRequest.createApplicationDetails,
        "CreateApplicationDetails",
        model.CreateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new function.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFunctionRequest
   * @return CreateFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/CreateFunction.ts.html |here} to see how to use CreateFunction API.
   */
  public async createFunction(
    createFunctionRequest: requests.CreateFunctionRequest
  ): Promise<responses.CreateFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#createFunction.");
    const operationName = "createFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Function/CreateFunction";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFunctionRequest.createFunctionDetails,
        "CreateFunctionDetails",
        model.CreateFunctionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFunctionResponse>{},
        body: await response.json(),
        bodyKey: "function",
        bodyModel: model.Function,
        type: "model.Function",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an application.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteApplicationRequest
   * @return DeleteApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/DeleteApplication.ts.html |here} to see how to use DeleteApplication API.
   */
  public async deleteApplication(
    deleteApplicationRequest: requests.DeleteApplicationRequest
  ): Promise<responses.DeleteApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#deleteApplication.");
    const operationName = "deleteApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Application/DeleteApplication";
    const pathParams = {
      "{applicationId}": deleteApplicationRequest.applicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplicationRequest.ifMatch,
      "opc-request-id": deleteApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications/{applicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a function.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFunctionRequest
   * @return DeleteFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/DeleteFunction.ts.html |here} to see how to use DeleteFunction API.
   */
  public async deleteFunction(
    deleteFunctionRequest: requests.DeleteFunctionRequest
  ): Promise<responses.DeleteFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#deleteFunction.");
    const operationName = "deleteFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Function/DeleteFunction";
    const pathParams = {
      "{functionId}": deleteFunctionRequest.functionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFunctionRequest.ifMatch,
      "opc-request-id": deleteFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions/{functionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFunctionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an application.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetApplicationRequest
   * @return GetApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/GetApplication.ts.html |here} to see how to use GetApplication API.
   */
  public async getApplication(
    getApplicationRequest: requests.GetApplicationRequest
  ): Promise<responses.GetApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#getApplication.");
    const operationName = "getApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Application/GetApplication";
    const pathParams = {
      "{applicationId}": getApplicationRequest.applicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications/{applicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a function.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFunctionRequest
   * @return GetFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/GetFunction.ts.html |here} to see how to use GetFunction API.
   */
  public async getFunction(
    getFunctionRequest: requests.GetFunctionRequest
  ): Promise<responses.GetFunctionResponse> {
    if (this.logger) this.logger.debug("Calling operation FunctionsManagementClient#getFunction.");
    const operationName = "getFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Function/GetFunction";
    const pathParams = {
      "{functionId}": getFunctionRequest.functionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions/{functionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFunctionResponse>{},
        body: await response.json(),
        bodyKey: "function",
        bodyModel: model.Function,
        type: "model.Function",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Fetches a Pre-built Function(PBF) Listing. Returns a PbfListing response model.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPbfListingRequest
   * @return GetPbfListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/GetPbfListing.ts.html |here} to see how to use GetPbfListing API.
   */
  public async getPbfListing(
    getPbfListingRequest: requests.GetPbfListingRequest
  ): Promise<responses.GetPbfListingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#getPbfListing.");
    const operationName = "getPbfListing";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/PbfListing/GetPbfListing";
    const pathParams = {
      "{pbfListingId}": getPbfListingRequest.pbfListingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPbfListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPbfListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pbfListings/{pbfListingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPbfListingResponse>{},
        body: await response.json(),
        bodyKey: "pbfListing",
        bodyModel: model.PbfListing,
        type: "model.PbfListing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a PbfListingVersion by identifier for a PbfListing.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPbfListingVersionRequest
   * @return GetPbfListingVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/GetPbfListingVersion.ts.html |here} to see how to use GetPbfListingVersion API.
   */
  public async getPbfListingVersion(
    getPbfListingVersionRequest: requests.GetPbfListingVersionRequest
  ): Promise<responses.GetPbfListingVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#getPbfListingVersion.");
    const operationName = "getPbfListingVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/PbfListingVersion/GetPbfListingVersion";
    const pathParams = {
      "{pbfListingVersionId}": getPbfListingVersionRequest.pbfListingVersionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPbfListingVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPbfListingVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pbfListingVersions/{pbfListingVersionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPbfListingVersionResponse>{},
        body: await response.json(),
        bodyKey: "pbfListingVersion",
        bodyModel: model.PbfListingVersion,
        type: "model.PbfListingVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists applications for a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListApplicationsRequest
   * @return ListApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ListApplications.ts.html |here} to see how to use ListApplications API.
   */
  public async listApplications(
    listApplicationsRequest: requests.ListApplicationsRequest
  ): Promise<responses.ListApplicationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#listApplications.");
    const operationName = "listApplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/ApplicationSummary/ListApplications";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listApplicationsRequest.compartmentId,
      "limit": listApplicationsRequest.limit,
      "page": listApplicationsRequest.page,
      "lifecycleState": listApplicationsRequest.lifecycleState,
      "displayName": listApplicationsRequest.displayName,
      "id": listApplicationsRequest.id,
      "sortOrder": listApplicationsRequest.sortOrder,
      "sortBy": listApplicationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ApplicationSummary,
        type: "Array<model.ApplicationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listApplicationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ApplicationSummary objects
   * contained in responses from the listApplications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllApplications(
    request: requests.ListApplicationsRequest
  ): AsyncIterableIterator<model.ApplicationSummary> {
    return paginateRecords(request, req => this.listApplications(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listApplicationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listApplications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllApplicationsResponses(
    request: requests.ListApplicationsRequest
  ): AsyncIterableIterator<responses.ListApplicationsResponse> {
    return paginateResponses(request, req => this.listApplications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ApplicationSummary objects
   * contained in responses from the listApplications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listApplicationsRecordIterator(
    request: requests.ListApplicationsRequest
  ): AsyncIterableIterator<model.ApplicationSummary> {
    return paginateRecords(request, req => this.listApplications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listApplications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listApplicationsResponseIterator(
    request: requests.ListApplicationsRequest
  ): AsyncIterableIterator<responses.ListApplicationsResponse> {
    return paginateResponses(request, req => this.listApplications(req));
  }

  /**
   * Lists functions for an application.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFunctionsRequest
   * @return ListFunctionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ListFunctions.ts.html |here} to see how to use ListFunctions API.
   */
  public async listFunctions(
    listFunctionsRequest: requests.ListFunctionsRequest
  ): Promise<responses.ListFunctionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#listFunctions.");
    const operationName = "listFunctions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/FunctionSummary/ListFunctions";
    const pathParams = {};

    const queryParams = {
      "applicationId": listFunctionsRequest.applicationId,
      "limit": listFunctionsRequest.limit,
      "page": listFunctionsRequest.page,
      "lifecycleState": listFunctionsRequest.lifecycleState,
      "displayName": listFunctionsRequest.displayName,
      "id": listFunctionsRequest.id,
      "sortOrder": listFunctionsRequest.sortOrder,
      "sortBy": listFunctionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFunctionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFunctionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFunctionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FunctionSummary,
        type: "Array<model.FunctionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFunctionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FunctionSummary objects
   * contained in responses from the listFunctions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFunctions(
    request: requests.ListFunctionsRequest
  ): AsyncIterableIterator<model.FunctionSummary> {
    return paginateRecords(request, req => this.listFunctions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFunctionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFunctions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFunctionsResponses(
    request: requests.ListFunctionsRequest
  ): AsyncIterableIterator<responses.ListFunctionsResponse> {
    return paginateResponses(request, req => this.listFunctions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FunctionSummary objects
   * contained in responses from the listFunctions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFunctionsRecordIterator(
    request: requests.ListFunctionsRequest
  ): AsyncIterableIterator<model.FunctionSummary> {
    return paginateRecords(request, req => this.listFunctions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFunctions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFunctionsResponseIterator(
    request: requests.ListFunctionsRequest
  ): AsyncIterableIterator<responses.ListFunctionsResponse> {
    return paginateResponses(request, req => this.listFunctions(req));
  }

  /**
     * Fetches a wrapped list of all Pre-built Function(PBF) Listing versions. Returns a PbfListingVersionCollection 
* containing an array of PbfListingVersionSummary response models.
* <p>
Note that the PbfListingIdentifier must be provided as a query parameter, otherwise an exception shall 
* be thrown.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPbfListingVersionsRequest
     * @return ListPbfListingVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ListPbfListingVersions.ts.html |here} to see how to use ListPbfListingVersions API.
     */
  public async listPbfListingVersions(
    listPbfListingVersionsRequest: requests.ListPbfListingVersionsRequest
  ): Promise<responses.ListPbfListingVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#listPbfListingVersions.");
    const operationName = "listPbfListingVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/PbfListingVersion/ListPbfListingVersions";
    const pathParams = {};

    const queryParams = {
      "pbfListingId": listPbfListingVersionsRequest.pbfListingId,
      "pbfListingVersionId": listPbfListingVersionsRequest.pbfListingVersionId,
      "name": listPbfListingVersionsRequest.name,
      "isCurrentVersion": listPbfListingVersionsRequest.isCurrentVersion,
      "lifecycleState": listPbfListingVersionsRequest.lifecycleState,
      "limit": listPbfListingVersionsRequest.limit,
      "page": listPbfListingVersionsRequest.page,
      "sortOrder": listPbfListingVersionsRequest.sortOrder,
      "sortBy": listPbfListingVersionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPbfListingVersionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPbfListingVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pbfListingVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPbfListingVersionsResponse>{},
        body: await response.json(),
        bodyKey: "pbfListingVersionsCollection",
        bodyModel: model.PbfListingVersionsCollection,
        type: "model.PbfListingVersionsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Fetches a wrapped list of all Pre-built Function(PBF) Listings. Returns a PbfListingCollection containing
   * an array of PbfListingSummary response models.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPbfListingsRequest
   * @return ListPbfListingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ListPbfListings.ts.html |here} to see how to use ListPbfListings API.
   */
  public async listPbfListings(
    listPbfListingsRequest: requests.ListPbfListingsRequest
  ): Promise<responses.ListPbfListingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#listPbfListings.");
    const operationName = "listPbfListings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/PbfListing/ListPbfListings";
    const pathParams = {};

    const queryParams = {
      "pbfListingId": listPbfListingsRequest.pbfListingId,
      "name": listPbfListingsRequest.name,
      "nameContains": listPbfListingsRequest.nameContains,
      "nameStartsWith": listPbfListingsRequest.nameStartsWith,
      "trigger": listPbfListingsRequest.trigger,
      "lifecycleState": listPbfListingsRequest.lifecycleState,
      "limit": listPbfListingsRequest.limit,
      "page": listPbfListingsRequest.page,
      "sortOrder": listPbfListingsRequest.sortOrder,
      "sortBy": listPbfListingsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPbfListingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPbfListingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pbfListings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPbfListingsResponse>{},
        body: await response.json(),
        bodyKey: "pbfListingsCollection",
        bodyModel: model.PbfListingsCollection,
        type: "model.PbfListingsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Triggers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTriggersRequest
   * @return ListTriggersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/ListTriggers.ts.html |here} to see how to use ListTriggers API.
   */
  public async listTriggers(
    listTriggersRequest: requests.ListTriggersRequest
  ): Promise<responses.ListTriggersResponse> {
    if (this.logger) this.logger.debug("Calling operation FunctionsManagementClient#listTriggers.");
    const operationName = "listTriggers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/TriggersCollection/ListTriggers";
    const pathParams = {};

    const queryParams = {
      "name": listTriggersRequest.name,
      "limit": listTriggersRequest.limit,
      "page": listTriggersRequest.page,
      "sortOrder": listTriggersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTriggersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTriggersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pbfListings/triggers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTriggersResponse>{},
        body: await response.json(),
        bodyKey: "triggersCollection",
        bodyModel: model.TriggersCollection,
        type: "model.TriggersCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies an application
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateApplicationRequest
   * @return UpdateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/UpdateApplication.ts.html |here} to see how to use UpdateApplication API.
   */
  public async updateApplication(
    updateApplicationRequest: requests.UpdateApplicationRequest
  ): Promise<responses.UpdateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#updateApplication.");
    const operationName = "updateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Application/UpdateApplication";
    const pathParams = {
      "{applicationId}": updateApplicationRequest.applicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateApplicationRequest.ifMatch,
      "opc-request-id": updateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications/{applicationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplicationRequest.updateApplicationDetails,
        "UpdateApplicationDetails",
        model.UpdateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies a function
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFunctionRequest
   * @return UpdateFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/UpdateFunction.ts.html |here} to see how to use UpdateFunction API.
   */
  public async updateFunction(
    updateFunctionRequest: requests.UpdateFunctionRequest
  ): Promise<responses.UpdateFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FunctionsManagementClient#updateFunction.");
    const operationName = "updateFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/functions/20181201/Function/UpdateFunction";
    const pathParams = {
      "{functionId}": updateFunctionRequest.functionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFunctionRequest.ifMatch,
      "opc-request-id": updateFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/functions/{functionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFunctionRequest.updateFunctionDetails,
        "UpdateFunctionDetails",
        model.UpdateFunctionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFunctionResponse>{},
        body: await response.json(),
        bodyKey: "function",
        bodyModel: model.Function,
        type: "model.Function",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
