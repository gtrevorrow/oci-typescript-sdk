/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DnsClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";
import { waitForWorkRequest, WorkRequestClient, responses } from "oci-workrequests";

export class DnsWaiter {
  public constructor(
    private client: DnsClient,
    private workRequestClient: WorkRequestClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forChangeResolverCompartment
   *
   * @param request the request to send
   * @return response returns ChangeResolverCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeResolverCompartment(
    request: serviceRequests.ChangeResolverCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeResolverCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeResolverCompartmentResponse = await this.client.changeResolverCompartment(request);
    if (changeResolverCompartmentResponse.opcWorkRequestId === undefined)
      return { response: changeResolverCompartmentResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeResolverCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeResolverCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeSteeringPolicyCompartment
   *
   * @param request the request to send
   * @return response returns ChangeSteeringPolicyCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeSteeringPolicyCompartment(
    request: serviceRequests.ChangeSteeringPolicyCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeSteeringPolicyCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeSteeringPolicyCompartmentResponse = await this.client.changeSteeringPolicyCompartment(
      request
    );
    if (changeSteeringPolicyCompartmentResponse.opcWorkRequestId === undefined)
      return {
        response: changeSteeringPolicyCompartmentResponse,
        workRequestResponse: undefined as any
      };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeSteeringPolicyCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeSteeringPolicyCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeViewCompartment
   *
   * @param request the request to send
   * @return response returns ChangeViewCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeViewCompartment(
    request: serviceRequests.ChangeViewCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeViewCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeViewCompartmentResponse = await this.client.changeViewCompartment(request);
    if (changeViewCompartmentResponse.opcWorkRequestId === undefined)
      return { response: changeViewCompartmentResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeViewCompartmentResponse.opcWorkRequestId
    );
    return { response: changeViewCompartmentResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forChangeZoneCompartment
   *
   * @param request the request to send
   * @return response returns ChangeZoneCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeZoneCompartment(
    request: serviceRequests.ChangeZoneCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeZoneCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeZoneCompartmentResponse = await this.client.changeZoneCompartment(request);
    if (changeZoneCompartmentResponse.opcWorkRequestId === undefined)
      return { response: changeZoneCompartmentResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeZoneCompartmentResponse.opcWorkRequestId
    );
    return { response: changeZoneCompartmentResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateResolverEndpoint
   *
   * @param request the request to send
   * @return response returns CreateResolverEndpointResponse, GetWorkRequestResponse tuple
   */
  public async forCreateResolverEndpoint(
    request: serviceRequests.CreateResolverEndpointRequest
  ): Promise<{
    response: serviceResponses.CreateResolverEndpointResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createResolverEndpointResponse = await this.client.createResolverEndpoint(request);
    if (createResolverEndpointResponse.opcWorkRequestId === undefined)
      return { response: createResolverEndpointResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createResolverEndpointResponse.opcWorkRequestId
    );
    return {
      response: createResolverEndpointResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateSteeringPolicy
   *
   * @param request the request to send
   * @return response returns CreateSteeringPolicyResponse, GetWorkRequestResponse tuple
   */
  public async forCreateSteeringPolicy(
    request: serviceRequests.CreateSteeringPolicyRequest
  ): Promise<{
    response: serviceResponses.CreateSteeringPolicyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createSteeringPolicyResponse = await this.client.createSteeringPolicy(request);
    if (createSteeringPolicyResponse.opcWorkRequestId === undefined)
      return { response: createSteeringPolicyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createSteeringPolicyResponse.opcWorkRequestId
    );
    return { response: createSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateSteeringPolicyAttachment
   *
   * @param request the request to send
   * @return response returns CreateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
   */
  public async forCreateSteeringPolicyAttachment(
    request: serviceRequests.CreateSteeringPolicyAttachmentRequest
  ): Promise<{
    response: serviceResponses.CreateSteeringPolicyAttachmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createSteeringPolicyAttachmentResponse = await this.client.createSteeringPolicyAttachment(
      request
    );
    if (createSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
      return {
        response: createSteeringPolicyAttachmentResponse,
        workRequestResponse: undefined as any
      };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createSteeringPolicyAttachmentResponse.opcWorkRequestId
    );
    return {
      response: createSteeringPolicyAttachmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateTsigKey
   *
   * @param request the request to send
   * @return response returns CreateTsigKeyResponse, GetWorkRequestResponse tuple
   */
  public async forCreateTsigKey(
    request: serviceRequests.CreateTsigKeyRequest
  ): Promise<{
    response: serviceResponses.CreateTsigKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createTsigKeyResponse = await this.client.createTsigKey(request);
    if (createTsigKeyResponse.opcWorkRequestId === undefined)
      return { response: createTsigKeyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createTsigKeyResponse.opcWorkRequestId
    );
    return { response: createTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateView
   *
   * @param request the request to send
   * @return response returns CreateViewResponse, GetWorkRequestResponse tuple
   */
  public async forCreateView(
    request: serviceRequests.CreateViewRequest
  ): Promise<{
    response: serviceResponses.CreateViewResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createViewResponse = await this.client.createView(request);
    if (createViewResponse.opcWorkRequestId === undefined)
      return { response: createViewResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createViewResponse.opcWorkRequestId
    );
    return { response: createViewResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateZone
   *
   * @param request the request to send
   * @return response returns CreateZoneResponse, GetWorkRequestResponse tuple
   */
  public async forCreateZone(
    request: serviceRequests.CreateZoneRequest
  ): Promise<{
    response: serviceResponses.CreateZoneResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createZoneResponse = await this.client.createZone(request);
    if (createZoneResponse.opcWorkRequestId === undefined)
      return { response: createZoneResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createZoneResponse.opcWorkRequestId
    );
    return { response: createZoneResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateZoneFromZoneFile
   *
   * @param request the request to send
   * @return response returns CreateZoneFromZoneFileResponse, GetWorkRequestResponse tuple
   */
  public async forCreateZoneFromZoneFile(
    request: serviceRequests.CreateZoneFromZoneFileRequest
  ): Promise<{
    response: serviceResponses.CreateZoneFromZoneFileResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createZoneFromZoneFileResponse = await this.client.createZoneFromZoneFile(request);
    if (createZoneFromZoneFileResponse.opcWorkRequestId === undefined)
      return { response: createZoneFromZoneFileResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createZoneFromZoneFileResponse.opcWorkRequestId
    );
    return {
      response: createZoneFromZoneFileResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteResolverEndpoint
   *
   * @param request the request to send
   * @return response returns DeleteResolverEndpointResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteResolverEndpoint(
    request: serviceRequests.DeleteResolverEndpointRequest
  ): Promise<{
    response: serviceResponses.DeleteResolverEndpointResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteResolverEndpointResponse = await this.client.deleteResolverEndpoint(request);
    if (deleteResolverEndpointResponse.opcWorkRequestId === undefined)
      return { response: deleteResolverEndpointResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteResolverEndpointResponse.opcWorkRequestId
    );
    return {
      response: deleteResolverEndpointResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteSteeringPolicy
   *
   * @param request the request to send
   * @return response returns DeleteSteeringPolicyResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteSteeringPolicy(
    request: serviceRequests.DeleteSteeringPolicyRequest
  ): Promise<{
    response: serviceResponses.DeleteSteeringPolicyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteSteeringPolicyResponse = await this.client.deleteSteeringPolicy(request);
    if (deleteSteeringPolicyResponse.opcWorkRequestId === undefined)
      return { response: deleteSteeringPolicyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteSteeringPolicyResponse.opcWorkRequestId
    );
    return { response: deleteSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteSteeringPolicyAttachment
   *
   * @param request the request to send
   * @return response returns DeleteSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteSteeringPolicyAttachment(
    request: serviceRequests.DeleteSteeringPolicyAttachmentRequest
  ): Promise<{
    response: serviceResponses.DeleteSteeringPolicyAttachmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteSteeringPolicyAttachmentResponse = await this.client.deleteSteeringPolicyAttachment(
      request
    );
    if (deleteSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
      return {
        response: deleteSteeringPolicyAttachmentResponse,
        workRequestResponse: undefined as any
      };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteSteeringPolicyAttachmentResponse.opcWorkRequestId
    );
    return {
      response: deleteSteeringPolicyAttachmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteTsigKey
   *
   * @param request the request to send
   * @return response returns DeleteTsigKeyResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteTsigKey(
    request: serviceRequests.DeleteTsigKeyRequest
  ): Promise<{
    response: serviceResponses.DeleteTsigKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteTsigKeyResponse = await this.client.deleteTsigKey(request);
    if (deleteTsigKeyResponse.opcWorkRequestId === undefined)
      return { response: deleteTsigKeyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteTsigKeyResponse.opcWorkRequestId
    );
    return { response: deleteTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteView
   *
   * @param request the request to send
   * @return response returns DeleteViewResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteView(
    request: serviceRequests.DeleteViewRequest
  ): Promise<{
    response: serviceResponses.DeleteViewResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteViewResponse = await this.client.deleteView(request);
    if (deleteViewResponse.opcWorkRequestId === undefined)
      return { response: deleteViewResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteViewResponse.opcWorkRequestId
    );
    return { response: deleteViewResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteZone
   *
   * @param request the request to send
   * @return response returns DeleteZoneResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteZone(
    request: serviceRequests.DeleteZoneRequest
  ): Promise<{
    response: serviceResponses.DeleteZoneResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteZoneResponse = await this.client.deleteZone(request);
    if (deleteZoneResponse.opcWorkRequestId === undefined)
      return { response: deleteZoneResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteZoneResponse.opcWorkRequestId
    );
    return { response: deleteZoneResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forResolver till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResolverResponse | null (null in case of 404 response)
   */
  public async forResolver(
    request: serviceRequests.GetResolverRequest,
    ...targetStates: models.Resolver.LifecycleState[]
  ): Promise<serviceResponses.GetResolverResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResolver(request),
      response => targetStates.includes(response.resolver.lifecycleState!),
      targetStates.includes(models.Resolver.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResolverEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResolverEndpointResponse | null (null in case of 404 response)
   */
  public async forResolverEndpoint(
    request: serviceRequests.GetResolverEndpointRequest,
    ...targetStates: models.ResolverEndpoint.LifecycleState[]
  ): Promise<serviceResponses.GetResolverEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResolverEndpoint(request),
      response => targetStates.includes(response.resolverEndpoint.lifecycleState!),
      targetStates.includes(models.ResolverEndpoint.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSteeringPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSteeringPolicyResponse | null (null in case of 404 response)
   */
  public async forSteeringPolicy(
    request: serviceRequests.GetSteeringPolicyRequest,
    ...targetStates: models.SteeringPolicy.LifecycleState[]
  ): Promise<serviceResponses.GetSteeringPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSteeringPolicy(request),
      response => targetStates.includes(response.steeringPolicy.lifecycleState!),
      targetStates.includes(models.SteeringPolicy.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSteeringPolicyAttachment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSteeringPolicyAttachmentResponse
   */
  public async forSteeringPolicyAttachment(
    request: serviceRequests.GetSteeringPolicyAttachmentRequest,
    ...targetStates: models.SteeringPolicyAttachment.LifecycleState[]
  ): Promise<serviceResponses.GetSteeringPolicyAttachmentResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getSteeringPolicyAttachment(request),
      response => targetStates.includes(response.steeringPolicyAttachment.lifecycleState!)
    );
  }

  /**
   * Waits forTsigKey till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTsigKeyResponse | null (null in case of 404 response)
   */
  public async forTsigKey(
    request: serviceRequests.GetTsigKeyRequest,
    ...targetStates: models.TsigKey.LifecycleState[]
  ): Promise<serviceResponses.GetTsigKeyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTsigKey(request),
      response => targetStates.includes(response.tsigKey.lifecycleState!),
      targetStates.includes(models.TsigKey.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forView till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetViewResponse | null (null in case of 404 response)
   */
  public async forView(
    request: serviceRequests.GetViewRequest,
    ...targetStates: models.View.LifecycleState[]
  ): Promise<serviceResponses.GetViewResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getView(request),
      response => targetStates.includes(response.view.lifecycleState!),
      targetStates.includes(models.View.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forZone till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetZoneResponse | null (null in case of 404 response)
   */
  public async forZone(
    request: serviceRequests.GetZoneRequest,
    ...targetStates: models.Zone.LifecycleState[]
  ): Promise<serviceResponses.GetZoneResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getZone(request),
      response => targetStates.includes(response.zone.lifecycleState!),
      targetStates.includes(models.Zone.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forPromoteZoneDnssecKeyVersion
   *
   * @param request the request to send
   * @return response returns PromoteZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
   */
  public async forPromoteZoneDnssecKeyVersion(
    request: serviceRequests.PromoteZoneDnssecKeyVersionRequest
  ): Promise<{
    response: serviceResponses.PromoteZoneDnssecKeyVersionResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const promoteZoneDnssecKeyVersionResponse = await this.client.promoteZoneDnssecKeyVersion(
      request
    );
    if (promoteZoneDnssecKeyVersionResponse.opcWorkRequestId === undefined)
      return {
        response: promoteZoneDnssecKeyVersionResponse,
        workRequestResponse: undefined as any
      };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      promoteZoneDnssecKeyVersionResponse.opcWorkRequestId
    );
    return {
      response: promoteZoneDnssecKeyVersionResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forStageZoneDnssecKeyVersion
   *
   * @param request the request to send
   * @return response returns StageZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
   */
  public async forStageZoneDnssecKeyVersion(
    request: serviceRequests.StageZoneDnssecKeyVersionRequest
  ): Promise<{
    response: serviceResponses.StageZoneDnssecKeyVersionResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const stageZoneDnssecKeyVersionResponse = await this.client.stageZoneDnssecKeyVersion(request);
    if (stageZoneDnssecKeyVersionResponse.opcWorkRequestId === undefined)
      return { response: stageZoneDnssecKeyVersionResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      stageZoneDnssecKeyVersionResponse.opcWorkRequestId
    );
    return {
      response: stageZoneDnssecKeyVersionResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateResolver
   *
   * @param request the request to send
   * @return response returns UpdateResolverResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateResolver(
    request: serviceRequests.UpdateResolverRequest
  ): Promise<{
    response: serviceResponses.UpdateResolverResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateResolverResponse = await this.client.updateResolver(request);
    if (updateResolverResponse.opcWorkRequestId === undefined)
      return { response: updateResolverResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateResolverResponse.opcWorkRequestId
    );
    return { response: updateResolverResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateResolverEndpoint
   *
   * @param request the request to send
   * @return response returns UpdateResolverEndpointResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateResolverEndpoint(
    request: serviceRequests.UpdateResolverEndpointRequest
  ): Promise<{
    response: serviceResponses.UpdateResolverEndpointResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateResolverEndpointResponse = await this.client.updateResolverEndpoint(request);
    if (updateResolverEndpointResponse.opcWorkRequestId === undefined)
      return { response: updateResolverEndpointResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateResolverEndpointResponse.opcWorkRequestId
    );
    return {
      response: updateResolverEndpointResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateSteeringPolicy
   *
   * @param request the request to send
   * @return response returns UpdateSteeringPolicyResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateSteeringPolicy(
    request: serviceRequests.UpdateSteeringPolicyRequest
  ): Promise<{
    response: serviceResponses.UpdateSteeringPolicyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateSteeringPolicyResponse = await this.client.updateSteeringPolicy(request);
    if (updateSteeringPolicyResponse.opcWorkRequestId === undefined)
      return { response: updateSteeringPolicyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateSteeringPolicyResponse.opcWorkRequestId
    );
    return { response: updateSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateSteeringPolicyAttachment
   *
   * @param request the request to send
   * @return response returns UpdateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateSteeringPolicyAttachment(
    request: serviceRequests.UpdateSteeringPolicyAttachmentRequest
  ): Promise<{
    response: serviceResponses.UpdateSteeringPolicyAttachmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateSteeringPolicyAttachmentResponse = await this.client.updateSteeringPolicyAttachment(
      request
    );
    if (updateSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
      return {
        response: updateSteeringPolicyAttachmentResponse,
        workRequestResponse: undefined as any
      };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateSteeringPolicyAttachmentResponse.opcWorkRequestId
    );
    return {
      response: updateSteeringPolicyAttachmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateTsigKey
   *
   * @param request the request to send
   * @return response returns UpdateTsigKeyResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateTsigKey(
    request: serviceRequests.UpdateTsigKeyRequest
  ): Promise<{
    response: serviceResponses.UpdateTsigKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateTsigKeyResponse = await this.client.updateTsigKey(request);
    if (updateTsigKeyResponse.opcWorkRequestId === undefined)
      return { response: updateTsigKeyResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateTsigKeyResponse.opcWorkRequestId
    );
    return { response: updateTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateView
   *
   * @param request the request to send
   * @return response returns UpdateViewResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateView(
    request: serviceRequests.UpdateViewRequest
  ): Promise<{
    response: serviceResponses.UpdateViewResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateViewResponse = await this.client.updateView(request);
    if (updateViewResponse.opcWorkRequestId === undefined)
      return { response: updateViewResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateViewResponse.opcWorkRequestId
    );
    return { response: updateViewResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateZone
   *
   * @param request the request to send
   * @return response returns UpdateZoneResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateZone(
    request: serviceRequests.UpdateZoneRequest
  ): Promise<{
    response: serviceResponses.UpdateZoneResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateZoneResponse = await this.client.updateZone(request);
    if (updateZoneResponse.opcWorkRequestId === undefined)
      return { response: updateZoneResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateZoneResponse.opcWorkRequestId
    );
    return { response: updateZoneResponse, workRequestResponse: getWorkRequestResponse };
  }
}
