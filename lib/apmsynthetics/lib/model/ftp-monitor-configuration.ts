/**
 * Application Performance Monitoring Synthetic Monitoring API
 * Use the Application Performance Monitoring Synthetic Monitoring API to query synthetic scripts and monitors. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Request configuration details for the FTP monitor type.
 */
export interface FtpMonitorConfiguration extends model.MonitorConfiguration {
  /**
   * FTP protocol type.
   */
  "ftpProtocol"?: model.FtpProtocol;
  /**
   * FTP monitor request type.
   */
  "ftpRequestType"?: model.FtpRequestType;
  /**
   * If enabled, Active mode will be used for the FTP connection.
   */
  "isActiveMode"?: boolean;
  "ftpBasicAuthenticationDetails"?: model.BasicAuthenticationDetails;
  /**
   * Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "downloadSizeLimitInBytes"?: number;
  /**
   * File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "uploadFileSizeInBytes"?: number;
  "networkConfiguration"?: model.NetworkConfiguration;
  /**
   * Expected FTP response codes. For status code range, set values such as 2xx, 3xx.
   */
  "verifyResponseCodes"?: Array<string>;
  /**
   * Verify response content against regular expression based string.
   * If response content does not match the verifyResponseContent value, then it will be considered a failure.
   *
   */
  "verifyResponseContent"?: string;

  "configType": string;
}

export namespace FtpMonitorConfiguration {
  export function getJsonObj(obj: FtpMonitorConfiguration, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.MonitorConfiguration.getJsonObj(obj) as FtpMonitorConfiguration)),
      ...{
        "ftpBasicAuthenticationDetails": obj.ftpBasicAuthenticationDetails
          ? model.BasicAuthenticationDetails.getJsonObj(obj.ftpBasicAuthenticationDetails)
          : undefined,

        "networkConfiguration": obj.networkConfiguration
          ? model.NetworkConfiguration.getJsonObj(obj.networkConfiguration)
          : undefined
      }
    };

    return jsonObj;
  }
  export const configType = "FTP_CONFIG";
  export function getDeserializedJsonObj(
    obj: FtpMonitorConfiguration,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.MonitorConfiguration.getDeserializedJsonObj(obj) as FtpMonitorConfiguration)),
      ...{
        "ftpBasicAuthenticationDetails": obj.ftpBasicAuthenticationDetails
          ? model.BasicAuthenticationDetails.getDeserializedJsonObj(
              obj.ftpBasicAuthenticationDetails
            )
          : undefined,

        "networkConfiguration": obj.networkConfiguration
          ? model.NetworkConfiguration.getDeserializedJsonObj(obj.networkConfiguration)
          : undefined
      }
    };

    return jsonObj;
  }
}
