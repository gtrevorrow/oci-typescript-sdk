/**
 * Application Performance Monitoring Synthetic Monitoring API
 * Use the Application Performance Monitoring Synthetic Monitoring API to query synthetic scripts and monitors. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details of the workers in a specific On-premise vantage point.
 *
 */
export interface WorkersSummary {
  /**
   * Total number of workers in a specific On-premise vantage point. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "total": number;
  /**
   * Number of available workers in a specific On-premise vantage point. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "available": number;
  /**
   * Number of occupied workers in a specific On-premise vantage point. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "used": number;
  /**
   * Number of disabled workers in a specific On-premise vantage point. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "disabled": number;
  /**
   * Minimum version among the workers in a specific On-premise vantage point.
   */
  "minVersion": string;
  /**
   * List of available capabilities in a specific On-premise vantage point.
   */
  "availableCapabilities": Array<model.AvailableCapability>;
}

export namespace WorkersSummary {
  export function getJsonObj(obj: WorkersSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "availableCapabilities": obj.availableCapabilities
          ? obj.availableCapabilities.map(item => {
              return model.AvailableCapability.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: WorkersSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "availableCapabilities": obj.availableCapabilities
          ? obj.availableCapabilities.map(item => {
              return model.AvailableCapability.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
