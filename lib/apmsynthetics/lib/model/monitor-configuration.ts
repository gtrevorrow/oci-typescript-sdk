/**
 * APM Availability Monitoring API
 * Use the APM Availability Monitoring API to query Scripts, Monitors, Dedicated Vantage Points and On-Premise Vantage Points resources. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details of monitor configuration.
 */
export interface MonitorConfiguration {
  /**
   * If isFailureRetried is enabled, then a failed call will be retried.
   */
  "isFailureRetried"?: boolean;
  "dnsConfiguration"?: model.DnsConfiguration;

  "configType": string;
}

export namespace MonitorConfiguration {
  export function getJsonObj(obj: MonitorConfiguration): object {
    const jsonObj = {
      ...obj,
      ...{
        "dnsConfiguration": obj.dnsConfiguration
          ? model.DnsConfiguration.getJsonObj(obj.dnsConfiguration)
          : undefined
      }
    };

    if (obj && "configType" in obj && obj.configType) {
      switch (obj.configType) {
        case "FTP_CONFIG":
          return model.FtpMonitorConfiguration.getJsonObj(
            <model.FtpMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNSSEC_CONFIG":
          return model.DnsSecMonitorConfiguration.getJsonObj(
            <model.DnsSecMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNS_TRACE_CONFIG":
          return model.DnsTraceMonitorConfiguration.getJsonObj(
            <model.DnsTraceMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SQL_CONFIG":
          return model.SqlMonitorConfiguration.getJsonObj(
            <model.SqlMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SCRIPTED_REST_CONFIG":
          return model.ScriptedRestMonitorConfiguration.getJsonObj(
            <model.ScriptedRestMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNS_SERVER_CONFIG":
          return model.DnsServerMonitorConfiguration.getJsonObj(
            <model.DnsServerMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SCRIPTED_BROWSER_CONFIG":
          return model.ScriptedBrowserMonitorConfiguration.getJsonObj(
            <model.ScriptedBrowserMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "REST_CONFIG":
          return model.RestMonitorConfiguration.getJsonObj(
            <model.RestMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "BROWSER_CONFIG":
          return model.BrowserMonitorConfiguration.getJsonObj(
            <model.BrowserMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "NETWORK_CONFIG":
          return model.NetworkMonitorConfiguration.getJsonObj(
            <model.NetworkMonitorConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.configType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MonitorConfiguration): object {
    const jsonObj = {
      ...obj,
      ...{
        "dnsConfiguration": obj.dnsConfiguration
          ? model.DnsConfiguration.getDeserializedJsonObj(obj.dnsConfiguration)
          : undefined
      }
    };

    if (obj && "configType" in obj && obj.configType) {
      switch (obj.configType) {
        case "FTP_CONFIG":
          return model.FtpMonitorConfiguration.getDeserializedJsonObj(
            <model.FtpMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNSSEC_CONFIG":
          return model.DnsSecMonitorConfiguration.getDeserializedJsonObj(
            <model.DnsSecMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNS_TRACE_CONFIG":
          return model.DnsTraceMonitorConfiguration.getDeserializedJsonObj(
            <model.DnsTraceMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SQL_CONFIG":
          return model.SqlMonitorConfiguration.getDeserializedJsonObj(
            <model.SqlMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SCRIPTED_REST_CONFIG":
          return model.ScriptedRestMonitorConfiguration.getDeserializedJsonObj(
            <model.ScriptedRestMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "DNS_SERVER_CONFIG":
          return model.DnsServerMonitorConfiguration.getDeserializedJsonObj(
            <model.DnsServerMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "SCRIPTED_BROWSER_CONFIG":
          return model.ScriptedBrowserMonitorConfiguration.getDeserializedJsonObj(
            <model.ScriptedBrowserMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "REST_CONFIG":
          return model.RestMonitorConfiguration.getDeserializedJsonObj(
            <model.RestMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "BROWSER_CONFIG":
          return model.BrowserMonitorConfiguration.getDeserializedJsonObj(
            <model.BrowserMonitorConfiguration>(<object>jsonObj),
            true
          );
        case "NETWORK_CONFIG":
          return model.NetworkMonitorConfiguration.getDeserializedJsonObj(
            <model.NetworkMonitorConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.configType}`);
      }
    }
    return jsonObj;
  }
}
