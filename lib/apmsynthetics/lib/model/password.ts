/**
 * Application Performance Monitoring Synthetic Monitoring API
 * Use the Application Performance Monitoring Synthetic Monitoring API to query synthetic scripts and monitors. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Password.
 */
export interface Password {
  "passwordType": string;
}

export namespace Password {
  export function getJsonObj(obj: Password): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "passwordType" in obj && obj.passwordType) {
      switch (obj.passwordType) {
        case "IN_TEXT":
          return model.PasswordInText.getJsonObj(<model.PasswordInText>(<object>jsonObj), true);
        case "VAULT_SECRET_ID":
          return model.PasswordInVault.getJsonObj(<model.PasswordInVault>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.passwordType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Password): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "passwordType" in obj && obj.passwordType) {
      switch (obj.passwordType) {
        case "IN_TEXT":
          return model.PasswordInText.getDeserializedJsonObj(
            <model.PasswordInText>(<object>jsonObj),
            true
          );
        case "VAULT_SECRET_ID":
          return model.PasswordInVault.getDeserializedJsonObj(
            <model.PasswordInVault>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.passwordType}`);
      }
    }
    return jsonObj;
  }
}
