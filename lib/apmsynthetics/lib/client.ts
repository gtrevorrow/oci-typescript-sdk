/**
 * Application Performance Monitoring Synthetic Monitoring API
 * Use the Application Performance Monitoring Synthetic Monitoring API to query synthetic scripts and monitors. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApmSyntheticApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ApmSyntheticClient {
  protected static serviceEndpointTemplate =
    "https://apm-synthetic.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ApmSynthetic";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("apmsynthetics")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("apmsynthetics");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`ApmSyntheticClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ApmSyntheticClient.serviceEndpointTemplate,
        this._region,
        ApmSyntheticClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ApmSyntheticClient.serviceEndpointTemplate,
        this._regionId,
        ApmSyntheticClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ApmSyntheticClient.serviceEndpointTemplate,
      region,
      ApmSyntheticClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ApmSyntheticClient.serviceEndpointTemplate,
      regionId,
      ApmSyntheticClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets aggregated network data for given executions.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AggregateNetworkDataRequest
   * @return AggregateNetworkDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/AggregateNetworkData.ts.html |here} to see how to use AggregateNetworkData API.
   */
  public async aggregateNetworkData(
    aggregateNetworkDataRequest: requests.AggregateNetworkDataRequest
  ): Promise<responses.AggregateNetworkDataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#aggregateNetworkData.");
    const operationName = "aggregateNetworkData";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/AggregatedNetworkDataResult/AggregateNetworkData";
    const pathParams = {
      "{monitorId}": aggregateNetworkDataRequest.monitorId
    };

    const queryParams = {
      "apmDomainId": aggregateNetworkDataRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": aggregateNetworkDataRequest.opcRetryToken,
      "opc-request-id": aggregateNetworkDataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      aggregateNetworkDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors/{monitorId}/actions/aggregateNetworkData",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        aggregateNetworkDataRequest.aggregateNetworkDataDetails,
        "AggregateNetworkDataDetails",
        model.AggregateNetworkDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AggregateNetworkDataResponse>{},
        body: await response.json(),
        bodyKey: "aggregatedNetworkDataResult",
        bodyModel: model.AggregatedNetworkDataResult,
        type: "model.AggregatedNetworkDataResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers a new dedicated vantage point.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDedicatedVantagePointRequest
   * @return CreateDedicatedVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/CreateDedicatedVantagePoint.ts.html |here} to see how to use CreateDedicatedVantagePoint API.
   */
  public async createDedicatedVantagePoint(
    createDedicatedVantagePointRequest: requests.CreateDedicatedVantagePointRequest
  ): Promise<responses.CreateDedicatedVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#createDedicatedVantagePoint.");
    const operationName = "createDedicatedVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/DedicatedVantagePoint/CreateDedicatedVantagePoint";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": createDedicatedVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDedicatedVantagePointRequest.opcRetryToken,
      "opc-request-id": createDedicatedVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDedicatedVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVantagePoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDedicatedVantagePointRequest.createDedicatedVantagePointDetails,
        "CreateDedicatedVantagePointDetails",
        model.CreateDedicatedVantagePointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDedicatedVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVantagePoint",
        bodyModel: model.DedicatedVantagePoint,
        type: "model.DedicatedVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new monitor.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMonitorRequest
   * @return CreateMonitorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/CreateMonitor.ts.html |here} to see how to use CreateMonitor API.
   */
  public async createMonitor(
    createMonitorRequest: requests.CreateMonitorRequest
  ): Promise<responses.CreateMonitorResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#createMonitor.");
    const operationName = "createMonitor";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Monitor/CreateMonitor";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": createMonitorRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMonitorRequest.opcRetryToken,
      "opc-request-id": createMonitorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMonitorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMonitorRequest.createMonitorDetails,
        "CreateMonitorDetails",
        model.CreateMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMonitorResponse>{},
        body: await response.json(),
        bodyKey: "monitor",
        bodyModel: model.Monitor,
        type: "model.Monitor",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers a new On-premise vantage point.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOnPremiseVantagePointRequest
   * @return CreateOnPremiseVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/CreateOnPremiseVantagePoint.ts.html |here} to see how to use CreateOnPremiseVantagePoint API.
   */
  public async createOnPremiseVantagePoint(
    createOnPremiseVantagePointRequest: requests.CreateOnPremiseVantagePointRequest
  ): Promise<responses.CreateOnPremiseVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#createOnPremiseVantagePoint.");
    const operationName = "createOnPremiseVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/OnPremiseVantagePoint/CreateOnPremiseVantagePoint";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": createOnPremiseVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOnPremiseVantagePointRequest.opcRetryToken,
      "opc-request-id": createOnPremiseVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOnPremiseVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnPremiseVantagePointRequest.createOnPremiseVantagePointDetails,
        "CreateOnPremiseVantagePointDetails",
        model.CreateOnPremiseVantagePointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnPremiseVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "onPremiseVantagePoint",
        bodyModel: model.OnPremiseVantagePoint,
        type: "model.OnPremiseVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new script.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateScriptRequest
   * @return CreateScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/CreateScript.ts.html |here} to see how to use CreateScript API.
   */
  public async createScript(
    createScriptRequest: requests.CreateScriptRequest
  ): Promise<responses.CreateScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#createScript.");
    const operationName = "createScript";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Script/CreateScript";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": createScriptRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createScriptRequest.opcRetryToken,
      "opc-request-id": createScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scripts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScriptRequest.createScriptDetails,
        "CreateScriptDetails",
        model.CreateScriptDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScriptResponse>{},
        body: await response.json(),
        bodyKey: "script",
        bodyModel: model.Script,
        type: "model.Script",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers a new worker.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateWorkerRequest
   * @return CreateWorkerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/CreateWorker.ts.html |here} to see how to use CreateWorker API.
   */
  public async createWorker(
    createWorkerRequest: requests.CreateWorkerRequest
  ): Promise<responses.CreateWorkerResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#createWorker.");
    const operationName = "createWorker";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Worker/CreateWorker";
    const pathParams = {
      "{onPremiseVantagePointId}": createWorkerRequest.onPremiseVantagePointId
    };

    const queryParams = {
      "apmDomainId": createWorkerRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createWorkerRequest.opcRetryToken,
      "opc-request-id": createWorkerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createWorkerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}/workers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createWorkerRequest.createWorkerDetails,
        "CreateWorkerDetails",
        model.CreateWorkerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateWorkerResponse>{},
        body: await response.json(),
        bodyKey: "worker",
        bodyModel: model.Worker,
        type: "model.Worker",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified dedicated vantage point.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDedicatedVantagePointRequest
   * @return DeleteDedicatedVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/DeleteDedicatedVantagePoint.ts.html |here} to see how to use DeleteDedicatedVantagePoint API.
   */
  public async deleteDedicatedVantagePoint(
    deleteDedicatedVantagePointRequest: requests.DeleteDedicatedVantagePointRequest
  ): Promise<responses.DeleteDedicatedVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#deleteDedicatedVantagePoint.");
    const operationName = "deleteDedicatedVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/DedicatedVantagePoint/DeleteDedicatedVantagePoint";
    const pathParams = {
      "{dedicatedVantagePointId}": deleteDedicatedVantagePointRequest.dedicatedVantagePointId
    };

    const queryParams = {
      "apmDomainId": deleteDedicatedVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDedicatedVantagePointRequest.ifMatch,
      "opc-request-id": deleteDedicatedVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDedicatedVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVantagePoints/{dedicatedVantagePointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDedicatedVantagePointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified monitor.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMonitorRequest
   * @return DeleteMonitorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/DeleteMonitor.ts.html |here} to see how to use DeleteMonitor API.
   */
  public async deleteMonitor(
    deleteMonitorRequest: requests.DeleteMonitorRequest
  ): Promise<responses.DeleteMonitorResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#deleteMonitor.");
    const operationName = "deleteMonitor";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Monitor/DeleteMonitor";
    const pathParams = {
      "{monitorId}": deleteMonitorRequest.monitorId
    };

    const queryParams = {
      "apmDomainId": deleteMonitorRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMonitorRequest.ifMatch,
      "opc-request-id": deleteMonitorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMonitorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors/{monitorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMonitorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified On-premise vantage point.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOnPremiseVantagePointRequest
   * @return DeleteOnPremiseVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/DeleteOnPremiseVantagePoint.ts.html |here} to see how to use DeleteOnPremiseVantagePoint API.
   */
  public async deleteOnPremiseVantagePoint(
    deleteOnPremiseVantagePointRequest: requests.DeleteOnPremiseVantagePointRequest
  ): Promise<responses.DeleteOnPremiseVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#deleteOnPremiseVantagePoint.");
    const operationName = "deleteOnPremiseVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/OnPremiseVantagePoint/DeleteOnPremiseVantagePoint";
    const pathParams = {
      "{onPremiseVantagePointId}": deleteOnPremiseVantagePointRequest.onPremiseVantagePointId
    };

    const queryParams = {
      "apmDomainId": deleteOnPremiseVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOnPremiseVantagePointRequest.ifMatch,
      "opc-request-id": deleteOnPremiseVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOnPremiseVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOnPremiseVantagePointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified script.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteScriptRequest
   * @return DeleteScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/DeleteScript.ts.html |here} to see how to use DeleteScript API.
   */
  public async deleteScript(
    deleteScriptRequest: requests.DeleteScriptRequest
  ): Promise<responses.DeleteScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#deleteScript.");
    const operationName = "deleteScript";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Script/DeleteScript";
    const pathParams = {
      "{scriptId}": deleteScriptRequest.scriptId
    };

    const queryParams = {
      "apmDomainId": deleteScriptRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteScriptRequest.ifMatch,
      "opc-request-id": deleteScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scripts/{scriptId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScriptResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified worker.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteWorkerRequest
   * @return DeleteWorkerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/DeleteWorker.ts.html |here} to see how to use DeleteWorker API.
   */
  public async deleteWorker(
    deleteWorkerRequest: requests.DeleteWorkerRequest
  ): Promise<responses.DeleteWorkerResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#deleteWorker.");
    const operationName = "deleteWorker";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Worker/DeleteWorker";
    const pathParams = {
      "{onPremiseVantagePointId}": deleteWorkerRequest.onPremiseVantagePointId,
      "{workerId}": deleteWorkerRequest.workerId
    };

    const queryParams = {
      "apmDomainId": deleteWorkerRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWorkerRequest.ifMatch,
      "opc-request-id": deleteWorkerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWorkerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}/workers/{workerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the dedicated vantage point identified by the OCID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDedicatedVantagePointRequest
   * @return GetDedicatedVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetDedicatedVantagePoint.ts.html |here} to see how to use GetDedicatedVantagePoint API.
   */
  public async getDedicatedVantagePoint(
    getDedicatedVantagePointRequest: requests.GetDedicatedVantagePointRequest
  ): Promise<responses.GetDedicatedVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#getDedicatedVantagePoint.");
    const operationName = "getDedicatedVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/DedicatedVantagePoint/GetDedicatedVantagePoint";
    const pathParams = {
      "{dedicatedVantagePointId}": getDedicatedVantagePointRequest.dedicatedVantagePointId
    };

    const queryParams = {
      "apmDomainId": getDedicatedVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDedicatedVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDedicatedVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVantagePoints/{dedicatedVantagePointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDedicatedVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVantagePoint",
        bodyModel: model.DedicatedVantagePoint,
        type: "model.DedicatedVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the configuration of the monitor identified by the OCID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMonitorRequest
   * @return GetMonitorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetMonitor.ts.html |here} to see how to use GetMonitor API.
   */
  public async getMonitor(
    getMonitorRequest: requests.GetMonitorRequest
  ): Promise<responses.GetMonitorResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#getMonitor.");
    const operationName = "getMonitor";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Monitor/GetMonitor";
    const pathParams = {
      "{monitorId}": getMonitorRequest.monitorId
    };

    const queryParams = {
      "apmDomainId": getMonitorRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMonitorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMonitorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors/{monitorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMonitorResponse>{},
        body: await response.json(),
        bodyKey: "monitor",
        bodyModel: model.Monitor,
        type: "model.Monitor",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the results for a specific execution of a monitor identified by OCID. The results are in a HAR file, Screenshot, Console Log or Network details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMonitorResultRequest
   * @return GetMonitorResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetMonitorResult.ts.html |here} to see how to use GetMonitorResult API.
   */
  public async getMonitorResult(
    getMonitorResultRequest: requests.GetMonitorResultRequest
  ): Promise<responses.GetMonitorResultResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#getMonitorResult.");
    const operationName = "getMonitorResult";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/MonitorResult/GetMonitorResult";
    const pathParams = {
      "{monitorId}": getMonitorResultRequest.monitorId,
      "{executionTime}": getMonitorResultRequest.executionTime
    };

    const queryParams = {
      "apmDomainId": getMonitorResultRequest.apmDomainId,
      "vantagePoint": getMonitorResultRequest.vantagePoint,
      "resultType": getMonitorResultRequest.resultType,
      "resultContentType": getMonitorResultRequest.resultContentType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMonitorResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMonitorResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors/{monitorId}/results/{executionTime}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMonitorResultResponse>{},
        body: await response.json(),
        bodyKey: "monitorResult",
        bodyModel: model.MonitorResult,
        type: "model.MonitorResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the On-premise vantage point identified by the OCID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOnPremiseVantagePointRequest
   * @return GetOnPremiseVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetOnPremiseVantagePoint.ts.html |here} to see how to use GetOnPremiseVantagePoint API.
   */
  public async getOnPremiseVantagePoint(
    getOnPremiseVantagePointRequest: requests.GetOnPremiseVantagePointRequest
  ): Promise<responses.GetOnPremiseVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#getOnPremiseVantagePoint.");
    const operationName = "getOnPremiseVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/OnPremiseVantagePoint/GetOnPremiseVantagePoint";
    const pathParams = {
      "{onPremiseVantagePointId}": getOnPremiseVantagePointRequest.onPremiseVantagePointId
    };

    const queryParams = {
      "apmDomainId": getOnPremiseVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOnPremiseVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOnPremiseVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOnPremiseVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "onPremiseVantagePoint",
        bodyModel: model.OnPremiseVantagePoint,
        type: "model.OnPremiseVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the configuration of the script identified by the OCID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetScriptRequest
   * @return GetScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetScript.ts.html |here} to see how to use GetScript API.
   */
  public async getScript(
    getScriptRequest: requests.GetScriptRequest
  ): Promise<responses.GetScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#getScript.");
    const operationName = "getScript";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Script/GetScript";
    const pathParams = {
      "{scriptId}": getScriptRequest.scriptId
    };

    const queryParams = {
      "apmDomainId": getScriptRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scripts/{scriptId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScriptResponse>{},
        body: await response.json(),
        bodyKey: "script",
        bodyModel: model.Script,
        type: "model.Script",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the worker identified by the OCID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkerRequest
   * @return GetWorkerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/GetWorker.ts.html |here} to see how to use GetWorker API.
   */
  public async getWorker(
    getWorkerRequest: requests.GetWorkerRequest
  ): Promise<responses.GetWorkerResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#getWorker.");
    const operationName = "getWorker";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Worker/GetWorker";
    const pathParams = {
      "{onPremiseVantagePointId}": getWorkerRequest.onPremiseVantagePointId,
      "{workerId}": getWorkerRequest.workerId
    };

    const queryParams = {
      "apmDomainId": getWorkerRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}/workers/{workerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkerResponse>{},
        body: await response.json(),
        bodyKey: "worker",
        bodyModel: model.Worker,
        type: "model.Worker",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of dedicated vantage points.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDedicatedVantagePointsRequest
   * @return ListDedicatedVantagePointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListDedicatedVantagePoints.ts.html |here} to see how to use ListDedicatedVantagePoints API.
   */
  public async listDedicatedVantagePoints(
    listDedicatedVantagePointsRequest: requests.ListDedicatedVantagePointsRequest
  ): Promise<responses.ListDedicatedVantagePointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#listDedicatedVantagePoints.");
    const operationName = "listDedicatedVantagePoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/DedicatedVantagePointCollection/ListDedicatedVantagePoints";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listDedicatedVantagePointsRequest.apmDomainId,
      "limit": listDedicatedVantagePointsRequest.limit,
      "page": listDedicatedVantagePointsRequest.page,
      "sortOrder": listDedicatedVantagePointsRequest.sortOrder,
      "sortBy": listDedicatedVantagePointsRequest.sortBy,
      "displayName": listDedicatedVantagePointsRequest.displayName,
      "name": listDedicatedVantagePointsRequest.name,
      "status": listDedicatedVantagePointsRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVantagePointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedVantagePointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVantagePoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVantagePointsResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVantagePointCollection",
        bodyModel: model.DedicatedVantagePointCollection,
        type: "model.DedicatedVantagePointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of monitors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMonitorsRequest
   * @return ListMonitorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListMonitors.ts.html |here} to see how to use ListMonitors API.
   */
  public async listMonitors(
    listMonitorsRequest: requests.ListMonitorsRequest
  ): Promise<responses.ListMonitorsResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#listMonitors.");
    const operationName = "listMonitors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/MonitorCollection/ListMonitors";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listMonitorsRequest.apmDomainId,
      "displayName": listMonitorsRequest.displayName,
      "scriptId": listMonitorsRequest.scriptId,
      "vantagePoint": listMonitorsRequest.vantagePoint,
      "monitorType": listMonitorsRequest.monitorType,
      "status": listMonitorsRequest.status,
      "limit": listMonitorsRequest.limit,
      "page": listMonitorsRequest.page,
      "isMaintenanceWindowActive": listMonitorsRequest.isMaintenanceWindowActive,
      "isMaintenanceWindowSet": listMonitorsRequest.isMaintenanceWindowSet,
      "sortOrder": listMonitorsRequest.sortOrder,
      "sortBy": listMonitorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMonitorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMonitorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMonitorsResponse>{},
        body: await response.json(),
        bodyKey: "monitorCollection",
        bodyModel: model.MonitorCollection,
        type: "model.MonitorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of On-premise vantage points.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOnPremiseVantagePointsRequest
   * @return ListOnPremiseVantagePointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListOnPremiseVantagePoints.ts.html |here} to see how to use ListOnPremiseVantagePoints API.
   */
  public async listOnPremiseVantagePoints(
    listOnPremiseVantagePointsRequest: requests.ListOnPremiseVantagePointsRequest
  ): Promise<responses.ListOnPremiseVantagePointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#listOnPremiseVantagePoints.");
    const operationName = "listOnPremiseVantagePoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/OnPremiseVantagePointCollection/ListOnPremiseVantagePoints";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listOnPremiseVantagePointsRequest.apmDomainId,
      "limit": listOnPremiseVantagePointsRequest.limit,
      "page": listOnPremiseVantagePointsRequest.page,
      "sortOrder": listOnPremiseVantagePointsRequest.sortOrder,
      "sortBy": listOnPremiseVantagePointsRequest.sortBy,
      "displayName": listOnPremiseVantagePointsRequest.displayName,
      "name": listOnPremiseVantagePointsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnPremiseVantagePointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOnPremiseVantagePointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnPremiseVantagePointsResponse>{},
        body: await response.json(),
        bodyKey: "onPremiseVantagePointCollection",
        bodyModel: model.OnPremiseVantagePointCollection,
        type: "model.OnPremiseVantagePointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of public vantage points.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPublicVantagePointsRequest
   * @return ListPublicVantagePointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListPublicVantagePoints.ts.html |here} to see how to use ListPublicVantagePoints API.
   */
  public async listPublicVantagePoints(
    listPublicVantagePointsRequest: requests.ListPublicVantagePointsRequest
  ): Promise<responses.ListPublicVantagePointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#listPublicVantagePoints.");
    const operationName = "listPublicVantagePoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/PublicVantagePointCollection/ListPublicVantagePoints";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listPublicVantagePointsRequest.apmDomainId,
      "limit": listPublicVantagePointsRequest.limit,
      "page": listPublicVantagePointsRequest.page,
      "sortOrder": listPublicVantagePointsRequest.sortOrder,
      "sortBy": listPublicVantagePointsRequest.sortBy,
      "displayName": listPublicVantagePointsRequest.displayName,
      "name": listPublicVantagePointsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublicVantagePointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublicVantagePointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicVantagePoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicVantagePointsResponse>{},
        body: await response.json(),
        bodyKey: "publicVantagePointCollection",
        bodyModel: model.PublicVantagePointCollection,
        type: "model.PublicVantagePointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of scripts.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListScriptsRequest
   * @return ListScriptsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListScripts.ts.html |here} to see how to use ListScripts API.
   */
  public async listScripts(
    listScriptsRequest: requests.ListScriptsRequest
  ): Promise<responses.ListScriptsResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#listScripts.");
    const operationName = "listScripts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/ScriptCollection/ListScripts";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listScriptsRequest.apmDomainId,
      "displayName": listScriptsRequest.displayName,
      "contentType": listScriptsRequest.contentType,
      "limit": listScriptsRequest.limit,
      "page": listScriptsRequest.page,
      "sortOrder": listScriptsRequest.sortOrder,
      "sortBy": listScriptsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScriptsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScriptsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scripts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScriptsResponse>{},
        body: await response.json(),
        bodyKey: "scriptCollection",
        bodyModel: model.ScriptCollection,
        type: "model.ScriptCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of workers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkersRequest
   * @return ListWorkersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/ListWorkers.ts.html |here} to see how to use ListWorkers API.
   */
  public async listWorkers(
    listWorkersRequest: requests.ListWorkersRequest
  ): Promise<responses.ListWorkersResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#listWorkers.");
    const operationName = "listWorkers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/WorkerCollection/ListWorkers";
    const pathParams = {
      "{onPremiseVantagePointId}": listWorkersRequest.onPremiseVantagePointId
    };

    const queryParams = {
      "apmDomainId": listWorkersRequest.apmDomainId,
      "limit": listWorkersRequest.limit,
      "page": listWorkersRequest.page,
      "status": listWorkersRequest.status,
      "capability": listWorkersRequest.capability,
      "sortOrder": listWorkersRequest.sortOrder,
      "sortBy": listWorkersRequest.sortBy,
      "displayName": listWorkersRequest.displayName,
      "name": listWorkersRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}/workers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkersResponse>{},
        body: await response.json(),
        bodyKey: "workerCollection",
        bodyModel: model.WorkerCollection,
        type: "model.WorkerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the dedicated vantage point.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDedicatedVantagePointRequest
   * @return UpdateDedicatedVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/UpdateDedicatedVantagePoint.ts.html |here} to see how to use UpdateDedicatedVantagePoint API.
   */
  public async updateDedicatedVantagePoint(
    updateDedicatedVantagePointRequest: requests.UpdateDedicatedVantagePointRequest
  ): Promise<responses.UpdateDedicatedVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#updateDedicatedVantagePoint.");
    const operationName = "updateDedicatedVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/DedicatedVantagePoint/UpdateDedicatedVantagePoint";
    const pathParams = {
      "{dedicatedVantagePointId}": updateDedicatedVantagePointRequest.dedicatedVantagePointId
    };

    const queryParams = {
      "apmDomainId": updateDedicatedVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDedicatedVantagePointRequest.ifMatch,
      "opc-request-id": updateDedicatedVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDedicatedVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVantagePoints/{dedicatedVantagePointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDedicatedVantagePointRequest.updateDedicatedVantagePointDetails,
        "UpdateDedicatedVantagePointDetails",
        model.UpdateDedicatedVantagePointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDedicatedVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVantagePoint",
        bodyModel: model.DedicatedVantagePoint,
        type: "model.DedicatedVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the monitor.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMonitorRequest
   * @return UpdateMonitorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/UpdateMonitor.ts.html |here} to see how to use UpdateMonitor API.
   */
  public async updateMonitor(
    updateMonitorRequest: requests.UpdateMonitorRequest
  ): Promise<responses.UpdateMonitorResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#updateMonitor.");
    const operationName = "updateMonitor";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Monitor/UpdateMonitor";
    const pathParams = {
      "{monitorId}": updateMonitorRequest.monitorId
    };

    const queryParams = {
      "apmDomainId": updateMonitorRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMonitorRequest.ifMatch,
      "opc-request-id": updateMonitorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMonitorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitors/{monitorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMonitorRequest.updateMonitorDetails,
        "UpdateMonitorDetails",
        model.UpdateMonitorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMonitorResponse>{},
        body: await response.json(),
        bodyKey: "monitor",
        bodyModel: model.Monitor,
        type: "model.Monitor",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the On-premise vantage point.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOnPremiseVantagePointRequest
   * @return UpdateOnPremiseVantagePointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/UpdateOnPremiseVantagePoint.ts.html |here} to see how to use UpdateOnPremiseVantagePoint API.
   */
  public async updateOnPremiseVantagePoint(
    updateOnPremiseVantagePointRequest: requests.UpdateOnPremiseVantagePointRequest
  ): Promise<responses.UpdateOnPremiseVantagePointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApmSyntheticClient#updateOnPremiseVantagePoint.");
    const operationName = "updateOnPremiseVantagePoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/OnPremiseVantagePoint/UpdateOnPremiseVantagePoint";
    const pathParams = {
      "{onPremiseVantagePointId}": updateOnPremiseVantagePointRequest.onPremiseVantagePointId
    };

    const queryParams = {
      "apmDomainId": updateOnPremiseVantagePointRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOnPremiseVantagePointRequest.ifMatch,
      "opc-request-id": updateOnPremiseVantagePointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnPremiseVantagePointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremiseVantagePointRequest.updateOnPremiseVantagePointDetails,
        "UpdateOnPremiseVantagePointDetails",
        model.UpdateOnPremiseVantagePointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremiseVantagePointResponse>{},
        body: await response.json(),
        bodyKey: "onPremiseVantagePoint",
        bodyModel: model.OnPremiseVantagePoint,
        type: "model.OnPremiseVantagePoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the script.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateScriptRequest
   * @return UpdateScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/UpdateScript.ts.html |here} to see how to use UpdateScript API.
   */
  public async updateScript(
    updateScriptRequest: requests.UpdateScriptRequest
  ): Promise<responses.UpdateScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#updateScript.");
    const operationName = "updateScript";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Script/UpdateScript";
    const pathParams = {
      "{scriptId}": updateScriptRequest.scriptId
    };

    const queryParams = {
      "apmDomainId": updateScriptRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateScriptRequest.ifMatch,
      "opc-request-id": updateScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scripts/{scriptId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScriptRequest.updateScriptDetails,
        "UpdateScriptDetails",
        model.UpdateScriptDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScriptResponse>{},
        body: await response.json(),
        bodyKey: "script",
        bodyModel: model.Script,
        type: "model.Script",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the worker.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateWorkerRequest
   * @return UpdateWorkerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmsynthetics/UpdateWorker.ts.html |here} to see how to use UpdateWorker API.
   */
  public async updateWorker(
    updateWorkerRequest: requests.UpdateWorkerRequest
  ): Promise<responses.UpdateWorkerResponse> {
    if (this.logger) this.logger.debug("Calling operation ApmSyntheticClient#updateWorker.");
    const operationName = "updateWorker";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-synthetic-monitoring/20200630/Worker/UpdateWorker";
    const pathParams = {
      "{onPremiseVantagePointId}": updateWorkerRequest.onPremiseVantagePointId,
      "{workerId}": updateWorkerRequest.workerId
    };

    const queryParams = {
      "apmDomainId": updateWorkerRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateWorkerRequest.ifMatch,
      "opc-request-id": updateWorkerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateWorkerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremiseVantagePoints/{onPremiseVantagePointId}/workers/{workerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWorkerRequest.updateWorkerDetails,
        "UpdateWorkerDetails",
        model.UpdateWorkerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWorkerResponse>{},
        body: await response.json(),
        bodyKey: "worker",
        bodyModel: model.Worker,
        type: "model.Worker",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
