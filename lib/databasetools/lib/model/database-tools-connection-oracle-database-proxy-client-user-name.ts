/**
 * Database Tools
 * Use the Database Tools API to manage connections, private endpoints, and work requests in the Database Tools service.
 * OpenAPI spec version: 20201005
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Proxy client information for user name based proxy authentication.
 */
export interface DatabaseToolsConnectionOracleDatabaseProxyClientUserName
  extends model.DatabaseToolsConnectionOracleDatabaseProxyClient {
  /**
   * The user name.
   */
  "userName": string;
  "userPassword"?: model.DatabaseToolsUserPasswordSecretId;
  /**
   * A list of database roles for the client. These roles are enabled if the proxy is authorized to use the roles on behalf of the client.
   */
  "roles"?: Array<string>;

  "proxyAuthenticationType": string;
}

export namespace DatabaseToolsConnectionOracleDatabaseProxyClientUserName {
  export function getJsonObj(
    obj: DatabaseToolsConnectionOracleDatabaseProxyClientUserName,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DatabaseToolsConnectionOracleDatabaseProxyClient.getJsonObj(
            obj
          ) as DatabaseToolsConnectionOracleDatabaseProxyClientUserName)),
      ...{
        "userPassword": obj.userPassword
          ? model.DatabaseToolsUserPassword.getJsonObj(obj.userPassword)
          : undefined
      }
    };

    return jsonObj;
  }
  export const proxyAuthenticationType = "USER_NAME";
  export function getDeserializedJsonObj(
    obj: DatabaseToolsConnectionOracleDatabaseProxyClientUserName,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DatabaseToolsConnectionOracleDatabaseProxyClient.getDeserializedJsonObj(
            obj
          ) as DatabaseToolsConnectionOracleDatabaseProxyClientUserName)),
      ...{
        "userPassword": obj.userPassword
          ? model.DatabaseToolsUserPassword.getDeserializedJsonObj(obj.userPassword)
          : undefined
      }
    };

    return jsonObj;
  }
}
