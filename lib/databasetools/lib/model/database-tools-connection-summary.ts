/**
 * Database Tools
 * Use the Database Tools API to manage connections, private endpoints, and work requests in the Database Tools service.
 * OpenAPI spec version: 20201005
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of the Database Tools connection.
 */
export interface DatabaseToolsConnectionSummary {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the {@code DatabaseToolsConnection}.
   */
  "id": string;
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
   */
  "compartmentId": string;
  /**
   * The current state of the Database Tools connection.
   */
  "lifecycleState": model.LifecycleState;
  /**
   * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
   */
  "lifecycleDetails"?: string;
  /**
   * The time the Database Tools connection was created. An RFC3339 formatted datetime string.
   */
  "timeCreated": Date;
  /**
   * The time the Database Tools connection was updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated": Date;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Locks associated with this resource.
   */
  "locks"?: Array<model.ResourceLock>;
  /**
   * Specifies whether this connection is supported by the Database Tools Runtime.
   */
  "runtimeSupport": model.RuntimeSupport;

  "type": string;
}

export namespace DatabaseToolsConnectionSummary {
  export function getJsonObj(obj: DatabaseToolsConnectionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "POSTGRESQL":
          return model.DatabaseToolsConnectionPostgresqlSummary.getJsonObj(
            <model.DatabaseToolsConnectionPostgresqlSummary>(<object>jsonObj),
            true
          );
        case "ORACLE_DATABASE":
          return model.DatabaseToolsConnectionOracleDatabaseSummary.getJsonObj(
            <model.DatabaseToolsConnectionOracleDatabaseSummary>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.DatabaseToolsConnectionMySqlSummary.getJsonObj(
            <model.DatabaseToolsConnectionMySqlSummary>(<object>jsonObj),
            true
          );
        case "GENERIC_JDBC":
          return model.DatabaseToolsConnectionGenericJdbcSummary.getJsonObj(
            <model.DatabaseToolsConnectionGenericJdbcSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DatabaseToolsConnectionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "POSTGRESQL":
          return model.DatabaseToolsConnectionPostgresqlSummary.getDeserializedJsonObj(
            <model.DatabaseToolsConnectionPostgresqlSummary>(<object>jsonObj),
            true
          );
        case "ORACLE_DATABASE":
          return model.DatabaseToolsConnectionOracleDatabaseSummary.getDeserializedJsonObj(
            <model.DatabaseToolsConnectionOracleDatabaseSummary>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.DatabaseToolsConnectionMySqlSummary.getDeserializedJsonObj(
            <model.DatabaseToolsConnectionMySqlSummary>(<object>jsonObj),
            true
          );
        case "GENERIC_JDBC":
          return model.DatabaseToolsConnectionGenericJdbcSummary.getDeserializedJsonObj(
            <model.DatabaseToolsConnectionGenericJdbcSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
