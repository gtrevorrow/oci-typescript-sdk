/**
 * MySQL Database Service API
 * The API for the MySQL Database Service
 * OpenAPI spec version: 20190415
 * Contact: mysql-cloud-dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Core properties of a Mysql Channel source.
 */
export interface ChannelSourceMysql extends model.ChannelSource {
  /**
   * The network address of the MySQL instance.
   */
  "hostname": string;
  /**
   * The port the source MySQL instance listens on. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "port": number;
  /**
   * The name of the replication user on the source MySQL instance.
   * The username has a maximum length of 96 characters. For more information,
   * please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
   *
   */
  "username": string;
  /**
   * The SSL mode of the Channel.
   */
  "sslMode": ChannelSourceMysql.SslMode;
  "sslCaCertificate"?: model.PemCaCertificate;
  "anonymousTransactionsHandling"?:
    | model.ErrorOnAnonymousHandling
    | model.AssignManualUuidHandling
    | model.AssignTargetUuidHandling;

  "sourceType": string;
}

export namespace ChannelSourceMysql {
  export enum SslMode {
    VerifyIdentity = "VERIFY_IDENTITY",
    VerifyCa = "VERIFY_CA",
    Required = "REQUIRED",
    Disabled = "DISABLED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ChannelSourceMysql, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.ChannelSource.getJsonObj(obj) as ChannelSourceMysql)),
      ...{
        "sslCaCertificate": obj.sslCaCertificate
          ? model.CaCertificate.getJsonObj(obj.sslCaCertificate)
          : undefined,
        "anonymousTransactionsHandling": obj.anonymousTransactionsHandling
          ? model.AnonymousTransactionsHandling.getJsonObj(obj.anonymousTransactionsHandling)
          : undefined
      }
    };

    return jsonObj;
  }
  export const sourceType = "MYSQL";
  export function getDeserializedJsonObj(
    obj: ChannelSourceMysql,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ChannelSource.getDeserializedJsonObj(obj) as ChannelSourceMysql)),
      ...{
        "sslCaCertificate": obj.sslCaCertificate
          ? model.CaCertificate.getDeserializedJsonObj(obj.sslCaCertificate)
          : undefined,
        "anonymousTransactionsHandling": obj.anonymousTransactionsHandling
          ? model.AnonymousTransactionsHandling.getDeserializedJsonObj(
              obj.anonymousTransactionsHandling
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
