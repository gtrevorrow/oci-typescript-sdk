/**
 * Bastion API
 * Use the Bastion API to provide restricted and time-limited access to target resources that don't have public endpoints. Bastions let authorized users connect from specific IP addresses to target resources using Secure Shell (SSH) sessions. For more information, see [the Bastion documentation](/iaas/Content/Bastion/home.htm).
 * OpenAPI spec version: 20210331
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details about a bastion session's target resource.
 */
export interface TargetResourceDetails {
  "sessionType": string;
}

export namespace TargetResourceDetails {
  export function getJsonObj(obj: TargetResourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sessionType" in obj && obj.sessionType) {
      switch (obj.sessionType) {
        case "DYNAMIC_PORT_FORWARDING":
          return model.DynamicPortForwardingSessionTargetResourceDetails.getJsonObj(
            <model.DynamicPortForwardingSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        case "MANAGED_SSH":
          return model.ManagedSshSessionTargetResourceDetails.getJsonObj(
            <model.ManagedSshSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        case "PORT_FORWARDING":
          return model.PortForwardingSessionTargetResourceDetails.getJsonObj(
            <model.PortForwardingSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sessionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: TargetResourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sessionType" in obj && obj.sessionType) {
      switch (obj.sessionType) {
        case "DYNAMIC_PORT_FORWARDING":
          return model.DynamicPortForwardingSessionTargetResourceDetails.getDeserializedJsonObj(
            <model.DynamicPortForwardingSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        case "MANAGED_SSH":
          return model.ManagedSshSessionTargetResourceDetails.getDeserializedJsonObj(
            <model.ManagedSshSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        case "PORT_FORWARDING":
          return model.PortForwardingSessionTargetResourceDetails.getDeserializedJsonObj(
            <model.PortForwardingSessionTargetResourceDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sessionType}`);
      }
    }
    return jsonObj;
  }
}
