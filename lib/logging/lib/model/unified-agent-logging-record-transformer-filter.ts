/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, move and delete
log groups, log objects, log saved searches, and agent configurations.

For more information, see [Logging Overview](https://docs.oracle.com/iaas/Content/Logging/Concepts/loggingoverview.htm).

 * OpenAPI spec version: 20200531
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Logging record transformer filter object mutates/transforms logs.
 * Ref: https://docs.fluentd.org/filter/record_transformer
 *
 */
export interface UnifiedAgentLoggingRecordTransformerFilter
  extends model.UnifiedAgentLoggingFilter {
  /**
   * Add new key-value pairs in logs
   */
  "recordList": Array<model.RecordTransformerPair>;
  /**
   * When set to true, the full Ruby syntax is enabled in the ${} expression.
   */
  "isRubyEnabled"?: boolean;
  /**
   * If true, automatically casts the field types.
   */
  "isAutoTypecastEnabled"?: boolean;
  /**
   * If true, it modifies a new empty hash
   */
  "isRenewRecordEnabled"?: boolean;
  /**
   * Overwrites the time of logs with this value, this value must be a Unix timestamp.
   */
  "renewTimeKey"?: string;
  /**
   * A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
   */
  "keepKeys"?: Array<string>;
  /**
   * A list of keys to delete
   */
  "removeKeys"?: Array<string>;

  "filterType": string;
}

export namespace UnifiedAgentLoggingRecordTransformerFilter {
  export function getJsonObj(
    obj: UnifiedAgentLoggingRecordTransformerFilter,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.UnifiedAgentLoggingFilter.getJsonObj(
            obj
          ) as UnifiedAgentLoggingRecordTransformerFilter)),
      ...{
        "recordList": obj.recordList
          ? obj.recordList.map(item => {
              return model.RecordTransformerPair.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const filterType = "RECORD_TRANSFORMER_FILTER";
  export function getDeserializedJsonObj(
    obj: UnifiedAgentLoggingRecordTransformerFilter,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.UnifiedAgentLoggingFilter.getDeserializedJsonObj(
            obj
          ) as UnifiedAgentLoggingRecordTransformerFilter)),
      ...{
        "recordList": obj.recordList
          ? obj.recordList.map(item => {
              return model.RecordTransformerPair.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
