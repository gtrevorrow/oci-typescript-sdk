/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, move and delete
log groups, log objects, log saved searches, and agent configurations.

For more information, see [Logging Overview](https://docs.oracle.com/iaas/Content/Logging/Concepts/loggingoverview.htm).

 * OpenAPI spec version: 20200531
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Unified Agent monitoing application configuration details
 */
export interface UnifiedAgentMonitoringApplicationConfigurationDetails {
  "sourceType": string;
}

export namespace UnifiedAgentMonitoringApplicationConfigurationDetails {
  export function getJsonObj(obj: UnifiedAgentMonitoringApplicationConfigurationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sourceType" in obj && obj.sourceType) {
      switch (obj.sourceType) {
        case "KUBERNETES":
          return model.UnifiedAgentKubernetesConfigurationDetails.getJsonObj(
            <model.UnifiedAgentKubernetesConfigurationDetails>(<object>jsonObj),
            true
          );
        case "URL":
          return model.UnifiedAgentUrlConfigurationDetails.getJsonObj(
            <model.UnifiedAgentUrlConfigurationDetails>(<object>jsonObj),
            true
          );
        case "TAIL":
          return model.UnifiedAgentOpenmetricsTailConfigurationDetails.getJsonObj(
            <model.UnifiedAgentOpenmetricsTailConfigurationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sourceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(
    obj: UnifiedAgentMonitoringApplicationConfigurationDetails
  ): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sourceType" in obj && obj.sourceType) {
      switch (obj.sourceType) {
        case "KUBERNETES":
          return model.UnifiedAgentKubernetesConfigurationDetails.getDeserializedJsonObj(
            <model.UnifiedAgentKubernetesConfigurationDetails>(<object>jsonObj),
            true
          );
        case "URL":
          return model.UnifiedAgentUrlConfigurationDetails.getDeserializedJsonObj(
            <model.UnifiedAgentUrlConfigurationDetails>(<object>jsonObj),
            true
          );
        case "TAIL":
          return model.UnifiedAgentOpenmetricsTailConfigurationDetails.getDeserializedJsonObj(
            <model.UnifiedAgentOpenmetricsTailConfigurationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sourceType}`);
      }
    }
    return jsonObj;
  }
}
