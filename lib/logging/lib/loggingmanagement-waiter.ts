/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, move and delete
log groups, log objects, log saved searches, and agent configurations.

For more information, see [Logging Overview](/iaas/Content/Logging/Concepts/loggingoverview.htm).

 * OpenAPI spec version: 20200531
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { LoggingManagementClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class LoggingManagementWaiter {
  public constructor(
    private client: LoggingManagementClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forLog till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetLogResponse
   */
  public async forLog(
    request: serviceRequests.GetLogRequest,
    ...targetStates: models.LogLifecycleState[]
  ): Promise<serviceResponses.GetLogResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getLog(request),
      response => targetStates.includes(response.log.lifecycleState!)
    );
  }

  /**
   * Waits forLogGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetLogGroupResponse
   */
  public async forLogGroup(
    request: serviceRequests.GetLogGroupRequest,
    ...targetStates: models.LogGroupLifecycleState[]
  ): Promise<serviceResponses.GetLogGroupResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getLogGroup(request),
      response => targetStates.includes(response.logGroup.lifecycleState!)
    );
  }

  /**
   * Waits forLogSavedSearch till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetLogSavedSearchResponse
   */
  public async forLogSavedSearch(
    request: serviceRequests.GetLogSavedSearchRequest,
    ...targetStates: models.LogSavedSearchLifecycleState[]
  ): Promise<serviceResponses.GetLogSavedSearchResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getLogSavedSearch(request),
      response => targetStates.includes(response.logSavedSearch.lifecycleState!)
    );
  }

  /**
   * Waits forUnifiedAgentConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetUnifiedAgentConfigurationResponse
   */
  public async forUnifiedAgentConfiguration(
    request: serviceRequests.GetUnifiedAgentConfigurationRequest,
    ...targetStates: models.LogLifecycleState[]
  ): Promise<serviceResponses.GetUnifiedAgentConfigurationResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getUnifiedAgentConfiguration(request),
      response => targetStates.includes(response.unifiedAgentConfiguration.lifecycleState!)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
