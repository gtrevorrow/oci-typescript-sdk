/**
 * Scanning API
 * Use the Vulnerability Scanning Service (VSS) API to manage scan recipes, targets, and reports. For more information, see [the Vulnerability Scanning documentation](https://docs.oracle.com/iaas/scanning/home.htm).
 * OpenAPI spec version: 20210215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { VulnerabilityScanningClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class VulnerabilityScanningWaiter {
  public constructor(
    private client: VulnerabilityScanningClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forContainerScanRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetContainerScanRecipeResponse | null (null in case of 404 response)
   */
  public async forContainerScanRecipe(
    request: serviceRequests.GetContainerScanRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetContainerScanRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getContainerScanRecipe(request),
      response => targetStates.includes(response.containerScanRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forContainerScanTarget till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetContainerScanTargetResponse | null (null in case of 404 response)
   */
  public async forContainerScanTarget(
    request: serviceRequests.GetContainerScanTargetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetContainerScanTargetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getContainerScanTarget(request),
      response => targetStates.includes(response.containerScanTarget.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostAgentScanResult till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostAgentScanResultResponse | null (null in case of 404 response)
   */
  public async forHostAgentScanResult(
    request: serviceRequests.GetHostAgentScanResultRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostAgentScanResultResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostAgentScanResult(request),
      response => targetStates.includes(response.hostAgentScanResult.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostCisBenchmarkScanResult till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostCisBenchmarkScanResultResponse | null (null in case of 404 response)
   */
  public async forHostCisBenchmarkScanResult(
    request: serviceRequests.GetHostCisBenchmarkScanResultRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostCisBenchmarkScanResultResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostCisBenchmarkScanResult(request),
      response => targetStates.includes(response.hostCisBenchmarkScanResult.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostEndpointProtectionScanResult till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostEndpointProtectionScanResultResponse | null (null in case of 404 response)
   */
  public async forHostEndpointProtectionScanResult(
    request: serviceRequests.GetHostEndpointProtectionScanResultRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostEndpointProtectionScanResultResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostEndpointProtectionScanResult(request),
      response => targetStates.includes(response.hostEndpointProtectionScanResult.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostPortScanResult till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostPortScanResultResponse | null (null in case of 404 response)
   */
  public async forHostPortScanResult(
    request: serviceRequests.GetHostPortScanResultRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostPortScanResultResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostPortScanResult(request),
      response => targetStates.includes(response.hostPortScanResult.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostScanRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostScanRecipeResponse | null (null in case of 404 response)
   */
  public async forHostScanRecipe(
    request: serviceRequests.GetHostScanRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostScanRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostScanRecipe(request),
      response => targetStates.includes(response.hostScanRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostScanTarget till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostScanTargetResponse | null (null in case of 404 response)
   */
  public async forHostScanTarget(
    request: serviceRequests.GetHostScanTargetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostScanTargetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostScanTarget(request),
      response => targetStates.includes(response.hostScanTarget.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forHostVulnerability till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetHostVulnerabilityResponse | null (null in case of 404 response)
   */
  public async forHostVulnerability(
    request: serviceRequests.GetHostVulnerabilityRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetHostVulnerabilityResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getHostVulnerability(request),
      response => targetStates.includes(response.hostVulnerability.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forVulnerability till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVulnerabilityResponse | null (null in case of 404 response)
   */
  public async forVulnerability(
    request: serviceRequests.GetVulnerabilityRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetVulnerabilityResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVulnerability(request),
      response => targetStates.includes(response.vulnerability.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
