/**
 * Kubernetes Engine API
 * API for the Kubernetes Engine service (also known as the Container Engine for Kubernetes service). Use this API to build, deploy,
and manage cloud-native applications. For more information, see
[Overview of Kubernetes Engine](https://docs.oracle.com/iaas/Content/ContEng/Concepts/contengoverview.htm).

 * OpenAPI spec version: 20180222
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ContainerEngineWaiter } from "./containerengine-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ContainerEngineApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ContainerEngineClient {
  protected static serviceEndpointTemplate =
    "https://containerengine.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ContainerEngineWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ContainerEngine";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("containerengine")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("containerengine");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180222";
    if (this.logger) this.logger.info(`ContainerEngineClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ContainerEngineClient.serviceEndpointTemplate,
        this._region,
        ContainerEngineClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ContainerEngineClient.serviceEndpointTemplate,
        this._regionId,
        ContainerEngineClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ContainerEngineClient.serviceEndpointTemplate,
      region,
      ContainerEngineClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ContainerEngineClient.serviceEndpointTemplate,
      regionId,
      ContainerEngineClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ContainerEngineWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ContainerEngineWaiter {
    this._waiters = new ContainerEngineWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ContainerEngineWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Initiates cluster migration to use native VCN.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ClusterMigrateToNativeVcnRequest
   * @return ClusterMigrateToNativeVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ClusterMigrateToNativeVcn.ts.html |here} to see how to use ClusterMigrateToNativeVcn API.
   */
  public async clusterMigrateToNativeVcn(
    clusterMigrateToNativeVcnRequest: requests.ClusterMigrateToNativeVcnRequest
  ): Promise<responses.ClusterMigrateToNativeVcnResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#clusterMigrateToNativeVcn.");
    const operationName = "clusterMigrateToNativeVcn";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": clusterMigrateToNativeVcnRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": clusterMigrateToNativeVcnRequest.ifMatch,
      "opc-request-id": clusterMigrateToNativeVcnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      clusterMigrateToNativeVcnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/actions/migrateToNativeVcn",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        clusterMigrateToNativeVcnRequest.clusterMigrateToNativeVcnDetails,
        "ClusterMigrateToNativeVcnDetails",
        model.ClusterMigrateToNativeVcnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ClusterMigrateToNativeVcnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Complete cluster credential rotation. Retire old credentials from kubernetes components.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CompleteCredentialRotationRequest
   * @return CompleteCredentialRotationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CompleteCredentialRotation.ts.html |here} to see how to use CompleteCredentialRotation API.
   */
  public async completeCredentialRotation(
    completeCredentialRotationRequest: requests.CompleteCredentialRotationRequest
  ): Promise<responses.CompleteCredentialRotationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#completeCredentialRotation.");
    const operationName = "completeCredentialRotation";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": completeCredentialRotationRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": completeCredentialRotationRequest.opcRetryToken,
      "opc-request-id": completeCredentialRotationRequest.opcRequestId,
      "if-match": completeCredentialRotationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      completeCredentialRotationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/actions/completeCredentialRotation",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CompleteCredentialRotationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateClusterRequest
   * @return CreateClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CreateCluster.ts.html |here} to see how to use CreateCluster API.
   */
  public async createCluster(
    createClusterRequest: requests.CreateClusterRequest
  ): Promise<responses.CreateClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#createCluster.");
    const operationName = "createCluster";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createClusterRequest.opcRetryToken,
      "opc-request-id": createClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createClusterRequest.createClusterDetails,
        "CreateClusterDetails",
        model.CreateClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create the Kubeconfig YAML for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateKubeconfigRequest
   * @return CreateKubeconfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CreateKubeconfig.ts.html |here} to see how to use CreateKubeconfig API.
   */
  public async createKubeconfig(
    createKubeconfigRequest: requests.CreateKubeconfigRequest
  ): Promise<responses.CreateKubeconfigResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#createKubeconfig.");
    const operationName = "createKubeconfig";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": createKubeconfigRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createKubeconfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createKubeconfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/kubeconfig/content",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createKubeconfigRequest.createClusterKubeconfigContentDetails,
        "CreateClusterKubeconfigContentDetails",
        model.CreateClusterKubeconfigContentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateKubeconfigResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateNodePoolRequest
   * @return CreateNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CreateNodePool.ts.html |here} to see how to use CreateNodePool API.
   */
  public async createNodePool(
    createNodePoolRequest: requests.CreateNodePoolRequest
  ): Promise<responses.CreateNodePoolResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#createNodePool.");
    const operationName = "createNodePool";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNodePoolRequest.opcRetryToken,
      "opc-request-id": createNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNodePoolRequest.createNodePoolDetails,
        "CreateNodePoolDetails",
        model.CreateNodePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new virtual node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateVirtualNodePoolRequest
   * @return CreateVirtualNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CreateVirtualNodePool.ts.html |here} to see how to use CreateVirtualNodePool API.
   */
  public async createVirtualNodePool(
    createVirtualNodePoolRequest: requests.CreateVirtualNodePoolRequest
  ): Promise<responses.CreateVirtualNodePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#createVirtualNodePool.");
    const operationName = "createVirtualNodePool";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVirtualNodePoolRequest.opcRetryToken,
      "opc-request-id": createVirtualNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVirtualNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVirtualNodePoolRequest.createVirtualNodePoolDetails,
        "CreateVirtualNodePoolDetails",
        model.CreateVirtualNodePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVirtualNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create the specified workloadMapping for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateWorkloadMappingRequest
   * @return CreateWorkloadMappingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/CreateWorkloadMapping.ts.html |here} to see how to use CreateWorkloadMapping API.
   */
  public async createWorkloadMapping(
    createWorkloadMappingRequest: requests.CreateWorkloadMappingRequest
  ): Promise<responses.CreateWorkloadMappingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#createWorkloadMapping.");
    const operationName = "createWorkloadMapping";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": createWorkloadMappingRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createWorkloadMappingRequest.opcRetryToken,
      "opc-request-id": createWorkloadMappingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createWorkloadMappingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/workloadMappings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createWorkloadMappingRequest.createWorkloadMappingDetails,
        "CreateWorkloadMappingDetails",
        model.CreateWorkloadMappingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateWorkloadMappingResponse>{},
        body: await response.json(),
        bodyKey: "workloadMapping",
        bodyModel: model.WorkloadMapping,
        type: "model.WorkloadMapping",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteClusterRequest
   * @return DeleteClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteCluster.ts.html |here} to see how to use DeleteCluster API.
   */
  public async deleteCluster(
    deleteClusterRequest: requests.DeleteClusterRequest
  ): Promise<responses.DeleteClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#deleteCluster.");
    const operationName = "deleteCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": deleteClusterRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteClusterRequest.ifMatch,
      "opc-request-id": deleteClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete node.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteNodeRequest
   * @return DeleteNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteNode.ts.html |here} to see how to use DeleteNode API.
   */
  public async deleteNode(
    deleteNodeRequest: requests.DeleteNodeRequest
  ): Promise<responses.DeleteNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#deleteNode.");
    const operationName = "deleteNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{nodePoolId}": deleteNodeRequest.nodePoolId,
      "{nodeId}": deleteNodeRequest.nodeId
    };

    const queryParams = {
      "isDecrementSize": deleteNodeRequest.isDecrementSize,
      "overrideEvictionGraceDuration": deleteNodeRequest.overrideEvictionGraceDuration,
      "isForceDeletionAfterOverrideGraceDuration":
        deleteNodeRequest.isForceDeletionAfterOverrideGraceDuration
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNodeRequest.ifMatch,
      "opc-request-id": deleteNodeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools/{nodePoolId}/node/{nodeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteNodePoolRequest
   * @return DeleteNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteNodePool.ts.html |here} to see how to use DeleteNodePool API.
   */
  public async deleteNodePool(
    deleteNodePoolRequest: requests.DeleteNodePoolRequest
  ): Promise<responses.DeleteNodePoolResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#deleteNodePool.");
    const operationName = "deleteNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{nodePoolId}": deleteNodePoolRequest.nodePoolId
    };

    const queryParams = {
      "overrideEvictionGraceDuration": deleteNodePoolRequest.overrideEvictionGraceDuration,
      "isForceDeletionAfterOverrideGraceDuration":
        deleteNodePoolRequest.isForceDeletionAfterOverrideGraceDuration
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNodePoolRequest.ifMatch,
      "opc-request-id": deleteNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools/{nodePoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a virtual node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteVirtualNodePoolRequest
   * @return DeleteVirtualNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteVirtualNodePool.ts.html |here} to see how to use DeleteVirtualNodePool API.
   */
  public async deleteVirtualNodePool(
    deleteVirtualNodePoolRequest: requests.DeleteVirtualNodePoolRequest
  ): Promise<responses.DeleteVirtualNodePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#deleteVirtualNodePool.");
    const operationName = "deleteVirtualNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualNodePoolId}": deleteVirtualNodePoolRequest.virtualNodePoolId
    };

    const queryParams = {
      "overrideEvictionGraceDurationVnp":
        deleteVirtualNodePoolRequest.overrideEvictionGraceDurationVnp,
      "isForceDeletionAfterOverrideGraceDurationVnp":
        deleteVirtualNodePoolRequest.isForceDeletionAfterOverrideGraceDurationVnp
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVirtualNodePoolRequest.ifMatch,
      "opc-request-id": deleteVirtualNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVirtualNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools/{virtualNodePoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVirtualNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel a work request that has not started.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteWorkRequestRequest
   * @return DeleteWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteWorkRequest.ts.html |here} to see how to use DeleteWorkRequest API.
   */
  public async deleteWorkRequest(
    deleteWorkRequestRequest: requests.DeleteWorkRequestRequest
  ): Promise<responses.DeleteWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#deleteWorkRequest.");
    const operationName = "deleteWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": deleteWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWorkRequestRequest.ifMatch,
      "opc-request-id": deleteWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete workloadMapping for a provisioned cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteWorkloadMappingRequest
   * @return DeleteWorkloadMappingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DeleteWorkloadMapping.ts.html |here} to see how to use DeleteWorkloadMapping API.
   */
  public async deleteWorkloadMapping(
    deleteWorkloadMappingRequest: requests.DeleteWorkloadMappingRequest
  ): Promise<responses.DeleteWorkloadMappingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#deleteWorkloadMapping.");
    const operationName = "deleteWorkloadMapping";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": deleteWorkloadMappingRequest.clusterId,
      "{workloadMappingId}": deleteWorkloadMappingRequest.workloadMappingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWorkloadMappingRequest.ifMatch,
      "opc-request-id": deleteWorkloadMappingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWorkloadMappingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/workloadMappings/{workloadMappingId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkloadMappingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disable addon for a provisioned cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DisableAddonRequest
   * @return DisableAddonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/DisableAddon.ts.html |here} to see how to use DisableAddon API.
   */
  public async disableAddon(
    disableAddonRequest: requests.DisableAddonRequest
  ): Promise<responses.DisableAddonResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#disableAddon.");
    const operationName = "disableAddon";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": disableAddonRequest.clusterId,
      "{addonName}": disableAddonRequest.addonName
    };

    const queryParams = {
      "isRemoveExistingAddOn": disableAddonRequest.isRemoveExistingAddOn
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": disableAddonRequest.ifMatch,
      "opc-request-id": disableAddonRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableAddonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/addons/{addonName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableAddonResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified addon for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAddonRequest
   * @return GetAddonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetAddon.ts.html |here} to see how to use GetAddon API.
   */
  public async getAddon(
    getAddonRequest: requests.GetAddonRequest
  ): Promise<responses.GetAddonResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#getAddon.");
    const operationName = "getAddon";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": getAddonRequest.clusterId,
      "{addonName}": getAddonRequest.addonName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAddonRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAddonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/addons/{addonName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAddonResponse>{},
        body: await response.json(),
        bodyKey: "addon",
        bodyModel: model.Addon,
        type: "model.Addon",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetClusterRequest
   * @return GetClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetCluster.ts.html |here} to see how to use GetCluster API.
   */
  public async getCluster(
    getClusterRequest: requests.GetClusterRequest
  ): Promise<responses.GetClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#getCluster.");
    const operationName = "getCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": getClusterRequest.clusterId
    };

    const queryParams = {
      "shouldIncludeOidcConfigFile": getClusterRequest.shouldIncludeOidcConfigFile
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterResponse>{},
        body: await response.json(),
        bodyKey: "cluster",
        bodyModel: model.Cluster,
        type: "model.Cluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details on a cluster's migration to native VCN.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetClusterMigrateToNativeVcnStatusRequest
   * @return GetClusterMigrateToNativeVcnStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetClusterMigrateToNativeVcnStatus.ts.html |here} to see how to use GetClusterMigrateToNativeVcnStatus API.
   */
  public async getClusterMigrateToNativeVcnStatus(
    getClusterMigrateToNativeVcnStatusRequest: requests.GetClusterMigrateToNativeVcnStatusRequest
  ): Promise<responses.GetClusterMigrateToNativeVcnStatusResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ContainerEngineClient#getClusterMigrateToNativeVcnStatus."
      );
    const operationName = "getClusterMigrateToNativeVcnStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": getClusterMigrateToNativeVcnStatusRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getClusterMigrateToNativeVcnStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getClusterMigrateToNativeVcnStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/migrateToNativeVcnStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterMigrateToNativeVcnStatusResponse>{},
        body: await response.json(),
        bodyKey: "clusterMigrateToNativeVcnStatus",
        bodyModel: model.ClusterMigrateToNativeVcnStatus,
        type: "model.ClusterMigrateToNativeVcnStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get options available for clusters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetClusterOptionsRequest
   * @return GetClusterOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetClusterOptions.ts.html |here} to see how to use GetClusterOptions API.
   */
  public async getClusterOptions(
    getClusterOptionsRequest: requests.GetClusterOptionsRequest
  ): Promise<responses.GetClusterOptionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#getClusterOptions.");
    const operationName = "getClusterOptions";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterOptionId}": getClusterOptionsRequest.clusterOptionId
    };

    const queryParams = {
      "compartmentId": getClusterOptionsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getClusterOptionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getClusterOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterOptions/{clusterOptionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterOptionsResponse>{},
        body: await response.json(),
        bodyKey: "clusterOptions",
        bodyModel: model.ClusterOptions,
        type: "model.ClusterOptions",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get cluster credential rotation status.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCredentialRotationStatusRequest
   * @return GetCredentialRotationStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetCredentialRotationStatus.ts.html |here} to see how to use GetCredentialRotationStatus API.
   */
  public async getCredentialRotationStatus(
    getCredentialRotationStatusRequest: requests.GetCredentialRotationStatusRequest
  ): Promise<responses.GetCredentialRotationStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#getCredentialRotationStatus.");
    const operationName = "getCredentialRotationStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": getCredentialRotationStatusRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCredentialRotationStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCredentialRotationStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/credentialRotationStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCredentialRotationStatusResponse>{},
        body: await response.json(),
        bodyKey: "credentialRotationStatus",
        bodyModel: model.CredentialRotationStatus,
        type: "model.CredentialRotationStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNodePoolRequest
   * @return GetNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetNodePool.ts.html |here} to see how to use GetNodePool API.
   */
  public async getNodePool(
    getNodePoolRequest: requests.GetNodePoolRequest
  ): Promise<responses.GetNodePoolResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#getNodePool.");
    const operationName = "getNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{nodePoolId}": getNodePoolRequest.nodePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools/{nodePoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNodePoolResponse>{},
        body: await response.json(),
        bodyKey: "nodePool",
        bodyModel: model.NodePool,
        type: "model.NodePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get options available for node pools.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNodePoolOptionsRequest
   * @return GetNodePoolOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetNodePoolOptions.ts.html |here} to see how to use GetNodePoolOptions API.
   */
  public async getNodePoolOptions(
    getNodePoolOptionsRequest: requests.GetNodePoolOptionsRequest
  ): Promise<responses.GetNodePoolOptionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#getNodePoolOptions.");
    const operationName = "getNodePoolOptions";
    const apiReferenceLink = "";
    const pathParams = {
      "{nodePoolOptionId}": getNodePoolOptionsRequest.nodePoolOptionId
    };

    const queryParams = {
      "compartmentId": getNodePoolOptionsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNodePoolOptionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNodePoolOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePoolOptions/{nodePoolOptionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNodePoolOptionsResponse>{},
        body: await response.json(),
        bodyKey: "nodePoolOptions",
        bodyModel: model.NodePoolOptions,
        type: "model.NodePoolOptions",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a virtual node.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetVirtualNodeRequest
   * @return GetVirtualNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetVirtualNode.ts.html |here} to see how to use GetVirtualNode API.
   */
  public async getVirtualNode(
    getVirtualNodeRequest: requests.GetVirtualNodeRequest
  ): Promise<responses.GetVirtualNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#getVirtualNode.");
    const operationName = "getVirtualNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualNodePoolId}": getVirtualNodeRequest.virtualNodePoolId,
      "{virtualNodeId}": getVirtualNodeRequest.virtualNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVirtualNodeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVirtualNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools/{virtualNodePoolId}/virtualNodes/{virtualNodeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVirtualNodeResponse>{},
        body: await response.json(),
        bodyKey: "virtualNode",
        bodyModel: model.VirtualNode,
        type: "model.VirtualNode",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a virtual node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetVirtualNodePoolRequest
   * @return GetVirtualNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetVirtualNodePool.ts.html |here} to see how to use GetVirtualNodePool API.
   */
  public async getVirtualNodePool(
    getVirtualNodePoolRequest: requests.GetVirtualNodePoolRequest
  ): Promise<responses.GetVirtualNodePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#getVirtualNodePool.");
    const operationName = "getVirtualNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualNodePoolId}": getVirtualNodePoolRequest.virtualNodePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVirtualNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVirtualNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools/{virtualNodePoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVirtualNodePoolResponse>{},
        body: await response.json(),
        bodyKey: "virtualNodePool",
        bodyModel: model.VirtualNodePool,
        type: "model.VirtualNodePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the details of a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified workloadMapping for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkloadMappingRequest
   * @return GetWorkloadMappingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/GetWorkloadMapping.ts.html |here} to see how to use GetWorkloadMapping API.
   */
  public async getWorkloadMapping(
    getWorkloadMappingRequest: requests.GetWorkloadMappingRequest
  ): Promise<responses.GetWorkloadMappingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#getWorkloadMapping.");
    const operationName = "getWorkloadMapping";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": getWorkloadMappingRequest.clusterId,
      "{workloadMappingId}": getWorkloadMappingRequest.workloadMappingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkloadMappingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkloadMappingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/workloadMappings/{workloadMappingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkloadMappingResponse>{},
        body: await response.json(),
        bodyKey: "workloadMapping",
        bodyModel: model.WorkloadMapping,
        type: "model.WorkloadMapping",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Install the specified addon for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallAddonRequest
   * @return InstallAddonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/InstallAddon.ts.html |here} to see how to use InstallAddon API.
   */
  public async installAddon(
    installAddonRequest: requests.InstallAddonRequest
  ): Promise<responses.InstallAddonResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#installAddon.");
    const operationName = "installAddon";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": installAddonRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": installAddonRequest.opcRetryToken,
      "opc-request-id": installAddonRequest.opcRequestId,
      "if-match": installAddonRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installAddonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/addons",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installAddonRequest.installAddonDetails,
        "InstallAddonDetails",
        model.InstallAddonDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallAddonResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get list of supported addons for a specific kubernetes version.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAddonOptionsRequest
   * @return ListAddonOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListAddonOptions.ts.html |here} to see how to use ListAddonOptions API.
   */
  public async listAddonOptions(
    listAddonOptionsRequest: requests.ListAddonOptionsRequest
  ): Promise<responses.ListAddonOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listAddonOptions.");
    const operationName = "listAddonOptions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "kubernetesVersion": listAddonOptionsRequest.kubernetesVersion,
      "addonName": listAddonOptionsRequest.addonName,
      "limit": listAddonOptionsRequest.limit,
      "page": listAddonOptionsRequest.page,
      "sortOrder": listAddonOptionsRequest.sortOrder,
      "sortBy": listAddonOptionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAddonOptionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAddonOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/addonOptions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAddonOptionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AddonOptionSummary,
        type: "Array<model.AddonOptionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAddonOptionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AddonOptionSummary objects
   * contained in responses from the listAddonOptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddonOptions(
    request: requests.ListAddonOptionsRequest
  ): AsyncIterableIterator<model.AddonOptionSummary> {
    return paginateRecords(request, req => this.listAddonOptions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAddonOptionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAddonOptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddonOptionsResponses(
    request: requests.ListAddonOptionsRequest
  ): AsyncIterableIterator<responses.ListAddonOptionsResponse> {
    return paginateResponses(request, req => this.listAddonOptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AddonOptionSummary objects
   * contained in responses from the listAddonOptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAddonOptionsRecordIterator(
    request: requests.ListAddonOptionsRequest
  ): AsyncIterableIterator<model.AddonOptionSummary> {
    return paginateRecords(request, req => this.listAddonOptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAddonOptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAddonOptionsResponseIterator(
    request: requests.ListAddonOptionsRequest
  ): AsyncIterableIterator<responses.ListAddonOptionsResponse> {
    return paginateResponses(request, req => this.listAddonOptions(req));
  }

  /**
   * List addon for a provisioned cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAddonsRequest
   * @return ListAddonsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListAddons.ts.html |here} to see how to use ListAddons API.
   */
  public async listAddons(
    listAddonsRequest: requests.ListAddonsRequest
  ): Promise<responses.ListAddonsResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listAddons.");
    const operationName = "listAddons";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": listAddonsRequest.clusterId
    };

    const queryParams = {
      "limit": listAddonsRequest.limit,
      "page": listAddonsRequest.page,
      "sortOrder": listAddonsRequest.sortOrder,
      "sortBy": listAddonsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAddonsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAddonsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/addons",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAddonsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AddonSummary,
        type: "Array<model.AddonSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAddonsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AddonSummary objects
   * contained in responses from the listAddons operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddons(
    request: requests.ListAddonsRequest
  ): AsyncIterableIterator<model.AddonSummary> {
    return paginateRecords(request, req => this.listAddons(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAddonsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAddons operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAddonsResponses(
    request: requests.ListAddonsRequest
  ): AsyncIterableIterator<responses.ListAddonsResponse> {
    return paginateResponses(request, req => this.listAddons(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AddonSummary objects
   * contained in responses from the listAddons operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAddonsRecordIterator(
    request: requests.ListAddonsRequest
  ): AsyncIterableIterator<model.AddonSummary> {
    return paginateRecords(request, req => this.listAddons(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAddons operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAddonsResponseIterator(
    request: requests.ListAddonsRequest
  ): AsyncIterableIterator<responses.ListAddonsResponse> {
    return paginateResponses(request, req => this.listAddons(req));
  }

  /**
   * List all the cluster objects in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListClustersRequest
   * @return ListClustersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListClusters.ts.html |here} to see how to use ListClusters API.
   */
  public async listClusters(
    listClustersRequest: requests.ListClustersRequest
  ): Promise<responses.ListClustersResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listClusters.");
    const operationName = "listClusters";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listClustersRequest.compartmentId,
      "lifecycleState": listClustersRequest.lifecycleState,
      "name": listClustersRequest.name,
      "limit": listClustersRequest.limit,
      "page": listClustersRequest.page,
      "sortOrder": listClustersRequest.sortOrder,
      "sortBy": listClustersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listClustersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listClustersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListClustersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ClusterSummary,
        type: "Array<model.ClusterSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listClustersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ClusterSummary objects
   * contained in responses from the listClusters operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusters(
    request: requests.ListClustersRequest
  ): AsyncIterableIterator<model.ClusterSummary> {
    return paginateRecords(request, req => this.listClusters(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listClustersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listClusters operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClustersResponses(
    request: requests.ListClustersRequest
  ): AsyncIterableIterator<responses.ListClustersResponse> {
    return paginateResponses(request, req => this.listClusters(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ClusterSummary objects
   * contained in responses from the listClusters operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClustersRecordIterator(
    request: requests.ListClustersRequest
  ): AsyncIterableIterator<model.ClusterSummary> {
    return paginateRecords(request, req => this.listClusters(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listClusters operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClustersResponseIterator(
    request: requests.ListClustersRequest
  ): AsyncIterableIterator<responses.ListClustersResponse> {
    return paginateResponses(request, req => this.listClusters(req));
  }

  /**
   * List all the node pools in a compartment, and optionally filter by cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNodePoolsRequest
   * @return ListNodePoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListNodePools.ts.html |here} to see how to use ListNodePools API.
   */
  public async listNodePools(
    listNodePoolsRequest: requests.ListNodePoolsRequest
  ): Promise<responses.ListNodePoolsResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listNodePools.");
    const operationName = "listNodePools";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNodePoolsRequest.compartmentId,
      "clusterId": listNodePoolsRequest.clusterId,
      "name": listNodePoolsRequest.name,
      "limit": listNodePoolsRequest.limit,
      "page": listNodePoolsRequest.page,
      "sortOrder": listNodePoolsRequest.sortOrder,
      "sortBy": listNodePoolsRequest.sortBy,
      "lifecycleState": listNodePoolsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNodePoolsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNodePoolsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNodePoolsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NodePoolSummary,
        type: "Array<model.NodePoolSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNodePoolsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NodePoolSummary objects
   * contained in responses from the listNodePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNodePools(
    request: requests.ListNodePoolsRequest
  ): AsyncIterableIterator<model.NodePoolSummary> {
    return paginateRecords(request, req => this.listNodePools(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNodePoolsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNodePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNodePoolsResponses(
    request: requests.ListNodePoolsRequest
  ): AsyncIterableIterator<responses.ListNodePoolsResponse> {
    return paginateResponses(request, req => this.listNodePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NodePoolSummary objects
   * contained in responses from the listNodePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNodePoolsRecordIterator(
    request: requests.ListNodePoolsRequest
  ): AsyncIterableIterator<model.NodePoolSummary> {
    return paginateRecords(request, req => this.listNodePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNodePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNodePoolsResponseIterator(
    request: requests.ListNodePoolsRequest
  ): AsyncIterableIterator<responses.ListNodePoolsResponse> {
    return paginateResponses(request, req => this.listNodePools(req));
  }

  /**
   * List all the Pod Shapes in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPodShapesRequest
   * @return ListPodShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListPodShapes.ts.html |here} to see how to use ListPodShapes API.
   */
  public async listPodShapes(
    listPodShapesRequest: requests.ListPodShapesRequest
  ): Promise<responses.ListPodShapesResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listPodShapes.");
    const operationName = "listPodShapes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPodShapesRequest.compartmentId,
      "availabilityDomain": listPodShapesRequest.availabilityDomain,
      "name": listPodShapesRequest.name,
      "limit": listPodShapesRequest.limit,
      "page": listPodShapesRequest.page,
      "sortOrder": listPodShapesRequest.sortOrder,
      "sortBy": listPodShapesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPodShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPodShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/podShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPodShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PodShapeSummary,
        type: "Array<model.PodShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPodShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PodShapeSummary objects
   * contained in responses from the listPodShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPodShapes(
    request: requests.ListPodShapesRequest
  ): AsyncIterableIterator<model.PodShapeSummary> {
    return paginateRecords(request, req => this.listPodShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPodShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPodShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPodShapesResponses(
    request: requests.ListPodShapesRequest
  ): AsyncIterableIterator<responses.ListPodShapesResponse> {
    return paginateResponses(request, req => this.listPodShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PodShapeSummary objects
   * contained in responses from the listPodShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPodShapesRecordIterator(
    request: requests.ListPodShapesRequest
  ): AsyncIterableIterator<model.PodShapeSummary> {
    return paginateRecords(request, req => this.listPodShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPodShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPodShapesResponseIterator(
    request: requests.ListPodShapesRequest
  ): AsyncIterableIterator<responses.ListPodShapesResponse> {
    return paginateResponses(request, req => this.listPodShapes(req));
  }

  /**
   * List all the virtual node pools in a compartment, and optionally filter by cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualNodePoolsRequest
   * @return ListVirtualNodePoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListVirtualNodePools.ts.html |here} to see how to use ListVirtualNodePools API.
   */
  public async listVirtualNodePools(
    listVirtualNodePoolsRequest: requests.ListVirtualNodePoolsRequest
  ): Promise<responses.ListVirtualNodePoolsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#listVirtualNodePools.");
    const operationName = "listVirtualNodePools";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVirtualNodePoolsRequest.compartmentId,
      "clusterId": listVirtualNodePoolsRequest.clusterId,
      "name": listVirtualNodePoolsRequest.name,
      "limit": listVirtualNodePoolsRequest.limit,
      "page": listVirtualNodePoolsRequest.page,
      "sortOrder": listVirtualNodePoolsRequest.sortOrder,
      "sortBy": listVirtualNodePoolsRequest.sortBy,
      "lifecycleState": listVirtualNodePoolsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVirtualNodePoolsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualNodePoolsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualNodePoolsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualNodePoolSummary,
        type: "Array<model.VirtualNodePoolSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualNodePoolsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualNodePoolSummary objects
   * contained in responses from the listVirtualNodePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualNodePools(
    request: requests.ListVirtualNodePoolsRequest
  ): AsyncIterableIterator<model.VirtualNodePoolSummary> {
    return paginateRecords(request, req => this.listVirtualNodePools(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualNodePoolsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVirtualNodePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualNodePoolsResponses(
    request: requests.ListVirtualNodePoolsRequest
  ): AsyncIterableIterator<responses.ListVirtualNodePoolsResponse> {
    return paginateResponses(request, req => this.listVirtualNodePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualNodePoolSummary objects
   * contained in responses from the listVirtualNodePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualNodePoolsRecordIterator(
    request: requests.ListVirtualNodePoolsRequest
  ): AsyncIterableIterator<model.VirtualNodePoolSummary> {
    return paginateRecords(request, req => this.listVirtualNodePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualNodePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualNodePoolsResponseIterator(
    request: requests.ListVirtualNodePoolsRequest
  ): AsyncIterableIterator<responses.ListVirtualNodePoolsResponse> {
    return paginateResponses(request, req => this.listVirtualNodePools(req));
  }

  /**
   * List virtual nodes in a virtual node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualNodesRequest
   * @return ListVirtualNodesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListVirtualNodes.ts.html |here} to see how to use ListVirtualNodes API.
   */
  public async listVirtualNodes(
    listVirtualNodesRequest: requests.ListVirtualNodesRequest
  ): Promise<responses.ListVirtualNodesResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listVirtualNodes.");
    const operationName = "listVirtualNodes";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualNodePoolId}": listVirtualNodesRequest.virtualNodePoolId
    };

    const queryParams = {
      "name": listVirtualNodesRequest.name,
      "limit": listVirtualNodesRequest.limit,
      "page": listVirtualNodesRequest.page,
      "sortOrder": listVirtualNodesRequest.sortOrder,
      "sortBy": listVirtualNodesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVirtualNodesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualNodesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools/{virtualNodePoolId}/virtualNodes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualNodesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualNodeSummary,
        type: "Array<model.VirtualNodeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualNodesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualNodeSummary objects
   * contained in responses from the listVirtualNodes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualNodes(
    request: requests.ListVirtualNodesRequest
  ): AsyncIterableIterator<model.VirtualNodeSummary> {
    return paginateRecords(request, req => this.listVirtualNodes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualNodesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVirtualNodes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualNodesResponses(
    request: requests.ListVirtualNodesRequest
  ): AsyncIterableIterator<responses.ListVirtualNodesResponse> {
    return paginateResponses(request, req => this.listVirtualNodes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualNodeSummary objects
   * contained in responses from the listVirtualNodes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualNodesRecordIterator(
    request: requests.ListVirtualNodesRequest
  ): AsyncIterableIterator<model.VirtualNodeSummary> {
    return paginateRecords(request, req => this.listVirtualNodes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualNodes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualNodesResponseIterator(
    request: requests.ListVirtualNodesRequest
  ): AsyncIterableIterator<responses.ListVirtualNodesResponse> {
    return paginateResponses(request, req => this.listVirtualNodes(req));
  }

  /**
   * Get the errors of a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestErrorsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the logs of a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestLogsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all work requests in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "clusterId": listWorkRequestsRequest.clusterId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "resourceType": listWorkRequestsRequest.resourceType,
      "status": listWorkRequestsRequest.status,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * List workloadMappings for a provisioned cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkloadMappingsRequest
   * @return ListWorkloadMappingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ListWorkloadMappings.ts.html |here} to see how to use ListWorkloadMappings API.
   */
  public async listWorkloadMappings(
    listWorkloadMappingsRequest: requests.ListWorkloadMappingsRequest
  ): Promise<responses.ListWorkloadMappingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#listWorkloadMappings.");
    const operationName = "listWorkloadMappings";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": listWorkloadMappingsRequest.clusterId
    };

    const queryParams = {
      "limit": listWorkloadMappingsRequest.limit,
      "page": listWorkloadMappingsRequest.page,
      "sortOrder": listWorkloadMappingsRequest.sortOrder,
      "sortBy": listWorkloadMappingsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkloadMappingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkloadMappingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/workloadMappings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkloadMappingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkloadMappingSummary,
        type: "Array<model.WorkloadMappingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkloadMappingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkloadMappingSummary objects
   * contained in responses from the listWorkloadMappings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkloadMappings(
    request: requests.ListWorkloadMappingsRequest
  ): AsyncIterableIterator<model.WorkloadMappingSummary> {
    return paginateRecords(request, req => this.listWorkloadMappings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkloadMappingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkloadMappings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkloadMappingsResponses(
    request: requests.ListWorkloadMappingsRequest
  ): AsyncIterableIterator<responses.ListWorkloadMappingsResponse> {
    return paginateResponses(request, req => this.listWorkloadMappings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkloadMappingSummary objects
   * contained in responses from the listWorkloadMappings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkloadMappingsRecordIterator(
    request: requests.ListWorkloadMappingsRequest
  ): AsyncIterableIterator<model.WorkloadMappingSummary> {
    return paginateRecords(request, req => this.listWorkloadMappings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkloadMappings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkloadMappingsResponseIterator(
    request: requests.ListWorkloadMappingsRequest
  ): AsyncIterableIterator<responses.ListWorkloadMappingsResponse> {
    return paginateResponses(request, req => this.listWorkloadMappings(req));
  }

  /**
   * perform reboot action to node in cluster
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RebootClusterNodeRequest
   * @return RebootClusterNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/RebootClusterNode.ts.html |here} to see how to use RebootClusterNode API.
   */
  public async rebootClusterNode(
    rebootClusterNodeRequest: requests.RebootClusterNodeRequest
  ): Promise<responses.RebootClusterNodeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#rebootClusterNode.");
    const operationName = "rebootClusterNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": rebootClusterNodeRequest.clusterId,
      "{nodeId}": rebootClusterNodeRequest.nodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": rebootClusterNodeRequest.opcRequestId,
      "opc-retry-token": rebootClusterNodeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rebootClusterNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/nodes/{nodeId}/actions/reboot",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        rebootClusterNodeRequest.rebootClusterNodeDetails,
        "RebootClusterNodeDetails",
        model.RebootClusterNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RebootClusterNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * perform cycle action to node in cluster
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ReplaceBootVolumeClusterNodeRequest
   * @return ReplaceBootVolumeClusterNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/ReplaceBootVolumeClusterNode.ts.html |here} to see how to use ReplaceBootVolumeClusterNode API.
   */
  public async replaceBootVolumeClusterNode(
    replaceBootVolumeClusterNodeRequest: requests.ReplaceBootVolumeClusterNodeRequest
  ): Promise<responses.ReplaceBootVolumeClusterNodeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#replaceBootVolumeClusterNode.");
    const operationName = "replaceBootVolumeClusterNode";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": replaceBootVolumeClusterNodeRequest.clusterId,
      "{nodeId}": replaceBootVolumeClusterNodeRequest.nodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": replaceBootVolumeClusterNodeRequest.opcRequestId,
      "opc-retry-token": replaceBootVolumeClusterNodeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      replaceBootVolumeClusterNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/nodes/{nodeId}/actions/replaceBootVolume",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        replaceBootVolumeClusterNodeRequest.replaceBootVolumeClusterNodeDetails,
        "ReplaceBootVolumeClusterNodeDetails",
        model.ReplaceBootVolumeClusterNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ReplaceBootVolumeClusterNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start cluster credential rotation by adding new credentials, old credentials will still work after this operation.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartCredentialRotationRequest
   * @return StartCredentialRotationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/StartCredentialRotation.ts.html |here} to see how to use StartCredentialRotation API.
   */
  public async startCredentialRotation(
    startCredentialRotationRequest: requests.StartCredentialRotationRequest
  ): Promise<responses.StartCredentialRotationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#startCredentialRotation.");
    const operationName = "startCredentialRotation";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": startCredentialRotationRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startCredentialRotationRequest.opcRetryToken,
      "opc-request-id": startCredentialRotationRequest.opcRequestId,
      "if-match": startCredentialRotationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startCredentialRotationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/actions/startCredentialRotation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startCredentialRotationRequest.startCredentialRotationDetails,
        "StartCredentialRotationDetails",
        model.StartCredentialRotationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartCredentialRotationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update addon details for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAddonRequest
   * @return UpdateAddonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateAddon.ts.html |here} to see how to use UpdateAddon API.
   */
  public async updateAddon(
    updateAddonRequest: requests.UpdateAddonRequest
  ): Promise<responses.UpdateAddonResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#updateAddon.");
    const operationName = "updateAddon";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": updateAddonRequest.clusterId,
      "{addonName}": updateAddonRequest.addonName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAddonRequest.ifMatch,
      "opc-request-id": updateAddonRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAddonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/addons/{addonName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAddonRequest.updateAddonDetails,
        "UpdateAddonDetails",
        model.UpdateAddonDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAddonResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the details of a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateClusterRequest
   * @return UpdateClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateCluster.ts.html |here} to see how to use UpdateCluster API.
   */
  public async updateCluster(
    updateClusterRequest: requests.UpdateClusterRequest
  ): Promise<responses.UpdateClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#updateCluster.");
    const operationName = "updateCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": updateClusterRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateClusterRequest.ifMatch,
      "opc-request-id": updateClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateClusterRequest.updateClusterDetails,
        "UpdateClusterDetails",
        model.UpdateClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the details of the cluster endpoint configuration.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateClusterEndpointConfigRequest
   * @return UpdateClusterEndpointConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateClusterEndpointConfig.ts.html |here} to see how to use UpdateClusterEndpointConfig API.
   */
  public async updateClusterEndpointConfig(
    updateClusterEndpointConfigRequest: requests.UpdateClusterEndpointConfigRequest
  ): Promise<responses.UpdateClusterEndpointConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#updateClusterEndpointConfig.");
    const operationName = "updateClusterEndpointConfig";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": updateClusterEndpointConfigRequest.clusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateClusterEndpointConfigRequest.ifMatch,
      "opc-request-id": updateClusterEndpointConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateClusterEndpointConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/actions/updateEndpointConfig",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateClusterEndpointConfigRequest.updateClusterEndpointConfigDetails,
        "UpdateClusterEndpointConfigDetails",
        model.UpdateClusterEndpointConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateClusterEndpointConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the details of a node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateNodePoolRequest
   * @return UpdateNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateNodePool.ts.html |here} to see how to use UpdateNodePool API.
   */
  public async updateNodePool(
    updateNodePoolRequest: requests.UpdateNodePoolRequest
  ): Promise<responses.UpdateNodePoolResponse> {
    if (this.logger) this.logger.debug("Calling operation ContainerEngineClient#updateNodePool.");
    const operationName = "updateNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{nodePoolId}": updateNodePoolRequest.nodePoolId
    };

    const queryParams = {
      "overrideEvictionGraceDuration": updateNodePoolRequest.overrideEvictionGraceDuration,
      "isForceDeletionAfterOverrideGraceDuration":
        updateNodePoolRequest.isForceDeletionAfterOverrideGraceDuration
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNodePoolRequest.ifMatch,
      "opc-request-id": updateNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/nodePools/{nodePoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNodePoolRequest.updateNodePoolDetails,
        "UpdateNodePoolDetails",
        model.UpdateNodePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the details of a virtual node pool.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateVirtualNodePoolRequest
   * @return UpdateVirtualNodePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateVirtualNodePool.ts.html |here} to see how to use UpdateVirtualNodePool API.
   */
  public async updateVirtualNodePool(
    updateVirtualNodePoolRequest: requests.UpdateVirtualNodePoolRequest
  ): Promise<responses.UpdateVirtualNodePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#updateVirtualNodePool.");
    const operationName = "updateVirtualNodePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualNodePoolId}": updateVirtualNodePoolRequest.virtualNodePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVirtualNodePoolRequest.ifMatch,
      "opc-request-id": updateVirtualNodePoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVirtualNodePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualNodePools/{virtualNodePoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVirtualNodePoolRequest.updateVirtualNodePoolDetails,
        "UpdateVirtualNodePoolDetails",
        model.UpdateVirtualNodePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVirtualNodePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update workloadMapping details for a cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateWorkloadMappingRequest
   * @return UpdateWorkloadMappingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/containerengine/UpdateWorkloadMapping.ts.html |here} to see how to use UpdateWorkloadMapping API.
   */
  public async updateWorkloadMapping(
    updateWorkloadMappingRequest: requests.UpdateWorkloadMappingRequest
  ): Promise<responses.UpdateWorkloadMappingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ContainerEngineClient#updateWorkloadMapping.");
    const operationName = "updateWorkloadMapping";
    const apiReferenceLink = "";
    const pathParams = {
      "{clusterId}": updateWorkloadMappingRequest.clusterId,
      "{workloadMappingId}": updateWorkloadMappingRequest.workloadMappingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateWorkloadMappingRequest.ifMatch,
      "opc-request-id": updateWorkloadMappingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateWorkloadMappingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusters/{clusterId}/workloadMappings/{workloadMappingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWorkloadMappingRequest.updateWorkloadMappingDetails,
        "UpdateWorkloadMappingDetails",
        model.UpdateWorkloadMappingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWorkloadMappingResponse>{},
        body: await response.json(),
        bodyKey: "workloadMapping",
        bodyModel: model.WorkloadMapping,
        type: "model.WorkloadMapping",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
