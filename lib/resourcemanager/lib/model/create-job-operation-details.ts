/**
 * Resource Manager API
 * Use the Resource Manager API to automate deployment and operations for all Oracle Cloud Infrastructure resources.
Using the infrastructure-as-code (IaC) model, the service is based on Terraform, an open source industry standard that lets DevOps engineers develop and deploy their infrastructure anywhere.
For more information, see
[the Resource Manager documentation](/iaas/Content/ResourceManager/home.htm).

 * OpenAPI spec version: 20180917
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Job details that are specific to the operation type.
 *
 */
export interface CreateJobOperationDetails {
  /**
   * Specifies whether or not to upgrade provider versions.
   * Within the version constraints of your Terraform configuration, use the latest versions available from the source of Terraform providers.
   * For more information about this option, see [Dependency Lock File (terraform.io)](https://www.terraform.io/language/files/dependency-lock).
   *
   */
  "isProviderUpgradeRequired"?: boolean;

  "operation": string;
}

export namespace CreateJobOperationDetails {
  export function getJsonObj(obj: CreateJobOperationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "operation" in obj && obj.operation) {
      switch (obj.operation) {
        case "IMPORT_TF_STATE":
          return model.CreateImportTfStateJobOperationDetails.getJsonObj(
            <model.CreateImportTfStateJobOperationDetails>(<object>jsonObj),
            true
          );
        case "PLAN_ROLLBACK":
          return model.CreatePlanRollbackJobOperationDetails.getJsonObj(
            <model.CreatePlanRollbackJobOperationDetails>(<object>jsonObj),
            true
          );
        case "APPLY_ROLLBACK":
          return model.CreateApplyRollbackJobOperationDetails.getJsonObj(
            <model.CreateApplyRollbackJobOperationDetails>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.CreateApplyJobOperationDetails.getJsonObj(
            <model.CreateApplyJobOperationDetails>(<object>jsonObj),
            true
          );
        case "PLAN":
          return model.CreatePlanJobOperationDetails.getJsonObj(
            <model.CreatePlanJobOperationDetails>(<object>jsonObj),
            true
          );
        case "DESTROY":
          return model.CreateDestroyJobOperationDetails.getJsonObj(
            <model.CreateDestroyJobOperationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.operation}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateJobOperationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "operation" in obj && obj.operation) {
      switch (obj.operation) {
        case "IMPORT_TF_STATE":
          return model.CreateImportTfStateJobOperationDetails.getDeserializedJsonObj(
            <model.CreateImportTfStateJobOperationDetails>(<object>jsonObj),
            true
          );
        case "PLAN_ROLLBACK":
          return model.CreatePlanRollbackJobOperationDetails.getDeserializedJsonObj(
            <model.CreatePlanRollbackJobOperationDetails>(<object>jsonObj),
            true
          );
        case "APPLY_ROLLBACK":
          return model.CreateApplyRollbackJobOperationDetails.getDeserializedJsonObj(
            <model.CreateApplyRollbackJobOperationDetails>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.CreateApplyJobOperationDetails.getDeserializedJsonObj(
            <model.CreateApplyJobOperationDetails>(<object>jsonObj),
            true
          );
        case "PLAN":
          return model.CreatePlanJobOperationDetails.getDeserializedJsonObj(
            <model.CreatePlanJobOperationDetails>(<object>jsonObj),
            true
          );
        case "DESTROY":
          return model.CreateDestroyJobOperationDetails.getDeserializedJsonObj(
            <model.CreateDestroyJobOperationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.operation}`);
      }
    }
    return jsonObj;
  }
}
