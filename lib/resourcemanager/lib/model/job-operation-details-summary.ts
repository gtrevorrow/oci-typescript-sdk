/**
 * Resource Manager API
 * Use the Resource Manager API to automate deployment and operations for all Oracle Cloud Infrastructure resources.
Using the infrastructure-as-code (IaC) model, the service is based on Terraform, an open source industry standard that lets DevOps engineers develop and deploy their infrastructure anywhere.
For more information, see
[the Resource Manager documentation](/iaas/Content/ResourceManager/home.htm).

 * OpenAPI spec version: 20180917
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A summary of job details that is specific to the operation type.
 *
 */
export interface JobOperationDetailsSummary {
  "operation": string;
}

export namespace JobOperationDetailsSummary {
  export function getJsonObj(obj: JobOperationDetailsSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "operation" in obj && obj.operation) {
      switch (obj.operation) {
        case "APPLY_ROLLBACK":
          return model.ApplyRollbackJobOperationDetailsSummary.getJsonObj(
            <model.ApplyRollbackJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "IMPORT_TF_STATE":
          return model.ImportTfStateJobOperationDetailsSummary.getJsonObj(
            <model.ImportTfStateJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "PLAN_ROLLBACK":
          return model.PlanRollbackJobOperationDetailsSummary.getJsonObj(
            <model.PlanRollbackJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "PLAN":
          return model.PlanJobOperationDetailsSummary.getJsonObj(
            <model.PlanJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "DESTROY":
          return model.DestroyJobOperationDetailsSummary.getJsonObj(
            <model.DestroyJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.ApplyJobOperationDetailsSummary.getJsonObj(
            <model.ApplyJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.operation}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: JobOperationDetailsSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "operation" in obj && obj.operation) {
      switch (obj.operation) {
        case "APPLY_ROLLBACK":
          return model.ApplyRollbackJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.ApplyRollbackJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "IMPORT_TF_STATE":
          return model.ImportTfStateJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.ImportTfStateJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "PLAN_ROLLBACK":
          return model.PlanRollbackJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.PlanRollbackJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "PLAN":
          return model.PlanJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.PlanJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "DESTROY":
          return model.DestroyJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.DestroyJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.ApplyJobOperationDetailsSummary.getDeserializedJsonObj(
            <model.ApplyJobOperationDetailsSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.operation}`);
      }
    }
    return jsonObj;
  }
}
