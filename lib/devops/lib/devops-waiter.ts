/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DevopsClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DevopsWaiter {
  public constructor(private client: DevopsClient, private readonly config?: WaiterConfiguration) {}

  /**
   * Waits forBuildPipeline till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBuildPipelineResponse | null (null in case of 404 response)
   */
  public async forBuildPipeline(
    request: serviceRequests.GetBuildPipelineRequest,
    ...targetStates: models.BuildPipeline.LifecycleState[]
  ): Promise<serviceResponses.GetBuildPipelineResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBuildPipeline(request),
      response => targetStates.includes(response.buildPipeline.lifecycleState!),
      targetStates.includes(models.BuildPipeline.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forBuildPipelineStage till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBuildPipelineStageResponse | null (null in case of 404 response)
   */
  public async forBuildPipelineStage(
    request: serviceRequests.GetBuildPipelineStageRequest,
    ...targetStates: models.BuildPipelineStage.LifecycleState[]
  ): Promise<serviceResponses.GetBuildPipelineStageResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBuildPipelineStage(request),
      response => targetStates.includes(response.buildPipelineStage.lifecycleState!),
      targetStates.includes(models.BuildPipelineStage.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forBuildRun till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBuildRunResponse
   */
  public async forBuildRun(
    request: serviceRequests.GetBuildRunRequest,
    ...targetStates: models.BuildRun.LifecycleState[]
  ): Promise<serviceResponses.GetBuildRunResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getBuildRun(request),
      response => targetStates.includes(response.buildRun.lifecycleState!)
    );
  }

  /**
   * Waits forConnection till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetConnectionResponse
   */
  public async forConnection(
    request: serviceRequests.GetConnectionRequest,
    ...targetStates: models.Connection.LifecycleState[]
  ): Promise<serviceResponses.GetConnectionResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getConnection(request),
      response => targetStates.includes(response.connection.lifecycleState!)
    );
  }

  /**
   * Waits forDeployArtifact till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDeployArtifactResponse | null (null in case of 404 response)
   */
  public async forDeployArtifact(
    request: serviceRequests.GetDeployArtifactRequest,
    ...targetStates: models.DeployArtifact.LifecycleState[]
  ): Promise<serviceResponses.GetDeployArtifactResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDeployArtifact(request),
      response => targetStates.includes(response.deployArtifact.lifecycleState!),
      targetStates.includes(models.DeployArtifact.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDeployEnvironment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDeployEnvironmentResponse | null (null in case of 404 response)
   */
  public async forDeployEnvironment(
    request: serviceRequests.GetDeployEnvironmentRequest,
    ...targetStates: models.DeployEnvironment.LifecycleState[]
  ): Promise<serviceResponses.GetDeployEnvironmentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDeployEnvironment(request),
      response => targetStates.includes(response.deployEnvironment.lifecycleState!),
      targetStates.includes(models.DeployEnvironment.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDeployPipeline till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDeployPipelineResponse | null (null in case of 404 response)
   */
  public async forDeployPipeline(
    request: serviceRequests.GetDeployPipelineRequest,
    ...targetStates: models.DeployPipeline.LifecycleState[]
  ): Promise<serviceResponses.GetDeployPipelineResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDeployPipeline(request),
      response => targetStates.includes(response.deployPipeline.lifecycleState!),
      targetStates.includes(models.DeployPipeline.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDeployStage till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDeployStageResponse | null (null in case of 404 response)
   */
  public async forDeployStage(
    request: serviceRequests.GetDeployStageRequest,
    ...targetStates: models.DeployStage.LifecycleState[]
  ): Promise<serviceResponses.GetDeployStageResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDeployStage(request),
      response => targetStates.includes(response.deployStage.lifecycleState!),
      targetStates.includes(models.DeployStage.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDeployment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDeploymentResponse
   */
  public async forDeployment(
    request: serviceRequests.GetDeploymentRequest,
    ...targetStates: models.Deployment.LifecycleState[]
  ): Promise<serviceResponses.GetDeploymentResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getDeployment(request),
      response => targetStates.includes(response.deployment.lifecycleState!)
    );
  }

  /**
   * Waits forProject till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProjectResponse | null (null in case of 404 response)
   */
  public async forProject(
    request: serviceRequests.GetProjectRequest,
    ...targetStates: models.Project.LifecycleState[]
  ): Promise<serviceResponses.GetProjectResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getProject(request),
      response => targetStates.includes(response.project.lifecycleState!),
      targetStates.includes(models.Project.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forPullRequest till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPullRequestResponse | null (null in case of 404 response)
   */
  public async forPullRequest(
    request: serviceRequests.GetPullRequestRequest,
    ...targetStates: models.PullRequest.LifecycleState[]
  ): Promise<serviceResponses.GetPullRequestResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getPullRequest(request),
      response => targetStates.includes(response.pullRequest.lifecycleState!),
      targetStates.includes(models.PullRequest.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forRepository till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetRepositoryResponse | null (null in case of 404 response)
   */
  public async forRepository(
    request: serviceRequests.GetRepositoryRequest,
    ...targetStates: models.Repository.LifecycleState[]
  ): Promise<serviceResponses.GetRepositoryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getRepository(request),
      response => targetStates.includes(response.repository.lifecycleState!),
      targetStates.includes(models.Repository.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTrigger till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTriggerResponse
   */
  public async forTrigger(
    request: serviceRequests.GetTriggerRequest,
    ...targetStates: models.Trigger.LifecycleState[]
  ): Promise<serviceResponses.GetTriggerResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getTrigger(request),
      response => targetStates.includes(response.trigger.lifecycleState!)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
