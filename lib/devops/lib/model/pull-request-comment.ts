/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * User comments created by reviewers during the pull request review.
 */
export interface PullRequestComment {
  /**
   * Unique identifier that is immutable on creation
   */
  "id": string;
  /**
   * OCID of the pull request that this comment belongs to
   */
  "pullRequestId": string;
  /**
   * Content of the Comment.
   */
  "data": string;
  /**
   * ID of parent Comment
   */
  "parentId"?: string;
  /**
   * File path in the commit
   */
  "filePath"?: string;
  /**
   * Commit SHA
   */
  "commitId"?: string;
  /**
   * File path in the target commit
   */
  "fileType"?: PullRequestComment.FileType;
  /**
   * Line number in the file Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "lineNumber"?: number;
  "likes"?: model.PullRequestCommentLikeCollection;
  /**
   * Status of the Comment
   */
  "status": PullRequestComment.Status;
  /**
   * Creation timestamp. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
   */
  "timeCreated": Date;
  "createdBy": model.PrincipalDetails;
  /**
   * Latest update timestamp. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
   */
  "timeUpdated"?: Date;
  "updatedBy"?: model.PrincipalDetails;
  /**
   * Shows the status of an inline comments context
   */
  "contextStatus"?: PullRequestComment.ContextStatus;
  /**
   * 4 line snippet to be displayed as context for inline comments
   */
  "commentContext"?: Array<model.DiffLineDetails>;
}

export namespace PullRequestComment {
  export enum FileType {
    Source = "SOURCE",
    Destination = "DESTINATION",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Status {
    Active = "ACTIVE",
    Outdated = "OUTDATED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum ContextStatus {
    Processed = "PROCESSED",
    NeedsProcessing = "NEEDS_PROCESSING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: PullRequestComment): object {
    const jsonObj = {
      ...obj,
      ...{
        "likes": obj.likes
          ? model.PullRequestCommentLikeCollection.getJsonObj(obj.likes)
          : undefined,

        "createdBy": obj.createdBy ? model.PrincipalDetails.getJsonObj(obj.createdBy) : undefined,

        "updatedBy": obj.updatedBy ? model.PrincipalDetails.getJsonObj(obj.updatedBy) : undefined,

        "commentContext": obj.commentContext
          ? obj.commentContext.map(item => {
              return model.DiffLineDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PullRequestComment): object {
    const jsonObj = {
      ...obj,
      ...{
        "likes": obj.likes
          ? model.PullRequestCommentLikeCollection.getDeserializedJsonObj(obj.likes)
          : undefined,

        "createdBy": obj.createdBy
          ? model.PrincipalDetails.getDeserializedJsonObj(obj.createdBy)
          : undefined,

        "updatedBy": obj.updatedBy
          ? model.PrincipalDetails.getDeserializedJsonObj(obj.updatedBy)
          : undefined,

        "commentContext": obj.commentContext
          ? obj.commentContext.map(item => {
              return model.DiffLineDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
