/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information about a new stage.
 */
export interface CreateBuildPipelineStageDetails {
  /**
   * Stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
   */
  "displayName"?: string;
  /**
   * Optional description about the stage.
   */
  "description"?: string;
  /**
   * The OCID of the build pipeline.
   */
  "buildPipelineId": string;
  "buildPipelineStagePredecessorCollection": model.BuildPipelineStagePredecessorCollection;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"bar-key\": \"value\"}}
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };

  "buildPipelineStageType": string;
}

export namespace CreateBuildPipelineStageDetails {
  export function getJsonObj(obj: CreateBuildPipelineStageDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "buildPipelineStagePredecessorCollection": obj.buildPipelineStagePredecessorCollection
          ? model.BuildPipelineStagePredecessorCollection.getJsonObj(
              obj.buildPipelineStagePredecessorCollection
            )
          : undefined
      }
    };

    if (obj && "buildPipelineStageType" in obj && obj.buildPipelineStageType) {
      switch (obj.buildPipelineStageType) {
        case "DELIVER_ARTIFACT":
          return model.CreateDeliverArtifactStageDetails.getJsonObj(
            <model.CreateDeliverArtifactStageDetails>(<object>jsonObj),
            true
          );
        case "TRIGGER_DEPLOYMENT_PIPELINE":
          return model.CreateTriggerDeploymentStageDetails.getJsonObj(
            <model.CreateTriggerDeploymentStageDetails>(<object>jsonObj),
            true
          );
        case "WAIT":
          return model.CreateWaitStageDetails.getJsonObj(
            <model.CreateWaitStageDetails>(<object>jsonObj),
            true
          );
        case "BUILD":
          return model.CreateBuildStageDetails.getJsonObj(
            <model.CreateBuildStageDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.buildPipelineStageType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateBuildPipelineStageDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "buildPipelineStagePredecessorCollection": obj.buildPipelineStagePredecessorCollection
          ? model.BuildPipelineStagePredecessorCollection.getDeserializedJsonObj(
              obj.buildPipelineStagePredecessorCollection
            )
          : undefined
      }
    };

    if (obj && "buildPipelineStageType" in obj && obj.buildPipelineStageType) {
      switch (obj.buildPipelineStageType) {
        case "DELIVER_ARTIFACT":
          return model.CreateDeliverArtifactStageDetails.getDeserializedJsonObj(
            <model.CreateDeliverArtifactStageDetails>(<object>jsonObj),
            true
          );
        case "TRIGGER_DEPLOYMENT_PIPELINE":
          return model.CreateTriggerDeploymentStageDetails.getDeserializedJsonObj(
            <model.CreateTriggerDeploymentStageDetails>(<object>jsonObj),
            true
          );
        case "WAIT":
          return model.CreateWaitStageDetails.getDeserializedJsonObj(
            <model.CreateWaitStageDetails>(<object>jsonObj),
            true
          );
        case "BUILD":
          return model.CreateBuildStageDetails.getDeserializedJsonObj(
            <model.CreateBuildStageDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.buildPipelineStageType}`);
      }
    }
    return jsonObj;
  }
}
