/**
 * Load Balancing API
 * API for the Load Balancing service. Use this API to manage load balancers, backend sets, and related items. For more
information, see [Overview of Load Balancing](https://docs.oracle.com/iaas/Content/Balance/Concepts/balanceoverview.htm).

 * OpenAPI spec version: 20170115
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { LoadBalancerWaiter } from "./loadbalancer-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum LoadBalancerApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class LoadBalancerClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": LoadBalancerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "LoadBalancer";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("loadbalancer")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("loadbalancer");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20170115";
    if (this.logger) this.logger.info(`LoadBalancerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        LoadBalancerClient.serviceEndpointTemplate,
        this._region,
        LoadBalancerClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        LoadBalancerClient.serviceEndpointTemplate,
        this._regionId,
        LoadBalancerClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      LoadBalancerClient.serviceEndpointTemplate,
      region,
      LoadBalancerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      LoadBalancerClient.serviceEndpointTemplate,
      regionId,
      LoadBalancerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new LoadBalancerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): LoadBalancerWaiter {
    this._waiters = new LoadBalancerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): LoadBalancerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a load balancer into a different compartment within the same tenancy. For information about moving resources
   * between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLoadBalancerCompartmentRequest
   * @return ChangeLoadBalancerCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ChangeLoadBalancerCompartment.ts.html |here} to see how to use ChangeLoadBalancerCompartment API.
   */
  public async changeLoadBalancerCompartment(
    changeLoadBalancerCompartmentRequest: requests.ChangeLoadBalancerCompartmentRequest
  ): Promise<responses.ChangeLoadBalancerCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#changeLoadBalancerCompartment.");
    const operationName = "changeLoadBalancerCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancer/ChangeLoadBalancerCompartment";
    const pathParams = {
      "{loadBalancerId}": changeLoadBalancerCompartmentRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeLoadBalancerCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLoadBalancerCompartmentRequest.opcRetryToken,
      "if-match": changeLoadBalancerCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLoadBalancerCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLoadBalancerCompartmentRequest.changeLoadBalancerCompartmentDetails,
        "ChangeLoadBalancerCompartmentDetails",
        model.ChangeLoadBalancerCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLoadBalancerCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a backend server to a backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBackendRequest
   * @return CreateBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateBackend.ts.html |here} to see how to use CreateBackend API.
   */
  public async createBackend(
    createBackendRequest: requests.CreateBackendRequest
  ): Promise<responses.CreateBackendResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createBackend.");
    const operationName = "createBackend";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createBackendRequest.loadBalancerId,
      "{backendSetName}": createBackendRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBackendRequest.opcRequestId,
      "if-match": createBackendRequest.ifMatch,
      "opc-retry-token": createBackendRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBackendRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBackendRequest.createBackendDetails,
        "CreateBackendDetails",
        model.CreateBackendDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a backend set to a load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBackendSetRequest
   * @return CreateBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateBackendSet.ts.html |here} to see how to use CreateBackendSet API.
   */
  public async createBackendSet(
    createBackendSetRequest: requests.CreateBackendSetRequest
  ): Promise<responses.CreateBackendSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createBackendSet.");
    const operationName = "createBackendSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createBackendSetRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBackendSetRequest.opcRequestId,
      "opc-retry-token": createBackendSetRequest.opcRetryToken,
      "if-match": createBackendSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBackendSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBackendSetRequest.createBackendSetDetails,
        "CreateBackendSetDetails",
        model.CreateBackendSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an asynchronous request to add an SSL certificate bundle.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateCertificateRequest
   * @return CreateCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateCertificate.ts.html |here} to see how to use CreateCertificate API.
   */
  public async createCertificate(
    createCertificateRequest: requests.CreateCertificateRequest
  ): Promise<responses.CreateCertificateResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createCertificate.");
    const operationName = "createCertificate";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createCertificateRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createCertificateRequest.opcRequestId,
      "opc-retry-token": createCertificateRequest.opcRetryToken,
      "if-match": createCertificateRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCertificateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/certificates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCertificateRequest.createCertificateDetails,
        "CreateCertificateDetails",
        model.CreateCertificateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCertificateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a hostname resource to the specified load balancer. For more information, see
   * [Managing Request Routing](https://docs.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateHostnameRequest
   * @return CreateHostnameResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateHostname.ts.html |here} to see how to use CreateHostname API.
   */
  public async createHostname(
    createHostnameRequest: requests.CreateHostnameRequest
  ): Promise<responses.CreateHostnameResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createHostname.");
    const operationName = "createHostname";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createHostnameRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createHostnameRequest.opcRequestId,
      "if-match": createHostnameRequest.ifMatch,
      "opc-retry-token": createHostnameRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createHostnameRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/hostnames",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createHostnameRequest.createHostnameDetails,
        "CreateHostnameDetails",
        model.CreateHostnameDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateHostnameResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a listener to a load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateListenerRequest
   * @return CreateListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateListener.ts.html |here} to see how to use CreateListener API.
   */
  public async createListener(
    createListenerRequest: requests.CreateListenerRequest
  ): Promise<responses.CreateListenerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createListener.");
    const operationName = "createListener";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createListenerRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createListenerRequest.opcRequestId,
      "opc-retry-token": createListenerRequest.opcRetryToken,
      "if-match": createListenerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createListenerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/listeners",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListenerRequest.createListenerDetails,
        "CreateListenerDetails",
        model.CreateListenerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new load balancer in the specified compartment. For general information about load balancers,
* see [Overview of the Load Balancing Service](https://docs.oracle.com/iaas/Content/Balance/Concepts/balanceoverview.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want
* the load balancer to reside. Notice that the load balancer doesn't have to be in the same compartment as the VCN
* or backend set. If you're not sure which compartment to use, put the load balancer in the same compartment as the VCN.
* For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* <p>
You must specify a display name for the load balancer. It does not have to be unique, and you can change it.
* <p>
For information about Availability Domains, see
* [Regions and Availability Domains](https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm).
* To get a list of Availability Domains, use the `ListAvailabilityDomains` operation
* in the Identity and Access Management Service API.
* <p>
All Oracle Cloud Infrastructure resources, including load balancers, get an Oracle-assigned,
* unique ID called an Oracle Cloud Identifier (OCID). When you create a resource, you can find its OCID
* in the response. You can also retrieve a resource's OCID by using a List API operation on that resource type,
* or by viewing the resource in the Console. Fore more information, see
* [Resource Identifiers](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
After you send your request, the new object's state will temporarily be PROVISIONING. Before using the
* object, first make sure its state has changed to RUNNING.
* <p>
When you create a load balancer, the system assigns an IP address.
* To get the IP address, use the {@link #getLoadBalancer(GetLoadBalancerRequest) getLoadBalancer} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateLoadBalancerRequest
     * @return CreateLoadBalancerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateLoadBalancer.ts.html |here} to see how to use CreateLoadBalancer API.
     */
  public async createLoadBalancer(
    createLoadBalancerRequest: requests.CreateLoadBalancerRequest
  ): Promise<responses.CreateLoadBalancerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createLoadBalancer.");
    const operationName = "createLoadBalancer";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createLoadBalancerRequest.opcRequestId,
      "opc-retry-token": createLoadBalancerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLoadBalancerRequest.createLoadBalancerDetails,
        "CreateLoadBalancerDetails",
        model.CreateLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLoadBalancerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a path route set to a load balancer. For more information, see
   * [Managing Request Routing](https://docs.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePathRouteSetRequest
   * @return CreatePathRouteSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreatePathRouteSet.ts.html |here} to see how to use CreatePathRouteSet API.
   */
  public async createPathRouteSet(
    createPathRouteSetRequest: requests.CreatePathRouteSetRequest
  ): Promise<responses.CreatePathRouteSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createPathRouteSet.");
    const operationName = "createPathRouteSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createPathRouteSetRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPathRouteSetRequest.opcRequestId,
      "opc-retry-token": createPathRouteSetRequest.opcRetryToken,
      "if-match": createPathRouteSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPathRouteSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/pathRouteSets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPathRouteSetRequest.createPathRouteSetDetails,
        "CreatePathRouteSetDetails",
        model.CreatePathRouteSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePathRouteSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a routing policy to a load balancer. For more information, see
   * [Managing Request Routing](https://docs.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateRoutingPolicyRequest
   * @return CreateRoutingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateRoutingPolicy.ts.html |here} to see how to use CreateRoutingPolicy API.
   */
  public async createRoutingPolicy(
    createRoutingPolicyRequest: requests.CreateRoutingPolicyRequest
  ): Promise<responses.CreateRoutingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createRoutingPolicy.");
    const operationName = "createRoutingPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createRoutingPolicyRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createRoutingPolicyRequest.opcRequestId,
      "opc-retry-token": createRoutingPolicyRequest.opcRetryToken,
      "if-match": createRoutingPolicyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRoutingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/routingPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRoutingPolicyRequest.createRoutingPolicyDetails,
        "CreateRoutingPolicyDetails",
        model.CreateRoutingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRoutingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new rule set associated with the specified load balancer. For more information, see
   * [Managing Rule Sets](https://docs.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateRuleSetRequest
   * @return CreateRuleSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateRuleSet.ts.html |here} to see how to use CreateRuleSet API.
   */
  public async createRuleSet(
    createRuleSetRequest: requests.CreateRuleSetRequest
  ): Promise<responses.CreateRuleSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#createRuleSet.");
    const operationName = "createRuleSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createRuleSetRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createRuleSetRequest.opcRequestId,
      "opc-retry-token": createRuleSetRequest.opcRetryToken,
      "if-match": createRuleSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRuleSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/ruleSets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRuleSetRequest.createRuleSetDetails,
        "CreateRuleSetDetails",
        model.CreateRuleSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRuleSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a custom SSL cipher suite.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSSLCipherSuiteRequest
   * @return CreateSSLCipherSuiteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/CreateSSLCipherSuite.ts.html |here} to see how to use CreateSSLCipherSuite API.
   */
  public async createSSLCipherSuite(
    createSSLCipherSuiteRequest: requests.CreateSSLCipherSuiteRequest
  ): Promise<responses.CreateSSLCipherSuiteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#createSSLCipherSuite.");
    const operationName = "createSSLCipherSuite";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": createSSLCipherSuiteRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSSLCipherSuiteRequest.opcRequestId,
      "opc-retry-token": createSSLCipherSuiteRequest.opcRetryToken,
      "if-match": createSSLCipherSuiteRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSSLCipherSuiteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/sslCipherSuites",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSSLCipherSuiteRequest.createSSLCipherSuiteDetails,
        "CreateSSLCipherSuiteDetails",
        model.CreateSSLCipherSuiteDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSSLCipherSuiteResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a backend server from a given load balancer and backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBackendRequest
   * @return DeleteBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteBackend.ts.html |here} to see how to use DeleteBackend API.
   */
  public async deleteBackend(
    deleteBackendRequest: requests.DeleteBackendRequest
  ): Promise<responses.DeleteBackendResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteBackend.");
    const operationName = "deleteBackend";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteBackendRequest.loadBalancerId,
      "{backendSetName}": deleteBackendRequest.backendSetName,
      "{backendName}": deleteBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBackendRequest.opcRequestId,
      "if-match": deleteBackendRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBackendRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified backend set. Note that deleting a backend set removes its backend servers from the load balancer.
* <p>
Before you can delete a backend set, you must remove it from any active listeners.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteBackendSetRequest
     * @return DeleteBackendSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteBackendSet.ts.html |here} to see how to use DeleteBackendSet API.
     */
  public async deleteBackendSet(
    deleteBackendSetRequest: requests.DeleteBackendSetRequest
  ): Promise<responses.DeleteBackendSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteBackendSet.");
    const operationName = "deleteBackendSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteBackendSetRequest.loadBalancerId,
      "{backendSetName}": deleteBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBackendSetRequest.opcRequestId,
      "if-match": deleteBackendSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBackendSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an SSL certificate bundle from a load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCertificateRequest
   * @return DeleteCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteCertificate.ts.html |here} to see how to use DeleteCertificate API.
   */
  public async deleteCertificate(
    deleteCertificateRequest: requests.DeleteCertificateRequest
  ): Promise<responses.DeleteCertificateResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteCertificate.");
    const operationName = "deleteCertificate";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteCertificateRequest.loadBalancerId,
      "{certificateName}": deleteCertificateRequest.certificateName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteCertificateRequest.opcRequestId,
      "if-match": deleteCertificateRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCertificateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/certificates/{certificateName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCertificateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a hostname resource from the specified load balancer.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteHostnameRequest
   * @return DeleteHostnameResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteHostname.ts.html |here} to see how to use DeleteHostname API.
   */
  public async deleteHostname(
    deleteHostnameRequest: requests.DeleteHostnameRequest
  ): Promise<responses.DeleteHostnameResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteHostname.");
    const operationName = "deleteHostname";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteHostnameRequest.loadBalancerId,
      "{name}": deleteHostnameRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteHostnameRequest.opcRequestId,
      "if-match": deleteHostnameRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteHostnameRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/hostnames/{name}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteHostnameResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listener from a load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteListenerRequest
   * @return DeleteListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteListener.ts.html |here} to see how to use DeleteListener API.
   */
  public async deleteListener(
    deleteListenerRequest: requests.DeleteListenerRequest
  ): Promise<responses.DeleteListenerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteListener.");
    const operationName = "deleteListener";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteListenerRequest.loadBalancerId,
      "{listenerName}": deleteListenerRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteListenerRequest.opcRequestId,
      "if-match": deleteListenerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteListenerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/listeners/{listenerName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops a load balancer and removes it from service.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLoadBalancerRequest
   * @return DeleteLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteLoadBalancer.ts.html |here} to see how to use DeleteLoadBalancer API.
   */
  public async deleteLoadBalancer(
    deleteLoadBalancerRequest: requests.DeleteLoadBalancerRequest
  ): Promise<responses.DeleteLoadBalancerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteLoadBalancer.");
    const operationName = "deleteLoadBalancer";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteLoadBalancerRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteLoadBalancerRequest.opcRequestId,
      "if-match": deleteLoadBalancerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLoadBalancerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a path route set from the specified load balancer.
* <p>
To delete a path route rule from a path route set, use the
* {@link #updatePathRouteSet(UpdatePathRouteSetRequest) updatePathRouteSet} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePathRouteSetRequest
     * @return DeletePathRouteSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeletePathRouteSet.ts.html |here} to see how to use DeletePathRouteSet API.
     */
  public async deletePathRouteSet(
    deletePathRouteSetRequest: requests.DeletePathRouteSetRequest
  ): Promise<responses.DeletePathRouteSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deletePathRouteSet.");
    const operationName = "deletePathRouteSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deletePathRouteSetRequest.loadBalancerId,
      "{pathRouteSetName}": deletePathRouteSetRequest.pathRouteSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deletePathRouteSetRequest.opcRequestId,
      "if-match": deletePathRouteSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePathRouteSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/pathRouteSets/{pathRouteSetName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePathRouteSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a routing policy from the specified load balancer.
* <p>
To delete a routing rule from a routing policy, use the
* {@link #updateRoutingPolicy(UpdateRoutingPolicyRequest) updateRoutingPolicy} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteRoutingPolicyRequest
     * @return DeleteRoutingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteRoutingPolicy.ts.html |here} to see how to use DeleteRoutingPolicy API.
     */
  public async deleteRoutingPolicy(
    deleteRoutingPolicyRequest: requests.DeleteRoutingPolicyRequest
  ): Promise<responses.DeleteRoutingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteRoutingPolicy.");
    const operationName = "deleteRoutingPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteRoutingPolicyRequest.loadBalancerId,
      "{routingPolicyName}": deleteRoutingPolicyRequest.routingPolicyName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteRoutingPolicyRequest.opcRequestId,
      "if-match": deleteRoutingPolicyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRoutingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/routingPolicies/{routingPolicyName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRoutingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a rule set from the specified load balancer.
* <p>
To delete a rule from a rule set, use the
* {@link #updateRuleSet(UpdateRuleSetRequest) updateRuleSet} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteRuleSetRequest
     * @return DeleteRuleSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteRuleSet.ts.html |here} to see how to use DeleteRuleSet API.
     */
  public async deleteRuleSet(
    deleteRuleSetRequest: requests.DeleteRuleSetRequest
  ): Promise<responses.DeleteRuleSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#deleteRuleSet.");
    const operationName = "deleteRuleSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteRuleSetRequest.loadBalancerId,
      "{ruleSetName}": deleteRuleSetRequest.ruleSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteRuleSetRequest.opcRequestId,
      "if-match": deleteRuleSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRuleSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/ruleSets/{ruleSetName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRuleSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an SSL cipher suite from a load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSSLCipherSuiteRequest
   * @return DeleteSSLCipherSuiteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/DeleteSSLCipherSuite.ts.html |here} to see how to use DeleteSSLCipherSuite API.
   */
  public async deleteSSLCipherSuite(
    deleteSSLCipherSuiteRequest: requests.DeleteSSLCipherSuiteRequest
  ): Promise<responses.DeleteSSLCipherSuiteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#deleteSSLCipherSuite.");
    const operationName = "deleteSSLCipherSuite";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": deleteSSLCipherSuiteRequest.loadBalancerId,
      "{name}": deleteSSLCipherSuiteRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteSSLCipherSuiteRequest.opcRequestId,
      "if-match": deleteSSLCipherSuiteRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSSLCipherSuiteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/sslCipherSuites/{name}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSSLCipherSuiteResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified backend server's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBackendRequest
   * @return GetBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetBackend.ts.html |here} to see how to use GetBackend API.
   */
  public async getBackend(
    getBackendRequest: requests.GetBackendRequest
  ): Promise<responses.GetBackendResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getBackend.");
    const operationName = "getBackend";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/Backend/GetBackend";
    const pathParams = {
      "{loadBalancerId}": getBackendRequest.loadBalancerId,
      "{backendSetName}": getBackendRequest.backendSetName,
      "{backendName}": getBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendRequest.opcRequestId,
      "if-match": getBackendRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBackendRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendResponse>{},
        body: await response.json(),
        bodyKey: "backend",
        bodyModel: model.Backend,
        type: "model.Backend",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the current health status of the specified backend server.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBackendHealthRequest
   * @return GetBackendHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetBackendHealth.ts.html |here} to see how to use GetBackendHealth API.
   */
  public async getBackendHealth(
    getBackendHealthRequest: requests.GetBackendHealthRequest
  ): Promise<responses.GetBackendHealthResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getBackendHealth.");
    const operationName = "getBackendHealth";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendHealth/GetBackendHealth";
    const pathParams = {
      "{loadBalancerId}": getBackendHealthRequest.loadBalancerId,
      "{backendSetName}": getBackendHealthRequest.backendSetName,
      "{backendName}": getBackendHealthRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendHealthRequest.opcRequestId,
      "if-match": getBackendHealthRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBackendHealthRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends/{backendName}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendHealthResponse>{},
        body: await response.json(),
        bodyKey: "backendHealth",
        bodyModel: model.BackendHealth,
        type: "model.BackendHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified backend set's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBackendSetRequest
   * @return GetBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetBackendSet.ts.html |here} to see how to use GetBackendSet API.
   */
  public async getBackendSet(
    getBackendSetRequest: requests.GetBackendSetRequest
  ): Promise<responses.GetBackendSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getBackendSet.");
    const operationName = "getBackendSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/GetBackendSet";
    const pathParams = {
      "{loadBalancerId}": getBackendSetRequest.loadBalancerId,
      "{backendSetName}": getBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendSetRequest.opcRequestId,
      "if-match": getBackendSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBackendSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendSetResponse>{},
        body: await response.json(),
        bodyKey: "backendSet",
        bodyModel: model.BackendSet,
        type: "model.BackendSet",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the health status for the specified backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBackendSetHealthRequest
   * @return GetBackendSetHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetBackendSetHealth.ts.html |here} to see how to use GetBackendSetHealth API.
   */
  public async getBackendSetHealth(
    getBackendSetHealthRequest: requests.GetBackendSetHealthRequest
  ): Promise<responses.GetBackendSetHealthResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getBackendSetHealth.");
    const operationName = "getBackendSetHealth";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSetHealth/GetBackendSetHealth";
    const pathParams = {
      "{loadBalancerId}": getBackendSetHealthRequest.loadBalancerId,
      "{backendSetName}": getBackendSetHealthRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendSetHealthRequest.opcRequestId,
      "if-match": getBackendSetHealthRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBackendSetHealthRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendSetHealthResponse>{},
        body: await response.json(),
        bodyKey: "backendSetHealth",
        bodyModel: model.BackendSetHealth,
        type: "model.BackendSetHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the health check policy information for a given load balancer and backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetHealthCheckerRequest
   * @return GetHealthCheckerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetHealthChecker.ts.html |here} to see how to use GetHealthChecker API.
   */
  public async getHealthChecker(
    getHealthCheckerRequest: requests.GetHealthCheckerRequest
  ): Promise<responses.GetHealthCheckerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getHealthChecker.");
    const operationName = "getHealthChecker";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/HealthChecker/GetHealthChecker";
    const pathParams = {
      "{loadBalancerId}": getHealthCheckerRequest.loadBalancerId,
      "{backendSetName}": getHealthCheckerRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getHealthCheckerRequest.opcRequestId,
      "if-match": getHealthCheckerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getHealthCheckerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/healthChecker",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHealthCheckerResponse>{},
        body: await response.json(),
        bodyKey: "healthChecker",
        bodyModel: model.HealthChecker,
        type: "model.HealthChecker",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified hostname resource's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetHostnameRequest
   * @return GetHostnameResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetHostname.ts.html |here} to see how to use GetHostname API.
   */
  public async getHostname(
    getHostnameRequest: requests.GetHostnameRequest
  ): Promise<responses.GetHostnameResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getHostname.");
    const operationName = "getHostname";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/Hostname/GetHostname";
    const pathParams = {
      "{loadBalancerId}": getHostnameRequest.loadBalancerId,
      "{name}": getHostnameRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getHostnameRequest.opcRequestId,
      "if-match": getHostnameRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getHostnameRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/hostnames/{name}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHostnameResponse>{},
        body: await response.json(),
        bodyKey: "hostname",
        bodyModel: model.Hostname,
        type: "model.Hostname",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified load balancer's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLoadBalancerRequest
   * @return GetLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetLoadBalancer.ts.html |here} to see how to use GetLoadBalancer API.
   */
  public async getLoadBalancer(
    getLoadBalancerRequest: requests.GetLoadBalancerRequest
  ): Promise<responses.GetLoadBalancerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getLoadBalancer.");
    const operationName = "getLoadBalancer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancer/GetLoadBalancer";
    const pathParams = {
      "{loadBalancerId}": getLoadBalancerRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLoadBalancerRequest.opcRequestId,
      "if-match": getLoadBalancerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "loadBalancer",
        bodyModel: model.LoadBalancer,
        type: "model.LoadBalancer",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the health status for the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLoadBalancerHealthRequest
   * @return GetLoadBalancerHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetLoadBalancerHealth.ts.html |here} to see how to use GetLoadBalancerHealth API.
   */
  public async getLoadBalancerHealth(
    getLoadBalancerHealthRequest: requests.GetLoadBalancerHealthRequest
  ): Promise<responses.GetLoadBalancerHealthResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#getLoadBalancerHealth.");
    const operationName = "getLoadBalancerHealth";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerHealth/GetLoadBalancerHealth";
    const pathParams = {
      "{loadBalancerId}": getLoadBalancerHealthRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLoadBalancerHealthRequest.opcRequestId,
      "if-match": getLoadBalancerHealthRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLoadBalancerHealthRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLoadBalancerHealthResponse>{},
        body: await response.json(),
        bodyKey: "loadBalancerHealth",
        bodyModel: model.LoadBalancerHealth,
        type: "model.LoadBalancerHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified path route set's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPathRouteSetRequest
   * @return GetPathRouteSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetPathRouteSet.ts.html |here} to see how to use GetPathRouteSet API.
   */
  public async getPathRouteSet(
    getPathRouteSetRequest: requests.GetPathRouteSetRequest
  ): Promise<responses.GetPathRouteSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getPathRouteSet.");
    const operationName = "getPathRouteSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/PathRouteSet/GetPathRouteSet";
    const pathParams = {
      "{loadBalancerId}": getPathRouteSetRequest.loadBalancerId,
      "{pathRouteSetName}": getPathRouteSetRequest.pathRouteSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPathRouteSetRequest.opcRequestId,
      "if-match": getPathRouteSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPathRouteSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/pathRouteSets/{pathRouteSetName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPathRouteSetResponse>{},
        body: await response.json(),
        bodyKey: "pathRouteSet",
        bodyModel: model.PathRouteSet,
        type: "model.PathRouteSet",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified routing policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetRoutingPolicyRequest
   * @return GetRoutingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetRoutingPolicy.ts.html |here} to see how to use GetRoutingPolicy API.
   */
  public async getRoutingPolicy(
    getRoutingPolicyRequest: requests.GetRoutingPolicyRequest
  ): Promise<responses.GetRoutingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getRoutingPolicy.");
    const operationName = "getRoutingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/RoutingPolicy/GetRoutingPolicy";
    const pathParams = {
      "{loadBalancerId}": getRoutingPolicyRequest.loadBalancerId,
      "{routingPolicyName}": getRoutingPolicyRequest.routingPolicyName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoutingPolicyRequest.opcRequestId,
      "if-match": getRoutingPolicyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRoutingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/routingPolicies/{routingPolicyName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoutingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "routingPolicy",
        bodyModel: model.RoutingPolicy,
        type: "model.RoutingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified set of rules.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetRuleSetRequest
   * @return GetRuleSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetRuleSet.ts.html |here} to see how to use GetRuleSet API.
   */
  public async getRuleSet(
    getRuleSetRequest: requests.GetRuleSetRequest
  ): Promise<responses.GetRuleSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getRuleSet.");
    const operationName = "getRuleSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/RuleSet/GetRuleSet";
    const pathParams = {
      "{loadBalancerId}": getRuleSetRequest.loadBalancerId,
      "{ruleSetName}": getRuleSetRequest.ruleSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRuleSetRequest.opcRequestId,
      "if-match": getRuleSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRuleSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/ruleSets/{ruleSetName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRuleSetResponse>{},
        body: await response.json(),
        bodyKey: "ruleSet",
        bodyModel: model.RuleSet,
        type: "model.RuleSet",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified SSL cipher suite's configuration information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSSLCipherSuiteRequest
   * @return GetSSLCipherSuiteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetSSLCipherSuite.ts.html |here} to see how to use GetSSLCipherSuite API.
   */
  public async getSSLCipherSuite(
    getSSLCipherSuiteRequest: requests.GetSSLCipherSuiteRequest
  ): Promise<responses.GetSSLCipherSuiteResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getSSLCipherSuite.");
    const operationName = "getSSLCipherSuite";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/SSLCipherSuite/GetSSLCipherSuite";
    const pathParams = {
      "{loadBalancerId}": getSSLCipherSuiteRequest.loadBalancerId,
      "{name}": getSSLCipherSuiteRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSSLCipherSuiteRequest.opcRequestId,
      "if-match": getSSLCipherSuiteRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSSLCipherSuiteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/sslCipherSuites/{name}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSSLCipherSuiteResponse>{},
        body: await response.json(),
        bodyKey: "sSLCipherSuite",
        bodyModel: model.SSLCipherSuite,
        type: "model.SSLCipherSuite",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a work request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancerWorkRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all backend sets associated with a given load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBackendSetsRequest
   * @return ListBackendSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListBackendSets.ts.html |here} to see how to use ListBackendSets API.
   */
  public async listBackendSets(
    listBackendSetsRequest: requests.ListBackendSetsRequest
  ): Promise<responses.ListBackendSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listBackendSets.");
    const operationName = "listBackendSets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/ListBackendSets";
    const pathParams = {
      "{loadBalancerId}": listBackendSetsRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBackendSetsRequest.opcRequestId,
      "if-match": listBackendSetsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBackendSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBackendSetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BackendSet,
        type: "Array<model.BackendSet>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the backend servers for a given load balancer and backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBackendsRequest
   * @return ListBackendsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListBackends.ts.html |here} to see how to use ListBackends API.
   */
  public async listBackends(
    listBackendsRequest: requests.ListBackendsRequest
  ): Promise<responses.ListBackendsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listBackends.");
    const operationName = "listBackends";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/Backend/ListBackends";
    const pathParams = {
      "{loadBalancerId}": listBackendsRequest.loadBalancerId,
      "{backendSetName}": listBackendsRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBackendsRequest.opcRequestId,
      "if-match": listBackendsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBackendsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBackendsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Backend,
        type: "Array<model.Backend>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all SSL certificates bundles associated with a given load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCertificatesRequest
   * @return ListCertificatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListCertificates.ts.html |here} to see how to use ListCertificates API.
   */
  public async listCertificates(
    listCertificatesRequest: requests.ListCertificatesRequest
  ): Promise<responses.ListCertificatesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listCertificates.");
    const operationName = "listCertificates";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/Certificate/ListCertificates";
    const pathParams = {
      "{loadBalancerId}": listCertificatesRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCertificatesRequest.opcRequestId,
      "if-match": listCertificatesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCertificatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/certificates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCertificatesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Certificate,
        type: "Array<model.Certificate>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all hostname resources associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListHostnamesRequest
   * @return ListHostnamesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListHostnames.ts.html |here} to see how to use ListHostnames API.
   */
  public async listHostnames(
    listHostnamesRequest: requests.ListHostnamesRequest
  ): Promise<responses.ListHostnamesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listHostnames.");
    const operationName = "listHostnames";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/Hostname/ListHostnames";
    const pathParams = {
      "{loadBalancerId}": listHostnamesRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listHostnamesRequest.opcRequestId,
      "if-match": listHostnamesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listHostnamesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/hostnames",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHostnamesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Hostname,
        type: "Array<model.Hostname>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all of the rules from all of the rule sets associated with the specified listener. The response organizes
   * the rules in the following order:
   * <p>
   *  Access control rules
   * *  Allow method rules
   * *  Request header rules
   * *  Response header rules
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListListenerRulesRequest
   * @return ListListenerRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListListenerRules.ts.html |here} to see how to use ListListenerRules API.
   */
  public async listListenerRules(
    listListenerRulesRequest: requests.ListListenerRulesRequest
  ): Promise<responses.ListListenerRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listListenerRules.");
    const operationName = "listListenerRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/ListenerRuleSummary/ListListenerRules";
    const pathParams = {
      "{loadBalancerId}": listListenerRulesRequest.loadBalancerId,
      "{listenerName}": listListenerRulesRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListenerRulesRequest.opcRequestId,
      "if-match": listListenerRulesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListenerRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/listeners/{listenerName}/rules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListenerRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ListenerRuleSummary,
        type: "Array<model.ListenerRuleSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the summary health statuses for all load balancers in the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLoadBalancerHealthsRequest
   * @return ListLoadBalancerHealthsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListLoadBalancerHealths.ts.html |here} to see how to use ListLoadBalancerHealths API.
   */
  public async listLoadBalancerHealths(
    listLoadBalancerHealthsRequest: requests.ListLoadBalancerHealthsRequest
  ): Promise<responses.ListLoadBalancerHealthsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#listLoadBalancerHealths.");
    const operationName = "listLoadBalancerHealths";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerHealthSummary/ListLoadBalancerHealths";
    const pathParams = {};

    const queryParams = {
      "limit": listLoadBalancerHealthsRequest.limit,
      "page": listLoadBalancerHealthsRequest.page,
      "compartmentId": listLoadBalancerHealthsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLoadBalancerHealthsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLoadBalancerHealthsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancerHealths",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLoadBalancerHealthsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LoadBalancerHealthSummary,
        type: "Array<model.LoadBalancerHealthSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listLoadBalancerHealthsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LoadBalancerHealthSummary objects
   * contained in responses from the listLoadBalancerHealths operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLoadBalancerHealths(
    request: requests.ListLoadBalancerHealthsRequest
  ): AsyncIterableIterator<model.LoadBalancerHealthSummary> {
    return paginateRecords(request, req => this.listLoadBalancerHealths(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listLoadBalancerHealthsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listLoadBalancerHealths operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLoadBalancerHealthsResponses(
    request: requests.ListLoadBalancerHealthsRequest
  ): AsyncIterableIterator<responses.ListLoadBalancerHealthsResponse> {
    return paginateResponses(request, req => this.listLoadBalancerHealths(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LoadBalancerHealthSummary objects
   * contained in responses from the listLoadBalancerHealths operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLoadBalancerHealthsRecordIterator(
    request: requests.ListLoadBalancerHealthsRequest
  ): AsyncIterableIterator<model.LoadBalancerHealthSummary> {
    return paginateRecords(request, req => this.listLoadBalancerHealths(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLoadBalancerHealths operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLoadBalancerHealthsResponseIterator(
    request: requests.ListLoadBalancerHealthsRequest
  ): AsyncIterableIterator<responses.ListLoadBalancerHealthsResponse> {
    return paginateResponses(request, req => this.listLoadBalancerHealths(req));
  }

  /**
   * Lists all load balancers in the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLoadBalancersRequest
   * @return ListLoadBalancersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListLoadBalancers.ts.html |here} to see how to use ListLoadBalancers API.
   */
  public async listLoadBalancers(
    listLoadBalancersRequest: requests.ListLoadBalancersRequest
  ): Promise<responses.ListLoadBalancersResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listLoadBalancers.");
    const operationName = "listLoadBalancers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancer/ListLoadBalancers";
    const pathParams = {};

    const queryParams = {
      "limit": listLoadBalancersRequest.limit,
      "page": listLoadBalancersRequest.page,
      "compartmentId": listLoadBalancersRequest.compartmentId,
      "detail": listLoadBalancersRequest.detail,
      "sortBy": listLoadBalancersRequest.sortBy,
      "sortOrder": listLoadBalancersRequest.sortOrder,
      "displayName": listLoadBalancersRequest.displayName,
      "lifecycleState": listLoadBalancersRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLoadBalancersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLoadBalancersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLoadBalancersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LoadBalancer,
        type: "Array<model.LoadBalancer>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listLoadBalancersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LoadBalancer objects
   * contained in responses from the listLoadBalancers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLoadBalancers(
    request: requests.ListLoadBalancersRequest
  ): AsyncIterableIterator<model.LoadBalancer> {
    return paginateRecords(request, req => this.listLoadBalancers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listLoadBalancersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listLoadBalancers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLoadBalancersResponses(
    request: requests.ListLoadBalancersRequest
  ): AsyncIterableIterator<responses.ListLoadBalancersResponse> {
    return paginateResponses(request, req => this.listLoadBalancers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LoadBalancer objects
   * contained in responses from the listLoadBalancers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLoadBalancersRecordIterator(
    request: requests.ListLoadBalancersRequest
  ): AsyncIterableIterator<model.LoadBalancer> {
    return paginateRecords(request, req => this.listLoadBalancers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLoadBalancers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLoadBalancersResponseIterator(
    request: requests.ListLoadBalancersRequest
  ): AsyncIterableIterator<responses.ListLoadBalancersResponse> {
    return paginateResponses(request, req => this.listLoadBalancers(req));
  }

  /**
   * Lists all path route sets associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPathRouteSetsRequest
   * @return ListPathRouteSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListPathRouteSets.ts.html |here} to see how to use ListPathRouteSets API.
   */
  public async listPathRouteSets(
    listPathRouteSetsRequest: requests.ListPathRouteSetsRequest
  ): Promise<responses.ListPathRouteSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listPathRouteSets.");
    const operationName = "listPathRouteSets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/PathRouteSet/ListPathRouteSets";
    const pathParams = {
      "{loadBalancerId}": listPathRouteSetsRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPathRouteSetsRequest.opcRequestId,
      "if-match": listPathRouteSetsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPathRouteSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/pathRouteSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPathRouteSetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PathRouteSet,
        type: "Array<model.PathRouteSet>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the available load balancer policies.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPoliciesRequest
   * @return ListPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListPolicies.ts.html |here} to see how to use ListPolicies API.
   */
  public async listPolicies(
    listPoliciesRequest: requests.ListPoliciesRequest
  ): Promise<responses.ListPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listPolicies.");
    const operationName = "listPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPoliciesRequest.compartmentId,
      "limit": listPoliciesRequest.limit,
      "page": listPoliciesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancerPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LoadBalancerPolicy,
        type: "Array<model.LoadBalancerPolicy>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LoadBalancerPolicy objects
   * contained in responses from the listPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPolicies(
    request: requests.ListPoliciesRequest
  ): AsyncIterableIterator<model.LoadBalancerPolicy> {
    return paginateRecords(request, req => this.listPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPoliciesResponses(
    request: requests.ListPoliciesRequest
  ): AsyncIterableIterator<responses.ListPoliciesResponse> {
    return paginateResponses(request, req => this.listPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LoadBalancerPolicy objects
   * contained in responses from the listPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPoliciesRecordIterator(
    request: requests.ListPoliciesRequest
  ): AsyncIterableIterator<model.LoadBalancerPolicy> {
    return paginateRecords(request, req => this.listPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPoliciesResponseIterator(
    request: requests.ListPoliciesRequest
  ): AsyncIterableIterator<responses.ListPoliciesResponse> {
    return paginateResponses(request, req => this.listPolicies(req));
  }

  /**
   * Lists all supported traffic protocols.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProtocolsRequest
   * @return ListProtocolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListProtocols.ts.html |here} to see how to use ListProtocols API.
   */
  public async listProtocols(
    listProtocolsRequest: requests.ListProtocolsRequest
  ): Promise<responses.ListProtocolsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listProtocols.");
    const operationName = "listProtocols";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerProtocol/ListProtocols";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProtocolsRequest.compartmentId,
      "limit": listProtocolsRequest.limit,
      "page": listProtocolsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProtocolsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProtocolsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancerProtocols",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProtocolsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LoadBalancerProtocol,
        type: "Array<model.LoadBalancerProtocol>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listProtocolsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LoadBalancerProtocol objects
   * contained in responses from the listProtocols operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProtocols(
    request: requests.ListProtocolsRequest
  ): AsyncIterableIterator<model.LoadBalancerProtocol> {
    return paginateRecords(request, req => this.listProtocols(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listProtocolsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listProtocols operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProtocolsResponses(
    request: requests.ListProtocolsRequest
  ): AsyncIterableIterator<responses.ListProtocolsResponse> {
    return paginateResponses(request, req => this.listProtocols(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LoadBalancerProtocol objects
   * contained in responses from the listProtocols operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProtocolsRecordIterator(
    request: requests.ListProtocolsRequest
  ): AsyncIterableIterator<model.LoadBalancerProtocol> {
    return paginateRecords(request, req => this.listProtocols(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProtocols operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProtocolsResponseIterator(
    request: requests.ListProtocolsRequest
  ): AsyncIterableIterator<responses.ListProtocolsResponse> {
    return paginateResponses(request, req => this.listProtocols(req));
  }

  /**
   * Lists all routing policies associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRoutingPoliciesRequest
   * @return ListRoutingPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListRoutingPolicies.ts.html |here} to see how to use ListRoutingPolicies API.
   */
  public async listRoutingPolicies(
    listRoutingPoliciesRequest: requests.ListRoutingPoliciesRequest
  ): Promise<responses.ListRoutingPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listRoutingPolicies.");
    const operationName = "listRoutingPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/RoutingPolicy/ListRoutingPolicies";
    const pathParams = {
      "{loadBalancerId}": listRoutingPoliciesRequest.loadBalancerId
    };

    const queryParams = {
      "limit": listRoutingPoliciesRequest.limit,
      "page": listRoutingPoliciesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRoutingPoliciesRequest.opcRequestId,
      "if-match": listRoutingPoliciesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRoutingPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/routingPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRoutingPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.RoutingPolicy,
        type: "Array<model.RoutingPolicy>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listRoutingPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.RoutingPolicy objects
   * contained in responses from the listRoutingPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRoutingPolicies(
    request: requests.ListRoutingPoliciesRequest
  ): AsyncIterableIterator<model.RoutingPolicy> {
    return paginateRecords(request, req => this.listRoutingPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listRoutingPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listRoutingPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRoutingPoliciesResponses(
    request: requests.ListRoutingPoliciesRequest
  ): AsyncIterableIterator<responses.ListRoutingPoliciesResponse> {
    return paginateResponses(request, req => this.listRoutingPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.RoutingPolicy objects
   * contained in responses from the listRoutingPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRoutingPoliciesRecordIterator(
    request: requests.ListRoutingPoliciesRequest
  ): AsyncIterableIterator<model.RoutingPolicy> {
    return paginateRecords(request, req => this.listRoutingPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRoutingPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRoutingPoliciesResponseIterator(
    request: requests.ListRoutingPoliciesRequest
  ): AsyncIterableIterator<responses.ListRoutingPoliciesResponse> {
    return paginateResponses(request, req => this.listRoutingPolicies(req));
  }

  /**
   * Lists all rule sets associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRuleSetsRequest
   * @return ListRuleSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListRuleSets.ts.html |here} to see how to use ListRuleSets API.
   */
  public async listRuleSets(
    listRuleSetsRequest: requests.ListRuleSetsRequest
  ): Promise<responses.ListRuleSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listRuleSets.");
    const operationName = "listRuleSets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/RuleSet/ListRuleSets";
    const pathParams = {
      "{loadBalancerId}": listRuleSetsRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRuleSetsRequest.opcRequestId,
      "if-match": listRuleSetsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRuleSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/ruleSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRuleSetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.RuleSet,
        type: "Array<model.RuleSet>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all SSL cipher suites associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSSLCipherSuitesRequest
   * @return ListSSLCipherSuitesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListSSLCipherSuites.ts.html |here} to see how to use ListSSLCipherSuites API.
   */
  public async listSSLCipherSuites(
    listSSLCipherSuitesRequest: requests.ListSSLCipherSuitesRequest
  ): Promise<responses.ListSSLCipherSuitesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listSSLCipherSuites.");
    const operationName = "listSSLCipherSuites";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/SSLCipherSuite/ListSSLCipherSuites";
    const pathParams = {
      "{loadBalancerId}": listSSLCipherSuitesRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSSLCipherSuitesRequest.opcRequestId,
      "if-match": listSSLCipherSuitesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSSLCipherSuitesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/sslCipherSuites",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSSLCipherSuitesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SSLCipherSuite,
        type: "Array<model.SSLCipherSuite>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the valid load balancer shapes.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListShapesRequest
   * @return ListShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListShapes.ts.html |here} to see how to use ListShapes API.
   */
  public async listShapes(
    listShapesRequest: requests.ListShapesRequest
  ): Promise<responses.ListShapesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listShapes.");
    const operationName = "listShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerShape/ListShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listShapesRequest.compartmentId,
      "limit": listShapesRequest.limit,
      "page": listShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancerShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LoadBalancerShape,
        type: "Array<model.LoadBalancerShape>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LoadBalancerShape objects
   * contained in responses from the listShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapes(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<model.LoadBalancerShape> {
    return paginateRecords(request, req => this.listShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapesResponses(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<responses.ListShapesResponse> {
    return paginateResponses(request, req => this.listShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LoadBalancerShape objects
   * contained in responses from the listShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listShapesRecordIterator(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<model.LoadBalancerShape> {
    return paginateRecords(request, req => this.listShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listShapesResponseIterator(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<responses.ListShapesResponse> {
    return paginateResponses(request, req => this.listShapes(req));
  }

  /**
   * Lists the work requests for a given load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/WorkRequest/ListWorkRequests";
    const pathParams = {
      "{loadBalancerId}": listWorkRequestsRequest.loadBalancerId
    };

    const queryParams = {
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequest,
        type: "Array<model.WorkRequest>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates the configuration of a backend server within the specified backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBackendRequest
   * @return UpdateBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateBackend.ts.html |here} to see how to use UpdateBackend API.
   */
  public async updateBackend(
    updateBackendRequest: requests.UpdateBackendRequest
  ): Promise<responses.UpdateBackendResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateBackend.");
    const operationName = "updateBackend";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateBackendRequest.loadBalancerId,
      "{backendSetName}": updateBackendRequest.backendSetName,
      "{backendName}": updateBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBackendRequest.opcRequestId,
      "opc-retry-token": updateBackendRequest.opcRetryToken,
      "if-match": updateBackendRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBackendRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBackendRequest.updateBackendDetails,
        "UpdateBackendDetails",
        model.UpdateBackendDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBackendSetRequest
   * @return UpdateBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateBackendSet.ts.html |here} to see how to use UpdateBackendSet API.
   */
  public async updateBackendSet(
    updateBackendSetRequest: requests.UpdateBackendSetRequest
  ): Promise<responses.UpdateBackendSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateBackendSet.");
    const operationName = "updateBackendSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateBackendSetRequest.loadBalancerId,
      "{backendSetName}": updateBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBackendSetRequest.opcRequestId,
      "opc-retry-token": updateBackendSetRequest.opcRetryToken,
      "if-match": updateBackendSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBackendSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBackendSetRequest.updateBackendSetDetails,
        "UpdateBackendSetDetails",
        model.UpdateBackendSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the health check policy for a given load balancer and backend set.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateHealthCheckerRequest
   * @return UpdateHealthCheckerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateHealthChecker.ts.html |here} to see how to use UpdateHealthChecker API.
   */
  public async updateHealthChecker(
    updateHealthCheckerRequest: requests.UpdateHealthCheckerRequest
  ): Promise<responses.UpdateHealthCheckerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateHealthChecker.");
    const operationName = "updateHealthChecker";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateHealthCheckerRequest.loadBalancerId,
      "{backendSetName}": updateHealthCheckerRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateHealthCheckerRequest.opcRequestId,
      "opc-retry-token": updateHealthCheckerRequest.opcRetryToken,
      "if-match": updateHealthCheckerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateHealthCheckerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/backendSets/{backendSetName}/healthChecker",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHealthCheckerRequest.healthChecker,
        "UpdateHealthCheckerDetails",
        model.UpdateHealthCheckerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHealthCheckerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Overwrites an existing hostname resource on the specified load balancer. Use this operation to change a
   * virtual hostname.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateHostnameRequest
   * @return UpdateHostnameResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateHostname.ts.html |here} to see how to use UpdateHostname API.
   */
  public async updateHostname(
    updateHostnameRequest: requests.UpdateHostnameRequest
  ): Promise<responses.UpdateHostnameResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateHostname.");
    const operationName = "updateHostname";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateHostnameRequest.loadBalancerId,
      "{name}": updateHostnameRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateHostnameRequest.opcRequestId,
      "opc-retry-token": updateHostnameRequest.opcRetryToken,
      "if-match": updateHostnameRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateHostnameRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/hostnames/{name}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHostnameRequest.updateHostnameDetails,
        "UpdateHostnameDetails",
        model.UpdateHostnameDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHostnameResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a listener for a given load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateListenerRequest
   * @return UpdateListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateListener.ts.html |here} to see how to use UpdateListener API.
   */
  public async updateListener(
    updateListenerRequest: requests.UpdateListenerRequest
  ): Promise<responses.UpdateListenerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateListener.");
    const operationName = "updateListener";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateListenerRequest.loadBalancerId,
      "{listenerName}": updateListenerRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateListenerRequest.opcRequestId,
      "opc-retry-token": updateListenerRequest.opcRetryToken,
      "if-match": updateListenerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateListenerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/listeners/{listenerName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListenerRequest.updateListenerDetails,
        "UpdateListenerDetails",
        model.UpdateListenerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a load balancer's configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLoadBalancerRequest
   * @return UpdateLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateLoadBalancer.ts.html |here} to see how to use UpdateLoadBalancer API.
   */
  public async updateLoadBalancer(
    updateLoadBalancerRequest: requests.UpdateLoadBalancerRequest
  ): Promise<responses.UpdateLoadBalancerResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateLoadBalancer.");
    const operationName = "updateLoadBalancer";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateLoadBalancerRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateLoadBalancerRequest.opcRequestId,
      "if-match": updateLoadBalancerRequest.ifMatch,
      "opc-retry-token": updateLoadBalancerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLoadBalancerRequest.updateLoadBalancerDetails,
        "UpdateLoadBalancerDetails",
        model.UpdateLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLoadBalancerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the shape of a load balancer. The new shape can be larger or smaller compared to existing shape of the
   * LB. The service will try to perform this operation in the least disruptive way to existing connections, but
   * there is a possibility that they might be lost during the LB resizing process. The new shape becomes effective
   * as soon as the related work request completes successfully, i.e. when reshaping to a larger shape, the LB will
   * start accepting larger bandwidth and when reshaping to a smaller one, the LB will be accepting smaller
   * bandwidth.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLoadBalancerShapeRequest
   * @return UpdateLoadBalancerShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateLoadBalancerShape.ts.html |here} to see how to use UpdateLoadBalancerShape API.
   */
  public async updateLoadBalancerShape(
    updateLoadBalancerShapeRequest: requests.UpdateLoadBalancerShapeRequest
  ): Promise<responses.UpdateLoadBalancerShapeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#updateLoadBalancerShape.");
    const operationName = "updateLoadBalancerShape";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancer/UpdateLoadBalancerShape";
    const pathParams = {
      "{loadBalancerId}": updateLoadBalancerShapeRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateLoadBalancerShapeRequest.opcRequestId,
      "opc-retry-token": updateLoadBalancerShapeRequest.opcRetryToken,
      "if-match": updateLoadBalancerShapeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLoadBalancerShapeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/updateShape",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLoadBalancerShapeRequest.updateLoadBalancerShapeDetails,
        "UpdateLoadBalancerShapeDetails",
        model.UpdateLoadBalancerShapeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLoadBalancerShapeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the network security groups associated with the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateNetworkSecurityGroupsRequest
   * @return UpdateNetworkSecurityGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateNetworkSecurityGroups.ts.html |here} to see how to use UpdateNetworkSecurityGroups API.
   */
  public async updateNetworkSecurityGroups(
    updateNetworkSecurityGroupsRequest: requests.UpdateNetworkSecurityGroupsRequest
  ): Promise<responses.UpdateNetworkSecurityGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#updateNetworkSecurityGroups.");
    const operationName = "updateNetworkSecurityGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/loadbalancer/20170115/NetworkSecurityGroups/UpdateNetworkSecurityGroups";
    const pathParams = {
      "{loadBalancerId}": updateNetworkSecurityGroupsRequest.loadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateNetworkSecurityGroupsRequest.opcRequestId,
      "opc-retry-token": updateNetworkSecurityGroupsRequest.opcRetryToken,
      "if-match": updateNetworkSecurityGroupsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNetworkSecurityGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/networkSecurityGroups",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupsRequest.updateNetworkSecurityGroupsDetails,
        "UpdateNetworkSecurityGroupsDetails",
        model.UpdateNetworkSecurityGroupsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Overwrites an existing path route set on the specified load balancer. Use this operation to add, delete, or alter
* path route rules in a path route set.
* <p>
To add a new path route rule to a path route set, the `pathRoutes` in the
* {@link #updatePathRouteSetDetails(UpdatePathRouteSetDetailsRequest) updatePathRouteSetDetails} object must include
* both the new path route rule to add and the existing path route rules to retain.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePathRouteSetRequest
     * @return UpdatePathRouteSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdatePathRouteSet.ts.html |here} to see how to use UpdatePathRouteSet API.
     */
  public async updatePathRouteSet(
    updatePathRouteSetRequest: requests.UpdatePathRouteSetRequest
  ): Promise<responses.UpdatePathRouteSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updatePathRouteSet.");
    const operationName = "updatePathRouteSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updatePathRouteSetRequest.loadBalancerId,
      "{pathRouteSetName}": updatePathRouteSetRequest.pathRouteSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePathRouteSetRequest.opcRequestId,
      "if-match": updatePathRouteSetRequest.ifMatch,
      "opc-retry-token": updatePathRouteSetRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePathRouteSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/pathRouteSets/{pathRouteSetName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePathRouteSetRequest.updatePathRouteSetDetails,
        "UpdatePathRouteSetDetails",
        model.UpdatePathRouteSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePathRouteSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Overwrites an existing routing policy on the specified load balancer. Use this operation to add, delete, or alter
* routing policy rules in a routing policy.
* <p>
To add a new routing rule to a routing policy, the body must include both the new routing rule to add and the existing rules to retain.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRoutingPolicyRequest
     * @return UpdateRoutingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateRoutingPolicy.ts.html |here} to see how to use UpdateRoutingPolicy API.
     */
  public async updateRoutingPolicy(
    updateRoutingPolicyRequest: requests.UpdateRoutingPolicyRequest
  ): Promise<responses.UpdateRoutingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateRoutingPolicy.");
    const operationName = "updateRoutingPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateRoutingPolicyRequest.loadBalancerId,
      "{routingPolicyName}": updateRoutingPolicyRequest.routingPolicyName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateRoutingPolicyRequest.opcRequestId,
      "if-match": updateRoutingPolicyRequest.ifMatch,
      "opc-retry-token": updateRoutingPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRoutingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/routingPolicies/{routingPolicyName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRoutingPolicyRequest.updateRoutingPolicyDetails,
        "UpdateRoutingPolicyDetails",
        model.UpdateRoutingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRoutingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Overwrites an existing set of rules on the specified load balancer. Use this operation to add or alter
* the rules in a rule set.
* <p>
To add a new rule to a set, the body must include both the new rule to add and the existing rules to retain.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRuleSetRequest
     * @return UpdateRuleSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateRuleSet.ts.html |here} to see how to use UpdateRuleSet API.
     */
  public async updateRuleSet(
    updateRuleSetRequest: requests.UpdateRuleSetRequest
  ): Promise<responses.UpdateRuleSetResponse> {
    if (this.logger) this.logger.debug("Calling operation LoadBalancerClient#updateRuleSet.");
    const operationName = "updateRuleSet";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateRuleSetRequest.loadBalancerId,
      "{ruleSetName}": updateRuleSetRequest.ruleSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateRuleSetRequest.opcRequestId,
      "opc-retry-token": updateRuleSetRequest.opcRetryToken,
      "if-match": updateRuleSetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRuleSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/ruleSets/{ruleSetName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRuleSetRequest.updateRuleSetDetails,
        "UpdateRuleSetDetails",
        model.UpdateRuleSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRuleSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates an existing SSL cipher suite for the specified load balancer.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSSLCipherSuiteRequest
   * @return UpdateSSLCipherSuiteResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loadbalancer/UpdateSSLCipherSuite.ts.html |here} to see how to use UpdateSSLCipherSuite API.
   */
  public async updateSSLCipherSuite(
    updateSSLCipherSuiteRequest: requests.UpdateSSLCipherSuiteRequest
  ): Promise<responses.UpdateSSLCipherSuiteResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoadBalancerClient#updateSSLCipherSuite.");
    const operationName = "updateSSLCipherSuite";
    const apiReferenceLink = "";
    const pathParams = {
      "{loadBalancerId}": updateSSLCipherSuiteRequest.loadBalancerId,
      "{name}": updateSSLCipherSuiteRequest.name
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateSSLCipherSuiteRequest.opcRequestId,
      "opc-retry-token": updateSSLCipherSuiteRequest.opcRetryToken,
      "if-match": updateSSLCipherSuiteRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSSLCipherSuiteRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/loadBalancers/{loadBalancerId}/sslCipherSuites/{name}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSSLCipherSuiteRequest.updateSSLCipherSuiteDetails,
        "UpdateSSLCipherSuiteDetails",
        model.UpdateSSLCipherSuiteDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSSLCipherSuiteResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
