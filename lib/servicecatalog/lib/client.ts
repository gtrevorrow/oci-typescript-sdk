/**
 * Service Catalog API
 * Manage solutions in Oracle Cloud Infrastructure Service Catalog.
 * OpenAPI spec version: 20210527
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ServiceCatalogWaiter } from "./servicecatalog-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ServiceCatalogApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ServiceCatalogClient {
  protected static serviceEndpointTemplate =
    "https://service-catalog.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ServiceCatalogWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ServiceCatalog";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("servicecatalog")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("servicecatalog");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210527";
    if (this.logger) this.logger.info(`ServiceCatalogClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ServiceCatalogClient.serviceEndpointTemplate,
        this._region,
        ServiceCatalogClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ServiceCatalogClient.serviceEndpointTemplate,
        this._regionId,
        ServiceCatalogClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ServiceCatalogClient.serviceEndpointTemplate,
      region,
      ServiceCatalogClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ServiceCatalogClient.serviceEndpointTemplate,
      regionId,
      ServiceCatalogClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ServiceCatalogWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ServiceCatalogWaiter {
    this._waiters = new ServiceCatalogWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ServiceCatalogWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Replace all associations of a given service catalog in one bulk transaction.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkReplaceServiceCatalogAssociationsRequest
   * @return BulkReplaceServiceCatalogAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/BulkReplaceServiceCatalogAssociations.ts.html |here} to see how to use BulkReplaceServiceCatalogAssociations API.
   */
  public async bulkReplaceServiceCatalogAssociations(
    bulkReplaceServiceCatalogAssociationsRequest: requests.BulkReplaceServiceCatalogAssociationsRequest
  ): Promise<responses.BulkReplaceServiceCatalogAssociationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ServiceCatalogClient#bulkReplaceServiceCatalogAssociations."
      );
    const operationName = "bulkReplaceServiceCatalogAssociations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalogAssociation/BulkReplaceServiceCatalogAssociations";
    const pathParams = {
      "{serviceCatalogId}": bulkReplaceServiceCatalogAssociationsRequest.serviceCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": bulkReplaceServiceCatalogAssociationsRequest.ifMatch,
      "opc-request-id": bulkReplaceServiceCatalogAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkReplaceServiceCatalogAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs/{serviceCatalogId}/actions/bulkReplaceAssociations",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        bulkReplaceServiceCatalogAssociationsRequest.bulkReplaceServiceCatalogAssociationsDetails,
        "BulkReplaceServiceCatalogAssociationsDetails",
        model.BulkReplaceServiceCatalogAssociationsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkReplaceServiceCatalogAssociationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified private application from one compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangePrivateApplicationCompartmentRequest
   * @return ChangePrivateApplicationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ChangePrivateApplicationCompartment.ts.html |here} to see how to use ChangePrivateApplicationCompartment API.
   */
  public async changePrivateApplicationCompartment(
    changePrivateApplicationCompartmentRequest: requests.ChangePrivateApplicationCompartmentRequest
  ): Promise<responses.ChangePrivateApplicationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ServiceCatalogClient#changePrivateApplicationCompartment."
      );
    const operationName = "changePrivateApplicationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/ChangePrivateApplicationCompartment";
    const pathParams = {
      "{privateApplicationId}": changePrivateApplicationCompartmentRequest.privateApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePrivateApplicationCompartmentRequest.opcRequestId,
      "if-match": changePrivateApplicationCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePrivateApplicationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications/{privateApplicationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePrivateApplicationCompartmentRequest.changePrivateApplicationCompartmentDetails,
        "ChangePrivateApplicationCompartmentDetails",
        model.ChangePrivateApplicationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePrivateApplicationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified service catalog from one compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeServiceCatalogCompartmentRequest
   * @return ChangeServiceCatalogCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ChangeServiceCatalogCompartment.ts.html |here} to see how to use ChangeServiceCatalogCompartment API.
   */
  public async changeServiceCatalogCompartment(
    changeServiceCatalogCompartmentRequest: requests.ChangeServiceCatalogCompartmentRequest
  ): Promise<responses.ChangeServiceCatalogCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#changeServiceCatalogCompartment.");
    const operationName = "changeServiceCatalogCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/ChangeServiceCatalogCompartment";
    const pathParams = {
      "{serviceCatalogId}": changeServiceCatalogCompartmentRequest.serviceCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeServiceCatalogCompartmentRequest.opcRequestId,
      "if-match": changeServiceCatalogCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeServiceCatalogCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs/{serviceCatalogId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeServiceCatalogCompartmentRequest.changeServiceCatalogCompartmentDetails,
        "ChangeServiceCatalogCompartmentDetails",
        model.ChangeServiceCatalogCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeServiceCatalogCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a private application along with a single package to be hosted.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePrivateApplicationRequest
   * @return CreatePrivateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/CreatePrivateApplication.ts.html |here} to see how to use CreatePrivateApplication API.
   */
  public async createPrivateApplication(
    createPrivateApplicationRequest: requests.CreatePrivateApplicationRequest
  ): Promise<responses.CreatePrivateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#createPrivateApplication.");
    const operationName = "createPrivateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/CreatePrivateApplication";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPrivateApplicationRequest.opcRetryToken,
      "opc-request-id": createPrivateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPrivateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPrivateApplicationRequest.createPrivateApplicationDetails,
        "CreatePrivateApplicationDetails",
        model.CreatePrivateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePrivateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "privateApplication",
        bodyModel: model.PrivateApplication,
        type: "model.PrivateApplication",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a brand new service catalog in a given compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateServiceCatalogRequest
   * @return CreateServiceCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/CreateServiceCatalog.ts.html |here} to see how to use CreateServiceCatalog API.
   */
  public async createServiceCatalog(
    createServiceCatalogRequest: requests.CreateServiceCatalogRequest
  ): Promise<responses.CreateServiceCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#createServiceCatalog.");
    const operationName = "createServiceCatalog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/CreateServiceCatalog";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceCatalogRequest.opcRetryToken,
      "opc-request-id": createServiceCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createServiceCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceCatalogRequest.createServiceCatalogDetails,
        "CreateServiceCatalogDetails",
        model.CreateServiceCatalogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceCatalogResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalog",
        bodyModel: model.ServiceCatalog,
        type: "model.ServiceCatalog",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an association between service catalog and a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateServiceCatalogAssociationRequest
   * @return CreateServiceCatalogAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/CreateServiceCatalogAssociation.ts.html |here} to see how to use CreateServiceCatalogAssociation API.
   */
  public async createServiceCatalogAssociation(
    createServiceCatalogAssociationRequest: requests.CreateServiceCatalogAssociationRequest
  ): Promise<responses.CreateServiceCatalogAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#createServiceCatalogAssociation.");
    const operationName = "createServiceCatalogAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalogAssociation/CreateServiceCatalogAssociation";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceCatalogAssociationRequest.opcRetryToken,
      "opc-request-id": createServiceCatalogAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createServiceCatalogAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogAssociations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceCatalogAssociationRequest.createServiceCatalogAssociationDetails,
        "CreateServiceCatalogAssociationDetails",
        model.CreateServiceCatalogAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceCatalogAssociationResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalogAssociation",
        bodyModel: model.ServiceCatalogAssociation,
        type: "model.ServiceCatalogAssociation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an existing private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePrivateApplicationRequest
   * @return DeletePrivateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/DeletePrivateApplication.ts.html |here} to see how to use DeletePrivateApplication API.
   */
  public async deletePrivateApplication(
    deletePrivateApplicationRequest: requests.DeletePrivateApplicationRequest
  ): Promise<responses.DeletePrivateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#deletePrivateApplication.");
    const operationName = "deletePrivateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/DeletePrivateApplication";
    const pathParams = {
      "{privateApplicationId}": deletePrivateApplicationRequest.privateApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePrivateApplicationRequest.ifMatch,
      "opc-request-id": deletePrivateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePrivateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications/{privateApplicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePrivateApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified service catalog from the compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteServiceCatalogRequest
   * @return DeleteServiceCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/DeleteServiceCatalog.ts.html |here} to see how to use DeleteServiceCatalog API.
   */
  public async deleteServiceCatalog(
    deleteServiceCatalogRequest: requests.DeleteServiceCatalogRequest
  ): Promise<responses.DeleteServiceCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#deleteServiceCatalog.");
    const operationName = "deleteServiceCatalog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/DeleteServiceCatalog";
    const pathParams = {
      "{serviceCatalogId}": deleteServiceCatalogRequest.serviceCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceCatalogRequest.ifMatch,
      "opc-request-id": deleteServiceCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteServiceCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs/{serviceCatalogId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceCatalogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes an association between service catalog and a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteServiceCatalogAssociationRequest
   * @return DeleteServiceCatalogAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/DeleteServiceCatalogAssociation.ts.html |here} to see how to use DeleteServiceCatalogAssociation API.
   */
  public async deleteServiceCatalogAssociation(
    deleteServiceCatalogAssociationRequest: requests.DeleteServiceCatalogAssociationRequest
  ): Promise<responses.DeleteServiceCatalogAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#deleteServiceCatalogAssociation.");
    const operationName = "deleteServiceCatalogAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalogAssociation/DeleteServiceCatalogAssociation";
    const pathParams = {
      "{serviceCatalogAssociationId}":
        deleteServiceCatalogAssociationRequest.serviceCatalogAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceCatalogAssociationRequest.ifMatch,
      "opc-request-id": deleteServiceCatalogAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteServiceCatalogAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogAssociations/{serviceCatalogAssociationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceCatalogAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPrivateApplicationRequest
   * @return GetPrivateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetPrivateApplication.ts.html |here} to see how to use GetPrivateApplication API.
   */
  public async getPrivateApplication(
    getPrivateApplicationRequest: requests.GetPrivateApplicationRequest
  ): Promise<responses.GetPrivateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#getPrivateApplication.");
    const operationName = "getPrivateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/GetPrivateApplication";
    const pathParams = {
      "{privateApplicationId}": getPrivateApplicationRequest.privateApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPrivateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications/{privateApplicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "privateApplication",
        bodyModel: model.PrivateApplication,
        type: "model.PrivateApplication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the binary payload of the logo image of the private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPrivateApplicationActionDownloadLogoRequest
   * @return GetPrivateApplicationActionDownloadLogoResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetPrivateApplicationActionDownloadLogo.ts.html |here} to see how to use GetPrivateApplicationActionDownloadLogo API.
   */
  public async getPrivateApplicationActionDownloadLogo(
    getPrivateApplicationActionDownloadLogoRequest: requests.GetPrivateApplicationActionDownloadLogoRequest
  ): Promise<responses.GetPrivateApplicationActionDownloadLogoResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ServiceCatalogClient#getPrivateApplicationActionDownloadLogo."
      );
    const operationName = "getPrivateApplicationActionDownloadLogo";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/GetPrivateApplicationActionDownloadLogo";
    const pathParams = {
      "{privateApplicationId}": getPrivateApplicationActionDownloadLogoRequest.privateApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPrivateApplicationActionDownloadLogoRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateApplicationActionDownloadLogoRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications/{privateApplicationId}/actions/downloadLogo",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateApplicationActionDownloadLogoResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a specific package within a given private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPrivateApplicationPackageRequest
   * @return GetPrivateApplicationPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetPrivateApplicationPackage.ts.html |here} to see how to use GetPrivateApplicationPackage API.
   */
  public async getPrivateApplicationPackage(
    getPrivateApplicationPackageRequest: requests.GetPrivateApplicationPackageRequest
  ): Promise<responses.GetPrivateApplicationPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#getPrivateApplicationPackage.");
    const operationName = "getPrivateApplicationPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplicationPackage/GetPrivateApplicationPackage";
    const pathParams = {
      "{privateApplicationPackageId}":
        getPrivateApplicationPackageRequest.privateApplicationPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPrivateApplicationPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateApplicationPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplicationPackages/{privateApplicationPackageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateApplicationPackageResponse>{},
        body: await response.json(),
        bodyKey: "privateApplicationPackage",
        bodyModel: model.PrivateApplicationPackage,
        type: "model.PrivateApplicationPackage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the configuration that was used to create the private application package.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPrivateApplicationPackageActionDownloadConfigRequest
   * @return GetPrivateApplicationPackageActionDownloadConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetPrivateApplicationPackageActionDownloadConfig.ts.html |here} to see how to use GetPrivateApplicationPackageActionDownloadConfig API.
   */
  public async getPrivateApplicationPackageActionDownloadConfig(
    getPrivateApplicationPackageActionDownloadConfigRequest: requests.GetPrivateApplicationPackageActionDownloadConfigRequest
  ): Promise<responses.GetPrivateApplicationPackageActionDownloadConfigResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ServiceCatalogClient#getPrivateApplicationPackageActionDownloadConfig."
      );
    const operationName = "getPrivateApplicationPackageActionDownloadConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplicationPackage/GetPrivateApplicationPackageActionDownloadConfig";
    const pathParams = {
      "{privateApplicationPackageId}":
        getPrivateApplicationPackageActionDownloadConfigRequest.privateApplicationPackageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPrivateApplicationPackageActionDownloadConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateApplicationPackageActionDownloadConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplicationPackages/{privateApplicationPackageId}/actions/downloadConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateApplicationPackageActionDownloadConfigResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the service catalog including name, compartmentId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetServiceCatalogRequest
   * @return GetServiceCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetServiceCatalog.ts.html |here} to see how to use GetServiceCatalog API.
   */
  public async getServiceCatalog(
    getServiceCatalogRequest: requests.GetServiceCatalogRequest
  ): Promise<responses.GetServiceCatalogResponse> {
    if (this.logger) this.logger.debug("Calling operation ServiceCatalogClient#getServiceCatalog.");
    const operationName = "getServiceCatalog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/GetServiceCatalog";
    const pathParams = {
      "{serviceCatalogId}": getServiceCatalogRequest.serviceCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs/{serviceCatalogId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceCatalogResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalog",
        bodyModel: model.ServiceCatalog,
        type: "model.ServiceCatalog",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about specific service catalog association.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetServiceCatalogAssociationRequest
   * @return GetServiceCatalogAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetServiceCatalogAssociation.ts.html |here} to see how to use GetServiceCatalogAssociation API.
   */
  public async getServiceCatalogAssociation(
    getServiceCatalogAssociationRequest: requests.GetServiceCatalogAssociationRequest
  ): Promise<responses.GetServiceCatalogAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#getServiceCatalogAssociation.");
    const operationName = "getServiceCatalogAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalogAssociation/GetServiceCatalogAssociation";
    const pathParams = {
      "{serviceCatalogAssociationId}":
        getServiceCatalogAssociationRequest.serviceCatalogAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceCatalogAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceCatalogAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogAssociations/{serviceCatalogAssociationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceCatalogAssociationResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalogAssociation",
        bodyModel: model.ServiceCatalogAssociation,
        type: "model.ServiceCatalogAssociation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation ServiceCatalogClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the applications in a service catalog or a tenancy.
   * If no parameter is specified, all catalogs from all compartments in
   * the tenancy will be scanned for any type of content.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListApplicationsRequest
   * @return ListApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListApplications.ts.html |here} to see how to use ListApplications API.
   */
  public async listApplications(
    listApplicationsRequest: requests.ListApplicationsRequest
  ): Promise<responses.ListApplicationsResponse> {
    if (this.logger) this.logger.debug("Calling operation ServiceCatalogClient#listApplications.");
    const operationName = "listApplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ApplicationSummary/ListApplications";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listApplicationsRequest.compartmentId,
      "serviceCatalogId": listApplicationsRequest.serviceCatalogId,
      "entityType": listApplicationsRequest.entityType,
      "limit": listApplicationsRequest.limit,
      "page": listApplicationsRequest.page,
      "displayName": listApplicationsRequest.displayName,
      "entityId": listApplicationsRequest.entityId,
      "publisherId": listApplicationsRequest.publisherId,
      "packageType": listApplicationsRequest.packageType,
      "pricing": listApplicationsRequest.pricing,
      "isFeatured": listApplicationsRequest.isFeatured,
      "sortOrder": listApplicationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "applicationCollection",
        bodyModel: model.ApplicationCollection,
        type: "model.ApplicationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the packages in the specified private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPrivateApplicationPackagesRequest
   * @return ListPrivateApplicationPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListPrivateApplicationPackages.ts.html |here} to see how to use ListPrivateApplicationPackages API.
   */
  public async listPrivateApplicationPackages(
    listPrivateApplicationPackagesRequest: requests.ListPrivateApplicationPackagesRequest
  ): Promise<responses.ListPrivateApplicationPackagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listPrivateApplicationPackages.");
    const operationName = "listPrivateApplicationPackages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplicationPackage/ListPrivateApplicationPackages";
    const pathParams = {};

    const queryParams = {
      "privateApplicationId": listPrivateApplicationPackagesRequest.privateApplicationId,
      "privateApplicationPackageId":
        listPrivateApplicationPackagesRequest.privateApplicationPackageId,
      "packageType": listPrivateApplicationPackagesRequest.packageType,
      "limit": listPrivateApplicationPackagesRequest.limit,
      "page": listPrivateApplicationPackagesRequest.page,
      "sortBy": listPrivateApplicationPackagesRequest.sortBy,
      "sortOrder": listPrivateApplicationPackagesRequest.sortOrder,
      "displayName": listPrivateApplicationPackagesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPrivateApplicationPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPrivateApplicationPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplicationPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateApplicationPackagesResponse>{},
        body: await response.json(),
        bodyKey: "privateApplicationPackageCollection",
        bodyModel: model.PrivateApplicationPackageCollection,
        type: "model.PrivateApplicationPackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the private applications in a given compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPrivateApplicationsRequest
   * @return ListPrivateApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListPrivateApplications.ts.html |here} to see how to use ListPrivateApplications API.
   */
  public async listPrivateApplications(
    listPrivateApplicationsRequest: requests.ListPrivateApplicationsRequest
  ): Promise<responses.ListPrivateApplicationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listPrivateApplications.");
    const operationName = "listPrivateApplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/ListPrivateApplications";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPrivateApplicationsRequest.compartmentId,
      "privateApplicationId": listPrivateApplicationsRequest.privateApplicationId,
      "limit": listPrivateApplicationsRequest.limit,
      "page": listPrivateApplicationsRequest.page,
      "sortBy": listPrivateApplicationsRequest.sortBy,
      "sortOrder": listPrivateApplicationsRequest.sortOrder,
      "displayName": listPrivateApplicationsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPrivateApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPrivateApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "privateApplicationCollection",
        bodyModel: model.PrivateApplicationCollection,
        type: "model.PrivateApplicationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the resource associations for a specific service catalog.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListServiceCatalogAssociationsRequest
   * @return ListServiceCatalogAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListServiceCatalogAssociations.ts.html |here} to see how to use ListServiceCatalogAssociations API.
   */
  public async listServiceCatalogAssociations(
    listServiceCatalogAssociationsRequest: requests.ListServiceCatalogAssociationsRequest
  ): Promise<responses.ListServiceCatalogAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listServiceCatalogAssociations.");
    const operationName = "listServiceCatalogAssociations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalogAssociation/ListServiceCatalogAssociations";
    const pathParams = {};

    const queryParams = {
      "serviceCatalogAssociationId":
        listServiceCatalogAssociationsRequest.serviceCatalogAssociationId,
      "serviceCatalogId": listServiceCatalogAssociationsRequest.serviceCatalogId,
      "entityId": listServiceCatalogAssociationsRequest.entityId,
      "entityType": listServiceCatalogAssociationsRequest.entityType,
      "limit": listServiceCatalogAssociationsRequest.limit,
      "page": listServiceCatalogAssociationsRequest.page,
      "sortOrder": listServiceCatalogAssociationsRequest.sortOrder,
      "sortBy": listServiceCatalogAssociationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceCatalogAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceCatalogAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceCatalogAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalogAssociationCollection",
        bodyModel: model.ServiceCatalogAssociationCollection,
        type: "model.ServiceCatalogAssociationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the service catalogs in the given compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListServiceCatalogsRequest
   * @return ListServiceCatalogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListServiceCatalogs.ts.html |here} to see how to use ListServiceCatalogs API.
   */
  public async listServiceCatalogs(
    listServiceCatalogsRequest: requests.ListServiceCatalogsRequest
  ): Promise<responses.ListServiceCatalogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listServiceCatalogs.");
    const operationName = "listServiceCatalogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/ListServiceCatalogs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listServiceCatalogsRequest.compartmentId,
      "serviceCatalogId": listServiceCatalogsRequest.serviceCatalogId,
      "limit": listServiceCatalogsRequest.limit,
      "page": listServiceCatalogsRequest.page,
      "sortBy": listServiceCatalogsRequest.sortBy,
      "sortOrder": listServiceCatalogsRequest.sortOrder,
      "displayName": listServiceCatalogsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceCatalogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceCatalogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceCatalogsResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalogCollection",
        bodyModel: model.ServiceCatalogCollection,
        type: "model.ServiceCatalogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation ServiceCatalogClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the details of an existing private application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdatePrivateApplicationRequest
   * @return UpdatePrivateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/UpdatePrivateApplication.ts.html |here} to see how to use UpdatePrivateApplication API.
   */
  public async updatePrivateApplication(
    updatePrivateApplicationRequest: requests.UpdatePrivateApplicationRequest
  ): Promise<responses.UpdatePrivateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#updatePrivateApplication.");
    const operationName = "updatePrivateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/PrivateApplication/UpdatePrivateApplication";
    const pathParams = {
      "{privateApplicationId}": updatePrivateApplicationRequest.privateApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePrivateApplicationRequest.opcRequestId,
      "if-match": updatePrivateApplicationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePrivateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateApplications/{privateApplicationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePrivateApplicationRequest.updatePrivateApplicationDetails,
        "UpdatePrivateApplicationDetails",
        model.UpdatePrivateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePrivateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "privateApplication",
        bodyModel: model.PrivateApplication,
        type: "model.PrivateApplication",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the details of a previously created service catalog.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateServiceCatalogRequest
   * @return UpdateServiceCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicecatalog/UpdateServiceCatalog.ts.html |here} to see how to use UpdateServiceCatalog API.
   */
  public async updateServiceCatalog(
    updateServiceCatalogRequest: requests.UpdateServiceCatalogRequest
  ): Promise<responses.UpdateServiceCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ServiceCatalogClient#updateServiceCatalog.");
    const operationName = "updateServiceCatalog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/service-catalog/20210527/ServiceCatalog/UpdateServiceCatalog";
    const pathParams = {
      "{serviceCatalogId}": updateServiceCatalogRequest.serviceCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateServiceCatalogRequest.opcRequestId,
      "if-match": updateServiceCatalogRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateServiceCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceCatalogs/{serviceCatalogId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateServiceCatalogRequest.updateServiceCatalogDetails,
        "UpdateServiceCatalogDetails",
        model.UpdateServiceCatalogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateServiceCatalogResponse>{},
        body: await response.json(),
        bodyKey: "serviceCatalog",
        bodyModel: model.ServiceCatalog,
        type: "model.ServiceCatalog",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
