/**
 * Usage API
 * Use the Usage API to view your Oracle Cloud usage and costs. The API allows you to request data that meets the specified filter criteria, and to group that data by the chosen dimension. The Usage API is used by the Cost Analysis and Carbon Emissions Analysis tools in the Console. See [Cost Analysis Overview](/Content/Billing/Concepts/costanalysisoverview.htm) and [Using the Usage API](/Content/Billing/Concepts/costanalysisoverview.htm#cost_analysis_using_the_api) for more information.
 * OpenAPI spec version: 20200107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { UsageapiWaiter } from "./usageapi-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum UsageapiApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class UsageapiClient {
  protected static serviceEndpointTemplate = "https://usageapi.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": UsageapiWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Usageapi";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("usageapi")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("usageapi");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200107";
    if (this.logger) this.logger.info(`UsageapiClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        UsageapiClient.serviceEndpointTemplate,
        this._region,
        UsageapiClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        UsageapiClient.serviceEndpointTemplate,
        this._regionId,
        UsageapiClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      UsageapiClient.serviceEndpointTemplate,
      region,
      UsageapiClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      UsageapiClient.serviceEndpointTemplate,
      regionId,
      UsageapiClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new UsageapiWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): UsageapiWaiter {
    this._waiters = new UsageapiWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): UsageapiWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Returns the created custom table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateCustomTableRequest
   * @return CreateCustomTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/CreateCustomTable.ts.html |here} to see how to use CreateCustomTable API.
   */
  public async createCustomTable(
    createCustomTableRequest: requests.CreateCustomTableRequest
  ): Promise<responses.CreateCustomTableResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#createCustomTable.");
    const operationName = "createCustomTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CustomTable/CreateCustomTable";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createCustomTableRequest.opcRequestId,
      "opc-retry-token": createCustomTableRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCustomTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customTables",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCustomTableRequest.createCustomTableDetails,
        "CreateCustomTableDetails",
        model.CreateCustomTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCustomTableResponse>{},
        body: await response.json(),
        bodyKey: "customTable",
        bodyModel: model.CustomTable,
        type: "model.CustomTable",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a list of email recipients that can receive usage statements for the subscription.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateEmailRecipientsGroupRequest
   * @return CreateEmailRecipientsGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/CreateEmailRecipientsGroup.ts.html |here} to see how to use CreateEmailRecipientsGroup API.
   */
  public async createEmailRecipientsGroup(
    createEmailRecipientsGroupRequest: requests.CreateEmailRecipientsGroupRequest
  ): Promise<responses.CreateEmailRecipientsGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#createEmailRecipientsGroup.");
    const operationName = "createEmailRecipientsGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/EmailRecipientsGroup/CreateEmailRecipientsGroup";
    const pathParams = {
      "{subscriptionId}": createEmailRecipientsGroupRequest.subscriptionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEmailRecipientsGroupRequest.opcRequestId,
      "opc-retry-token": createEmailRecipientsGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEmailRecipientsGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageStatements/{subscriptionId}/emailRecipientsGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEmailRecipientsGroupRequest.createEmailRecipientsGroupDetails,
        "CreateEmailRecipientsGroupDetails",
        model.CreateEmailRecipientsGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEmailRecipientsGroupResponse>{},
        body: await response.json(),
        bodyKey: "emailRecipientsGroup",
        bodyModel: model.EmailRecipientsGroup,
        type: "model.EmailRecipientsGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the created query.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateQueryRequest
   * @return CreateQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/CreateQuery.ts.html |here} to see how to use CreateQuery API.
   */
  public async createQuery(
    createQueryRequest: requests.CreateQueryRequest
  ): Promise<responses.CreateQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#createQuery.");
    const operationName = "createQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Query/CreateQuery";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createQueryRequest.opcRequestId,
      "opc-retry-token": createQueryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createQueryRequest.createQueryDetails,
        "CreateQueryDetails",
        model.CreateQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateQueryResponse>{},
        body: await response.json(),
        bodyKey: "query",
        bodyModel: model.Query,
        type: "model.Query",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the created schedule.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateScheduleRequest
   * @return CreateScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/CreateSchedule.ts.html |here} to see how to use CreateSchedule API.
   */
  public async createSchedule(
    createScheduleRequest: requests.CreateScheduleRequest
  ): Promise<responses.CreateScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#createSchedule.");
    const operationName = "createSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Schedule/CreateSchedule";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createScheduleRequest.opcRequestId,
      "opc-retry-token": createScheduleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduleRequest.createScheduleDetails,
        "CreateScheduleDetails",
        model.CreateScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the created usage carbon emissions query.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUsageCarbonEmissionsQueryRequest
   * @return CreateUsageCarbonEmissionsQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/CreateUsageCarbonEmissionsQuery.ts.html |here} to see how to use CreateUsageCarbonEmissionsQuery API.
   */
  public async createUsageCarbonEmissionsQuery(
    createUsageCarbonEmissionsQueryRequest: requests.CreateUsageCarbonEmissionsQueryRequest
  ): Promise<responses.CreateUsageCarbonEmissionsQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#createUsageCarbonEmissionsQuery.");
    const operationName = "createUsageCarbonEmissionsQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionsQuery/CreateUsageCarbonEmissionsQuery";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createUsageCarbonEmissionsQueryRequest.opcRequestId,
      "opc-retry-token": createUsageCarbonEmissionsQueryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUsageCarbonEmissionsQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsQueries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUsageCarbonEmissionsQueryRequest.createUsageCarbonEmissionsQueryDetails,
        "CreateUsageCarbonEmissionsQueryDetails",
        model.CreateUsageCarbonEmissionsQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUsageCarbonEmissionsQueryResponse>{},
        body: await response.json(),
        bodyKey: "usageCarbonEmissionsQuery",
        bodyModel: model.UsageCarbonEmissionsQuery,
        type: "model.UsageCarbonEmissionsQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a saved custom table by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCustomTableRequest
   * @return DeleteCustomTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/DeleteCustomTable.ts.html |here} to see how to use DeleteCustomTable API.
   */
  public async deleteCustomTable(
    deleteCustomTableRequest: requests.DeleteCustomTableRequest
  ): Promise<responses.DeleteCustomTableResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#deleteCustomTable.");
    const operationName = "deleteCustomTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CustomTable/DeleteCustomTable";
    const pathParams = {
      "{customTableId}": deleteCustomTableRequest.customTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteCustomTableRequest.opcRequestId,
      "if-match": deleteCustomTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCustomTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customTables/{customTableId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCustomTableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the email recipients group for the usage statement subscription.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteEmailRecipientsGroupRequest
   * @return DeleteEmailRecipientsGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/DeleteEmailRecipientsGroup.ts.html |here} to see how to use DeleteEmailRecipientsGroup API.
   */
  public async deleteEmailRecipientsGroup(
    deleteEmailRecipientsGroupRequest: requests.DeleteEmailRecipientsGroupRequest
  ): Promise<responses.DeleteEmailRecipientsGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#deleteEmailRecipientsGroup.");
    const operationName = "deleteEmailRecipientsGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/EmailRecipientsGroup/DeleteEmailRecipientsGroup";
    const pathParams = {
      "{emailRecipientsGroupId}": deleteEmailRecipientsGroupRequest.emailRecipientsGroupId,
      "{subscriptionId}": deleteEmailRecipientsGroupRequest.subscriptionId
    };

    const queryParams = {
      "compartmentId": deleteEmailRecipientsGroupRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteEmailRecipientsGroupRequest.opcRequestId,
      "if-match": deleteEmailRecipientsGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEmailRecipientsGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageStatements/{subscriptionId}/emailRecipientsGroups/{emailRecipientsGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEmailRecipientsGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a saved query by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteQueryRequest
   * @return DeleteQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/DeleteQuery.ts.html |here} to see how to use DeleteQuery API.
   */
  public async deleteQuery(
    deleteQueryRequest: requests.DeleteQueryRequest
  ): Promise<responses.DeleteQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#deleteQuery.");
    const operationName = "deleteQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Query/DeleteQuery";
    const pathParams = {
      "{queryId}": deleteQueryRequest.queryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteQueryRequest.opcRequestId,
      "if-match": deleteQueryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries/{queryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteQueryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a saved scheduled report by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteScheduleRequest
   * @return DeleteScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/DeleteSchedule.ts.html |here} to see how to use DeleteSchedule API.
   */
  public async deleteSchedule(
    deleteScheduleRequest: requests.DeleteScheduleRequest
  ): Promise<responses.DeleteScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#deleteSchedule.");
    const operationName = "deleteSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Schedule/DeleteSchedule";
    const pathParams = {
      "{scheduleId}": deleteScheduleRequest.scheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteScheduleRequest.opcRequestId,
      "if-match": deleteScheduleRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedules/{scheduleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a usage carbon emissions saved query by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUsageCarbonEmissionsQueryRequest
   * @return DeleteUsageCarbonEmissionsQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/DeleteUsageCarbonEmissionsQuery.ts.html |here} to see how to use DeleteUsageCarbonEmissionsQuery API.
   */
  public async deleteUsageCarbonEmissionsQuery(
    deleteUsageCarbonEmissionsQueryRequest: requests.DeleteUsageCarbonEmissionsQueryRequest
  ): Promise<responses.DeleteUsageCarbonEmissionsQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#deleteUsageCarbonEmissionsQuery.");
    const operationName = "deleteUsageCarbonEmissionsQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionsQuery/DeleteUsageCarbonEmissionsQuery";
    const pathParams = {
      "{usageCarbonEmissionsQueryId}":
        deleteUsageCarbonEmissionsQueryRequest.usageCarbonEmissionsQueryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteUsageCarbonEmissionsQueryRequest.opcRequestId,
      "if-match": deleteUsageCarbonEmissionsQueryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUsageCarbonEmissionsQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsQueries/{usageCarbonEmissionsQueryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUsageCarbonEmissionsQueryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved custom table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCustomTableRequest
   * @return GetCustomTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetCustomTable.ts.html |here} to see how to use GetCustomTable API.
   */
  public async getCustomTable(
    getCustomTableRequest: requests.GetCustomTableRequest
  ): Promise<responses.GetCustomTableResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#getCustomTable.");
    const operationName = "getCustomTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CustomTable/GetCustomTable";
    const pathParams = {
      "{customTableId}": getCustomTableRequest.customTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCustomTableRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCustomTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customTables/{customTableId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCustomTableResponse>{},
        body: await response.json(),
        bodyKey: "customTable",
        bodyModel: model.CustomTable,
        type: "model.CustomTable",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return the saved usage statement email recipient group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetEmailRecipientsGroupRequest
   * @return GetEmailRecipientsGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetEmailRecipientsGroup.ts.html |here} to see how to use GetEmailRecipientsGroup API.
   */
  public async getEmailRecipientsGroup(
    getEmailRecipientsGroupRequest: requests.GetEmailRecipientsGroupRequest
  ): Promise<responses.GetEmailRecipientsGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#getEmailRecipientsGroup.");
    const operationName = "getEmailRecipientsGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/EmailRecipientsGroup/GetEmailRecipientsGroup";
    const pathParams = {
      "{emailRecipientsGroupId}": getEmailRecipientsGroupRequest.emailRecipientsGroupId,
      "{subscriptionId}": getEmailRecipientsGroupRequest.subscriptionId
    };

    const queryParams = {
      "compartmentId": getEmailRecipientsGroupRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEmailRecipientsGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEmailRecipientsGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageStatements/{subscriptionId}/emailRecipientsGroups/{emailRecipientsGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEmailRecipientsGroupResponse>{},
        body: await response.json(),
        bodyKey: "emailRecipientsGroup",
        bodyModel: model.EmailRecipientsGroup,
        type: "model.EmailRecipientsGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved query.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetQueryRequest
   * @return GetQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetQuery.ts.html |here} to see how to use GetQuery API.
   */
  public async getQuery(
    getQueryRequest: requests.GetQueryRequest
  ): Promise<responses.GetQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#getQuery.");
    const operationName = "getQuery";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Query/GetQuery";
    const pathParams = {
      "{queryId}": getQueryRequest.queryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getQueryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries/{queryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetQueryResponse>{},
        body: await response.json(),
        bodyKey: "query",
        bodyModel: model.Query,
        type: "model.Query",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved schedule.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetScheduleRequest
   * @return GetScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetSchedule.ts.html |here} to see how to use GetSchedule API.
   */
  public async getSchedule(
    getScheduleRequest: requests.GetScheduleRequest
  ): Promise<responses.GetScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#getSchedule.");
    const operationName = "getSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Schedule/GetSchedule";
    const pathParams = {
      "{scheduleId}": getScheduleRequest.scheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedules/{scheduleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved schedule run.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetScheduledRunRequest
   * @return GetScheduledRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetScheduledRun.ts.html |here} to see how to use GetScheduledRun API.
   */
  public async getScheduledRun(
    getScheduledRunRequest: requests.GetScheduledRunRequest
  ): Promise<responses.GetScheduledRunResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#getScheduledRun.");
    const operationName = "getScheduledRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/ScheduledRun/GetScheduledRun";
    const pathParams = {
      "{scheduledRunId}": getScheduledRunRequest.scheduledRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduledRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduledRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledRuns/{scheduledRunId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduledRunResponse>{},
        body: await response.json(),
        bodyKey: "scheduledRun",
        bodyModel: model.ScheduledRun,
        type: "model.ScheduledRun",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the usage carbon emissions saved query.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUsageCarbonEmissionsQueryRequest
   * @return GetUsageCarbonEmissionsQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/GetUsageCarbonEmissionsQuery.ts.html |here} to see how to use GetUsageCarbonEmissionsQuery API.
   */
  public async getUsageCarbonEmissionsQuery(
    getUsageCarbonEmissionsQueryRequest: requests.GetUsageCarbonEmissionsQueryRequest
  ): Promise<responses.GetUsageCarbonEmissionsQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#getUsageCarbonEmissionsQuery.");
    const operationName = "getUsageCarbonEmissionsQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionsQuery/GetUsageCarbonEmissionsQuery";
    const pathParams = {
      "{usageCarbonEmissionsQueryId}":
        getUsageCarbonEmissionsQueryRequest.usageCarbonEmissionsQueryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUsageCarbonEmissionsQueryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUsageCarbonEmissionsQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsQueries/{usageCarbonEmissionsQueryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUsageCarbonEmissionsQueryResponse>{},
        body: await response.json(),
        bodyKey: "usageCarbonEmissionsQuery",
        bodyModel: model.UsageCarbonEmissionsQuery,
        type: "model.UsageCarbonEmissionsQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved custom table list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCustomTablesRequest
   * @return ListCustomTablesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListCustomTables.ts.html |here} to see how to use ListCustomTables API.
   */
  public async listCustomTables(
    listCustomTablesRequest: requests.ListCustomTablesRequest
  ): Promise<responses.ListCustomTablesResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#listCustomTables.");
    const operationName = "listCustomTables";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CustomTable/ListCustomTables";
    const pathParams = {};

    const queryParams = {
      "limit": listCustomTablesRequest.limit,
      "page": listCustomTablesRequest.page,
      "compartmentId": listCustomTablesRequest.compartmentId,
      "savedReportId": listCustomTablesRequest.savedReportId,
      "sortBy": listCustomTablesRequest.sortBy,
      "sortOrder": listCustomTablesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCustomTablesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCustomTablesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customTables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCustomTablesResponse>{},
        body: await response.json(),
        bodyKey: "customTableCollection",
        bodyModel: model.CustomTableCollection,
        type: "model.CustomTableCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return the saved usage statement email recipient group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListEmailRecipientsGroupsRequest
   * @return ListEmailRecipientsGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListEmailRecipientsGroups.ts.html |here} to see how to use ListEmailRecipientsGroups API.
   */
  public async listEmailRecipientsGroups(
    listEmailRecipientsGroupsRequest: requests.ListEmailRecipientsGroupsRequest
  ): Promise<responses.ListEmailRecipientsGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#listEmailRecipientsGroups.");
    const operationName = "listEmailRecipientsGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/EmailRecipientsGroup/ListEmailRecipientsGroups";
    const pathParams = {
      "{subscriptionId}": listEmailRecipientsGroupsRequest.subscriptionId
    };

    const queryParams = {
      "limit": listEmailRecipientsGroupsRequest.limit,
      "page": listEmailRecipientsGroupsRequest.page,
      "compartmentId": listEmailRecipientsGroupsRequest.compartmentId,
      "sortBy": listEmailRecipientsGroupsRequest.sortBy,
      "sortOrder": listEmailRecipientsGroupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEmailRecipientsGroupsRequest.opcRequestId,
      "opc-retry-token": listEmailRecipientsGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEmailRecipientsGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageStatements/{subscriptionId}/emailRecipientsGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEmailRecipientsGroupsResponse>{},
        body: await response.json(),
        bodyKey: "emailRecipientsGroupCollection",
        bodyModel: model.EmailRecipientsGroupCollection,
        type: "model.EmailRecipientsGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved query list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListQueriesRequest
   * @return ListQueriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListQueries.ts.html |here} to see how to use ListQueries API.
   */
  public async listQueries(
    listQueriesRequest: requests.ListQueriesRequest
  ): Promise<responses.ListQueriesResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#listQueries.");
    const operationName = "listQueries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Query/ListQueries";
    const pathParams = {};

    const queryParams = {
      "limit": listQueriesRequest.limit,
      "page": listQueriesRequest.page,
      "compartmentId": listQueriesRequest.compartmentId,
      "sortBy": listQueriesRequest.sortBy,
      "sortOrder": listQueriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listQueriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listQueriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListQueriesResponse>{},
        body: await response.json(),
        bodyKey: "queryCollection",
        bodyModel: model.QueryCollection,
        type: "model.QueryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns schedule history list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListScheduledRunsRequest
   * @return ListScheduledRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListScheduledRuns.ts.html |here} to see how to use ListScheduledRuns API.
   */
  public async listScheduledRuns(
    listScheduledRunsRequest: requests.ListScheduledRunsRequest
  ): Promise<responses.ListScheduledRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#listScheduledRuns.");
    const operationName = "listScheduledRuns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/ScheduledRun/ListScheduledRuns";
    const pathParams = {};

    const queryParams = {
      "page": listScheduledRunsRequest.page,
      "limit": listScheduledRunsRequest.limit,
      "scheduleId": listScheduledRunsRequest.scheduleId,
      "sortBy": listScheduledRunsRequest.sortBy,
      "sortOrder": listScheduledRunsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScheduledRunsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScheduledRunsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledRunsResponse>{},
        body: await response.json(),
        bodyKey: "scheduledRunCollection",
        bodyModel: model.ScheduledRunCollection,
        type: "model.ScheduledRunCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the saved schedule list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSchedulesRequest
   * @return ListSchedulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListSchedules.ts.html |here} to see how to use ListSchedules API.
   */
  public async listSchedules(
    listSchedulesRequest: requests.ListSchedulesRequest
  ): Promise<responses.ListSchedulesResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#listSchedules.");
    const operationName = "listSchedules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Schedule/ListSchedules";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSchedulesRequest.compartmentId,
      "page": listSchedulesRequest.page,
      "limit": listSchedulesRequest.limit,
      "sortBy": listSchedulesRequest.sortBy,
      "sortOrder": listSchedulesRequest.sortOrder,
      "name": listSchedulesRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchedulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchedulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchedulesResponse>{},
        body: await response.json(),
        bodyKey: "scheduleCollection",
        bodyModel: model.ScheduleCollection,
        type: "model.ScheduleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the usage carbon emissions saved query list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUsageCarbonEmissionsQueriesRequest
   * @return ListUsageCarbonEmissionsQueriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/ListUsageCarbonEmissionsQueries.ts.html |here} to see how to use ListUsageCarbonEmissionsQueries API.
   */
  public async listUsageCarbonEmissionsQueries(
    listUsageCarbonEmissionsQueriesRequest: requests.ListUsageCarbonEmissionsQueriesRequest
  ): Promise<responses.ListUsageCarbonEmissionsQueriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#listUsageCarbonEmissionsQueries.");
    const operationName = "listUsageCarbonEmissionsQueries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionsQuery/ListUsageCarbonEmissionsQueries";
    const pathParams = {};

    const queryParams = {
      "limit": listUsageCarbonEmissionsQueriesRequest.limit,
      "page": listUsageCarbonEmissionsQueriesRequest.page,
      "compartmentId": listUsageCarbonEmissionsQueriesRequest.compartmentId,
      "sortBy": listUsageCarbonEmissionsQueriesRequest.sortBy,
      "sortOrder": listUsageCarbonEmissionsQueriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUsageCarbonEmissionsQueriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUsageCarbonEmissionsQueriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsQueries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUsageCarbonEmissionsQueriesResponse>{},
        body: await response.json(),
        bodyKey: "usageCarbonEmissionsQueryCollection",
        bodyModel: model.UsageCarbonEmissionsQueryCollection,
        type: "model.UsageCarbonEmissionsQueryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the average carbon emissions summary by SKU.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestAverageCarbonEmissionRequest
   * @return RequestAverageCarbonEmissionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestAverageCarbonEmission.ts.html |here} to see how to use RequestAverageCarbonEmission API.
   */
  public async requestAverageCarbonEmission(
    requestAverageCarbonEmissionRequest: requests.RequestAverageCarbonEmissionRequest
  ): Promise<responses.RequestAverageCarbonEmissionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#requestAverageCarbonEmission.");
    const operationName = "requestAverageCarbonEmission";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/AverageCarbonEmission/RequestAverageCarbonEmission";
    const pathParams = {
      "{skuPartNumber}": requestAverageCarbonEmissionRequest.skuPartNumber
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestAverageCarbonEmissionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestAverageCarbonEmissionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/averageCarbonEmissions/{skuPartNumber}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestAverageCarbonEmissionResponse>{},
        body: await response.json(),
        bodyKey: "averageCarbonEmission",
        bodyModel: model.AverageCarbonEmission,
        type: "model.AverageCarbonEmission",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the clean energy usage summary by region.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestCleanEnergyUsageRequest
   * @return RequestCleanEnergyUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestCleanEnergyUsage.ts.html |here} to see how to use RequestCleanEnergyUsage API.
   */
  public async requestCleanEnergyUsage(
    requestCleanEnergyUsageRequest: requests.RequestCleanEnergyUsageRequest
  ): Promise<responses.RequestCleanEnergyUsageResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#requestCleanEnergyUsage.");
    const operationName = "requestCleanEnergyUsage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CleanEnergyUsage/RequestCleanEnergyUsage";
    const pathParams = {
      "{region}": requestCleanEnergyUsageRequest.region
    };

    const queryParams = {
      "ad": requestCleanEnergyUsageRequest.ad
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestCleanEnergyUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestCleanEnergyUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cleanEnergyUsages/{region}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestCleanEnergyUsageResponse>{},
        body: await response.json(),
        bodyKey: "cleanEnergyUsage",
        bodyModel: model.CleanEnergyUsage,
        type: "model.CleanEnergyUsage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the configurations list for the UI drop-down list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSummarizedConfigurationsRequest
   * @return RequestSummarizedConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestSummarizedConfigurations.ts.html |here} to see how to use RequestSummarizedConfigurations API.
   */
  public async requestSummarizedConfigurations(
    requestSummarizedConfigurationsRequest: requests.RequestSummarizedConfigurationsRequest
  ): Promise<responses.RequestSummarizedConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#requestSummarizedConfigurations.");
    const operationName = "requestSummarizedConfigurations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Configuration/RequestSummarizedConfigurations";
    const pathParams = {};

    const queryParams = {
      "tenantId": requestSummarizedConfigurationsRequest.tenantId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "configurationAggregation",
        bodyModel: model.ConfigurationAggregation,
        type: "model.ConfigurationAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns usage for the given account.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSummarizedUsagesRequest
   * @return RequestSummarizedUsagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestSummarizedUsages.ts.html |here} to see how to use RequestSummarizedUsages API.
   */
  public async requestSummarizedUsages(
    requestSummarizedUsagesRequest: requests.RequestSummarizedUsagesRequest
  ): Promise<responses.RequestSummarizedUsagesResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#requestSummarizedUsages.");
    const operationName = "requestSummarizedUsages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageSummary/RequestSummarizedUsages";
    const pathParams = {};

    const queryParams = {
      "page": requestSummarizedUsagesRequest.page,
      "limit": requestSummarizedUsagesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedUsagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedUsagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestSummarizedUsagesRequest.requestSummarizedUsagesDetails,
        "RequestSummarizedUsagesDetails",
        model.RequestSummarizedUsagesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedUsagesResponse>{},
        body: await response.json(),
        bodyKey: "usageAggregation",
        bodyModel: model.UsageAggregation,
        type: "model.UsageAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the configuration list for the UI drop-down list of carbon emission console.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestUsageCarbonEmissionConfigRequest
   * @return RequestUsageCarbonEmissionConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestUsageCarbonEmissionConfig.ts.html |here} to see how to use RequestUsageCarbonEmissionConfig API.
   */
  public async requestUsageCarbonEmissionConfig(
    requestUsageCarbonEmissionConfigRequest: requests.RequestUsageCarbonEmissionConfigRequest
  ): Promise<responses.RequestUsageCarbonEmissionConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#requestUsageCarbonEmissionConfig.");
    const operationName = "requestUsageCarbonEmissionConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Configuration/RequestUsageCarbonEmissionConfig";
    const pathParams = {};

    const queryParams = {
      "tenantId": requestUsageCarbonEmissionConfigRequest.tenantId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestUsageCarbonEmissionConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestUsageCarbonEmissionConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestUsageCarbonEmissionConfigResponse>{},
        body: await response.json(),
        bodyKey: "configurationAggregation",
        bodyModel: model.ConfigurationAggregation,
        type: "model.ConfigurationAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns usage carbon emission for the given account.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestUsageCarbonEmissionsRequest
   * @return RequestUsageCarbonEmissionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/RequestUsageCarbonEmissions.ts.html |here} to see how to use RequestUsageCarbonEmissions API.
   */
  public async requestUsageCarbonEmissions(
    requestUsageCarbonEmissionsRequest: requests.RequestUsageCarbonEmissionsRequest
  ): Promise<responses.RequestUsageCarbonEmissionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#requestUsageCarbonEmissions.");
    const operationName = "requestUsageCarbonEmissions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionSummary/RequestUsageCarbonEmissions";
    const pathParams = {};

    const queryParams = {
      "page": requestUsageCarbonEmissionsRequest.page,
      "limit": requestUsageCarbonEmissionsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestUsageCarbonEmissionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestUsageCarbonEmissionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestUsageCarbonEmissionsRequest.requestUsageCarbonEmissionsDetails,
        "RequestUsageCarbonEmissionsDetails",
        model.RequestUsageCarbonEmissionsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestUsageCarbonEmissionsResponse>{},
        body: await response.json(),
        bodyKey: "usageCarbonEmissionAggregation",
        bodyModel: model.UsageCarbonEmissionAggregation,
        type: "model.UsageCarbonEmissionAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a saved custom table by table id.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateCustomTableRequest
   * @return UpdateCustomTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/UpdateCustomTable.ts.html |here} to see how to use UpdateCustomTable API.
   */
  public async updateCustomTable(
    updateCustomTableRequest: requests.UpdateCustomTableRequest
  ): Promise<responses.UpdateCustomTableResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#updateCustomTable.");
    const operationName = "updateCustomTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/CustomTable/UpdateCustomTable";
    const pathParams = {
      "{customTableId}": updateCustomTableRequest.customTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateCustomTableRequest.opcRequestId,
      "if-match": updateCustomTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCustomTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/customTables/{customTableId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCustomTableRequest.updateCustomTableDetails,
        "UpdateCustomTableDetails",
        model.UpdateCustomTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCustomTableResponse>{},
        body: await response.json(),
        bodyKey: "customTable",
        bodyModel: model.CustomTable,
        type: "model.CustomTable",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a saved email recipients group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateEmailRecipientsGroupRequest
   * @return UpdateEmailRecipientsGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/UpdateEmailRecipientsGroup.ts.html |here} to see how to use UpdateEmailRecipientsGroup API.
   */
  public async updateEmailRecipientsGroup(
    updateEmailRecipientsGroupRequest: requests.UpdateEmailRecipientsGroupRequest
  ): Promise<responses.UpdateEmailRecipientsGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#updateEmailRecipientsGroup.");
    const operationName = "updateEmailRecipientsGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/EmailRecipientsGroup/UpdateEmailRecipientsGroup";
    const pathParams = {
      "{emailRecipientsGroupId}": updateEmailRecipientsGroupRequest.emailRecipientsGroupId,
      "{subscriptionId}": updateEmailRecipientsGroupRequest.subscriptionId
    };

    const queryParams = {
      "compartmentId": updateEmailRecipientsGroupRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateEmailRecipientsGroupRequest.opcRequestId,
      "if-match": updateEmailRecipientsGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEmailRecipientsGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageStatements/{subscriptionId}/emailRecipientsGroups/{emailRecipientsGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEmailRecipientsGroupRequest.updateEmailRecipientsGroupDetails,
        "UpdateEmailRecipientsGroupDetails",
        model.UpdateEmailRecipientsGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEmailRecipientsGroupResponse>{},
        body: await response.json(),
        bodyKey: "emailRecipientsGroup",
        bodyModel: model.EmailRecipientsGroup,
        type: "model.EmailRecipientsGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a saved query by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateQueryRequest
   * @return UpdateQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/UpdateQuery.ts.html |here} to see how to use UpdateQuery API.
   */
  public async updateQuery(
    updateQueryRequest: requests.UpdateQueryRequest
  ): Promise<responses.UpdateQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#updateQuery.");
    const operationName = "updateQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Query/UpdateQuery";
    const pathParams = {
      "{queryId}": updateQueryRequest.queryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateQueryRequest.opcRequestId,
      "if-match": updateQueryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries/{queryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateQueryRequest.updateQueryDetails,
        "UpdateQueryDetails",
        model.UpdateQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateQueryResponse>{},
        body: await response.json(),
        bodyKey: "query",
        bodyModel: model.Query,
        type: "model.Query",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a saved schedule
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateScheduleRequest
   * @return UpdateScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/UpdateSchedule.ts.html |here} to see how to use UpdateSchedule API.
   */
  public async updateSchedule(
    updateScheduleRequest: requests.UpdateScheduleRequest
  ): Promise<responses.UpdateScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation UsageapiClient#updateSchedule.");
    const operationName = "updateSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/Schedule/UpdateSchedule";
    const pathParams = {
      "{scheduleId}": updateScheduleRequest.scheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateScheduleRequest.opcRequestId,
      "if-match": updateScheduleRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/schedules/{scheduleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduleRequest.updateScheduleDetails,
        "UpdateScheduleDetails",
        model.UpdateScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a usage carbon emissions saved query by the OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateUsageCarbonEmissionsQueryRequest
   * @return UpdateUsageCarbonEmissionsQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/usageapi/UpdateUsageCarbonEmissionsQuery.ts.html |here} to see how to use UpdateUsageCarbonEmissionsQuery API.
   */
  public async updateUsageCarbonEmissionsQuery(
    updateUsageCarbonEmissionsQueryRequest: requests.UpdateUsageCarbonEmissionsQueryRequest
  ): Promise<responses.UpdateUsageCarbonEmissionsQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation UsageapiClient#updateUsageCarbonEmissionsQuery.");
    const operationName = "updateUsageCarbonEmissionsQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/usage/20200107/UsageCarbonEmissionsQuery/UpdateUsageCarbonEmissionsQuery";
    const pathParams = {
      "{usageCarbonEmissionsQueryId}":
        updateUsageCarbonEmissionsQueryRequest.usageCarbonEmissionsQueryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateUsageCarbonEmissionsQueryRequest.opcRequestId,
      "if-match": updateUsageCarbonEmissionsQueryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateUsageCarbonEmissionsQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/usageCarbonEmissionsQueries/{usageCarbonEmissionsQueryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUsageCarbonEmissionsQueryRequest.updateUsageCarbonEmissionsQueryDetails,
        "UpdateUsageCarbonEmissionsQueryDetails",
        model.UpdateUsageCarbonEmissionsQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUsageCarbonEmissionsQueryResponse>{},
        body: await response.json(),
        bodyKey: "usageCarbonEmissionsQuery",
        bodyModel: model.UsageCarbonEmissionsQuery,
        type: "model.UsageCarbonEmissionsQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
