/**
 * PGSQL Control Plane API
 * Use the OCI Database with PostgreSQL API to manage resources such as database systems, database nodes, backups, and configurations. 
For information, see the user guide documentation for the [service](https://docs.oracle.com/iaas/Content/postgresql/home.htm).

 * OpenAPI spec version: 20220915
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { PostgresqlClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class PostgresqlWaiter {
  public constructor(
    private client: PostgresqlClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBackupResponse | null (null in case of 404 response)
   */
  public async forBackup(
    request: serviceRequests.GetBackupRequest,
    ...targetStates: models.Backup.LifecycleState[]
  ): Promise<serviceResponses.GetBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBackup(request),
      response => targetStates.includes(response.backup.lifecycleState!),
      targetStates.includes(models.Backup.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetConfigurationResponse | null (null in case of 404 response)
   */
  public async forConfiguration(
    request: serviceRequests.GetConfigurationRequest,
    ...targetStates: models.Configuration.LifecycleState[]
  ): Promise<serviceResponses.GetConfigurationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getConfiguration(request),
      response => targetStates.includes(response.configuration.lifecycleState!),
      targetStates.includes(models.Configuration.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDbSystem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbSystemResponse | null (null in case of 404 response)
   */
  public async forDbSystem(
    request: serviceRequests.GetDbSystemRequest,
    ...targetStates: models.DbSystem.LifecycleState[]
  ): Promise<serviceResponses.GetDbSystemResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbSystem(request),
      response => targetStates.includes(response.dbSystem.lifecycleState!),
      targetStates.includes(models.DbSystem.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDefaultConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDefaultConfigurationResponse | null (null in case of 404 response)
   */
  public async forDefaultConfiguration(
    request: serviceRequests.GetDefaultConfigurationRequest,
    ...targetStates: models.DefaultConfiguration.LifecycleState[]
  ): Promise<serviceResponses.GetDefaultConfigurationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDefaultConfiguration(request),
      response => targetStates.includes(response.defaultConfiguration.lifecycleState!),
      targetStates.includes(models.DefaultConfiguration.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
