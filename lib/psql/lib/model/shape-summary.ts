/**
 * PGSQL Control Plane API
 * Use the OCI Database with PostgreSQL API to manage resources such as database systems, database nodes, backups, and configurations. 
For information, see the user guide documentation for the [service](/iaas/Content/postgresql/home.htm).

 * OpenAPI spec version: 20220915
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of the database system shape.
 */
export interface ShapeSummary {
  /**
   * A unique identifier for the shape.
   */
  "id"?: string;
  /**
   * The name of the Compute VM shape.
   * Example: {@code VM.Standard.E4.Flex}
   *
   */
  "shape": string;
  /**
   * Indicates if the shape is a flex shape.
   */
  "isFlexible"?: boolean;
  /**
   * The number of OCPUs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "ocpuCount": number;
  /**
   * The amount of memory in gigabytes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "memorySizeInGBs": number;
  "shapeOcpuOptions"?: model.ShapeOcpuOptions;
  "shapeMemoryOptions"?: model.ShapeMemoryOptions;
}

export namespace ShapeSummary {
  export function getJsonObj(obj: ShapeSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "shapeOcpuOptions": obj.shapeOcpuOptions
          ? model.ShapeOcpuOptions.getJsonObj(obj.shapeOcpuOptions)
          : undefined,
        "shapeMemoryOptions": obj.shapeMemoryOptions
          ? model.ShapeMemoryOptions.getJsonObj(obj.shapeMemoryOptions)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ShapeSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "shapeOcpuOptions": obj.shapeOcpuOptions
          ? model.ShapeOcpuOptions.getDeserializedJsonObj(obj.shapeOcpuOptions)
          : undefined,
        "shapeMemoryOptions": obj.shapeMemoryOptions
          ? model.ShapeMemoryOptions.getDeserializedJsonObj(obj.shapeMemoryOptions)
          : undefined
      }
    };

    return jsonObj;
  }
}
