/**
 * Compute Cloud@Customer API
 * Use the Compute Cloud@Customer API to manage Compute Cloud@Customer infrastructures and upgrade schedules.
For more information see [Compute Cloud@Customer documentation](/iaas/compute-cloud-at-customer/home.htm).

 * OpenAPI spec version: 20221208
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ComputeCloudAtCustomerWaiter } from "./computecloudatcustomer-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ComputeCloudAtCustomerApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ComputeCloudAtCustomerClient {
  protected static serviceEndpointTemplate = "https://ccc.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ComputeCloudAtCustomerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ComputeCloudAtCustomer";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("computecloudatcustomer")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("computecloudatcustomer");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20221208";
    if (this.logger)
      this.logger.info(`ComputeCloudAtCustomerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ComputeCloudAtCustomerClient.serviceEndpointTemplate,
        this._region,
        ComputeCloudAtCustomerClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ComputeCloudAtCustomerClient.serviceEndpointTemplate,
        this._regionId,
        ComputeCloudAtCustomerClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ComputeCloudAtCustomerClient.serviceEndpointTemplate,
      region,
      ComputeCloudAtCustomerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ComputeCloudAtCustomerClient.serviceEndpointTemplate,
      regionId,
      ComputeCloudAtCustomerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ComputeCloudAtCustomerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ComputeCloudAtCustomerWaiter {
    this._waiters = new ComputeCloudAtCustomerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ComputeCloudAtCustomerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a Compute Cloud@Customer infrastructure resource from one compartment to another.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeCccInfrastructureCompartmentRequest
   * @return ChangeCccInfrastructureCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ChangeCccInfrastructureCompartment.ts.html |here} to see how to use ChangeCccInfrastructureCompartment API.
   */
  public async changeCccInfrastructureCompartment(
    changeCccInfrastructureCompartmentRequest: requests.ChangeCccInfrastructureCompartmentRequest
  ): Promise<responses.ChangeCccInfrastructureCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeCloudAtCustomerClient#changeCccInfrastructureCompartment."
      );
    const operationName = "changeCccInfrastructureCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccInfrastructureId}": changeCccInfrastructureCompartmentRequest.cccInfrastructureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeCccInfrastructureCompartmentRequest.ifMatch,
      "opc-retry-token": changeCccInfrastructureCompartmentRequest.opcRetryToken,
      "opc-request-id": changeCccInfrastructureCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCccInfrastructureCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures/{cccInfrastructureId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCccInfrastructureCompartmentRequest.changeCccInfrastructureCompartmentDetails,
        "ChangeCccInfrastructureCompartmentDetails",
        model.ChangeCccInfrastructureCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCccInfrastructureCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Compute Cloud@Customer upgrade schedule from one compartment to another using the
   * specified [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeCccUpgradeScheduleCompartmentRequest
   * @return ChangeCccUpgradeScheduleCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ChangeCccUpgradeScheduleCompartment.ts.html |here} to see how to use ChangeCccUpgradeScheduleCompartment API.
   */
  public async changeCccUpgradeScheduleCompartment(
    changeCccUpgradeScheduleCompartmentRequest: requests.ChangeCccUpgradeScheduleCompartmentRequest
  ): Promise<responses.ChangeCccUpgradeScheduleCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeCloudAtCustomerClient#changeCccUpgradeScheduleCompartment."
      );
    const operationName = "changeCccUpgradeScheduleCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccUpgradeScheduleId}": changeCccUpgradeScheduleCompartmentRequest.cccUpgradeScheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeCccUpgradeScheduleCompartmentRequest.ifMatch,
      "opc-retry-token": changeCccUpgradeScheduleCompartmentRequest.opcRetryToken,
      "opc-request-id": changeCccUpgradeScheduleCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCccUpgradeScheduleCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCccUpgradeScheduleCompartmentRequest.changeCccUpgradeScheduleCompartmentDetails,
        "ChangeCccUpgradeScheduleCompartmentDetails",
        model.ChangeCccUpgradeScheduleCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCccUpgradeScheduleCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Compute Cloud@Customer infrastructure. Once created, Oracle Services
   * must connect the rack in the data center to this Oracle Cloud Infrastructure resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateCccInfrastructureRequest
   * @return CreateCccInfrastructureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/CreateCccInfrastructure.ts.html |here} to see how to use CreateCccInfrastructure API.
   */
  public async createCccInfrastructure(
    createCccInfrastructureRequest: requests.CreateCccInfrastructureRequest
  ): Promise<responses.CreateCccInfrastructureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#createCccInfrastructure.");
    const operationName = "createCccInfrastructure";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCccInfrastructureRequest.opcRetryToken,
      "opc-request-id": createCccInfrastructureRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCccInfrastructureRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCccInfrastructureRequest.createCccInfrastructureDetails,
        "CreateCccInfrastructureDetails",
        model.CreateCccInfrastructureDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCccInfrastructureResponse>{},
        body: await response.json(),
        bodyKey: "cccInfrastructure",
        bodyModel: model.CccInfrastructure,
        type: "model.CccInfrastructure",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Compute Cloud@Customer upgrade schedule.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateCccUpgradeScheduleRequest
   * @return CreateCccUpgradeScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/CreateCccUpgradeSchedule.ts.html |here} to see how to use CreateCccUpgradeSchedule API.
   */
  public async createCccUpgradeSchedule(
    createCccUpgradeScheduleRequest: requests.CreateCccUpgradeScheduleRequest
  ): Promise<responses.CreateCccUpgradeScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#createCccUpgradeSchedule.");
    const operationName = "createCccUpgradeSchedule";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCccUpgradeScheduleRequest.opcRetryToken,
      "opc-request-id": createCccUpgradeScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCccUpgradeScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCccUpgradeScheduleRequest.createCccUpgradeScheduleDetails,
        "CreateCccUpgradeScheduleDetails",
        model.CreateCccUpgradeScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCccUpgradeScheduleResponse>{},
        body: await response.json(),
        bodyKey: "cccUpgradeSchedule",
        bodyModel: model.CccUpgradeSchedule,
        type: "model.CccUpgradeSchedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Compute Cloud@Customer infrastructure resource specified by the resource
   * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCccInfrastructureRequest
   * @return DeleteCccInfrastructureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/DeleteCccInfrastructure.ts.html |here} to see how to use DeleteCccInfrastructure API.
   */
  public async deleteCccInfrastructure(
    deleteCccInfrastructureRequest: requests.DeleteCccInfrastructureRequest
  ): Promise<responses.DeleteCccInfrastructureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#deleteCccInfrastructure.");
    const operationName = "deleteCccInfrastructure";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccInfrastructureId}": deleteCccInfrastructureRequest.cccInfrastructureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCccInfrastructureRequest.ifMatch,
      "opc-request-id": deleteCccInfrastructureRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCccInfrastructureRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures/{cccInfrastructureId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCccInfrastructureResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Compute Cloud@Customer upgrade schedule by the specified
   * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCccUpgradeScheduleRequest
   * @return DeleteCccUpgradeScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/DeleteCccUpgradeSchedule.ts.html |here} to see how to use DeleteCccUpgradeSchedule API.
   */
  public async deleteCccUpgradeSchedule(
    deleteCccUpgradeScheduleRequest: requests.DeleteCccUpgradeScheduleRequest
  ): Promise<responses.DeleteCccUpgradeScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#deleteCccUpgradeSchedule.");
    const operationName = "deleteCccUpgradeSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccUpgradeScheduleId}": deleteCccUpgradeScheduleRequest.cccUpgradeScheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCccUpgradeScheduleRequest.ifMatch,
      "opc-request-id": deleteCccUpgradeScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCccUpgradeScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCccUpgradeScheduleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Compute Cloud@Customer infrastructure using the infrastructure
   * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCccInfrastructureRequest
   * @return GetCccInfrastructureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/GetCccInfrastructure.ts.html |here} to see how to use GetCccInfrastructure API.
   */
  public async getCccInfrastructure(
    getCccInfrastructureRequest: requests.GetCccInfrastructureRequest
  ): Promise<responses.GetCccInfrastructureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#getCccInfrastructure.");
    const operationName = "getCccInfrastructure";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccInfrastructureId}": getCccInfrastructureRequest.cccInfrastructureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCccInfrastructureRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCccInfrastructureRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures/{cccInfrastructureId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCccInfrastructureResponse>{},
        body: await response.json(),
        bodyKey: "cccInfrastructure",
        bodyModel: model.CccInfrastructure,
        type: "model.CccInfrastructure",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Compute Cloud@Customer upgrade schedule by the specified
   * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCccUpgradeScheduleRequest
   * @return GetCccUpgradeScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/GetCccUpgradeSchedule.ts.html |here} to see how to use GetCccUpgradeSchedule API.
   */
  public async getCccUpgradeSchedule(
    getCccUpgradeScheduleRequest: requests.GetCccUpgradeScheduleRequest
  ): Promise<responses.GetCccUpgradeScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#getCccUpgradeSchedule.");
    const operationName = "getCccUpgradeSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccUpgradeScheduleId}": getCccUpgradeScheduleRequest.cccUpgradeScheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCccUpgradeScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCccUpgradeScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCccUpgradeScheduleResponse>{},
        body: await response.json(),
        bodyKey: "cccUpgradeSchedule",
        bodyModel: model.CccUpgradeSchedule,
        type: "model.CccUpgradeSchedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Compute Cloud@Customer infrastructures.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCccInfrastructuresRequest
   * @return ListCccInfrastructuresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ListCccInfrastructures.ts.html |here} to see how to use ListCccInfrastructures API.
   */
  public async listCccInfrastructures(
    listCccInfrastructuresRequest: requests.ListCccInfrastructuresRequest
  ): Promise<responses.ListCccInfrastructuresResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#listCccInfrastructures.");
    const operationName = "listCccInfrastructures";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCccInfrastructuresRequest.compartmentId,
      "compartmentIdInSubtree": listCccInfrastructuresRequest.compartmentIdInSubtree,
      "accessLevel": listCccInfrastructuresRequest.accessLevel,
      "lifecycleState": listCccInfrastructuresRequest.lifecycleState,
      "displayName": listCccInfrastructuresRequest.displayName,
      "displayNameContains": listCccInfrastructuresRequest.displayNameContains,
      "cccInfrastructureId": listCccInfrastructuresRequest.cccInfrastructureId,
      "limit": listCccInfrastructuresRequest.limit,
      "page": listCccInfrastructuresRequest.page,
      "sortOrder": listCccInfrastructuresRequest.sortOrder,
      "sortBy": listCccInfrastructuresRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCccInfrastructuresRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCccInfrastructuresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCccInfrastructuresResponse>{},
        body: await response.json(),
        bodyKey: "cccInfrastructureCollection",
        bodyModel: model.CccInfrastructureCollection,
        type: "model.CccInfrastructureCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Compute Cloud@Customer upgrade schedules.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCccUpgradeSchedulesRequest
   * @return ListCccUpgradeSchedulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ListCccUpgradeSchedules.ts.html |here} to see how to use ListCccUpgradeSchedules API.
   */
  public async listCccUpgradeSchedules(
    listCccUpgradeSchedulesRequest: requests.ListCccUpgradeSchedulesRequest
  ): Promise<responses.ListCccUpgradeSchedulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#listCccUpgradeSchedules.");
    const operationName = "listCccUpgradeSchedules";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "cccUpgradeScheduleId": listCccUpgradeSchedulesRequest.cccUpgradeScheduleId,
      "compartmentId": listCccUpgradeSchedulesRequest.compartmentId,
      "compartmentIdInSubtree": listCccUpgradeSchedulesRequest.compartmentIdInSubtree,
      "accessLevel": listCccUpgradeSchedulesRequest.accessLevel,
      "lifecycleState": listCccUpgradeSchedulesRequest.lifecycleState,
      "displayName": listCccUpgradeSchedulesRequest.displayName,
      "displayNameContains": listCccUpgradeSchedulesRequest.displayNameContains,
      "limit": listCccUpgradeSchedulesRequest.limit,
      "page": listCccUpgradeSchedulesRequest.page,
      "sortOrder": listCccUpgradeSchedulesRequest.sortOrder,
      "sortBy": listCccUpgradeSchedulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCccUpgradeSchedulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCccUpgradeSchedulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCccUpgradeSchedulesResponse>{},
        body: await response.json(),
        bodyKey: "cccUpgradeScheduleCollection",
        bodyModel: model.CccUpgradeScheduleCollection,
        type: "model.CccUpgradeScheduleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates Compute Cloud@Customer infrastructure resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateCccInfrastructureRequest
   * @return UpdateCccInfrastructureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/UpdateCccInfrastructure.ts.html |here} to see how to use UpdateCccInfrastructure API.
   */
  public async updateCccInfrastructure(
    updateCccInfrastructureRequest: requests.UpdateCccInfrastructureRequest
  ): Promise<responses.UpdateCccInfrastructureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#updateCccInfrastructure.");
    const operationName = "updateCccInfrastructure";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccInfrastructureId}": updateCccInfrastructureRequest.cccInfrastructureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCccInfrastructureRequest.ifMatch,
      "opc-request-id": updateCccInfrastructureRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCccInfrastructureRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccInfrastructures/{cccInfrastructureId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCccInfrastructureRequest.updateCccInfrastructureDetails,
        "UpdateCccInfrastructureDetails",
        model.UpdateCccInfrastructureDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCccInfrastructureResponse>{},
        body: await response.json(),
        bodyKey: "cccInfrastructure",
        bodyModel: model.CccInfrastructure,
        type: "model.CccInfrastructure",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Compute Cloud@Customer upgrade schedule.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateCccUpgradeScheduleRequest
   * @return UpdateCccUpgradeScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/UpdateCccUpgradeSchedule.ts.html |here} to see how to use UpdateCccUpgradeSchedule API.
   */
  public async updateCccUpgradeSchedule(
    updateCccUpgradeScheduleRequest: requests.UpdateCccUpgradeScheduleRequest
  ): Promise<responses.UpdateCccUpgradeScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeCloudAtCustomerClient#updateCccUpgradeSchedule.");
    const operationName = "updateCccUpgradeSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{cccUpgradeScheduleId}": updateCccUpgradeScheduleRequest.cccUpgradeScheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCccUpgradeScheduleRequest.ifMatch,
      "opc-request-id": updateCccUpgradeScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCccUpgradeScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCccUpgradeScheduleRequest.updateCccUpgradeScheduleDetails,
        "UpdateCccUpgradeScheduleDetails",
        model.UpdateCccUpgradeScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCccUpgradeScheduleResponse>{},
        body: await response.json(),
        bodyKey: "cccUpgradeSchedule",
        bodyModel: model.CccUpgradeSchedule,
        type: "model.CccUpgradeSchedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
