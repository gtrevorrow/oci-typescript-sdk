/**
 * Compute Cloud@Customer API
 * Use the Compute Cloud@Customer API to manage Compute Cloud@Customer infrastructures and upgrade schedules.
For more information see [Compute Cloud@Customer documentation](/iaas/compute-cloud-at-customer/home.htm).

 * OpenAPI spec version: 20221208
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ComputeCloudAtCustomerClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class ComputeCloudAtCustomerWaiter {
  public constructor(
    private client: ComputeCloudAtCustomerClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forCccInfrastructure till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCccInfrastructureResponse | null (null in case of 404 response)
   */
  public async forCccInfrastructure(
    request: serviceRequests.GetCccInfrastructureRequest,
    ...targetStates: models.CccInfrastructure.LifecycleState[]
  ): Promise<serviceResponses.GetCccInfrastructureResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCccInfrastructure(request),
      response => targetStates.includes(response.cccInfrastructure.lifecycleState!),
      targetStates.includes(models.CccInfrastructure.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCccUpgradeSchedule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCccUpgradeScheduleResponse | null (null in case of 404 response)
   */
  public async forCccUpgradeSchedule(
    request: serviceRequests.GetCccUpgradeScheduleRequest,
    ...targetStates: models.CccUpgradeSchedule.LifecycleState[]
  ): Promise<serviceResponses.GetCccUpgradeScheduleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCccUpgradeSchedule(request),
      response => targetStates.includes(response.cccUpgradeSchedule.lifecycleState!),
      targetStates.includes(models.CccUpgradeSchedule.LifecycleState.Deleted)
    );
  }
}
