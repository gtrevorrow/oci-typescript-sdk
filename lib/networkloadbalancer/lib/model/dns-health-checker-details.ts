/**
 * NetworkLoadBalancer API
 * This describes the network load balancer API.
 * OpenAPI spec version: 20200501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * DNS healthcheck configurations.
 */
export interface DnsHealthCheckerDetails {
  /**
    * DNS transport protocol; either UDP or TCP.
* <p>
Example: {@code UDP}
* 
    */
  "transportProtocol"?: model.DnsHealthCheckTransportProtocols;
  /**
   * The absolute fully-qualified domain name to perform periodic DNS queries.
   * If not provided, an extra dot will be added at the end of a domain name during the query.
   *
   */
  "domainName": string;
  /**
    * The class the dns health check query to use; either IN or CH.
* <p>
Example: {@code IN}
* 
    */
  "queryClass"?: model.DnsHealthCheckQueryClasses;
  /**
    * The type the dns health check query to use; A, AAAA, TXT.
* <p>
Example: {@code A}
* 
    */
  "queryType"?: model.DnsHealthCheckQueryTypes;
  /**
   * An array that represents accepetable RCODE values for DNS query response.
   * Example: [\"NOERROR\", \"NXDOMAIN\"]
   *
   */
  "rcodes"?: Array<model.DnsHealthCheckRCodes>;
}

export namespace DnsHealthCheckerDetails {
  export function getJsonObj(obj: DnsHealthCheckerDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "rcodes": obj.rcodes
          ? obj.rcodes.map(item => {
              return model.DnsHealthCheckRCodes.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DnsHealthCheckerDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "rcodes": obj.rcodes
          ? obj.rcodes.map(item => {
              return model.DnsHealthCheckRCodes.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
