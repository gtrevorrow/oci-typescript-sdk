/**
 * Vault Key Management API
 * Use the Key Management API to manage vaults and keys. For more information, see [Managing Vaults](/Content/KeyManagement/Tasks/managingvaults.htm) and [Managing Keys](/Content/KeyManagement/Tasks/managingkeys.htm).

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Backup upload location
 */
export interface BackupLocation {
  "destination": string;
}

export namespace BackupLocation {
  export function getJsonObj(obj: BackupLocation): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "destination" in obj && obj.destination) {
      switch (obj.destination) {
        case "BUCKET":
          return model.BackupLocationBucket.getJsonObj(
            <model.BackupLocationBucket>(<object>jsonObj),
            true
          );
        case "PRE_AUTHENTICATED_REQUEST_URI":
          return model.BackupLocationURI.getJsonObj(
            <model.BackupLocationURI>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.destination}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: BackupLocation): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "destination" in obj && obj.destination) {
      switch (obj.destination) {
        case "BUCKET":
          return model.BackupLocationBucket.getDeserializedJsonObj(
            <model.BackupLocationBucket>(<object>jsonObj),
            true
          );
        case "PRE_AUTHENTICATED_REQUEST_URI":
          return model.BackupLocationURI.getDeserializedJsonObj(
            <model.BackupLocationURI>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.destination}`);
      }
    }
    return jsonObj;
  }
}
