/**
 * Resource Scheduler API
 * Use the Resource scheduler API to manage schedules, to perform actions on a collection of resources.
 * OpenAPI spec version: 20240430
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * This is a generic input parameter to use when acting on the resource.
 *
 */
export interface Parameter {
  "parameterType": string;
}

export namespace Parameter {
  export function getJsonObj(obj: Parameter): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "parameterType" in obj && obj.parameterType) {
      switch (obj.parameterType) {
        case "QUERY":
          return model.QueryParameter.getJsonObj(<model.QueryParameter>(<object>jsonObj), true);
        case "HEADER":
          return model.HeaderParameter.getJsonObj(<model.HeaderParameter>(<object>jsonObj), true);
        case "BODY":
          return model.BodyParameter.getJsonObj(<model.BodyParameter>(<object>jsonObj), true);
        case "PATH":
          return model.PathParameter.getJsonObj(<model.PathParameter>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.parameterType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Parameter): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "parameterType" in obj && obj.parameterType) {
      switch (obj.parameterType) {
        case "QUERY":
          return model.QueryParameter.getDeserializedJsonObj(
            <model.QueryParameter>(<object>jsonObj),
            true
          );
        case "HEADER":
          return model.HeaderParameter.getDeserializedJsonObj(
            <model.HeaderParameter>(<object>jsonObj),
            true
          );
        case "BODY":
          return model.BodyParameter.getDeserializedJsonObj(
            <model.BodyParameter>(<object>jsonObj),
            true
          );
        case "PATH":
          return model.PathParameter.getDeserializedJsonObj(
            <model.PathParameter>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.parameterType}`);
      }
    }
    return jsonObj;
  }
}
