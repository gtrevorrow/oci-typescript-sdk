/**
 * Resource Scheduler API
 * Use the Resource scheduler API to manage schedules, to perform actions on a collection of resources.
 * OpenAPI spec version: 20240430
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * This is a generic filter used to decide which resources that the schedule be applied to.
 */
export interface ResourceFilter {
  "attribute": string;
}

export namespace ResourceFilter {
  export function getJsonObj(obj: ResourceFilter): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "attribute" in obj && obj.attribute) {
      switch (obj.attribute) {
        case "TIME_CREATED":
          return model.TimeCreatedResourceFilter.getJsonObj(
            <model.TimeCreatedResourceFilter>(<object>jsonObj),
            true
          );
        case "RESOURCE_TYPE":
          return model.ResourceTypeResourceFilter.getJsonObj(
            <model.ResourceTypeResourceFilter>(<object>jsonObj),
            true
          );
        case "LIFECYCLE_STATE":
          return model.LifecycleStateResourceFilter.getJsonObj(
            <model.LifecycleStateResourceFilter>(<object>jsonObj),
            true
          );
        case "COMPARTMENT_ID":
          return model.CompartmentIdResourceFilter.getJsonObj(
            <model.CompartmentIdResourceFilter>(<object>jsonObj),
            true
          );
        case "DEFINED_TAGS":
          return model.DefinedTagsResourceFilter.getJsonObj(
            <model.DefinedTagsResourceFilter>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.attribute}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ResourceFilter): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "attribute" in obj && obj.attribute) {
      switch (obj.attribute) {
        case "TIME_CREATED":
          return model.TimeCreatedResourceFilter.getDeserializedJsonObj(
            <model.TimeCreatedResourceFilter>(<object>jsonObj),
            true
          );
        case "RESOURCE_TYPE":
          return model.ResourceTypeResourceFilter.getDeserializedJsonObj(
            <model.ResourceTypeResourceFilter>(<object>jsonObj),
            true
          );
        case "LIFECYCLE_STATE":
          return model.LifecycleStateResourceFilter.getDeserializedJsonObj(
            <model.LifecycleStateResourceFilter>(<object>jsonObj),
            true
          );
        case "COMPARTMENT_ID":
          return model.CompartmentIdResourceFilter.getDeserializedJsonObj(
            <model.CompartmentIdResourceFilter>(<object>jsonObj),
            true
          );
        case "DEFINED_TAGS":
          return model.DefinedTagsResourceFilter.getDeserializedJsonObj(
            <model.DefinedTagsResourceFilter>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.attribute}`);
      }
    }
    return jsonObj;
  }
}
