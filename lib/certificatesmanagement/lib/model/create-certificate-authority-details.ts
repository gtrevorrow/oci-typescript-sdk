/**
 * Certificates Service Management API
 * API for managing certificates.
 * OpenAPI spec version: 20210224
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details for creating a certificate authority (CA).
 */
export interface CreateCertificateAuthorityDetails {
  /**
   * A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
   */
  "name": string;
  /**
   * A brief description of the CA.
   */
  "description"?: string;
  /**
   * The compartment in which you want to create the CA.
   */
  "compartmentId": string;
  /**
   * A list of rules that control how the CA is used and managed.
   */
  "certificateAuthorityRules"?: Array<model.CertificateAuthorityRule>;
  "certificateAuthorityConfig":
    | model.CreateRootCaByGeneratingInternallyConfigDetails
    | model.CreateSubordinateCaIssuedByInternalCaConfigDetails;
  "certificateRevocationListDetails"?: model.CertificateRevocationListDetails;
  /**
   * The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
   */
  "kmsKeyId": string;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Usage of predefined tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace CreateCertificateAuthorityDetails {
  export function getJsonObj(obj: CreateCertificateAuthorityDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "certificateAuthorityRules": obj.certificateAuthorityRules
          ? obj.certificateAuthorityRules.map(item => {
              return model.CertificateAuthorityRule.getJsonObj(item);
            })
          : undefined,
        "certificateAuthorityConfig": obj.certificateAuthorityConfig
          ? model.CreateCertificateAuthorityConfigDetails.getJsonObj(obj.certificateAuthorityConfig)
          : undefined,
        "certificateRevocationListDetails": obj.certificateRevocationListDetails
          ? model.CertificateRevocationListDetails.getJsonObj(obj.certificateRevocationListDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateCertificateAuthorityDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "certificateAuthorityRules": obj.certificateAuthorityRules
          ? obj.certificateAuthorityRules.map(item => {
              return model.CertificateAuthorityRule.getDeserializedJsonObj(item);
            })
          : undefined,
        "certificateAuthorityConfig": obj.certificateAuthorityConfig
          ? model.CreateCertificateAuthorityConfigDetails.getDeserializedJsonObj(
              obj.certificateAuthorityConfig
            )
          : undefined,
        "certificateRevocationListDetails": obj.certificateRevocationListDetails
          ? model.CertificateRevocationListDetails.getDeserializedJsonObj(
              obj.certificateRevocationListDetails
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
