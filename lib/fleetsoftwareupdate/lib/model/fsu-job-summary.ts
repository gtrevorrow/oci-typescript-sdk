/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Exadata Fleet Update Job resource.
 *
 */
export interface FsuJobSummary {
  /**
   * OCID identifier for the Exadata Fleet Update Job.
   *
   */
  "id"?: string;
  /**
   * Exadata Fleet Update Job display name.
   *
   */
  "displayName"?: string;
  /**
   * Compartment Identifier, this will map to the owner Exadata Fleet Update Action resource.
   *
   */
  "compartmentId"?: string;
  /**
   * OCID of the Exadata Fleet Update Action that this job is part of.
   *
   */
  "fsuActionId"?: string;
  "progress"?: model.JobProgress;
  /**
   * The time the Exadata Fleet Update Job was created. An RFC3339 formatted datetime string.
   *
   */
  "timeCreated"?: Date;
  /**
   * The time the Exadata Fleet Update Job started execution. An RFC3339 formatted datetime string.
   *
   */
  "timeStarted"?: Date;
  /**
   * The time the Exadata Fleet Update Job was updated. An RFC3339 formatted datetime string.
   *
   */
  "timeUpdated"?: Date;
  /**
   * The time the Exadata Fleet Update Job completed execution. An RFC3339 formatted datetime string.
   *
   */
  "timeFinished"?: Date;
  /**
   * The current state of the Job.
   *
   */
  "lifecycleState"?: model.JobLifecycleStates;
  /**
   * A message describing the current state in more detail.
   *
   */
  "lifecycleDetails"?: string;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "type": string;
}

export namespace FsuJobSummary {
  export function getJsonObj(obj: FsuJobSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "progress": obj.progress ? model.JobProgress.getJsonObj(obj.progress) : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STAGE":
          return model.StageFsuJobSummary.getJsonObj(
            <model.StageFsuJobSummary>(<object>jsonObj),
            true
          );
        case "PRECHECK":
          return model.PrecheckFsuJobSummary.getJsonObj(
            <model.PrecheckFsuJobSummary>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.ApplyFsuJobSummary.getJsonObj(
            <model.ApplyFsuJobSummary>(<object>jsonObj),
            true
          );
        case "ROLLBACK_MAINTENANCE_CYCLE":
          return model.RollbackCycleFsuJobSummary.getJsonObj(
            <model.RollbackCycleFsuJobSummary>(<object>jsonObj),
            true
          );
        case "CLEANUP":
          return model.CleanupFsuJobSummary.getJsonObj(
            <model.CleanupFsuJobSummary>(<object>jsonObj),
            true
          );
        case "ROLLBACK_AND_REMOVE_TARGET":
          return model.RollbackFsuJobSummary.getJsonObj(
            <model.RollbackFsuJobSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: FsuJobSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "progress": obj.progress
          ? model.JobProgress.getDeserializedJsonObj(obj.progress)
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STAGE":
          return model.StageFsuJobSummary.getDeserializedJsonObj(
            <model.StageFsuJobSummary>(<object>jsonObj),
            true
          );
        case "PRECHECK":
          return model.PrecheckFsuJobSummary.getDeserializedJsonObj(
            <model.PrecheckFsuJobSummary>(<object>jsonObj),
            true
          );
        case "APPLY":
          return model.ApplyFsuJobSummary.getDeserializedJsonObj(
            <model.ApplyFsuJobSummary>(<object>jsonObj),
            true
          );
        case "ROLLBACK_MAINTENANCE_CYCLE":
          return model.RollbackCycleFsuJobSummary.getDeserializedJsonObj(
            <model.RollbackCycleFsuJobSummary>(<object>jsonObj),
            true
          );
        case "CLEANUP":
          return model.CleanupFsuJobSummary.getDeserializedJsonObj(
            <model.CleanupFsuJobSummary>(<object>jsonObj),
            true
          );
        case "ROLLBACK_AND_REMOVE_TARGET":
          return model.RollbackFsuJobSummary.getDeserializedJsonObj(
            <model.RollbackFsuJobSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
