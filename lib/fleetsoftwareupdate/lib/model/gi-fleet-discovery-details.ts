/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Supported fleet discovery strategies for GI Collections.
 * If specified on an Update Collection request, this will re-discover the targets of the Collection.
 *
 */
export interface GiFleetDiscoveryDetails {
  "strategy": string;
}

export namespace GiFleetDiscoveryDetails {
  export function getJsonObj(obj: GiFleetDiscoveryDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "strategy" in obj && obj.strategy) {
      switch (obj.strategy) {
        case "FILTERS":
          return model.GiFiltersDiscovery.getJsonObj(
            <model.GiFiltersDiscovery>(<object>jsonObj),
            true
          );
        case "SEARCH_QUERY":
          return model.GiSearchQueryDiscovery.getJsonObj(
            <model.GiSearchQueryDiscovery>(<object>jsonObj),
            true
          );
        case "DISCOVERY_RESULTS":
          return model.GiDiscoveryResults.getJsonObj(
            <model.GiDiscoveryResults>(<object>jsonObj),
            true
          );
        case "TARGET_LIST":
          return model.GiTargetListDiscovery.getJsonObj(
            <model.GiTargetListDiscovery>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.strategy}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: GiFleetDiscoveryDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "strategy" in obj && obj.strategy) {
      switch (obj.strategy) {
        case "FILTERS":
          return model.GiFiltersDiscovery.getDeserializedJsonObj(
            <model.GiFiltersDiscovery>(<object>jsonObj),
            true
          );
        case "SEARCH_QUERY":
          return model.GiSearchQueryDiscovery.getDeserializedJsonObj(
            <model.GiSearchQueryDiscovery>(<object>jsonObj),
            true
          );
        case "DISCOVERY_RESULTS":
          return model.GiDiscoveryResults.getDeserializedJsonObj(
            <model.GiDiscoveryResults>(<object>jsonObj),
            true
          );
        case "TARGET_LIST":
          return model.GiTargetListDiscovery.getDeserializedJsonObj(
            <model.GiTargetListDiscovery>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.strategy}`);
      }
    }
    return jsonObj;
  }
}
