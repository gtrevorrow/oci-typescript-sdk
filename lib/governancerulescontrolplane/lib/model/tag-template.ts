/**
 * GovernanceRulesControlPlane API
 * A description of the GovernanceRulesControlPlane API
 * OpenAPI spec version: 20220504
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Template for governance rules of type tag.
 */
export interface TagTemplate extends model.Template {
  /**
   * The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
   *
   */
  "name": string;
  /**
   * Description of the tag namespace.
   */
  "description"?: string;
  /**
   * Represents an array of tags for tag namespace.
   */
  "tags"?: Array<model.Tag>;
  "tagDefaults"?: Array<model.TagDefault>;

  "type": string;
}

export namespace TagTemplate {
  export function getJsonObj(obj: TagTemplate, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Template.getJsonObj(obj) as TagTemplate)),
      ...{
        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tag.getJsonObj(item);
            })
          : undefined,
        "tagDefaults": obj.tagDefaults
          ? obj.tagDefaults.map(item => {
              return model.TagDefault.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const type = "TAG";
  export function getDeserializedJsonObj(obj: TagTemplate, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Template.getDeserializedJsonObj(obj) as TagTemplate)),
      ...{
        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tag.getDeserializedJsonObj(item);
            })
          : undefined,
        "tagDefaults": obj.tagDefaults
          ? obj.tagDefaults.map(item => {
              return model.TagDefault.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
