/**
 * Document Understanding API
 * Document AI helps customers perform various analysis on their documents. If a customer has lots of documents, they can process them in batch using asynchronous API endpoints.
 * OpenAPI spec version: 20221109
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The type of document analysis.
 */
export interface DocumentFeature {
  "featureType": string;
}

export namespace DocumentFeature {
  export function getJsonObj(obj: DocumentFeature): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "featureType" in obj && obj.featureType) {
      switch (obj.featureType) {
        case "DOCUMENT_CLASSIFICATION":
          return model.DocumentClassificationFeature.getJsonObj(
            <model.DocumentClassificationFeature>(<object>jsonObj),
            true
          );
        case "KEY_VALUE_EXTRACTION":
          return model.DocumentKeyValueExtractionFeature.getJsonObj(
            <model.DocumentKeyValueExtractionFeature>(<object>jsonObj),
            true
          );
        case "LANGUAGE_CLASSIFICATION":
          return model.DocumentLanguageClassificationFeature.getJsonObj(
            <model.DocumentLanguageClassificationFeature>(<object>jsonObj),
            true
          );
        case "TEXT_EXTRACTION":
          return model.DocumentTextExtractionFeature.getJsonObj(
            <model.DocumentTextExtractionFeature>(<object>jsonObj),
            true
          );
        case "TABLE_EXTRACTION":
          return model.DocumentTableExtractionFeature.getJsonObj(
            <model.DocumentTableExtractionFeature>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.featureType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DocumentFeature): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "featureType" in obj && obj.featureType) {
      switch (obj.featureType) {
        case "DOCUMENT_CLASSIFICATION":
          return model.DocumentClassificationFeature.getDeserializedJsonObj(
            <model.DocumentClassificationFeature>(<object>jsonObj),
            true
          );
        case "KEY_VALUE_EXTRACTION":
          return model.DocumentKeyValueExtractionFeature.getDeserializedJsonObj(
            <model.DocumentKeyValueExtractionFeature>(<object>jsonObj),
            true
          );
        case "LANGUAGE_CLASSIFICATION":
          return model.DocumentLanguageClassificationFeature.getDeserializedJsonObj(
            <model.DocumentLanguageClassificationFeature>(<object>jsonObj),
            true
          );
        case "TEXT_EXTRACTION":
          return model.DocumentTextExtractionFeature.getDeserializedJsonObj(
            <model.DocumentTextExtractionFeature>(<object>jsonObj),
            true
          );
        case "TABLE_EXTRACTION":
          return model.DocumentTableExtractionFeature.getDeserializedJsonObj(
            <model.DocumentTableExtractionFeature>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.featureType}`);
      }
    }
    return jsonObj;
  }
}
