/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of an Oracle listener discovered in a cloud DB system discovery run.
 */
export interface DiscoveredCloudListener extends model.DiscoveredCloudDbSystemComponent {
  /**
   * The name of the DB node.
   */
  "dbNodeName"?: string;
  /**
   * The Oracle home location of the listener.
   */
  "oracleHome"?: string;
  /**
   * The listener alias.
   */
  "listenerAlias"?: string;
  /**
   * The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
   */
  "adrHomeDirectory"?: string;
  /**
   * The destination directory of the listener log file.
   */
  "logDirectory"?: string;
  /**
   * The destination directory of the listener trace file.
   */
  "traceDirectory"?: string;
  /**
   * The listener version.
   */
  "version"?: string;
  /**
   * The type of listener.
   */
  "listenerType"?: DiscoveredCloudListener.ListenerType;
  /**
   * The name of the host on which the cloud listener is running.
   */
  "hostName"?: string;
  /**
   * The list of protocol addresses the listener is configured to listen on.
   */
  "endpoints"?: Array<model.CloudListenerEndpoint>;
  "connector"?: model.CloudDbSystemDiscoveryMacsConnector;

  "componentType": string;
}

export namespace DiscoveredCloudListener {
  export enum ListenerType {
    Asm = "ASM",
    Local = "LOCAL",
    Scan = "SCAN",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DiscoveredCloudListener, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredCloudDbSystemComponent.getJsonObj(obj) as DiscoveredCloudListener)),
      ...{
        "endpoints": obj.endpoints
          ? obj.endpoints.map(item => {
              return model.CloudListenerEndpoint.getJsonObj(item);
            })
          : undefined,
        "connector": obj.connector
          ? model.CloudDbSystemDiscoveryConnector.getJsonObj(obj.connector)
          : undefined
      }
    };

    return jsonObj;
  }
  export const componentType = "LISTENER";
  export function getDeserializedJsonObj(
    obj: DiscoveredCloudListener,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredCloudDbSystemComponent.getDeserializedJsonObj(
            obj
          ) as DiscoveredCloudListener)),
      ...{
        "endpoints": obj.endpoints
          ? obj.endpoints.map(item => {
              return model.CloudListenerEndpoint.getDeserializedJsonObj(item);
            })
          : undefined,
        "connector": obj.connector
          ? model.CloudDbSystemDiscoveryConnector.getDeserializedJsonObj(obj.connector)
          : undefined
      }
    };

    return jsonObj;
  }
}
