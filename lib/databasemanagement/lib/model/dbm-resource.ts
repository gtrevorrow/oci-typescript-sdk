/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The base Exadata resource.
 */
export interface DbmResource {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata resource.
   */
  "id": string;
  /**
   * The name of the Exadata resource. English letters, numbers, \"-\", \"_\" and \".\" only.
   */
  "displayName": string;
  /**
   * The version of the Exadata resource.
   */
  "version"?: string;
  /**
   * The internal ID of the Exadata resource.
   */
  "internalId"?: string;
  /**
   * The status of the Exadata resource.
   */
  "status"?: string;
  /**
   * The current lifecycle state of the database resource.
   */
  "lifecycleState"?: DbmResource.LifecycleState;
  /**
   * The timestamp of the creation of the Exadata resource.
   */
  "timeCreated"?: Date;
  /**
   * The timestamp of the last update of the Exadata resource.
   */
  "timeUpdated"?: Date;
  /**
   * The details of the lifecycle state of the Exadata resource.
   */
  "lifecycleDetails"?: string;
  /**
   * The additional details of the resource defined in {@code {\"key\": \"value\"}} format.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "additionalDetails"?: { [key: string]: string };

  "resourceType": string;
}

export namespace DbmResource {
  export enum LifecycleState {
    Creating = "CREATING",
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Updating = "UPDATING",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DbmResource): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "resourceType" in obj && obj.resourceType) {
      switch (obj.resourceType) {
        case "STORAGE_CONNECTOR":
          return model.ExternalExadataStorageConnector.getJsonObj(
            <model.ExternalExadataStorageConnector>(<object>jsonObj),
            true
          );
        case "STORAGE_GRID_SUMMARY":
          return model.ExternalExadataStorageGridSummary.getJsonObj(
            <model.ExternalExadataStorageGridSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_SERVER":
          return model.ExternalExadataStorageServer.getJsonObj(
            <model.ExternalExadataStorageServer>(<object>jsonObj),
            true
          );
        case "INFRASTRUCTURE":
          return model.ExternalExadataInfrastructure.getJsonObj(
            <model.ExternalExadataInfrastructure>(<object>jsonObj),
            true
          );
        case "STORAGE_GRID":
          return model.ExternalExadataStorageGrid.getJsonObj(
            <model.ExternalExadataStorageGrid>(<object>jsonObj),
            true
          );
        case "INFRASTRUCTURE_SUMMARY":
          return model.ExternalExadataInfrastructureSummary.getJsonObj(
            <model.ExternalExadataInfrastructureSummary>(<object>jsonObj),
            true
          );
        case "DATABASE_SYSTEM_SUMMARY":
          return model.ExternalExadataDatabaseSystemSummary.getJsonObj(
            <model.ExternalExadataDatabaseSystemSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_CONNECTOR_SUMMARY":
          return model.ExternalExadataStorageConnectorSummary.getJsonObj(
            <model.ExternalExadataStorageConnectorSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_SERVER_SUMMARY":
          return model.ExternalExadataStorageServerSummary.getJsonObj(
            <model.ExternalExadataStorageServerSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.resourceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DbmResource): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "resourceType" in obj && obj.resourceType) {
      switch (obj.resourceType) {
        case "STORAGE_CONNECTOR":
          return model.ExternalExadataStorageConnector.getDeserializedJsonObj(
            <model.ExternalExadataStorageConnector>(<object>jsonObj),
            true
          );
        case "STORAGE_GRID_SUMMARY":
          return model.ExternalExadataStorageGridSummary.getDeserializedJsonObj(
            <model.ExternalExadataStorageGridSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_SERVER":
          return model.ExternalExadataStorageServer.getDeserializedJsonObj(
            <model.ExternalExadataStorageServer>(<object>jsonObj),
            true
          );
        case "INFRASTRUCTURE":
          return model.ExternalExadataInfrastructure.getDeserializedJsonObj(
            <model.ExternalExadataInfrastructure>(<object>jsonObj),
            true
          );
        case "STORAGE_GRID":
          return model.ExternalExadataStorageGrid.getDeserializedJsonObj(
            <model.ExternalExadataStorageGrid>(<object>jsonObj),
            true
          );
        case "INFRASTRUCTURE_SUMMARY":
          return model.ExternalExadataInfrastructureSummary.getDeserializedJsonObj(
            <model.ExternalExadataInfrastructureSummary>(<object>jsonObj),
            true
          );
        case "DATABASE_SYSTEM_SUMMARY":
          return model.ExternalExadataDatabaseSystemSummary.getDeserializedJsonObj(
            <model.ExternalExadataDatabaseSystemSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_CONNECTOR_SUMMARY":
          return model.ExternalExadataStorageConnectorSummary.getDeserializedJsonObj(
            <model.ExternalExadataStorageConnectorSummary>(<object>jsonObj),
            true
          );
        case "STORAGE_SERVER_SUMMARY":
          return model.ExternalExadataStorageServerSummary.getDeserializedJsonObj(
            <model.ExternalExadataStorageServerSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.resourceType}`);
      }
    }
    return jsonObj;
  }
}
