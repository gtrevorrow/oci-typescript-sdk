/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The database HA and backup details.
 */
export interface DatabaseHaBackupDetails {
  /**
   * Indicates whether flashback is enabled for the database.
   */
  "flashBackOn"?: string;
  /**
   * The oldest flashback date and time in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
   */
  "flashBackTime"?: Date;
  /**
   * The configured number of days intended to recover a protected database from a backup. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "recoveryWindowGoalInDays"?: number;
  "lastFullBackupSummary"?: model.DatabaseBackupSummary;
  /**
   * A list of database backups.
   */
  "backupHistory"?: Array<model.DatabaseBackupSummary>;
  /**
   * A list of database backup metrics such as BackupSize and BackupDuration.
   */
  "metrics"?: Array<model.HaMetricDefinition>;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Managed Database.
   */
  "dbId": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where the Managed Database resides.
   */
  "compartmentId": string;
  /**
   * The type of Oracle Database installation.
   */
  "databaseType": model.DatabaseType;
  /**
   * The subtype of the Oracle Database. Indicates whether the database is a Container Database,
   * Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
   *
   */
  "databaseSubType": model.DatabaseSubType;
  /**
   * The infrastructure used to deploy the Oracle Database.
   */
  "deploymentType": model.DeploymentType;
  /**
   * The Oracle Database version.
   */
  "databaseVersion"?: string;
  /**
   * The workload type of the Autonomous Database.
   */
  "workloadType"?: model.WorkloadType;
  /**
   * The display name of the Managed Database.
   */
  "databaseName": string;
  /**
   * The database ID of the Managed Database. Every database had its own ID and that value is captured here.
   */
  "databaseId"?: string;
  /**
   * The database unique name of the Managed Database.
   */
  "dbUniqueName"?: string;
  /**
   * The database role of the Managed Database.
   */
  "dbRole": model.DbRole;
}

export namespace DatabaseHaBackupDetails {
  export function getJsonObj(obj: DatabaseHaBackupDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "lastFullBackupSummary": obj.lastFullBackupSummary
          ? model.DatabaseBackupSummary.getJsonObj(obj.lastFullBackupSummary)
          : undefined,
        "backupHistory": obj.backupHistory
          ? obj.backupHistory.map(item => {
              return model.DatabaseBackupSummary.getJsonObj(item);
            })
          : undefined,
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.HaMetricDefinition.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DatabaseHaBackupDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "lastFullBackupSummary": obj.lastFullBackupSummary
          ? model.DatabaseBackupSummary.getDeserializedJsonObj(obj.lastFullBackupSummary)
          : undefined,
        "backupHistory": obj.backupHistory
          ? obj.backupHistory.map(item => {
              return model.DatabaseBackupSummary.getDeserializedJsonObj(item);
            })
          : undefined,
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.HaMetricDefinition.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
