/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The credential to connect to the database to perform Sql tuning set administration tasks.
 */
export interface SqlTuningSetAdminCredentialDetails {
  /**
   * The user to connect to the database.
   */
  "username": string;
  /**
   * The role of the database user.
   */
  "role": SqlTuningSetAdminCredentialDetails.Role;

  "sqlTuningSetAdminCredentialType": string;
}

export namespace SqlTuningSetAdminCredentialDetails {
  export enum Role {
    Normal = "NORMAL",
    Sysdba = "SYSDBA"
  }

  export function getJsonObj(obj: SqlTuningSetAdminCredentialDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sqlTuningSetAdminCredentialType" in obj && obj.sqlTuningSetAdminCredentialType) {
      switch (obj.sqlTuningSetAdminCredentialType) {
        case "PASSWORD":
          return model.SqlTuningSetAdminPasswordCredentialDetails.getJsonObj(
            <model.SqlTuningSetAdminPasswordCredentialDetails>(<object>jsonObj),
            true
          );
        case "SECRET":
          return model.SqlTuningSetAdminSecretCredentialDetails.getJsonObj(
            <model.SqlTuningSetAdminSecretCredentialDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.sqlTuningSetAdminCredentialType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SqlTuningSetAdminCredentialDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sqlTuningSetAdminCredentialType" in obj && obj.sqlTuningSetAdminCredentialType) {
      switch (obj.sqlTuningSetAdminCredentialType) {
        case "PASSWORD":
          return model.SqlTuningSetAdminPasswordCredentialDetails.getDeserializedJsonObj(
            <model.SqlTuningSetAdminPasswordCredentialDetails>(<object>jsonObj),
            true
          );
        case "SECRET":
          return model.SqlTuningSetAdminSecretCredentialDetails.getDeserializedJsonObj(
            <model.SqlTuningSetAdminSecretCredentialDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.sqlTuningSetAdminCredentialType}`);
      }
    }
    return jsonObj;
  }
}
