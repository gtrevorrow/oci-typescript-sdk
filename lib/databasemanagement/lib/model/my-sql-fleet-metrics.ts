/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of the MySQL Database fleet health metrics.
 */
export interface MySqlFleetMetrics {
  /**
   * The beginning of the time range during which metric data is retrieved.
   */
  "startTime": string;
  /**
   * The end of the time range during which metric data is retrieved.
   */
  "endTime": string;
  /**
   * The list of MySQL Databases in the fleet and their usage metrics.
   */
  "fleetDatabases": Array<model.MySqlDatabaseUsageMetrics>;
  /**
   * A summary of the inventory count and the metrics that describe the aggregated usage of CPU, storage, and so on of all the MySQL Databases in the fleet.
   */
  "fleetSummary": Array<model.MySqlFleetSummary>;
}

export namespace MySqlFleetMetrics {
  export function getJsonObj(obj: MySqlFleetMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "fleetDatabases": obj.fleetDatabases
          ? obj.fleetDatabases.map(item => {
              return model.MySqlDatabaseUsageMetrics.getJsonObj(item);
            })
          : undefined,
        "fleetSummary": obj.fleetSummary
          ? obj.fleetSummary.map(item => {
              return model.MySqlFleetSummary.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MySqlFleetMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "fleetDatabases": obj.fleetDatabases
          ? obj.fleetDatabases.map(item => {
              return model.MySqlDatabaseUsageMetrics.getDeserializedJsonObj(item);
            })
          : undefined,
        "fleetSummary": obj.fleetSummary
          ? obj.fleetSummary.map(item => {
              return model.MySqlFleetSummary.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
