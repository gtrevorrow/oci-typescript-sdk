/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The credential used to connect to the Managed Database and obtain the details of the optimizer statistics tasks.
 */
export interface ManagedDatabaseCredential {
  /**
   * The user name used to connect to the database.
   */
  "username": string;
  /**
   * The role of the database user.
   */
  "role": ManagedDatabaseCredential.Role;

  "credentialType": string;
}

export namespace ManagedDatabaseCredential {
  export enum Role {
    Normal = "NORMAL",
    Sysdba = "SYSDBA"
  }

  export function getJsonObj(obj: ManagedDatabaseCredential): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "credentialType" in obj && obj.credentialType) {
      switch (obj.credentialType) {
        case "PASSWORD":
          return model.ManagedDatabasePasswordCredential.getJsonObj(
            <model.ManagedDatabasePasswordCredential>(<object>jsonObj),
            true
          );
        case "SECRET":
          return model.ManagedDatabaseSecretCredential.getJsonObj(
            <model.ManagedDatabaseSecretCredential>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.credentialType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ManagedDatabaseCredential): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "credentialType" in obj && obj.credentialType) {
      switch (obj.credentialType) {
        case "PASSWORD":
          return model.ManagedDatabasePasswordCredential.getDeserializedJsonObj(
            <model.ManagedDatabasePasswordCredential>(<object>jsonObj),
            true
          );
        case "SECRET":
          return model.ManagedDatabaseSecretCredential.getDeserializedJsonObj(
            <model.ManagedDatabaseSecretCredential>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.credentialType}`);
      }
    }
    return jsonObj;
  }
}
