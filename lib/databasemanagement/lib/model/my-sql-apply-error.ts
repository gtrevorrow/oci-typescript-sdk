/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Error from the apply operation of a MySQL server replication channel.
 */
export interface MySqlApplyError {
  /**
   * The error number of the most recent error that caused the SQL or coordinator thread to stop. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "lastErrorNumber"?: number;
  /**
   * The error message of the most recent error that caused the SQL or coordinator thread to stop.
   */
  "lastErrorMessage"?: string;
  /**
   * The timestamp when the most recent SQL or coordinator error occurred.
   */
  "timeLastError"?: Date;
  /**
   * A list of MySqlApplyErrorWorker records.
   */
  "workerErrors"?: Array<model.MySqlApplyErrorWorker>;
}

export namespace MySqlApplyError {
  export function getJsonObj(obj: MySqlApplyError): object {
    const jsonObj = {
      ...obj,
      ...{
        "workerErrors": obj.workerErrors
          ? obj.workerErrors.map(item => {
              return model.MySqlApplyErrorWorker.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MySqlApplyError): object {
    const jsonObj = {
      ...obj,
      ...{
        "workerErrors": obj.workerErrors
          ? obj.workerErrors.map(item => {
              return model.MySqlApplyErrorWorker.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
