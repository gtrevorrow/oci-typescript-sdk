/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of the SQL job.
 */
export interface SqlJob extends model.Job {
  /**
   * The type of SQL. This is a mandatory field for the EXECUTE_SQL operationType.
   */
  "sqlType"?: SqlJob.SqlType;
  /**
   * The SQL text to be executed in the job. This is a mandatory field for the EXECUTE_SQL operationType.
   */
  "sqlText"?: string;
  "inBinds"?: model.JobInBindsDetails;
  "outBinds"?: model.JobOutBindsDetails;
  /**
   * The SQL operation type.
   */
  "operationType": SqlJob.OperationType;
  /**
   * The database user name used to execute the SQL job. If the job is being executed on a Managed Database Group,
   * then the user name should exist on all the databases in the group with the same password.
   *
   */
  "userName"?: string;
  /**
   * The role of the database user. Indicates whether the database user is a normal user or sysdba.
   */
  "role"?: SqlJob.Role;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Named Credentials containing password secret.
   */
  "namedCredentialId"?: string;
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Department\": \"Finance\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
    * System tags for this resource. Each key is predefined and scoped to a namespace.
* For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* System tags can be viewed by users, but can only be created by the system.
* <p>
Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
* 
    */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "jobType": string;
}

export namespace SqlJob {
  export enum SqlType {
    Query = "QUERY",
    Dml = "DML",
    Ddl = "DDL",
    Plsql = "PLSQL",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum OperationType {
    ExecuteSql = "EXECUTE_SQL",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Role {
    Normal = "NORMAL",
    Sysdba = "SYSDBA",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: SqlJob, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Job.getJsonObj(obj) as SqlJob)),
      ...{
        "inBinds": obj.inBinds ? model.JobInBindsDetails.getJsonObj(obj.inBinds) : undefined,
        "outBinds": obj.outBinds ? model.JobOutBindsDetails.getJsonObj(obj.outBinds) : undefined
      }
    };

    return jsonObj;
  }
  export const jobType = "SQL";
  export function getDeserializedJsonObj(obj: SqlJob, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Job.getDeserializedJsonObj(obj) as SqlJob)),
      ...{
        "inBinds": obj.inBinds
          ? model.JobInBindsDetails.getDeserializedJsonObj(obj.inBinds)
          : undefined,
        "outBinds": obj.outBinds
          ? model.JobOutBindsDetails.getDeserializedJsonObj(obj.outBinds)
          : undefined
      }
    };

    return jsonObj;
  }
}
