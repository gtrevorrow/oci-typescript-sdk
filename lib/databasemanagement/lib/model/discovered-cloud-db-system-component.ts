/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of a cloud DB system component.
 */
export interface DiscoveredCloudDbSystemComponent {
  /**
   * The identifier of the discovered DB system component.
   */
  "componentId": string;
  /**
   * The user-friendly name for the discovered DB system component. The name does not have to be unique.
   */
  "displayName": string;
  /**
   * The name of the discovered DB system component.
   */
  "componentName": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing OCI resource matching the discovered DB system component.
   */
  "resourceId"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Dbaas OCI resource matching the discovered DB system component.
   */
  "dbaasId"?: string;
  /**
   * Indicates whether the DB system component should be provisioned as an OCI resource or not.
   */
  "isSelectedForMonitoring"?: boolean;
  /**
   * The state of the discovered DB system component.
   */
  "status"?: DiscoveredCloudDbSystemComponent.Status;
  /**
   * The list of associated components.
   */
  "associatedComponents"?: Array<model.AssociatedCloudComponent>;

  "componentType": string;
}

export namespace DiscoveredCloudDbSystemComponent {
  export enum Status {
    New = "NEW",
    Existing = "EXISTING",
    ExistingBasic = "EXISTING_BASIC",
    ExistingPe = "EXISTING_PE",
    ExistingBasicPe = "EXISTING_BASIC_PE",
    MarkedForUpgrade = "MARKED_FOR_UPGRADE",
    MarkedForMigration = "MARKED_FOR_MIGRATION",
    MarkedForUpgradeMigration = "MARKED_FOR_UPGRADE_MIGRATION",
    MarkedForDeletion = "MARKED_FOR_DELETION",
    Unknown = "UNKNOWN",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DiscoveredCloudDbSystemComponent): object {
    const jsonObj = {
      ...obj,
      ...{
        "associatedComponents": obj.associatedComponents
          ? obj.associatedComponents.map(item => {
              return model.AssociatedCloudComponent.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "componentType" in obj && obj.componentType) {
      switch (obj.componentType) {
        case "CLUSTER_INSTANCE":
          return model.DiscoveredCloudClusterInstance.getJsonObj(
            <model.DiscoveredCloudClusterInstance>(<object>jsonObj),
            true
          );
        case "PLUGGABLE_DATABASE":
          return model.DiscoveredCloudPluggableDatabase.getJsonObj(
            <model.DiscoveredCloudPluggableDatabase>(<object>jsonObj),
            true
          );
        case "CLUSTER":
          return model.DiscoveredCloudCluster.getJsonObj(
            <model.DiscoveredCloudCluster>(<object>jsonObj),
            true
          );
        case "ASM":
          return model.DiscoveredCloudAsm.getJsonObj(
            <model.DiscoveredCloudAsm>(<object>jsonObj),
            true
          );
        case "LISTENER":
          return model.DiscoveredCloudListener.getJsonObj(
            <model.DiscoveredCloudListener>(<object>jsonObj),
            true
          );
        case "DATABASE_INSTANCE":
          return model.DiscoveredCloudDbInstance.getJsonObj(
            <model.DiscoveredCloudDbInstance>(<object>jsonObj),
            true
          );
        case "DATABASE":
          return model.DiscoveredCloudDatabase.getJsonObj(
            <model.DiscoveredCloudDatabase>(<object>jsonObj),
            true
          );
        case "DATABASE_HOME":
          return model.DiscoveredCloudDbHome.getJsonObj(
            <model.DiscoveredCloudDbHome>(<object>jsonObj),
            true
          );
        case "DATABASE_NODE":
          return model.DiscoveredCloudDbNode.getJsonObj(
            <model.DiscoveredCloudDbNode>(<object>jsonObj),
            true
          );
        case "ASM_INSTANCE":
          return model.DiscoveredCloudAsmInstance.getJsonObj(
            <model.DiscoveredCloudAsmInstance>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DiscoveredCloudDbSystemComponent): object {
    const jsonObj = {
      ...obj,
      ...{
        "associatedComponents": obj.associatedComponents
          ? obj.associatedComponents.map(item => {
              return model.AssociatedCloudComponent.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "componentType" in obj && obj.componentType) {
      switch (obj.componentType) {
        case "CLUSTER_INSTANCE":
          return model.DiscoveredCloudClusterInstance.getDeserializedJsonObj(
            <model.DiscoveredCloudClusterInstance>(<object>jsonObj),
            true
          );
        case "PLUGGABLE_DATABASE":
          return model.DiscoveredCloudPluggableDatabase.getDeserializedJsonObj(
            <model.DiscoveredCloudPluggableDatabase>(<object>jsonObj),
            true
          );
        case "CLUSTER":
          return model.DiscoveredCloudCluster.getDeserializedJsonObj(
            <model.DiscoveredCloudCluster>(<object>jsonObj),
            true
          );
        case "ASM":
          return model.DiscoveredCloudAsm.getDeserializedJsonObj(
            <model.DiscoveredCloudAsm>(<object>jsonObj),
            true
          );
        case "LISTENER":
          return model.DiscoveredCloudListener.getDeserializedJsonObj(
            <model.DiscoveredCloudListener>(<object>jsonObj),
            true
          );
        case "DATABASE_INSTANCE":
          return model.DiscoveredCloudDbInstance.getDeserializedJsonObj(
            <model.DiscoveredCloudDbInstance>(<object>jsonObj),
            true
          );
        case "DATABASE":
          return model.DiscoveredCloudDatabase.getDeserializedJsonObj(
            <model.DiscoveredCloudDatabase>(<object>jsonObj),
            true
          );
        case "DATABASE_HOME":
          return model.DiscoveredCloudDbHome.getDeserializedJsonObj(
            <model.DiscoveredCloudDbHome>(<object>jsonObj),
            true
          );
        case "DATABASE_NODE":
          return model.DiscoveredCloudDbNode.getDeserializedJsonObj(
            <model.DiscoveredCloudDbNode>(<object>jsonObj),
            true
          );
        case "ASM_INSTANCE":
          return model.DiscoveredCloudAsmInstance.getDeserializedJsonObj(
            <model.DiscoveredCloudAsmInstance>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
      }
    }
    return jsonObj;
  }
}
