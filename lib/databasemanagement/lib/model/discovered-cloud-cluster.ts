/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of a cloud cluster discovered in a cloud DB system discovery run.
 */
export interface DiscoveredCloudCluster extends model.DiscoveredCloudDbSystemComponent {
  /**
   * The directory in which Oracle Grid Infrastructure is installed.
   */
  "gridHome"?: string;
  /**
   * The version of Oracle Clusterware running in the cluster.
   */
  "version"?: string;
  /**
   * Indicates whether the cluster is an Oracle Flex Cluster or not.
   */
  "isFlexCluster"?: boolean;
  /**
   * The list of network address configurations of the cloud cluster.
   */
  "networkConfigurations"?: Array<model.CloudClusterNetworkConfiguration>;
  /**
   * The list of Virtual IP (VIP) configurations of the cloud cluster.
   */
  "vipConfigurations"?: Array<model.CloudClusterVipConfiguration>;
  /**
   * The list of Single Client Access Name (SCAN) configurations of the cloud cluster.
   */
  "scanConfigurations"?: Array<model.CloudClusterScanListenerConfiguration>;
  /**
   * The location of the Oracle Cluster Registry (OCR) file.
   */
  "ocrFileLocation"?: string;
  /**
   * The list of cluster instances for the cloud cluster.
   */
  "clusterInstances"?: Array<model.DiscoveredCloudClusterInstance>;

  "componentType": string;
}

export namespace DiscoveredCloudCluster {
  export function getJsonObj(obj: DiscoveredCloudCluster, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredCloudDbSystemComponent.getJsonObj(obj) as DiscoveredCloudCluster)),
      ...{
        "networkConfigurations": obj.networkConfigurations
          ? obj.networkConfigurations.map(item => {
              return model.CloudClusterNetworkConfiguration.getJsonObj(item);
            })
          : undefined,
        "vipConfigurations": obj.vipConfigurations
          ? obj.vipConfigurations.map(item => {
              return model.CloudClusterVipConfiguration.getJsonObj(item);
            })
          : undefined,
        "scanConfigurations": obj.scanConfigurations
          ? obj.scanConfigurations.map(item => {
              return model.CloudClusterScanListenerConfiguration.getJsonObj(item);
            })
          : undefined,

        "clusterInstances": obj.clusterInstances
          ? obj.clusterInstances.map(item => {
              return model.DiscoveredCloudClusterInstance.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const componentType = "CLUSTER";
  export function getDeserializedJsonObj(
    obj: DiscoveredCloudCluster,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredCloudDbSystemComponent.getDeserializedJsonObj(
            obj
          ) as DiscoveredCloudCluster)),
      ...{
        "networkConfigurations": obj.networkConfigurations
          ? obj.networkConfigurations.map(item => {
              return model.CloudClusterNetworkConfiguration.getDeserializedJsonObj(item);
            })
          : undefined,
        "vipConfigurations": obj.vipConfigurations
          ? obj.vipConfigurations.map(item => {
              return model.CloudClusterVipConfiguration.getDeserializedJsonObj(item);
            })
          : undefined,
        "scanConfigurations": obj.scanConfigurations
          ? obj.scanConfigurations.map(item => {
              return model.CloudClusterScanListenerConfiguration.getDeserializedJsonObj(item);
            })
          : undefined,

        "clusterInstances": obj.clusterInstances
          ? obj.clusterInstances.map(item => {
              return model.DiscoveredCloudClusterInstance.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
