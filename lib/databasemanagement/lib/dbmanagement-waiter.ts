/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DbManagementClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DbManagementWaiter {
  public constructor(
    private client: DbManagementClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forCloudAsm till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudAsmResponse | null (null in case of 404 response)
   */
  public async forCloudAsm(
    request: serviceRequests.GetCloudAsmRequest,
    ...targetStates: models.CloudAsm.LifecycleState[]
  ): Promise<serviceResponses.GetCloudAsmResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudAsm(request),
      response => targetStates.includes(response.cloudAsm.lifecycleState!),
      targetStates.includes(models.CloudAsm.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudAsmInstance till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudAsmInstanceResponse | null (null in case of 404 response)
   */
  public async forCloudAsmInstance(
    request: serviceRequests.GetCloudAsmInstanceRequest,
    ...targetStates: models.CloudAsmInstance.LifecycleState[]
  ): Promise<serviceResponses.GetCloudAsmInstanceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudAsmInstance(request),
      response => targetStates.includes(response.cloudAsmInstance.lifecycleState!),
      targetStates.includes(models.CloudAsmInstance.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudClusterResponse | null (null in case of 404 response)
   */
  public async forCloudCluster(
    request: serviceRequests.GetCloudClusterRequest,
    ...targetStates: models.CloudCluster.LifecycleState[]
  ): Promise<serviceResponses.GetCloudClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudCluster(request),
      response => targetStates.includes(response.cloudCluster.lifecycleState!),
      targetStates.includes(models.CloudCluster.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudClusterInstance till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudClusterInstanceResponse | null (null in case of 404 response)
   */
  public async forCloudClusterInstance(
    request: serviceRequests.GetCloudClusterInstanceRequest,
    ...targetStates: models.CloudClusterInstance.LifecycleState[]
  ): Promise<serviceResponses.GetCloudClusterInstanceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudClusterInstance(request),
      response => targetStates.includes(response.cloudClusterInstance.lifecycleState!),
      targetStates.includes(models.CloudClusterInstance.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudDbHome till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudDbHomeResponse | null (null in case of 404 response)
   */
  public async forCloudDbHome(
    request: serviceRequests.GetCloudDbHomeRequest,
    ...targetStates: models.CloudDbHome.LifecycleState[]
  ): Promise<serviceResponses.GetCloudDbHomeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudDbHome(request),
      response => targetStates.includes(response.cloudDbHome.lifecycleState!),
      targetStates.includes(models.CloudDbHome.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudDbNode till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudDbNodeResponse | null (null in case of 404 response)
   */
  public async forCloudDbNode(
    request: serviceRequests.GetCloudDbNodeRequest,
    ...targetStates: models.CloudDbNode.LifecycleState[]
  ): Promise<serviceResponses.GetCloudDbNodeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudDbNode(request),
      response => targetStates.includes(response.cloudDbNode.lifecycleState!),
      targetStates.includes(models.CloudDbNode.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudDbSystem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudDbSystemResponse | null (null in case of 404 response)
   */
  public async forCloudDbSystem(
    request: serviceRequests.GetCloudDbSystemRequest,
    ...targetStates: models.CloudDbSystem.LifecycleState[]
  ): Promise<serviceResponses.GetCloudDbSystemResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudDbSystem(request),
      response => targetStates.includes(response.cloudDbSystem.lifecycleState!),
      targetStates.includes(models.CloudDbSystem.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudDbSystemConnector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudDbSystemConnectorResponse | null (null in case of 404 response)
   */
  public async forCloudDbSystemConnector(
    request: serviceRequests.GetCloudDbSystemConnectorRequest,
    ...targetStates: models.CloudDbSystemConnector.LifecycleState[]
  ): Promise<serviceResponses.GetCloudDbSystemConnectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudDbSystemConnector(request),
      response => targetStates.includes(response.cloudDbSystemConnector.lifecycleState!),
      targetStates.includes(models.CloudDbSystemConnector.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudDbSystemDiscovery till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudDbSystemDiscoveryResponse | null (null in case of 404 response)
   */
  public async forCloudDbSystemDiscovery(
    request: serviceRequests.GetCloudDbSystemDiscoveryRequest,
    ...targetStates: models.CloudDbSystemDiscovery.LifecycleState[]
  ): Promise<serviceResponses.GetCloudDbSystemDiscoveryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudDbSystemDiscovery(request),
      response => targetStates.includes(response.cloudDbSystemDiscovery.lifecycleState!),
      targetStates.includes(models.CloudDbSystemDiscovery.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudListener till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudListenerResponse | null (null in case of 404 response)
   */
  public async forCloudListener(
    request: serviceRequests.GetCloudListenerRequest,
    ...targetStates: models.CloudListener.LifecycleState[]
  ): Promise<serviceResponses.GetCloudListenerResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudListener(request),
      response => targetStates.includes(response.cloudListener.lifecycleState!),
      targetStates.includes(models.CloudListener.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDbManagementPrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbManagementPrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forDbManagementPrivateEndpoint(
    request: serviceRequests.GetDbManagementPrivateEndpointRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetDbManagementPrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbManagementPrivateEndpoint(request),
      response => targetStates.includes(response.dbManagementPrivateEndpoint.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forExternalAsm till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalAsmResponse | null (null in case of 404 response)
   */
  public async forExternalAsm(
    request: serviceRequests.GetExternalAsmRequest,
    ...targetStates: models.ExternalAsm.LifecycleState[]
  ): Promise<serviceResponses.GetExternalAsmResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalAsm(request),
      response => targetStates.includes(response.externalAsm.lifecycleState!),
      targetStates.includes(models.ExternalAsm.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalAsmInstance till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalAsmInstanceResponse | null (null in case of 404 response)
   */
  public async forExternalAsmInstance(
    request: serviceRequests.GetExternalAsmInstanceRequest,
    ...targetStates: models.ExternalAsmInstance.LifecycleState[]
  ): Promise<serviceResponses.GetExternalAsmInstanceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalAsmInstance(request),
      response => targetStates.includes(response.externalAsmInstance.lifecycleState!),
      targetStates.includes(models.ExternalAsmInstance.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalClusterResponse | null (null in case of 404 response)
   */
  public async forExternalCluster(
    request: serviceRequests.GetExternalClusterRequest,
    ...targetStates: models.ExternalCluster.LifecycleState[]
  ): Promise<serviceResponses.GetExternalClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalCluster(request),
      response => targetStates.includes(response.externalCluster.lifecycleState!),
      targetStates.includes(models.ExternalCluster.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalClusterInstance till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalClusterInstanceResponse | null (null in case of 404 response)
   */
  public async forExternalClusterInstance(
    request: serviceRequests.GetExternalClusterInstanceRequest,
    ...targetStates: models.ExternalClusterInstance.LifecycleState[]
  ): Promise<serviceResponses.GetExternalClusterInstanceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalClusterInstance(request),
      response => targetStates.includes(response.externalClusterInstance.lifecycleState!),
      targetStates.includes(models.ExternalClusterInstance.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalDbHome till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDbHomeResponse | null (null in case of 404 response)
   */
  public async forExternalDbHome(
    request: serviceRequests.GetExternalDbHomeRequest,
    ...targetStates: models.ExternalDbHome.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDbHomeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDbHome(request),
      response => targetStates.includes(response.externalDbHome.lifecycleState!),
      targetStates.includes(models.ExternalDbHome.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalDbNode till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDbNodeResponse | null (null in case of 404 response)
   */
  public async forExternalDbNode(
    request: serviceRequests.GetExternalDbNodeRequest,
    ...targetStates: models.ExternalDbNode.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDbNodeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDbNode(request),
      response => targetStates.includes(response.externalDbNode.lifecycleState!),
      targetStates.includes(models.ExternalDbNode.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalDbSystem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDbSystemResponse | null (null in case of 404 response)
   */
  public async forExternalDbSystem(
    request: serviceRequests.GetExternalDbSystemRequest,
    ...targetStates: models.ExternalDbSystem.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDbSystemResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDbSystem(request),
      response => targetStates.includes(response.externalDbSystem.lifecycleState!),
      targetStates.includes(models.ExternalDbSystem.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalDbSystemConnector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDbSystemConnectorResponse | null (null in case of 404 response)
   */
  public async forExternalDbSystemConnector(
    request: serviceRequests.GetExternalDbSystemConnectorRequest,
    ...targetStates: models.ExternalDbSystemConnector.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDbSystemConnectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDbSystemConnector(request),
      response => targetStates.includes(response.externalDbSystemConnector.lifecycleState!),
      targetStates.includes(models.ExternalDbSystemConnector.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalDbSystemDiscovery till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDbSystemDiscoveryResponse | null (null in case of 404 response)
   */
  public async forExternalDbSystemDiscovery(
    request: serviceRequests.GetExternalDbSystemDiscoveryRequest,
    ...targetStates: models.ExternalDbSystemDiscovery.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDbSystemDiscoveryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDbSystemDiscovery(request),
      response => targetStates.includes(response.externalDbSystemDiscovery.lifecycleState!),
      targetStates.includes(models.ExternalDbSystemDiscovery.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalListener till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalListenerResponse | null (null in case of 404 response)
   */
  public async forExternalListener(
    request: serviceRequests.GetExternalListenerRequest,
    ...targetStates: models.ExternalListener.LifecycleState[]
  ): Promise<serviceResponses.GetExternalListenerResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalListener(request),
      response => targetStates.includes(response.externalListener.lifecycleState!),
      targetStates.includes(models.ExternalListener.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExternalMySqlDatabaseConnector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalMySqlDatabaseConnectorResponse | null (null in case of 404 response)
   */
  public async forExternalMySqlDatabaseConnector(
    request: serviceRequests.GetExternalMySqlDatabaseConnectorRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetExternalMySqlDatabaseConnectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalMySqlDatabaseConnector(request),
      response => targetStates.includes(response.externalMySqlDatabaseConnector.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJobResponse
   */
  public async forJob(
    request: serviceRequests.GetJobRequest,
    ...targetStates: models.Job.LifecycleState[]
  ): Promise<serviceResponses.GetJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getJob(request),
      response => targetStates.includes(response.job.lifecycleState!)
    );
  }

  /**
   * Waits forManagedDatabaseGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetManagedDatabaseGroupResponse | null (null in case of 404 response)
   */
  public async forManagedDatabaseGroup(
    request: serviceRequests.GetManagedDatabaseGroupRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetManagedDatabaseGroupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getManagedDatabaseGroup(request),
      response => targetStates.includes(response.managedDatabaseGroup.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forNamedCredential till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetNamedCredentialResponse | null (null in case of 404 response)
   */
  public async forNamedCredential(
    request: serviceRequests.GetNamedCredentialRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetNamedCredentialResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getNamedCredential(request),
      response => targetStates.includes(response.namedCredential.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
