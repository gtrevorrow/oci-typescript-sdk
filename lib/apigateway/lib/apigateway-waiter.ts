/**
 * API Gateway API
 * API for the API Gateway service. Use this API to manage gateways, deployments, and related items.
For more information, see
[Overview of API Gateway](https://docs.oracle.com/iaas/Content/APIGateway/Concepts/apigatewayoverview.htm).

 * OpenAPI spec version: 20190501
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ApiGatewayClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class ApiGatewayWaiter {
  public constructor(
    private client: ApiGatewayClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forApi till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetApiResponse | null (null in case of 404 response)
   */
  public async forApi(
    request: serviceRequests.GetApiRequest,
    ...targetStates: models.Api.LifecycleState[]
  ): Promise<serviceResponses.GetApiResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getApi(request),
      response => targetStates.includes(response.api.lifecycleState!),
      targetStates.includes(models.Api.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCertificate till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCertificateResponse | null (null in case of 404 response)
   */
  public async forCertificate(
    request: serviceRequests.GetCertificateRequest,
    ...targetStates: models.Certificate.LifecycleState[]
  ): Promise<serviceResponses.GetCertificateResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCertificate(request),
      response => targetStates.includes(response.certificate.lifecycleState!),
      targetStates.includes(models.Certificate.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSdk till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSdkResponse | null (null in case of 404 response)
   */
  public async forSdk(
    request: serviceRequests.GetSdkRequest,
    ...targetStates: models.Sdk.LifecycleState[]
  ): Promise<serviceResponses.GetSdkResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSdk(request),
      response => targetStates.includes(response.sdk.lifecycleState!),
      targetStates.includes(models.Sdk.LifecycleState.Deleted)
    );
  }
}
