/**
 * API Gateway API
 * API for the API Gateway service. Use this API to manage gateways, deployments, and related items.
For more information, see
[Overview of API Gateway](/iaas/Content/APIGateway/Concepts/apigatewayoverview.htm).

 * OpenAPI spec version: 20190501
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Policy to specify OAuth2 flow configuration.
 *
 */
export interface OAuth2ResponseValidationFailurePolicy extends model.ValidationFailurePolicy {
  "clientDetails": model.CustomClientAppDetails | model.ValidationBlockClientAppDetails;
  "sourceUriDetails": model.DiscoveryUriSourceUriDetails | model.ValidationBlockSourceUriDetails;
  /**
   * List of scopes.
   */
  "scopes": Array<string>;
  /**
   * The duration for which the OAuth2 success token should be cached before it is
   * fetched again.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxExpiryDurationInHours"?: number;
  /**
   * Defines whether or not to use cookies for session maintenance.
   *
   */
  "useCookiesForSession"?: boolean;
  /**
   * Defines whether or not to use cookies for OAuth2 intermediate steps.
   *
   */
  "useCookiesForIntermediateSteps"?: boolean;
  /**
   * Defines whether or not to support PKCE.
   *
   */
  "usePkce"?: boolean;
  /**
   * Response Type.
   */
  "responseType": OAuth2ResponseValidationFailurePolicy.ResponseType;
  /**
   * The path to be used as fallback after OAuth2.
   */
  "fallbackRedirectPath"?: string;
  /**
   * The path to be used as logout.
   */
  "logoutPath"?: string;

  "type": string;
}

export namespace OAuth2ResponseValidationFailurePolicy {
  export enum ResponseType {
    Code = "CODE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(
    obj: OAuth2ResponseValidationFailurePolicy,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ValidationFailurePolicy.getJsonObj(obj) as OAuth2ResponseValidationFailurePolicy)),
      ...{
        "clientDetails": obj.clientDetails
          ? model.ClientAppDetails.getJsonObj(obj.clientDetails)
          : undefined,
        "sourceUriDetails": obj.sourceUriDetails
          ? model.SourceUriDetails.getJsonObj(obj.sourceUriDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export const type = "OAUTH2";
  export function getDeserializedJsonObj(
    obj: OAuth2ResponseValidationFailurePolicy,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ValidationFailurePolicy.getDeserializedJsonObj(
            obj
          ) as OAuth2ResponseValidationFailurePolicy)),
      ...{
        "clientDetails": obj.clientDetails
          ? model.ClientAppDetails.getDeserializedJsonObj(obj.clientDetails)
          : undefined,
        "sourceUriDetails": obj.sourceUriDetails
          ? model.SourceUriDetails.getDeserializedJsonObj(obj.sourceUriDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
