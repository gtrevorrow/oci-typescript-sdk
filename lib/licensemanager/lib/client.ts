/**
 * License Manager API
 * Use the License Manager API to manage product licenses and license records. For more information, see [License Manager Overview](/iaas/Content/LicenseManager/Concepts/licensemanageroverview.htm).
 * OpenAPI spec version: 20220430
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { LicenseManagerWaiter } from "./licensemanager-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum LicenseManagerApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class LicenseManagerClient {
  protected static serviceEndpointTemplate =
    "https://licensemanager.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": LicenseManagerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "LicenseManager";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("licensemanager")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("licensemanager");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220430";
    if (this.logger) this.logger.info(`LicenseManagerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        LicenseManagerClient.serviceEndpointTemplate,
        this._region,
        LicenseManagerClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        LicenseManagerClient.serviceEndpointTemplate,
        this._regionId,
        LicenseManagerClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      LicenseManagerClient.serviceEndpointTemplate,
      region,
      LicenseManagerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      LicenseManagerClient.serviceEndpointTemplate,
      regionId,
      LicenseManagerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new LicenseManagerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): LicenseManagerWaiter {
    this._waiters = new LicenseManagerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): LicenseManagerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Bulk upload the product licenses and license records for a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadLicenseRecordsRequest
   * @return BulkUploadLicenseRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/BulkUploadLicenseRecords.ts.html |here} to see how to use BulkUploadLicenseRecords API.
   */
  public async bulkUploadLicenseRecords(
    bulkUploadLicenseRecordsRequest: requests.BulkUploadLicenseRecordsRequest
  ): Promise<responses.BulkUploadLicenseRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#bulkUploadLicenseRecords.");
    const operationName = "bulkUploadLicenseRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkUploadLicenseRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadLicenseRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenses/actions/bulkUpload",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkUploadLicenseRecordsRequest.bulkUploadLicenseRecordsDetails,
        "BulkUploadLicenseRecordsDetails",
        model.BulkUploadLicenseRecordsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadLicenseRecordsResponse>{},
        body: await response.json(),
        bodyKey: "bulkUploadResponse",
        bodyModel: model.BulkUploadResponse,
        type: "model.BulkUploadResponse",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new license record for the given product license ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateLicenseRecordRequest
   * @return CreateLicenseRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/CreateLicenseRecord.ts.html |here} to see how to use CreateLicenseRecord API.
   */
  public async createLicenseRecord(
    createLicenseRecordRequest: requests.CreateLicenseRecordRequest
  ): Promise<responses.CreateLicenseRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#createLicenseRecord.");
    const operationName = "createLicenseRecord";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "productLicenseId": createLicenseRecordRequest.productLicenseId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createLicenseRecordRequest.opcRequestId,
      "opc-retry-token": createLicenseRecordRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLicenseRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseRecords",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLicenseRecordRequest.createLicenseRecordDetails,
        "CreateLicenseRecordDetails",
        model.CreateLicenseRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLicenseRecordResponse>{},
        body: await response.json(),
        bodyKey: "licenseRecord",
        bodyModel: model.LicenseRecord,
        type: "model.LicenseRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new product license.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProductLicenseRequest
   * @return CreateProductLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/CreateProductLicense.ts.html |here} to see how to use CreateProductLicense API.
   */
  public async createProductLicense(
    createProductLicenseRequest: requests.CreateProductLicenseRequest
  ): Promise<responses.CreateProductLicenseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#createProductLicense.");
    const operationName = "createProductLicense";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProductLicenseRequest.opcRequestId,
      "opc-retry-token": createProductLicenseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProductLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenses",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProductLicenseRequest.createProductLicenseDetails,
        "CreateProductLicenseDetails",
        model.CreateProductLicenseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProductLicenseResponse>{},
        body: await response.json(),
        bodyKey: "productLicense",
        bodyModel: model.ProductLicense,
        type: "model.ProductLicense",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a license record.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteLicenseRecordRequest
   * @return DeleteLicenseRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/DeleteLicenseRecord.ts.html |here} to see how to use DeleteLicenseRecord API.
   */
  public async deleteLicenseRecord(
    deleteLicenseRecordRequest: requests.DeleteLicenseRecordRequest
  ): Promise<responses.DeleteLicenseRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#deleteLicenseRecord.");
    const operationName = "deleteLicenseRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{licenseRecordId}": deleteLicenseRecordRequest.licenseRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteLicenseRecordRequest.opcRequestId,
      "if-match": deleteLicenseRecordRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLicenseRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseRecords/{licenseRecordId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLicenseRecordResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a product license.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProductLicenseRequest
   * @return DeleteProductLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/DeleteProductLicense.ts.html |here} to see how to use DeleteProductLicense API.
   */
  public async deleteProductLicense(
    deleteProductLicenseRequest: requests.DeleteProductLicenseRequest
  ): Promise<responses.DeleteProductLicenseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#deleteProductLicense.");
    const operationName = "deleteProductLicense";
    const apiReferenceLink = "";
    const pathParams = {
      "{productLicenseId}": deleteProductLicenseRequest.productLicenseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteProductLicenseRequest.opcRequestId,
      "if-match": deleteProductLicenseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProductLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenses/{productLicenseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProductLicenseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Provides the bulk upload file template.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBulkUploadTemplateRequest
   * @return GetBulkUploadTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetBulkUploadTemplate.ts.html |here} to see how to use GetBulkUploadTemplate API.
   */
  public async getBulkUploadTemplate(
    getBulkUploadTemplateRequest: requests.GetBulkUploadTemplateRequest
  ): Promise<responses.GetBulkUploadTemplateResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#getBulkUploadTemplate.");
    const operationName = "getBulkUploadTemplate";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBulkUploadTemplateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBulkUploadTemplateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenses/actions/bulkUploadTemplate",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBulkUploadTemplateResponse>{},
        body: await response.json(),
        bodyKey: "bulkUploadTemplate",
        bodyModel: model.BulkUploadTemplate,
        type: "model.BulkUploadTemplate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves configuration for a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConfigurationRequest
   * @return GetConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
   */
  public async getConfiguration(
    getConfigurationRequest: requests.GetConfigurationRequest
  ): Promise<responses.GetConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation LicenseManagerClient#getConfiguration.");
    const operationName = "getConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the license metrics for a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLicenseMetricRequest
   * @return GetLicenseMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetLicenseMetric.ts.html |here} to see how to use GetLicenseMetric API.
   */
  public async getLicenseMetric(
    getLicenseMetricRequest: requests.GetLicenseMetricRequest
  ): Promise<responses.GetLicenseMetricResponse> {
    if (this.logger) this.logger.debug("Calling operation LicenseManagerClient#getLicenseMetric.");
    const operationName = "getLicenseMetric";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getLicenseMetricRequest.compartmentId,
      "isCompartmentIdInSubtree": getLicenseMetricRequest.isCompartmentIdInSubtree
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLicenseMetricRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLicenseMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLicenseMetricResponse>{},
        body: await response.json(),
        bodyKey: "licenseMetric",
        bodyModel: model.LicenseMetric,
        type: "model.LicenseMetric",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves license record details by the license record ID in a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLicenseRecordRequest
   * @return GetLicenseRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetLicenseRecord.ts.html |here} to see how to use GetLicenseRecord API.
   */
  public async getLicenseRecord(
    getLicenseRecordRequest: requests.GetLicenseRecordRequest
  ): Promise<responses.GetLicenseRecordResponse> {
    if (this.logger) this.logger.debug("Calling operation LicenseManagerClient#getLicenseRecord.");
    const operationName = "getLicenseRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{licenseRecordId}": getLicenseRecordRequest.licenseRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLicenseRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLicenseRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseRecords/{licenseRecordId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLicenseRecordResponse>{},
        body: await response.json(),
        bodyKey: "licenseRecord",
        bodyModel: model.LicenseRecord,
        type: "model.LicenseRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves product license details by product license ID in a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProductLicenseRequest
   * @return GetProductLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetProductLicense.ts.html |here} to see how to use GetProductLicense API.
   */
  public async getProductLicense(
    getProductLicenseRequest: requests.GetProductLicenseRequest
  ): Promise<responses.GetProductLicenseResponse> {
    if (this.logger) this.logger.debug("Calling operation LicenseManagerClient#getProductLicense.");
    const operationName = "getProductLicense";
    const apiReferenceLink = "";
    const pathParams = {
      "{productLicenseId}": getProductLicenseRequest.productLicenseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProductLicenseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProductLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenses/{productLicenseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProductLicenseResponse>{},
        body: await response.json(),
        bodyKey: "productLicense",
        bodyModel: model.ProductLicense,
        type: "model.ProductLicense",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves all license records for a given product license ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLicenseRecordsRequest
   * @return ListLicenseRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListLicenseRecords.ts.html |here} to see how to use ListLicenseRecords API.
   */
  public async listLicenseRecords(
    listLicenseRecordsRequest: requests.ListLicenseRecordsRequest
  ): Promise<responses.ListLicenseRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#listLicenseRecords.");
    const operationName = "listLicenseRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listLicenseRecordsRequest.limit,
      "page": listLicenseRecordsRequest.page,
      "productLicenseId": listLicenseRecordsRequest.productLicenseId,
      "sortOrder": listLicenseRecordsRequest.sortOrder,
      "sortBy": listLicenseRecordsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLicenseRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLicenseRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLicenseRecordsResponse>{},
        body: await response.json(),
        bodyKey: "licenseRecordCollection",
        bodyModel: model.LicenseRecordCollection,
        type: "model.LicenseRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the product license consumers for a particular product license ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProductLicenseConsumersRequest
   * @return ListProductLicenseConsumersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListProductLicenseConsumers.ts.html |here} to see how to use ListProductLicenseConsumers API.
   */
  public async listProductLicenseConsumers(
    listProductLicenseConsumersRequest: requests.ListProductLicenseConsumersRequest
  ): Promise<responses.ListProductLicenseConsumersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#listProductLicenseConsumers.");
    const operationName = "listProductLicenseConsumers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listProductLicenseConsumersRequest.limit,
      "page": listProductLicenseConsumersRequest.page,
      "productLicenseId": listProductLicenseConsumersRequest.productLicenseId,
      "compartmentId": listProductLicenseConsumersRequest.compartmentId,
      "isCompartmentIdInSubtree": listProductLicenseConsumersRequest.isCompartmentIdInSubtree,
      "sortOrder": listProductLicenseConsumersRequest.sortOrder,
      "sortBy": listProductLicenseConsumersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProductLicenseConsumersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProductLicenseConsumersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenseConsumers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProductLicenseConsumersResponse>{},
        body: await response.json(),
        bodyKey: "productLicenseConsumerCollection",
        bodyModel: model.ProductLicenseConsumerCollection,
        type: "model.ProductLicenseConsumerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves all the product licenses from a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProductLicensesRequest
   * @return ListProductLicensesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListProductLicenses.ts.html |here} to see how to use ListProductLicenses API.
   */
  public async listProductLicenses(
    listProductLicensesRequest: requests.ListProductLicensesRequest
  ): Promise<responses.ListProductLicensesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#listProductLicenses.");
    const operationName = "listProductLicenses";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listProductLicensesRequest.limit,
      "page": listProductLicensesRequest.page,
      "compartmentId": listProductLicensesRequest.compartmentId,
      "isCompartmentIdInSubtree": listProductLicensesRequest.isCompartmentIdInSubtree,
      "sortOrder": listProductLicensesRequest.sortOrder,
      "sortBy": listProductLicensesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProductLicensesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProductLicensesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenses",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProductLicensesResponse>{},
        body: await response.json(),
        bodyKey: "productLicenseCollection",
        bodyModel: model.ProductLicenseCollection,
        type: "model.ProductLicenseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the top utilized product licenses for a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTopUtilizedProductLicensesRequest
   * @return ListTopUtilizedProductLicensesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListTopUtilizedProductLicenses.ts.html |here} to see how to use ListTopUtilizedProductLicenses API.
   */
  public async listTopUtilizedProductLicenses(
    listTopUtilizedProductLicensesRequest: requests.ListTopUtilizedProductLicensesRequest
  ): Promise<responses.ListTopUtilizedProductLicensesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#listTopUtilizedProductLicenses.");
    const operationName = "listTopUtilizedProductLicenses";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listTopUtilizedProductLicensesRequest.limit,
      "page": listTopUtilizedProductLicensesRequest.page,
      "compartmentId": listTopUtilizedProductLicensesRequest.compartmentId,
      "isCompartmentIdInSubtree": listTopUtilizedProductLicensesRequest.isCompartmentIdInSubtree,
      "sortOrder": listTopUtilizedProductLicensesRequest.sortOrder,
      "sortBy": listTopUtilizedProductLicensesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTopUtilizedProductLicensesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTopUtilizedProductLicensesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/topUtilizedProductLicenses",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTopUtilizedProductLicensesResponse>{},
        body: await response.json(),
        bodyKey: "topUtilizedProductLicenseCollection",
        bodyModel: model.TopUtilizedProductLicenseCollection,
        type: "model.TopUtilizedProductLicenseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the top utilized resources for a given compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTopUtilizedResourcesRequest
   * @return ListTopUtilizedResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListTopUtilizedResources.ts.html |here} to see how to use ListTopUtilizedResources API.
   */
  public async listTopUtilizedResources(
    listTopUtilizedResourcesRequest: requests.ListTopUtilizedResourcesRequest
  ): Promise<responses.ListTopUtilizedResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#listTopUtilizedResources.");
    const operationName = "listTopUtilizedResources";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": listTopUtilizedResourcesRequest.limit,
      "page": listTopUtilizedResourcesRequest.page,
      "compartmentId": listTopUtilizedResourcesRequest.compartmentId,
      "isCompartmentIdInSubtree": listTopUtilizedResourcesRequest.isCompartmentIdInSubtree,
      "resourceUnitType": listTopUtilizedResourcesRequest.resourceUnitType,
      "sortOrder": listTopUtilizedResourcesRequest.sortOrder,
      "sortBy": listTopUtilizedResourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTopUtilizedResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTopUtilizedResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/topUtilizedResources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTopUtilizedResourcesResponse>{},
        body: await response.json(),
        bodyKey: "topUtilizedResourceCollection",
        bodyModel: model.TopUtilizedResourceCollection,
        type: "model.TopUtilizedResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration for the compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConfigurationRequest
   * @return UpdateConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
   */
  public async updateConfiguration(
    updateConfigurationRequest: requests.UpdateConfigurationRequest
  ): Promise<responses.UpdateConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#updateConfiguration.");
    const operationName = "updateConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": updateConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConfigurationRequest.ifMatch,
      "opc-request-id": updateConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConfigurationRequest.updateConfigurationDetails,
        "UpdateConfigurationDetails",
        model.UpdateConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates license record entity details.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateLicenseRecordRequest
   * @return UpdateLicenseRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateLicenseRecord.ts.html |here} to see how to use UpdateLicenseRecord API.
   */
  public async updateLicenseRecord(
    updateLicenseRecordRequest: requests.UpdateLicenseRecordRequest
  ): Promise<responses.UpdateLicenseRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#updateLicenseRecord.");
    const operationName = "updateLicenseRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{licenseRecordId}": updateLicenseRecordRequest.licenseRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLicenseRecordRequest.ifMatch,
      "opc-request-id": updateLicenseRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLicenseRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/licenseRecords/{licenseRecordId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLicenseRecordRequest.updateLicenseRecordDetails,
        "UpdateLicenseRecordDetails",
        model.UpdateLicenseRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLicenseRecordResponse>{},
        body: await response.json(),
        bodyKey: "licenseRecord",
        bodyModel: model.LicenseRecord,
        type: "model.LicenseRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the list of images for a product license.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProductLicenseRequest
   * @return UpdateProductLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateProductLicense.ts.html |here} to see how to use UpdateProductLicense API.
   */
  public async updateProductLicense(
    updateProductLicenseRequest: requests.UpdateProductLicenseRequest
  ): Promise<responses.UpdateProductLicenseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LicenseManagerClient#updateProductLicense.");
    const operationName = "updateProductLicense";
    const apiReferenceLink = "";
    const pathParams = {
      "{productLicenseId}": updateProductLicenseRequest.productLicenseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProductLicenseRequest.ifMatch,
      "opc-request-id": updateProductLicenseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProductLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/productLicenses/{productLicenseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProductLicenseRequest.updateProductLicenseDetails,
        "UpdateProductLicenseDetails",
        model.UpdateProductLicenseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProductLicenseResponse>{},
        body: await response.json(),
        bodyKey: "productLicense",
        bodyModel: model.ProductLicense,
        type: "model.ProductLicense",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
