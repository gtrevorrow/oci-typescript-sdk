/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Extends a Verify configuration with appropriate data to reach and use the build service provided by a GitLab Pipeline.
 */
export interface GitLabPipelineConfiguration extends model.VerifyConfiguration {
  /**
   * The location of the Repository where the GitLab Pipeline will be run.
   * The expected format is https://gitlab.com/[groupName]/[repoName]
   *
   */
  "repositoryUrl": string;
  /**
   * The username that will trigger the GitLab Pipeline.
   */
  "username": string;
  /**
   * The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret.
   * The PAT provides the credentials to access the GitLab pipeline.
   *
   */
  "patSecretId": string;
  /**
   * The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the trigger Secret.
   * The Secret provides access to the trigger for a GitLab pipeline.
   *
   */
  "triggerSecretId": string;
  /**
   * Additional key-value pairs passed as parameters to the build service when running an experiment.
   */
  "additionalParameters"?: { [key: string]: string };

  "buildServiceType": string;
}

export namespace GitLabPipelineConfiguration {
  export function getJsonObj(obj: GitLabPipelineConfiguration, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.VerifyConfiguration.getJsonObj(obj) as GitLabPipelineConfiguration)),
      ...{}
    };

    return jsonObj;
  }
  export const buildServiceType = "GITLAB_PIPELINE";
  export function getDeserializedJsonObj(
    obj: GitLabPipelineConfiguration,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.VerifyConfiguration.getDeserializedJsonObj(obj) as GitLabPipelineConfiguration)),
      ...{}
    };

    return jsonObj;
  }
}
