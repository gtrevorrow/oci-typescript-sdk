/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The Verify stage configuration specifies a build service to run a pipeline for the recommended code changes.
 * The build pipeline will be initiated to ensure that there is no breaking change after the dependency versions
 * have been updated in source to avoid vulnerabilities.
 *
 */
export interface VerifyConfiguration {
  "buildServiceType": string;
}

export namespace VerifyConfiguration {
  export function getJsonObj(obj: VerifyConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "buildServiceType" in obj && obj.buildServiceType) {
      switch (obj.buildServiceType) {
        case "JENKINS_PIPELINE":
          return model.JenkinsPipelineConfiguration.getJsonObj(
            <model.JenkinsPipelineConfiguration>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.NoneVerifyConfiguration.getJsonObj(
            <model.NoneVerifyConfiguration>(<object>jsonObj),
            true
          );
        case "OCI_DEVOPS_BUILD":
          return model.OciDevOpsBuildConfiguration.getJsonObj(
            <model.OciDevOpsBuildConfiguration>(<object>jsonObj),
            true
          );
        case "GITHUB_ACTIONS":
          return model.GitHubActionsConfiguration.getJsonObj(
            <model.GitHubActionsConfiguration>(<object>jsonObj),
            true
          );
        case "GITLAB_PIPELINE":
          return model.GitLabPipelineConfiguration.getJsonObj(
            <model.GitLabPipelineConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.buildServiceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: VerifyConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "buildServiceType" in obj && obj.buildServiceType) {
      switch (obj.buildServiceType) {
        case "JENKINS_PIPELINE":
          return model.JenkinsPipelineConfiguration.getDeserializedJsonObj(
            <model.JenkinsPipelineConfiguration>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.NoneVerifyConfiguration.getDeserializedJsonObj(
            <model.NoneVerifyConfiguration>(<object>jsonObj),
            true
          );
        case "OCI_DEVOPS_BUILD":
          return model.OciDevOpsBuildConfiguration.getDeserializedJsonObj(
            <model.OciDevOpsBuildConfiguration>(<object>jsonObj),
            true
          );
        case "GITHUB_ACTIONS":
          return model.GitHubActionsConfiguration.getDeserializedJsonObj(
            <model.GitHubActionsConfiguration>(<object>jsonObj),
            true
          );
        case "GITLAB_PIPELINE":
          return model.GitLabPipelineConfiguration.getDeserializedJsonObj(
            <model.GitLabPipelineConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.buildServiceType}`);
      }
    }
    return jsonObj;
  }
}
