/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A configuration for the Source Code Management tool/platform used by a remediation recipe.
 */
export interface ScmConfiguration {
  /**
   * The branch used by ADM to patch vulnerabilities.
   */
  "branch": string;
  /**
   * The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported.
   * If this property is not specified, ADM will use the build file located at the root of the repository.
   *
   */
  "buildFileLocation"?: string;
  /**
   * If true, the Pull Request (PR) will be merged after the verify stage completes successfully
   * If false, the PR with the proposed changes must be reviewed and manually merged.
   *
   */
  "isAutomergeEnabled": boolean;

  "scmType": string;
}

export namespace ScmConfiguration {
  export function getJsonObj(obj: ScmConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "scmType" in obj && obj.scmType) {
      switch (obj.scmType) {
        case "OCI_CODE_REPOSITORY":
          return model.OciCodeRepositoryConfiguration.getJsonObj(
            <model.OciCodeRepositoryConfiguration>(<object>jsonObj),
            true
          );
        case "EXTERNAL_SCM":
          return model.ExternalScmConfiguration.getJsonObj(
            <model.ExternalScmConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.scmType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ScmConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "scmType" in obj && obj.scmType) {
      switch (obj.scmType) {
        case "OCI_CODE_REPOSITORY":
          return model.OciCodeRepositoryConfiguration.getDeserializedJsonObj(
            <model.OciCodeRepositoryConfiguration>(<object>jsonObj),
            true
          );
        case "EXTERNAL_SCM":
          return model.ExternalScmConfiguration.getDeserializedJsonObj(
            <model.ExternalScmConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.scmType}`);
      }
    }
    return jsonObj;
  }
}
