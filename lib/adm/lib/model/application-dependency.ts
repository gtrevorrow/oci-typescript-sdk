/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](https://docs.oracle.com/iaas/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An application dependency resource creates a vulnerability audit.
 */
export interface ApplicationDependency {
  /**
   * Group Artifact Version (GAV) identifier (Group:Artifact:Version). Example: org.graalvm.nativeimage:svm:21.1.0.
   * \"N/A\" for non-maven artifacts.
   *
   */
  "gav"?: string;
  /**
   * Package URL defined in https://github.com/package-url/purl-spec, e.g. pkg:maven/org.graalvm.nativeimage/svm@21.1.0
   */
  "purl"?: string;
  /**
   * Unique identifier of an application dependency, for example nodeId1.
   * The nodeId can be generated by assigning a unique id to each application dependency
   * in the tree of application dependencies.
   * Every node, even those who share the same GAV, should have a different nodeId.
   * The preferred way of constructing a nodeId is to assign incremental integers
   * during a breadth first or depth first search.
   * A nodeId can be reused only it refers to the same subtree of application dependencies.
   * (This is not equivalent to referring to the same GAV, that is,
   * a GAV can have multiple transitive dependencies.)
   *
   */
  "nodeId": string;
  /**
   * List of application dependencies on which this application dependency depends, each identified by its nodeId.
   */
  "applicationDependencyNodeIds"?: Array<string>;
}

export namespace ApplicationDependency {
  export function getJsonObj(obj: ApplicationDependency): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ApplicationDependency): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
