/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Extends a Verify configuration with appropriate data to reach and use the build service provided by a GitHub Action.
 */
export interface GitHubActionsConfiguration extends model.VerifyConfiguration {
  /**
   * The location of the repository where the GitHub Actions is defined.
   * For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName]
   * For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
   *
   */
  "repositoryUrl": string;
  /**
   * The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret.
   * The PAT provides the credentials to access the GitHub Action.
   *
   */
  "patSecretId": string;
  /**
   * The username that will trigger the GitHub Action.
   */
  "username": string;
  /**
   * The name of the GitHub Actions workflow that defines the build pipeline.
   */
  "workflowName": string;
  /**
   * Additional key-value pairs passed as parameters to the build service when running an experiment.
   */
  "additionalParameters"?: { [key: string]: string };

  "buildServiceType": string;
}

export namespace GitHubActionsConfiguration {
  export function getJsonObj(obj: GitHubActionsConfiguration, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.VerifyConfiguration.getJsonObj(obj) as GitHubActionsConfiguration)),
      ...{}
    };

    return jsonObj;
  }
  export const buildServiceType = "GITHUB_ACTIONS";
  export function getDeserializedJsonObj(
    obj: GitHubActionsConfiguration,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.VerifyConfiguration.getDeserializedJsonObj(obj) as GitHubActionsConfiguration)),
      ...{}
    };

    return jsonObj;
  }
}
