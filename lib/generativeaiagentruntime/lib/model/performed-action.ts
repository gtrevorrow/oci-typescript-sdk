/**
 * Generative AI Agents Client API
 * OCI Generative AI Agents is a fully managed service that combines the power of large language models (LLMs) with an intelligent retrieval system to create contextually relevant answers by searching your knowledge base, making your AI applications smart and efficient.

OCI Generative AI Agents supports several ways to onboard your data and then allows you and your customers to interact with your data using a chat interface or API.

Use the Generative AI Agents Client API to create and manage client chat sessions. A session represents an interactive conversation initiated by a user through an API to engage with an agent. It involves a series of exchanges where the user sends queries or prompts, and the agent responds with relevant information, actions, or assistance based on the user's input. The session persists for the duration of the interaction, maintaining context and continuity to provide coherent and meaningful responses throughout the conversation.

For creating and managing agents, knowledge bases, data sources, endpoints, and data ingestion jobs see the {@link #eNGenerative-ai-agentsLatest(ENGenerative-ai-agentsLatestRequest) eNGenerative-ai-agentsLatest}.

To learn more about the service, see the [Generative AI Agents documentation](https://docs.oracle.com/iaas/Content/generative-ai-agents/home.htm).

 * OpenAPI spec version: 20240531
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The base structure for an action that has already been performed.
 *
 */
export interface PerformedAction {
  /**
   * The unique identifier for the action that has been performed.
   */
  "actionId": string;

  "performedActionType": string;
}

export namespace PerformedAction {
  export function getJsonObj(obj: PerformedAction): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "performedActionType" in obj && obj.performedActionType) {
      switch (obj.performedActionType) {
        case "FUNCTION_CALLING_PERFORMED_ACTION":
          return model.FunctionCallingPerformedAction.getJsonObj(
            <model.FunctionCallingPerformedAction>(<object>jsonObj),
            true
          );
        case "HUMAN_APPROVAL_PERFORMED_ACTION":
          return model.HumanApprovalPerformedAction.getJsonObj(
            <model.HumanApprovalPerformedAction>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.performedActionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PerformedAction): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "performedActionType" in obj && obj.performedActionType) {
      switch (obj.performedActionType) {
        case "FUNCTION_CALLING_PERFORMED_ACTION":
          return model.FunctionCallingPerformedAction.getDeserializedJsonObj(
            <model.FunctionCallingPerformedAction>(<object>jsonObj),
            true
          );
        case "HUMAN_APPROVAL_PERFORMED_ACTION":
          return model.HumanApprovalPerformedAction.getDeserializedJsonObj(
            <model.HumanApprovalPerformedAction>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.performedActionType}`);
      }
    }
    return jsonObj;
  }
}
