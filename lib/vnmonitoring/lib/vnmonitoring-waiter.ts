/**
 * Network Monitoring API
 * Use the Network Monitoring API to troubleshoot routing and security issues for resources such as virtual cloud networks (VCNs) and compute instances. For more information, see the console
documentation for the [Network Path Analyzer](https://docs.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) tool.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { VnMonitoringClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class VnMonitoringWaiter {
  public constructor(
    private client: VnMonitoringClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forPathAnalyzerTest till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPathAnalyzerTestResponse | null (null in case of 404 response)
   */
  public async forPathAnalyzerTest(
    request: serviceRequests.GetPathAnalyzerTestRequest,
    ...targetStates: models.PathAnalyzerTest.LifecycleState[]
  ): Promise<serviceResponses.GetPathAnalyzerTestResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getPathAnalyzerTest(request),
      response => targetStates.includes(response.pathAnalyzerTest.lifecycleState!),
      targetStates.includes(models.PathAnalyzerTest.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
