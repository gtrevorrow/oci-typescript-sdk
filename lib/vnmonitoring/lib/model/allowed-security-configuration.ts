/**
 * Network Monitoring API
 * Use the Network Monitoring API to troubleshoot routing and security issues for resources such as virtual cloud networks (VCNs) and compute instances. For more information, see the console
documentation for the [Network Path Analyzer](https://docs.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) tool.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Defines the allowed security configuration for the traffic.
 */
export interface AllowedSecurityConfiguration {
  "type": string;
}

export namespace AllowedSecurityConfiguration {
  export function getJsonObj(obj: AllowedSecurityConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STATEFUL_EGRESS_SECURITY_LIST":
          return model.StatefulEgressSecurityListConfiguration.getJsonObj(
            <model.StatefulEgressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "NSG":
          return model.NsgConfiguration.getJsonObj(<model.NsgConfiguration>(<object>jsonObj), true);
        case "INGRESS_SECURITY_LIST":
          return model.IngressSecurityListConfiguration.getJsonObj(
            <model.IngressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "STATEFUL_INGRESS_SECURITY_LIST":
          return model.StatefulIngressSecurityListConfiguration.getJsonObj(
            <model.StatefulIngressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "EGRESS_SECURITY_LIST":
          return model.EgressSecurityListConfiguration.getJsonObj(
            <model.EgressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "STATEFUL_NSG":
          return model.StatefulNsgConfiguration.getJsonObj(
            <model.StatefulNsgConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AllowedSecurityConfiguration): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STATEFUL_EGRESS_SECURITY_LIST":
          return model.StatefulEgressSecurityListConfiguration.getDeserializedJsonObj(
            <model.StatefulEgressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "NSG":
          return model.NsgConfiguration.getDeserializedJsonObj(
            <model.NsgConfiguration>(<object>jsonObj),
            true
          );
        case "INGRESS_SECURITY_LIST":
          return model.IngressSecurityListConfiguration.getDeserializedJsonObj(
            <model.IngressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "STATEFUL_INGRESS_SECURITY_LIST":
          return model.StatefulIngressSecurityListConfiguration.getDeserializedJsonObj(
            <model.StatefulIngressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "EGRESS_SECURITY_LIST":
          return model.EgressSecurityListConfiguration.getDeserializedJsonObj(
            <model.EgressSecurityListConfiguration>(<object>jsonObj),
            true
          );
        case "STATEFUL_NSG":
          return model.StatefulNsgConfiguration.getDeserializedJsonObj(
            <model.StatefulNsgConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
