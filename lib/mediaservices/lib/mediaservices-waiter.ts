/**
 * Media Services API
 * Media Services (includes Media Flow and Media Streams) is a fully managed service for processing media (video) source content. Use Media Flow and Media Streams to transcode and package digital video using configurable workflows and stream video outputs.

Use the Media Services API to configure media workflows and run Media Flow jobs, create distribution channels, ingest assets, create Preview URLs and play assets. For more information, see [Media Flow](https://docs.oracle.com/iaas/Content/dms-mediaflow/home.htm) and [Media Streams](https://docs.oracle.com/iaas/Content/dms-mediastream/home.htm).

 * OpenAPI spec version: 20211101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { MediaServicesClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class MediaServicesWaiter {
  public constructor(
    private client: MediaServicesClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forMediaAsset till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMediaAssetResponse | null (null in case of 404 response)
   */
  public async forMediaAsset(
    request: serviceRequests.GetMediaAssetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetMediaAssetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMediaAsset(request),
      response => targetStates.includes(response.mediaAsset.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMediaAssetDistributionChannelAttachment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMediaAssetDistributionChannelAttachmentResponse
   */
  public async forMediaAssetDistributionChannelAttachment(
    request: serviceRequests.GetMediaAssetDistributionChannelAttachmentRequest,
    ...targetStates: models.MediaAssetDistributionChannelAttachment.LifecycleState[]
  ): Promise<serviceResponses.GetMediaAssetDistributionChannelAttachmentResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getMediaAssetDistributionChannelAttachment(request),
      response =>
        targetStates.includes(response.mediaAssetDistributionChannelAttachment.lifecycleState!)
    );
  }

  /**
   * Waits forMediaWorkflow till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMediaWorkflowResponse | null (null in case of 404 response)
   */
  public async forMediaWorkflow(
    request: serviceRequests.GetMediaWorkflowRequest,
    ...targetStates: models.MediaWorkflow.LifecycleState[]
  ): Promise<serviceResponses.GetMediaWorkflowResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMediaWorkflow(request),
      response => targetStates.includes(response.mediaWorkflow.lifecycleState!),
      targetStates.includes(models.MediaWorkflow.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMediaWorkflowConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMediaWorkflowConfigurationResponse | null (null in case of 404 response)
   */
  public async forMediaWorkflowConfiguration(
    request: serviceRequests.GetMediaWorkflowConfigurationRequest,
    ...targetStates: models.MediaWorkflowConfiguration.LifecycleState[]
  ): Promise<serviceResponses.GetMediaWorkflowConfigurationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMediaWorkflowConfiguration(request),
      response => targetStates.includes(response.mediaWorkflowConfiguration.lifecycleState!),
      targetStates.includes(models.MediaWorkflowConfiguration.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMediaWorkflowJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMediaWorkflowJobResponse
   */
  public async forMediaWorkflowJob(
    request: serviceRequests.GetMediaWorkflowJobRequest,
    ...targetStates: models.MediaWorkflowJob.LifecycleState[]
  ): Promise<serviceResponses.GetMediaWorkflowJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getMediaWorkflowJob(request),
      response => targetStates.includes(response.mediaWorkflowJob.lifecycleState!)
    );
  }

  /**
   * Waits forStreamCdnConfig till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamCdnConfigResponse | null (null in case of 404 response)
   */
  public async forStreamCdnConfig(
    request: serviceRequests.GetStreamCdnConfigRequest,
    ...targetStates: models.StreamCdnConfig.LifecycleState[]
  ): Promise<serviceResponses.GetStreamCdnConfigResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamCdnConfig(request),
      response => targetStates.includes(response.streamCdnConfig.lifecycleState!),
      targetStates.includes(models.StreamCdnConfig.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forStreamDistributionChannel till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamDistributionChannelResponse | null (null in case of 404 response)
   */
  public async forStreamDistributionChannel(
    request: serviceRequests.GetStreamDistributionChannelRequest,
    ...targetStates: models.StreamDistributionChannel.LifecycleState[]
  ): Promise<serviceResponses.GetStreamDistributionChannelResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamDistributionChannel(request),
      response => targetStates.includes(response.streamDistributionChannel.lifecycleState!),
      targetStates.includes(models.StreamDistributionChannel.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forStreamPackagingConfig till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamPackagingConfigResponse | null (null in case of 404 response)
   */
  public async forStreamPackagingConfig(
    request: serviceRequests.GetStreamPackagingConfigRequest,
    ...targetStates: models.StreamPackagingConfig.LifecycleState[]
  ): Promise<serviceResponses.GetStreamPackagingConfigResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamPackagingConfig(request),
      response => targetStates.includes(response.streamPackagingConfig.lifecycleState!),
      targetStates.includes(models.StreamPackagingConfig.LifecycleState.Deleted)
    );
  }
}
