/**
 * Media Services API
 * Media Services (includes Media Flow and Media Streams) is a fully managed service for processing media (video) source content. Use Media Flow and Media Streams to transcode and package digital video using configurable workflows and stream video outputs.

Use the Media Services API to configure media workflows and run Media Flow jobs, create distribution channels, ingest assets, create Preview URLs and play assets. For more information, see [Media Flow](https://docs.oracle.com/iaas/Content/dms-mediaflow/home.htm) and [Media Streams](https://docs.oracle.com/iaas/Content/dms-mediastream/home.htm).

 * OpenAPI spec version: 20211101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A stream packaging configuration for a Distribution Channel.
 */
export interface StreamPackagingConfig {
  /**
   * Unique identifier that is immutable on creation.
   */
  "id": string;
  /**
   * Compartment Identifier
   */
  "compartmentId": string;
  /**
   * Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
   */
  "distributionChannelId": string;
  /**
   * The name of the stream packaging configuration. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The duration in seconds for each fragment. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "segmentTimeInSeconds": number;
  "encryption"?:
    | model.StreamPackagingConfigEncryptionAes128
    | model.StreamPackagingConfigEncryptionNone;
  /**
   * The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
   */
  "timeCreated"?: Date;
  /**
   * The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated"?: Date;
  /**
   * The current state of the Packaging Configuration.
   */
  "lifecycleState"?: StreamPackagingConfig.LifecycleState;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Locks associated with this resource.
   */
  "locks"?: Array<model.ResourceLock>;

  "streamPackagingFormat": string;
}

export namespace StreamPackagingConfig {
  export enum LifecycleState {
    Active = "ACTIVE",
    NeedsAttention = "NEEDS_ATTENTION",
    Deleted = "DELETED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: StreamPackagingConfig): object {
    const jsonObj = {
      ...obj,
      ...{
        "encryption": obj.encryption
          ? model.StreamPackagingConfigEncryption.getJsonObj(obj.encryption)
          : undefined,

        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "streamPackagingFormat" in obj && obj.streamPackagingFormat) {
      switch (obj.streamPackagingFormat) {
        case "HLS":
          return model.HlsStreamPackagingConfig.getJsonObj(
            <model.HlsStreamPackagingConfig>(<object>jsonObj),
            true
          );
        case "DASH":
          return model.DashStreamPackagingConfig.getJsonObj(
            <model.DashStreamPackagingConfig>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.streamPackagingFormat}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: StreamPackagingConfig): object {
    const jsonObj = {
      ...obj,
      ...{
        "encryption": obj.encryption
          ? model.StreamPackagingConfigEncryption.getDeserializedJsonObj(obj.encryption)
          : undefined,

        "locks": obj.locks
          ? obj.locks.map(item => {
              return model.ResourceLock.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "streamPackagingFormat" in obj && obj.streamPackagingFormat) {
      switch (obj.streamPackagingFormat) {
        case "HLS":
          return model.HlsStreamPackagingConfig.getDeserializedJsonObj(
            <model.HlsStreamPackagingConfig>(<object>jsonObj),
            true
          );
        case "DASH":
          return model.DashStreamPackagingConfig.getDeserializedJsonObj(
            <model.DashStreamPackagingConfig>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.streamPackagingFormat}`);
      }
    }
    return jsonObj;
  }
}
