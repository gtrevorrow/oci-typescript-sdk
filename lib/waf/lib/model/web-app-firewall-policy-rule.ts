/**
 * Web Application Firewall (WAF) API
 * API for the Web Application Firewall service.
Use this API to manage regional Web App Firewalls and corresponding policies for protecting HTTP services.

 * OpenAPI spec version: 20210930
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Base schema for WebAppFirewallPolicyRules, including properties common to all of them.
 */
export interface WebAppFirewallPolicyRule {
  /**
   * Rule name. Must be unique within the module.
   */
  "name": string;
  /**
   * The language used to parse condition from field {@code condition}. Available languages:
   * <p>
   * **JMESPATH** an extended JMESPath language syntax.
   *
   */
  "conditionLanguage"?: WebAppFirewallPolicyRule.ConditionLanguage;
  /**
   * An expression that determines whether or not the rule action should be executed.
   *
   */
  "condition"?: string;
  /**
   * References action by name from actions defined in WebAppFirewallPolicy.
   */
  "actionName": string;

  "type": string;
}

export namespace WebAppFirewallPolicyRule {
  export enum ConditionLanguage {
    Jmespath = "JMESPATH",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: WebAppFirewallPolicyRule): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "PROTECTION":
          return model.ProtectionRule.getJsonObj(<model.ProtectionRule>(<object>jsonObj), true);
        case "REQUEST_RATE_LIMITING":
          return model.RequestRateLimitingRule.getJsonObj(
            <model.RequestRateLimitingRule>(<object>jsonObj),
            true
          );
        case "ACCESS_CONTROL":
          return model.AccessControlRule.getJsonObj(
            <model.AccessControlRule>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: WebAppFirewallPolicyRule): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "PROTECTION":
          return model.ProtectionRule.getDeserializedJsonObj(
            <model.ProtectionRule>(<object>jsonObj),
            true
          );
        case "REQUEST_RATE_LIMITING":
          return model.RequestRateLimitingRule.getDeserializedJsonObj(
            <model.RequestRateLimitingRule>(<object>jsonObj),
            true
          );
        case "ACCESS_CONTROL":
          return model.AccessControlRule.getDeserializedJsonObj(
            <model.AccessControlRule>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
