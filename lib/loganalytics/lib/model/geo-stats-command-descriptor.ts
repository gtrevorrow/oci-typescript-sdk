/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Command descriptor for querylanguage GEOSTATS command.  This is similiar to STATS with some built in functions for City, State and Country by Coordinates.
 *
 */
export interface GeoStatsCommandDescriptor extends model.AbstractCommandDescriptor {
  /**
   * Indicates which coordinates to show.  Either client, server, client and server or custom. If custom is specified at least one of  coordinatesField, regionField or countryField is required. Defaults to client.
   *
   */
  "include"?: GeoStatsCommandDescriptor.Include;
  /**
   * The city field to use. Only applicable when include = CUSTOM.
   *
   */
  "cityField"?: model.FieldsAddRemoveField | model.FunctionField | model.Field | model.SortField;
  /**
   * The region field to use. Only applicable when include = CUSTOM.
   *
   */
  "regionField"?: model.FieldsAddRemoveField | model.FunctionField | model.Field | model.SortField;
  /**
   * The country field to use. Only applicable when include = CUSTOM.
   *
   */
  "countryField"?: model.FieldsAddRemoveField | model.FunctionField | model.Field | model.SortField;
  /**
   * The continent field to use. Only applicable when include = CUSTOM.
   *
   */
  "continentField"?:
    | model.FieldsAddRemoveField
    | model.FunctionField
    | model.Field
    | model.SortField;
  /**
   * The coordinates field to use. Only applicable when include = CUSTOM.
   *
   */
  "coordinatesField"?:
    | model.FieldsAddRemoveField
    | model.FunctionField
    | model.Field
    | model.SortField;
  /**
   * Group by fields if specified in the query string.  Required if include = CUSTOM.
   *
   */
  "groupByFields"?: Array<model.AbstractField>;
  /**
   * Statistical functions specified in the query string. At least 1 is required for a GEOSTATS command.
   *
   */
  "functions"?: Array<model.FunctionField>;

  "name": string;
}

export namespace GeoStatsCommandDescriptor {
  export enum Include {
    Client = "CLIENT",
    Server = "SERVER",
    ClientAndServer = "CLIENT_AND_SERVER",
    Custom = "CUSTOM",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: GeoStatsCommandDescriptor, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.AbstractCommandDescriptor.getJsonObj(obj) as GeoStatsCommandDescriptor)),
      ...{
        "cityField": obj.cityField ? model.AbstractField.getJsonObj(obj.cityField) : undefined,
        "regionField": obj.regionField
          ? model.AbstractField.getJsonObj(obj.regionField)
          : undefined,
        "countryField": obj.countryField
          ? model.AbstractField.getJsonObj(obj.countryField)
          : undefined,
        "continentField": obj.continentField
          ? model.AbstractField.getJsonObj(obj.continentField)
          : undefined,
        "coordinatesField": obj.coordinatesField
          ? model.AbstractField.getJsonObj(obj.coordinatesField)
          : undefined,
        "groupByFields": obj.groupByFields
          ? obj.groupByFields.map(item => {
              return model.AbstractField.getJsonObj(item);
            })
          : undefined,
        "functions": obj.functions
          ? obj.functions.map(item => {
              return model.FunctionField.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const name = "GEO_STATS";
  export function getDeserializedJsonObj(
    obj: GeoStatsCommandDescriptor,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.AbstractCommandDescriptor.getDeserializedJsonObj(
            obj
          ) as GeoStatsCommandDescriptor)),
      ...{
        "cityField": obj.cityField
          ? model.AbstractField.getDeserializedJsonObj(obj.cityField)
          : undefined,
        "regionField": obj.regionField
          ? model.AbstractField.getDeserializedJsonObj(obj.regionField)
          : undefined,
        "countryField": obj.countryField
          ? model.AbstractField.getDeserializedJsonObj(obj.countryField)
          : undefined,
        "continentField": obj.continentField
          ? model.AbstractField.getDeserializedJsonObj(obj.continentField)
          : undefined,
        "coordinatesField": obj.coordinatesField
          ? model.AbstractField.getDeserializedJsonObj(obj.coordinatesField)
          : undefined,
        "groupByFields": obj.groupByFields
          ? obj.groupByFields.map(item => {
              return model.AbstractField.getDeserializedJsonObj(item);
            })
          : undefined,
        "functions": obj.functions
          ? obj.functions.map(item => {
              return model.FunctionField.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
