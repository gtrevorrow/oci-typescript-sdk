/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * LogAnalyticsParserField
 */
export interface LogAnalyticsParserField {
  "field"?: model.LogAnalyticsField;
  /**
   * The parser field unique identifier. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "parserFieldId"?: number;
  /**
   * the parser field expression.
   */
  "parserFieldExpression"?: string;
  /**
   * The parser field internal name.
   */
  "parserFieldName"?: string;
  /**
   * The storage field name.
   */
  "storageFieldName"?: string;
  /**
   * The integrator name.
   */
  "parserFieldIntegratorName"?: string;
  /**
   * The parser internal name.
   */
  "parserName"?: string;
  /**
   * The parser field sequence. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "parserFieldSequence"?: number;
  "parser"?: model.LogAnalyticsParser;
  /**
   * The structured column information.
   */
  "structuredColumnInfo"?: string;
  /**
   * List of actions/operations to be performed while fetching or parsing the logs.
   *
   */
  "actions"?: Array<model.ParserAction>;
}

export namespace LogAnalyticsParserField {
  export function getJsonObj(obj: LogAnalyticsParserField): object {
    const jsonObj = {
      ...obj,
      ...{
        "field": obj.field ? model.LogAnalyticsField.getJsonObj(obj.field) : undefined,

        "parser": obj.parser ? model.LogAnalyticsParser.getJsonObj(obj.parser) : undefined,

        "actions": obj.actions
          ? obj.actions.map(item => {
              return model.ParserAction.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: LogAnalyticsParserField): object {
    const jsonObj = {
      ...obj,
      ...{
        "field": obj.field ? model.LogAnalyticsField.getDeserializedJsonObj(obj.field) : undefined,

        "parser": obj.parser
          ? model.LogAnalyticsParser.getDeserializedJsonObj(obj.parser)
          : undefined,

        "actions": obj.actions
          ? obj.actions.map(item => {
              return model.ParserAction.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
