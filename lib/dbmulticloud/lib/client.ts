/**
 * Oracle Database MultiCloud Data plane Integration
 * 1. Oracle Azure Connector Resource: This is for installing Azure Arc Server in ExaCS VM Cluster.
  There are two way to install Azure Arc Server (Azure Identity) in ExaCS VMCluster.
    a. Using Bearer Access Token or
    b. By providing Authentication token

2. Oracle Azure Blob Container Resource: This is for to capture Azure Container details 
   and same will be used in multiple ExaCS VMCluster to mount the Azure Container.

3. Oracle Azure Blob Mount Resource: This is for to mount Azure Container in ExaCS VMCluster 
   using Oracle Azure Connector and Oracle Azure Blob Container Resource.

 * OpenAPI spec version: 20240501
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { MultiCloudResourceDiscoveryWaiter } from "./multicloudresourcediscovery-waiter";
import { OracleDBAzureBlobContainerWaiter } from "./oracledbazureblobcontainer-waiter";
import { OracleDBAzureBlobMountWaiter } from "./oracledbazureblobmount-waiter";
import { OracleDBAzureConnectorWaiter } from "./oracledbazureconnector-waiter";
import { OracleDbAzureKeyWaiter } from "./oracledbazurekey-waiter";
import { OracleDbAzureVaultWaiter } from "./oracledbazurevault-waiter";
import { OracleDbAzureVaultAssociationWaiter } from "./oracledbazurevaultassociation-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MultiCloudResourceDiscoveryApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MultiCloudResourceDiscoveryClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": MultiCloudResourceDiscoveryWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "MultiCloudResourceDiscovery";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger)
      this.logger.info(`MultiCloudResourceDiscoveryClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        MultiCloudResourceDiscoveryClient.serviceEndpointTemplate,
        this._region,
        MultiCloudResourceDiscoveryClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        MultiCloudResourceDiscoveryClient.serviceEndpointTemplate,
        this._regionId,
        MultiCloudResourceDiscoveryClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MultiCloudResourceDiscoveryClient.serviceEndpointTemplate,
      region,
      MultiCloudResourceDiscoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MultiCloudResourceDiscoveryClient.serviceEndpointTemplate,
      regionId,
      MultiCloudResourceDiscoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new MultiCloudResourceDiscoveryWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): MultiCloudResourceDiscoveryWaiter {
    this._waiters = new MultiCloudResourceDiscoveryWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): MultiCloudResourceDiscoveryWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the Oracle Azure Vault resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeMultiCloudResourceDiscoveryCompartmentRequest
   * @return ChangeMultiCloudResourceDiscoveryCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeMultiCloudResourceDiscoveryCompartment.ts.html |here} to see how to use ChangeMultiCloudResourceDiscoveryCompartment API.
   */
  public async changeMultiCloudResourceDiscoveryCompartment(
    changeMultiCloudResourceDiscoveryCompartmentRequest: requests.ChangeMultiCloudResourceDiscoveryCompartmentRequest
  ): Promise<responses.ChangeMultiCloudResourceDiscoveryCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#changeMultiCloudResourceDiscoveryCompartment."
      );
    const operationName = "changeMultiCloudResourceDiscoveryCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{multiCloudResourceDiscoveryId}":
        changeMultiCloudResourceDiscoveryCompartmentRequest.multiCloudResourceDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeMultiCloudResourceDiscoveryCompartmentRequest.opcRetryToken,
      "if-match": changeMultiCloudResourceDiscoveryCompartmentRequest.ifMatch,
      "opc-request-id": changeMultiCloudResourceDiscoveryCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMultiCloudResourceDiscoveryCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/multiCloudResourceDiscovery/{multiCloudResourceDiscoveryId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMultiCloudResourceDiscoveryCompartmentRequest.changeMultiCloudResourceDiscoveryCompartmentDetails,
        "ChangeMultiCloudResourceDiscoveryCompartmentDetails",
        model.ChangeMultiCloudResourceDiscoveryCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMultiCloudResourceDiscoveryCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Discover Azure Vaults and Keys based on the provided information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMultiCloudResourceDiscoveryRequest
   * @return CreateMultiCloudResourceDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateMultiCloudResourceDiscovery.ts.html |here} to see how to use CreateMultiCloudResourceDiscovery API.
   */
  public async createMultiCloudResourceDiscovery(
    createMultiCloudResourceDiscoveryRequest: requests.CreateMultiCloudResourceDiscoveryRequest
  ): Promise<responses.CreateMultiCloudResourceDiscoveryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#createMultiCloudResourceDiscovery."
      );
    const operationName = "createMultiCloudResourceDiscovery";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMultiCloudResourceDiscoveryRequest.opcRetryToken,
      "if-match": createMultiCloudResourceDiscoveryRequest.ifMatch,
      "opc-request-id": createMultiCloudResourceDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMultiCloudResourceDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/multiCloudResourceDiscovery",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMultiCloudResourceDiscoveryRequest.createMultiCloudResourceDiscoveryDetails,
        "CreateMultiCloudResourceDiscoveryDetails",
        model.CreateMultiCloudResourceDiscoveryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMultiCloudResourceDiscoveryResponse>{},
        body: await response.json(),
        bodyKey: "multiCloudResourceDiscovery",
        bodyModel: model.MultiCloudResourceDiscovery,
        type: "model.MultiCloudResourceDiscovery",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete Multi Cloud Discovery resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMultiCloudResourceDiscoveryRequest
   * @return DeleteMultiCloudResourceDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteMultiCloudResourceDiscovery.ts.html |here} to see how to use DeleteMultiCloudResourceDiscovery API.
   */
  public async deleteMultiCloudResourceDiscovery(
    deleteMultiCloudResourceDiscoveryRequest: requests.DeleteMultiCloudResourceDiscoveryRequest
  ): Promise<responses.DeleteMultiCloudResourceDiscoveryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#deleteMultiCloudResourceDiscovery."
      );
    const operationName = "deleteMultiCloudResourceDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{multiCloudResourceDiscoveryId}":
        deleteMultiCloudResourceDiscoveryRequest.multiCloudResourceDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMultiCloudResourceDiscoveryRequest.ifMatch,
      "opc-request-id": deleteMultiCloudResourceDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMultiCloudResourceDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/multiCloudResourceDiscovery/{multiCloudResourceDiscoveryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMultiCloudResourceDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Multi Cloud Discovered Resource Details form a particular resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMultiCloudResourceDiscoveryRequest
   * @return GetMultiCloudResourceDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetMultiCloudResourceDiscovery.ts.html |here} to see how to use GetMultiCloudResourceDiscovery API.
   */
  public async getMultiCloudResourceDiscovery(
    getMultiCloudResourceDiscoveryRequest: requests.GetMultiCloudResourceDiscoveryRequest
  ): Promise<responses.GetMultiCloudResourceDiscoveryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#getMultiCloudResourceDiscovery."
      );
    const operationName = "getMultiCloudResourceDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{multiCloudResourceDiscoveryId}":
        getMultiCloudResourceDiscoveryRequest.multiCloudResourceDiscoveryId
    };

    const queryParams = {
      "limit": getMultiCloudResourceDiscoveryRequest.limit,
      "page": getMultiCloudResourceDiscoveryRequest.page,
      "sortOrder": getMultiCloudResourceDiscoveryRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMultiCloudResourceDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMultiCloudResourceDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/multiCloudResourceDiscovery/{multiCloudResourceDiscoveryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMultiCloudResourceDiscoveryResponse>{},
        body: await response.json(),
        bodyKey: "multiCloudResourceDiscovery",
        bodyModel: model.MultiCloudResourceDiscovery,
        type: "model.MultiCloudResourceDiscovery",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Multi Cloud Resource Discovery based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMultiCloudResourceDiscoveriesRequest
   * @return ListMultiCloudResourceDiscoveriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListMultiCloudResourceDiscoveries.ts.html |here} to see how to use ListMultiCloudResourceDiscoveries API.
   */
  public async listMultiCloudResourceDiscoveries(
    listMultiCloudResourceDiscoveriesRequest: requests.ListMultiCloudResourceDiscoveriesRequest
  ): Promise<responses.ListMultiCloudResourceDiscoveriesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#listMultiCloudResourceDiscoveries."
      );
    const operationName = "listMultiCloudResourceDiscoveries";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMultiCloudResourceDiscoveriesRequest.compartmentId,
      "displayName": listMultiCloudResourceDiscoveriesRequest.displayName,
      "multiCloudResourceDiscoveryId":
        listMultiCloudResourceDiscoveriesRequest.multiCloudResourceDiscoveryId,
      "lifecycleState": listMultiCloudResourceDiscoveriesRequest.lifecycleState,
      "oracleDbAzureConnectorId": listMultiCloudResourceDiscoveriesRequest.oracleDbAzureConnectorId,
      "resourceType": listMultiCloudResourceDiscoveriesRequest.resourceType,
      "limit": listMultiCloudResourceDiscoveriesRequest.limit,
      "page": listMultiCloudResourceDiscoveriesRequest.page,
      "sortOrder": listMultiCloudResourceDiscoveriesRequest.sortOrder,
      "sortBy": listMultiCloudResourceDiscoveriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMultiCloudResourceDiscoveriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMultiCloudResourceDiscoveriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/multiCloudResourceDiscovery",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMultiCloudResourceDiscoveriesResponse>{},
        body: await response.json(),
        bodyKey: "multiCloudResourceDiscoverySummaryCollection",
        bodyModel: model.MultiCloudResourceDiscoverySummaryCollection,
        type: "model.MultiCloudResourceDiscoverySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Azure Discovered Resource for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMultiCloudResourceDiscoveryRequest
   * @return UpdateMultiCloudResourceDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateMultiCloudResourceDiscovery.ts.html |here} to see how to use UpdateMultiCloudResourceDiscovery API.
   */
  public async updateMultiCloudResourceDiscovery(
    updateMultiCloudResourceDiscoveryRequest: requests.UpdateMultiCloudResourceDiscoveryRequest
  ): Promise<responses.UpdateMultiCloudResourceDiscoveryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MultiCloudResourceDiscoveryClient#updateMultiCloudResourceDiscovery."
      );
    const operationName = "updateMultiCloudResourceDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{multiCloudResourceDiscoveryId}":
        updateMultiCloudResourceDiscoveryRequest.multiCloudResourceDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMultiCloudResourceDiscoveryRequest.ifMatch,
      "opc-request-id": updateMultiCloudResourceDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMultiCloudResourceDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/multiCloudResourceDiscovery/{multiCloudResourceDiscoveryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMultiCloudResourceDiscoveryRequest.updateMultiCloudResourceDiscoveryDetails,
        "UpdateMultiCloudResourceDiscoveryDetails",
        model.UpdateMultiCloudResourceDiscoveryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMultiCloudResourceDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDBAzureBlobContainerApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDBAzureBlobContainerClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDBAzureBlobContainerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDBAzureBlobContainer";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger)
      this.logger.info(`OracleDBAzureBlobContainerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDBAzureBlobContainerClient.serviceEndpointTemplate,
        this._region,
        OracleDBAzureBlobContainerClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDBAzureBlobContainerClient.serviceEndpointTemplate,
        this._regionId,
        OracleDBAzureBlobContainerClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDBAzureBlobContainerClient.serviceEndpointTemplate,
      region,
      OracleDBAzureBlobContainerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDBAzureBlobContainerClient.serviceEndpointTemplate,
      regionId,
      OracleDBAzureBlobContainerClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDBAzureBlobContainerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDBAzureBlobContainerWaiter {
    this._waiters = new OracleDBAzureBlobContainerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDBAzureBlobContainerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the Oracle DB Azure Blob Container resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOracleDbAzureBlobContainerCompartmentRequest
   * @return ChangeOracleDbAzureBlobContainerCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeOracleDbAzureBlobContainerCompartment.ts.html |here} to see how to use ChangeOracleDbAzureBlobContainerCompartment API.
   */
  public async changeOracleDbAzureBlobContainerCompartment(
    changeOracleDbAzureBlobContainerCompartmentRequest: requests.ChangeOracleDbAzureBlobContainerCompartmentRequest
  ): Promise<responses.ChangeOracleDbAzureBlobContainerCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#changeOracleDbAzureBlobContainerCompartment."
      );
    const operationName = "changeOracleDbAzureBlobContainerCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobContainerId}":
        changeOracleDbAzureBlobContainerCompartmentRequest.oracleDbAzureBlobContainerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeOracleDbAzureBlobContainerCompartmentRequest.opcRetryToken,
      "if-match": changeOracleDbAzureBlobContainerCompartmentRequest.ifMatch,
      "opc-request-id": changeOracleDbAzureBlobContainerCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOracleDbAzureBlobContainerCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer/{oracleDbAzureBlobContainerId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOracleDbAzureBlobContainerCompartmentRequest.changeOracleDbAzureBlobContainerCompartmentDetails,
        "ChangeOracleDbAzureBlobContainerCompartmentDetails",
        model.ChangeOracleDbAzureBlobContainerCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOracleDbAzureBlobContainerCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Capture Azure Container details for mounting Azure Container on multiple OCI Database Resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOracleDbAzureBlobContainerRequest
   * @return CreateOracleDbAzureBlobContainerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateOracleDbAzureBlobContainer.ts.html |here} to see how to use CreateOracleDbAzureBlobContainer API.
   */
  public async createOracleDbAzureBlobContainer(
    createOracleDbAzureBlobContainerRequest: requests.CreateOracleDbAzureBlobContainerRequest
  ): Promise<responses.CreateOracleDbAzureBlobContainerResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#createOracleDbAzureBlobContainer."
      );
    const operationName = "createOracleDbAzureBlobContainer";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOracleDbAzureBlobContainerRequest.opcRetryToken,
      "if-match": createOracleDbAzureBlobContainerRequest.ifMatch,
      "opc-request-id": createOracleDbAzureBlobContainerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOracleDbAzureBlobContainerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOracleDbAzureBlobContainerRequest.createOracleDbAzureBlobContainerDetails,
        "CreateOracleDbAzureBlobContainerDetails",
        model.CreateOracleDbAzureBlobContainerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOracleDbAzureBlobContainerResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobContainer",
        bodyModel: model.OracleDbAzureBlobContainer,
        type: "model.OracleDbAzureBlobContainer",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete Oracle DB Azure Blob Container details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOracleDbAzureBlobContainerRequest
   * @return DeleteOracleDbAzureBlobContainerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteOracleDbAzureBlobContainer.ts.html |here} to see how to use DeleteOracleDbAzureBlobContainer API.
   */
  public async deleteOracleDbAzureBlobContainer(
    deleteOracleDbAzureBlobContainerRequest: requests.DeleteOracleDbAzureBlobContainerRequest
  ): Promise<responses.DeleteOracleDbAzureBlobContainerResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#deleteOracleDbAzureBlobContainer."
      );
    const operationName = "deleteOracleDbAzureBlobContainer";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobContainerId}":
        deleteOracleDbAzureBlobContainerRequest.oracleDbAzureBlobContainerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOracleDbAzureBlobContainerRequest.ifMatch,
      "opc-request-id": deleteOracleDbAzureBlobContainerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOracleDbAzureBlobContainerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer/{oracleDbAzureBlobContainerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOracleDbAzureBlobContainerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Oracle DB Azure Blob Container Details form a particular Container Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureBlobContainerRequest
   * @return GetOracleDbAzureBlobContainerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureBlobContainer.ts.html |here} to see how to use GetOracleDbAzureBlobContainer API.
   */
  public async getOracleDbAzureBlobContainer(
    getOracleDbAzureBlobContainerRequest: requests.GetOracleDbAzureBlobContainerRequest
  ): Promise<responses.GetOracleDbAzureBlobContainerResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#getOracleDbAzureBlobContainer."
      );
    const operationName = "getOracleDbAzureBlobContainer";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobContainerId}":
        getOracleDbAzureBlobContainerRequest.oracleDbAzureBlobContainerId
    };

    const queryParams = {
      "limit": getOracleDbAzureBlobContainerRequest.limit,
      "page": getOracleDbAzureBlobContainerRequest.page,
      "sortOrder": getOracleDbAzureBlobContainerRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureBlobContainerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureBlobContainerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer/{oracleDbAzureBlobContainerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureBlobContainerResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobContainer",
        bodyModel: model.OracleDbAzureBlobContainer,
        type: "model.OracleDbAzureBlobContainer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Oracle DB Azure Blob Container based on filter.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureBlobContainersRequest
   * @return ListOracleDbAzureBlobContainersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureBlobContainers.ts.html |here} to see how to use ListOracleDbAzureBlobContainers API.
   */
  public async listOracleDbAzureBlobContainers(
    listOracleDbAzureBlobContainersRequest: requests.ListOracleDbAzureBlobContainersRequest
  ): Promise<responses.ListOracleDbAzureBlobContainersResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#listOracleDbAzureBlobContainers."
      );
    const operationName = "listOracleDbAzureBlobContainers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureBlobContainersRequest.compartmentId,
      "displayName": listOracleDbAzureBlobContainersRequest.displayName,
      "oracleDbAzureBlobContainerId":
        listOracleDbAzureBlobContainersRequest.oracleDbAzureBlobContainerId,
      "lifecycleState": listOracleDbAzureBlobContainersRequest.lifecycleState,
      "azureStorageAccountName": listOracleDbAzureBlobContainersRequest.azureStorageAccountName,
      "azureStorageContainerName": listOracleDbAzureBlobContainersRequest.azureStorageContainerName,
      "limit": listOracleDbAzureBlobContainersRequest.limit,
      "page": listOracleDbAzureBlobContainersRequest.page,
      "sortOrder": listOracleDbAzureBlobContainersRequest.sortOrder,
      "sortBy": listOracleDbAzureBlobContainersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureBlobContainersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureBlobContainersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureBlobContainersResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobContainerSummaryCollection",
        bodyModel: model.OracleDbAzureBlobContainerSummaryCollection,
        type: "model.OracleDbAzureBlobContainerSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Oracle DB Azure Blob Container for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOracleDbAzureBlobContainerRequest
   * @return UpdateOracleDbAzureBlobContainerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateOracleDbAzureBlobContainer.ts.html |here} to see how to use UpdateOracleDbAzureBlobContainer API.
   */
  public async updateOracleDbAzureBlobContainer(
    updateOracleDbAzureBlobContainerRequest: requests.UpdateOracleDbAzureBlobContainerRequest
  ): Promise<responses.UpdateOracleDbAzureBlobContainerResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobContainerClient#updateOracleDbAzureBlobContainer."
      );
    const operationName = "updateOracleDbAzureBlobContainer";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobContainerId}":
        updateOracleDbAzureBlobContainerRequest.oracleDbAzureBlobContainerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOracleDbAzureBlobContainerRequest.ifMatch,
      "opc-request-id": updateOracleDbAzureBlobContainerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOracleDbAzureBlobContainerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobContainer/{oracleDbAzureBlobContainerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOracleDbAzureBlobContainerRequest.updateOracleDbAzureBlobContainerDetails,
        "UpdateOracleDbAzureBlobContainerDetails",
        model.UpdateOracleDbAzureBlobContainerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOracleDbAzureBlobContainerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDBAzureBlobMountApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDBAzureBlobMountClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDBAzureBlobMountWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDBAzureBlobMount";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger)
      this.logger.info(`OracleDBAzureBlobMountClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDBAzureBlobMountClient.serviceEndpointTemplate,
        this._region,
        OracleDBAzureBlobMountClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDBAzureBlobMountClient.serviceEndpointTemplate,
        this._regionId,
        OracleDBAzureBlobMountClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDBAzureBlobMountClient.serviceEndpointTemplate,
      region,
      OracleDBAzureBlobMountClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDBAzureBlobMountClient.serviceEndpointTemplate,
      regionId,
      OracleDBAzureBlobMountClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDBAzureBlobMountWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDBAzureBlobMountWaiter {
    this._waiters = new OracleDBAzureBlobMountWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDBAzureBlobMountWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the Oracle DbAzure Blob Mount resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOracleDbAzureBlobMountCompartmentRequest
   * @return ChangeOracleDbAzureBlobMountCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeOracleDbAzureBlobMountCompartment.ts.html |here} to see how to use ChangeOracleDbAzureBlobMountCompartment API.
   */
  public async changeOracleDbAzureBlobMountCompartment(
    changeOracleDbAzureBlobMountCompartmentRequest: requests.ChangeOracleDbAzureBlobMountCompartmentRequest
  ): Promise<responses.ChangeOracleDbAzureBlobMountCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#changeOracleDbAzureBlobMountCompartment."
      );
    const operationName = "changeOracleDbAzureBlobMountCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobMountId}":
        changeOracleDbAzureBlobMountCompartmentRequest.oracleDbAzureBlobMountId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeOracleDbAzureBlobMountCompartmentRequest.opcRetryToken,
      "if-match": changeOracleDbAzureBlobMountCompartmentRequest.ifMatch,
      "opc-request-id": changeOracleDbAzureBlobMountCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOracleDbAzureBlobMountCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount/{oracleDbAzureBlobMountId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOracleDbAzureBlobMountCompartmentRequest.changeOracleDbAzureBlobMountCompartmentDetails,
        "ChangeOracleDbAzureBlobMountCompartmentDetails",
        model.ChangeOracleDbAzureBlobMountCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOracleDbAzureBlobMountCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates Oracle DB Azure Blob Mount resource and mounts Azure Container in OCI Database Resource,
   * based on provided Azure Container details and Database Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOracleDbAzureBlobMountRequest
   * @return CreateOracleDbAzureBlobMountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateOracleDbAzureBlobMount.ts.html |here} to see how to use CreateOracleDbAzureBlobMount API.
   */
  public async createOracleDbAzureBlobMount(
    createOracleDbAzureBlobMountRequest: requests.CreateOracleDbAzureBlobMountRequest
  ): Promise<responses.CreateOracleDbAzureBlobMountResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#createOracleDbAzureBlobMount."
      );
    const operationName = "createOracleDbAzureBlobMount";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOracleDbAzureBlobMountRequest.opcRetryToken,
      "if-match": createOracleDbAzureBlobMountRequest.ifMatch,
      "opc-request-id": createOracleDbAzureBlobMountRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOracleDbAzureBlobMountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOracleDbAzureBlobMountRequest.createOracleDbAzureBlobMountDetails,
        "CreateOracleDbAzureBlobMountDetails",
        model.CreateOracleDbAzureBlobMountDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOracleDbAzureBlobMountResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobMount",
        bodyModel: model.OracleDbAzureBlobMount,
        type: "model.OracleDbAzureBlobMount",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unmount Azure Container Resource from ExaCS VM Cluster and Delete resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOracleDbAzureBlobMountRequest
   * @return DeleteOracleDbAzureBlobMountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteOracleDbAzureBlobMount.ts.html |here} to see how to use DeleteOracleDbAzureBlobMount API.
   */
  public async deleteOracleDbAzureBlobMount(
    deleteOracleDbAzureBlobMountRequest: requests.DeleteOracleDbAzureBlobMountRequest
  ): Promise<responses.DeleteOracleDbAzureBlobMountResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#deleteOracleDbAzureBlobMount."
      );
    const operationName = "deleteOracleDbAzureBlobMount";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobMountId}": deleteOracleDbAzureBlobMountRequest.oracleDbAzureBlobMountId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOracleDbAzureBlobMountRequest.ifMatch,
      "opc-request-id": deleteOracleDbAzureBlobMountRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOracleDbAzureBlobMountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount/{oracleDbAzureBlobMountId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOracleDbAzureBlobMountResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Oracle DB Azure Blob Mount Details form a particular Container Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureBlobMountRequest
   * @return GetOracleDbAzureBlobMountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureBlobMount.ts.html |here} to see how to use GetOracleDbAzureBlobMount API.
   */
  public async getOracleDbAzureBlobMount(
    getOracleDbAzureBlobMountRequest: requests.GetOracleDbAzureBlobMountRequest
  ): Promise<responses.GetOracleDbAzureBlobMountResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#getOracleDbAzureBlobMount."
      );
    const operationName = "getOracleDbAzureBlobMount";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobMountId}": getOracleDbAzureBlobMountRequest.oracleDbAzureBlobMountId
    };

    const queryParams = {
      "limit": getOracleDbAzureBlobMountRequest.limit,
      "page": getOracleDbAzureBlobMountRequest.page,
      "sortOrder": getOracleDbAzureBlobMountRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureBlobMountRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureBlobMountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount/{oracleDbAzureBlobMountId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureBlobMountResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobMount",
        bodyModel: model.OracleDbAzureBlobMount,
        type: "model.OracleDbAzureBlobMount",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Oracle DB Azure Blob Mounts based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureBlobMountsRequest
   * @return ListOracleDbAzureBlobMountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureBlobMounts.ts.html |here} to see how to use ListOracleDbAzureBlobMounts API.
   */
  public async listOracleDbAzureBlobMounts(
    listOracleDbAzureBlobMountsRequest: requests.ListOracleDbAzureBlobMountsRequest
  ): Promise<responses.ListOracleDbAzureBlobMountsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#listOracleDbAzureBlobMounts."
      );
    const operationName = "listOracleDbAzureBlobMounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureBlobMountsRequest.compartmentId,
      "displayName": listOracleDbAzureBlobMountsRequest.displayName,
      "oracleDbAzureBlobMountId": listOracleDbAzureBlobMountsRequest.oracleDbAzureBlobMountId,
      "lifecycleState": listOracleDbAzureBlobMountsRequest.lifecycleState,
      "oracleDbAzureBlobContainerId":
        listOracleDbAzureBlobMountsRequest.oracleDbAzureBlobContainerId,
      "oracleDbAzureConnectorId": listOracleDbAzureBlobMountsRequest.oracleDbAzureConnectorId,
      "limit": listOracleDbAzureBlobMountsRequest.limit,
      "page": listOracleDbAzureBlobMountsRequest.page,
      "sortOrder": listOracleDbAzureBlobMountsRequest.sortOrder,
      "sortBy": listOracleDbAzureBlobMountsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureBlobMountsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureBlobMountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureBlobMountsResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureBlobMountSummaryCollection",
        bodyModel: model.OracleDbAzureBlobMountSummaryCollection,
        type: "model.OracleDbAzureBlobMountSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Oracle DB Azure Blob Mount resource for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOracleDbAzureBlobMountRequest
   * @return UpdateOracleDbAzureBlobMountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateOracleDbAzureBlobMount.ts.html |here} to see how to use UpdateOracleDbAzureBlobMount API.
   */
  public async updateOracleDbAzureBlobMount(
    updateOracleDbAzureBlobMountRequest: requests.UpdateOracleDbAzureBlobMountRequest
  ): Promise<responses.UpdateOracleDbAzureBlobMountResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureBlobMountClient#updateOracleDbAzureBlobMount."
      );
    const operationName = "updateOracleDbAzureBlobMount";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureBlobMountId}": updateOracleDbAzureBlobMountRequest.oracleDbAzureBlobMountId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOracleDbAzureBlobMountRequest.ifMatch,
      "opc-request-id": updateOracleDbAzureBlobMountRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOracleDbAzureBlobMountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureBlobMount/{oracleDbAzureBlobMountId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOracleDbAzureBlobMountRequest.updateOracleDbAzureBlobMountDetails,
        "UpdateOracleDbAzureBlobMountDetails",
        model.UpdateOracleDbAzureBlobMountDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOracleDbAzureBlobMountResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDBAzureConnectorApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDBAzureConnectorClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDBAzureConnectorWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDBAzureConnector";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger)
      this.logger.info(`OracleDBAzureConnectorClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDBAzureConnectorClient.serviceEndpointTemplate,
        this._region,
        OracleDBAzureConnectorClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDBAzureConnectorClient.serviceEndpointTemplate,
        this._regionId,
        OracleDBAzureConnectorClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDBAzureConnectorClient.serviceEndpointTemplate,
      region,
      OracleDBAzureConnectorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDBAzureConnectorClient.serviceEndpointTemplate,
      regionId,
      OracleDBAzureConnectorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDBAzureConnectorWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDBAzureConnectorWaiter {
    this._waiters = new OracleDBAzureConnectorWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDBAzureConnectorWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the Oracle DB Azure Connector Resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOracleDbAzureConnectorCompartmentRequest
   * @return ChangeOracleDbAzureConnectorCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeOracleDbAzureConnectorCompartment.ts.html |here} to see how to use ChangeOracleDbAzureConnectorCompartment API.
   */
  public async changeOracleDbAzureConnectorCompartment(
    changeOracleDbAzureConnectorCompartmentRequest: requests.ChangeOracleDbAzureConnectorCompartmentRequest
  ): Promise<responses.ChangeOracleDbAzureConnectorCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#changeOracleDbAzureConnectorCompartment."
      );
    const operationName = "changeOracleDbAzureConnectorCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureConnectorId}":
        changeOracleDbAzureConnectorCompartmentRequest.oracleDbAzureConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeOracleDbAzureConnectorCompartmentRequest.opcRetryToken,
      "if-match": changeOracleDbAzureConnectorCompartmentRequest.ifMatch,
      "opc-request-id": changeOracleDbAzureConnectorCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOracleDbAzureConnectorCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector/{oracleDbAzureConnectorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOracleDbAzureConnectorCompartmentRequest.changeOracleDbAzureConnectorCompartmentDetails,
        "ChangeOracleDbAzureConnectorCompartmentDetails",
        model.ChangeOracleDbAzureConnectorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOracleDbAzureConnectorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates Oracle DB Azure Connector Resource and configured Azure Identity in OCI Database Resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOracleDbAzureConnectorRequest
   * @return CreateOracleDbAzureConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateOracleDbAzureConnector.ts.html |here} to see how to use CreateOracleDbAzureConnector API.
   */
  public async createOracleDbAzureConnector(
    createOracleDbAzureConnectorRequest: requests.CreateOracleDbAzureConnectorRequest
  ): Promise<responses.CreateOracleDbAzureConnectorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#createOracleDbAzureConnector."
      );
    const operationName = "createOracleDbAzureConnector";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOracleDbAzureConnectorRequest.opcRetryToken,
      "opc-request-id": createOracleDbAzureConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOracleDbAzureConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOracleDbAzureConnectorRequest.createOracleDbAzureConnectorDetails,
        "CreateOracleDbAzureConnectorDetails",
        model.CreateOracleDbAzureConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOracleDbAzureConnectorResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureConnector",
        bodyModel: model.OracleDbAzureConnector,
        type: "model.OracleDbAzureConnector",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete Oracle DB Azure Connector Resource and delete Azure Arc Identity too from Database Resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOracleDbAzureConnectorRequest
   * @return DeleteOracleDbAzureConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteOracleDbAzureConnector.ts.html |here} to see how to use DeleteOracleDbAzureConnector API.
   */
  public async deleteOracleDbAzureConnector(
    deleteOracleDbAzureConnectorRequest: requests.DeleteOracleDbAzureConnectorRequest
  ): Promise<responses.DeleteOracleDbAzureConnectorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#deleteOracleDbAzureConnector."
      );
    const operationName = "deleteOracleDbAzureConnector";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureConnectorId}": deleteOracleDbAzureConnectorRequest.oracleDbAzureConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOracleDbAzureConnectorRequest.ifMatch,
      "opc-request-id": deleteOracleDbAzureConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOracleDbAzureConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector/{oracleDbAzureConnectorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOracleDbAzureConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Oracle DB Azure Connector Resource form a particular Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureConnectorRequest
   * @return GetOracleDbAzureConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureConnector.ts.html |here} to see how to use GetOracleDbAzureConnector API.
   */
  public async getOracleDbAzureConnector(
    getOracleDbAzureConnectorRequest: requests.GetOracleDbAzureConnectorRequest
  ): Promise<responses.GetOracleDbAzureConnectorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#getOracleDbAzureConnector."
      );
    const operationName = "getOracleDbAzureConnector";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureConnectorId}": getOracleDbAzureConnectorRequest.oracleDbAzureConnectorId
    };

    const queryParams = {
      "limit": getOracleDbAzureConnectorRequest.limit,
      "page": getOracleDbAzureConnectorRequest.page,
      "sortOrder": getOracleDbAzureConnectorRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector/{oracleDbAzureConnectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureConnectorResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureConnector",
        bodyModel: model.OracleDbAzureConnector,
        type: "model.OracleDbAzureConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Oracle DB Azure Connector Resource based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureConnectorsRequest
   * @return ListOracleDbAzureConnectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureConnectors.ts.html |here} to see how to use ListOracleDbAzureConnectors API.
   */
  public async listOracleDbAzureConnectors(
    listOracleDbAzureConnectorsRequest: requests.ListOracleDbAzureConnectorsRequest
  ): Promise<responses.ListOracleDbAzureConnectorsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#listOracleDbAzureConnectors."
      );
    const operationName = "listOracleDbAzureConnectors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureConnectorsRequest.compartmentId,
      "displayName": listOracleDbAzureConnectorsRequest.displayName,
      "oracleDbAzureConnectorId": listOracleDbAzureConnectorsRequest.oracleDbAzureConnectorId,
      "lifecycleState": listOracleDbAzureConnectorsRequest.lifecycleState,
      "dbClusterResourceId": listOracleDbAzureConnectorsRequest.dbClusterResourceId,
      "limit": listOracleDbAzureConnectorsRequest.limit,
      "page": listOracleDbAzureConnectorsRequest.page,
      "sortOrder": listOracleDbAzureConnectorsRequest.sortOrder,
      "sortBy": listOracleDbAzureConnectorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureConnectorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureConnectorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureConnectorsResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureConnectorSummaryCollection",
        bodyModel: model.OracleDbAzureConnectorSummaryCollection,
        type: "model.OracleDbAzureConnectorSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patch Azure Arc Agent on VM Cluster with new version.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchOracleDbAzureConnectorRequest
   * @return PatchOracleDbAzureConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/PatchOracleDbAzureConnector.ts.html |here} to see how to use PatchOracleDbAzureConnector API.
   */
  public async patchOracleDbAzureConnector(
    patchOracleDbAzureConnectorRequest: requests.PatchOracleDbAzureConnectorRequest
  ): Promise<responses.PatchOracleDbAzureConnectorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#patchOracleDbAzureConnector."
      );
    const operationName = "patchOracleDbAzureConnector";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureConnectorId}": patchOracleDbAzureConnectorRequest.oracleDbAzureConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchOracleDbAzureConnectorRequest.ifMatch,
      "opc-request-id": patchOracleDbAzureConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchOracleDbAzureConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector/{oracleDbAzureConnectorId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchOracleDbAzureConnectorRequest.patchOracleDbAzureConnectorDetails,
        "PatchOracleDbAzureConnectorDetails",
        model.PatchOracleDbAzureConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchOracleDbAzureConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Oracle DB Azure Connector Resource for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOracleDbAzureConnectorRequest
   * @return UpdateOracleDbAzureConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateOracleDbAzureConnector.ts.html |here} to see how to use UpdateOracleDbAzureConnector API.
   */
  public async updateOracleDbAzureConnector(
    updateOracleDbAzureConnectorRequest: requests.UpdateOracleDbAzureConnectorRequest
  ): Promise<responses.UpdateOracleDbAzureConnectorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDBAzureConnectorClient#updateOracleDbAzureConnector."
      );
    const operationName = "updateOracleDbAzureConnector";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureConnectorId}": updateOracleDbAzureConnectorRequest.oracleDbAzureConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOracleDbAzureConnectorRequest.ifMatch,
      "opc-request-id": updateOracleDbAzureConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOracleDbAzureConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureConnector/{oracleDbAzureConnectorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOracleDbAzureConnectorRequest.updateOracleDbAzureConnectorDetails,
        "UpdateOracleDbAzureConnectorDetails",
        model.UpdateOracleDbAzureConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOracleDbAzureConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDbAzureKeyApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDbAzureKeyClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDbAzureKeyWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDbAzureKey";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger) this.logger.info(`OracleDbAzureKeyClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDbAzureKeyClient.serviceEndpointTemplate,
        this._region,
        OracleDbAzureKeyClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDbAzureKeyClient.serviceEndpointTemplate,
        this._regionId,
        OracleDbAzureKeyClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDbAzureKeyClient.serviceEndpointTemplate,
      region,
      OracleDbAzureKeyClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDbAzureKeyClient.serviceEndpointTemplate,
      regionId,
      OracleDbAzureKeyClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDbAzureKeyWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDbAzureKeyWaiter {
    this._waiters = new OracleDbAzureKeyWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDbAzureKeyWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Get Oracle DB Azure Key Details form a particular Container Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureKeyRequest
   * @return GetOracleDbAzureKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureKey.ts.html |here} to see how to use GetOracleDbAzureKey API.
   */
  public async getOracleDbAzureKey(
    getOracleDbAzureKeyRequest: requests.GetOracleDbAzureKeyRequest
  ): Promise<responses.GetOracleDbAzureKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureKeyClient#getOracleDbAzureKey.");
    const operationName = "getOracleDbAzureKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureKeyId}": getOracleDbAzureKeyRequest.oracleDbAzureKeyId
    };

    const queryParams = {
      "limit": getOracleDbAzureKeyRequest.limit,
      "page": getOracleDbAzureKeyRequest.page,
      "sortOrder": getOracleDbAzureKeyRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureKeyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureKey/{oracleDbAzureKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureKeyResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureKey",
        bodyModel: model.OracleDbAzureKey,
        type: "model.OracleDbAzureKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Oracle DB Azure Keys based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureKeysRequest
   * @return ListOracleDbAzureKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureKeys.ts.html |here} to see how to use ListOracleDbAzureKeys API.
   */
  public async listOracleDbAzureKeys(
    listOracleDbAzureKeysRequest: requests.ListOracleDbAzureKeysRequest
  ): Promise<responses.ListOracleDbAzureKeysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureKeyClient#listOracleDbAzureKeys.");
    const operationName = "listOracleDbAzureKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureKeysRequest.compartmentId,
      "displayName": listOracleDbAzureKeysRequest.displayName,
      "oracleDbAzureVaultId": listOracleDbAzureKeysRequest.oracleDbAzureVaultId,
      "oracleDbAzureKeyId": listOracleDbAzureKeysRequest.oracleDbAzureKeyId,
      "lifecycleState": listOracleDbAzureKeysRequest.lifecycleState,
      "limit": listOracleDbAzureKeysRequest.limit,
      "page": listOracleDbAzureKeysRequest.page,
      "sortOrder": listOracleDbAzureKeysRequest.sortOrder,
      "sortBy": listOracleDbAzureKeysRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureKeysRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureKeysResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureKeySummaryCollection",
        bodyModel: model.OracleDbAzureKeySummaryCollection,
        type: "model.OracleDbAzureKeySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDbAzureVaultApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDbAzureVaultClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDbAzureVaultWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDbAzureVault";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger) this.logger.info(`OracleDbAzureVaultClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDbAzureVaultClient.serviceEndpointTemplate,
        this._region,
        OracleDbAzureVaultClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDbAzureVaultClient.serviceEndpointTemplate,
        this._regionId,
        OracleDbAzureVaultClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDbAzureVaultClient.serviceEndpointTemplate,
      region,
      OracleDbAzureVaultClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDbAzureVaultClient.serviceEndpointTemplate,
      regionId,
      OracleDbAzureVaultClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDbAzureVaultWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDbAzureVaultWaiter {
    this._waiters = new OracleDbAzureVaultWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDbAzureVaultWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the DB Azure Vault resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOracleDbAzureVaultCompartmentRequest
   * @return ChangeOracleDbAzureVaultCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeOracleDbAzureVaultCompartment.ts.html |here} to see how to use ChangeOracleDbAzureVaultCompartment API.
   */
  public async changeOracleDbAzureVaultCompartment(
    changeOracleDbAzureVaultCompartmentRequest: requests.ChangeOracleDbAzureVaultCompartmentRequest
  ): Promise<responses.ChangeOracleDbAzureVaultCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultClient#changeOracleDbAzureVaultCompartment."
      );
    const operationName = "changeOracleDbAzureVaultCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultId}": changeOracleDbAzureVaultCompartmentRequest.oracleDbAzureVaultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeOracleDbAzureVaultCompartmentRequest.opcRetryToken,
      "if-match": changeOracleDbAzureVaultCompartmentRequest.ifMatch,
      "opc-request-id": changeOracleDbAzureVaultCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOracleDbAzureVaultCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault/{oracleDbAzureVaultId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOracleDbAzureVaultCompartmentRequest.changeOracleDbAzureVaultCompartmentDetails,
        "ChangeOracleDbAzureVaultCompartmentDetails",
        model.ChangeOracleDbAzureVaultCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOracleDbAzureVaultCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create DB Azure Vaults based on the provided information, this will fetch Keys related to Azure Vaults.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOracleDbAzureVaultRequest
   * @return CreateOracleDbAzureVaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateOracleDbAzureVault.ts.html |here} to see how to use CreateOracleDbAzureVault API.
   */
  public async createOracleDbAzureVault(
    createOracleDbAzureVaultRequest: requests.CreateOracleDbAzureVaultRequest
  ): Promise<responses.CreateOracleDbAzureVaultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#createOracleDbAzureVault.");
    const operationName = "createOracleDbAzureVault";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOracleDbAzureVaultRequest.opcRetryToken,
      "if-match": createOracleDbAzureVaultRequest.ifMatch,
      "opc-request-id": createOracleDbAzureVaultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOracleDbAzureVaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOracleDbAzureVaultRequest.createOracleDbAzureVaultDetails,
        "CreateOracleDbAzureVaultDetails",
        model.CreateOracleDbAzureVaultDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOracleDbAzureVaultResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVault",
        bodyModel: model.OracleDbAzureVault,
        type: "model.OracleDbAzureVault",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete  DB Azure Vault details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOracleDbAzureVaultRequest
   * @return DeleteOracleDbAzureVaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteOracleDbAzureVault.ts.html |here} to see how to use DeleteOracleDbAzureVault API.
   */
  public async deleteOracleDbAzureVault(
    deleteOracleDbAzureVaultRequest: requests.DeleteOracleDbAzureVaultRequest
  ): Promise<responses.DeleteOracleDbAzureVaultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#deleteOracleDbAzureVault.");
    const operationName = "deleteOracleDbAzureVault";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultId}": deleteOracleDbAzureVaultRequest.oracleDbAzureVaultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOracleDbAzureVaultRequest.ifMatch,
      "opc-request-id": deleteOracleDbAzureVaultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOracleDbAzureVaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault/{oracleDbAzureVaultId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOracleDbAzureVaultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Oracle DB Azure Vault Details form a particular Container Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureVaultRequest
   * @return GetOracleDbAzureVaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureVault.ts.html |here} to see how to use GetOracleDbAzureVault API.
   */
  public async getOracleDbAzureVault(
    getOracleDbAzureVaultRequest: requests.GetOracleDbAzureVaultRequest
  ): Promise<responses.GetOracleDbAzureVaultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#getOracleDbAzureVault.");
    const operationName = "getOracleDbAzureVault";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultId}": getOracleDbAzureVaultRequest.oracleDbAzureVaultId
    };

    const queryParams = {
      "limit": getOracleDbAzureVaultRequest.limit,
      "page": getOracleDbAzureVaultRequest.page,
      "sortOrder": getOracleDbAzureVaultRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureVaultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureVaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault/{oracleDbAzureVaultId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureVaultResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVault",
        bodyModel: model.OracleDbAzureVault,
        type: "model.OracleDbAzureVault",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all DB Azure Vaults based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureVaultsRequest
   * @return ListOracleDbAzureVaultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureVaults.ts.html |here} to see how to use ListOracleDbAzureVaults API.
   */
  public async listOracleDbAzureVaults(
    listOracleDbAzureVaultsRequest: requests.ListOracleDbAzureVaultsRequest
  ): Promise<responses.ListOracleDbAzureVaultsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#listOracleDbAzureVaults.");
    const operationName = "listOracleDbAzureVaults";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureVaultsRequest.compartmentId,
      "displayName": listOracleDbAzureVaultsRequest.displayName,
      "oracleDbAzureVaultId": listOracleDbAzureVaultsRequest.oracleDbAzureVaultId,
      "lifecycleState": listOracleDbAzureVaultsRequest.lifecycleState,
      "oracleDbAzureResourceGroup": listOracleDbAzureVaultsRequest.oracleDbAzureResourceGroup,
      "oracleDbAzureConnectorId": listOracleDbAzureVaultsRequest.oracleDbAzureConnectorId,
      "limit": listOracleDbAzureVaultsRequest.limit,
      "page": listOracleDbAzureVaultsRequest.page,
      "sortOrder": listOracleDbAzureVaultsRequest.sortOrder,
      "sortBy": listOracleDbAzureVaultsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureVaultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureVaultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureVaultsResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVaultSummaryCollection",
        bodyModel: model.OracleDbAzureVaultSummaryCollection,
        type: "model.OracleDbAzureVaultSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refresh Oracle DB Azure Vault details from backend.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshOracleDbAzureVaultRequest
   * @return RefreshOracleDbAzureVaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/RefreshOracleDbAzureVault.ts.html |here} to see how to use RefreshOracleDbAzureVault API.
   */
  public async refreshOracleDbAzureVault(
    refreshOracleDbAzureVaultRequest: requests.RefreshOracleDbAzureVaultRequest
  ): Promise<responses.RefreshOracleDbAzureVaultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#refreshOracleDbAzureVault.");
    const operationName = "refreshOracleDbAzureVault";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultId}": refreshOracleDbAzureVaultRequest.oracleDbAzureVaultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshOracleDbAzureVaultRequest.opcRetryToken,
      "if-match": refreshOracleDbAzureVaultRequest.ifMatch,
      "opc-request-id": refreshOracleDbAzureVaultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshOracleDbAzureVaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault/{oracleDbAzureVaultId}/actions/refresh",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshOracleDbAzureVaultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Oracle DB Azure Vault Details for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOracleDbAzureVaultRequest
   * @return UpdateOracleDbAzureVaultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateOracleDbAzureVault.ts.html |here} to see how to use UpdateOracleDbAzureVault API.
   */
  public async updateOracleDbAzureVault(
    updateOracleDbAzureVaultRequest: requests.UpdateOracleDbAzureVaultRequest
  ): Promise<responses.UpdateOracleDbAzureVaultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OracleDbAzureVaultClient#updateOracleDbAzureVault.");
    const operationName = "updateOracleDbAzureVault";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultId}": updateOracleDbAzureVaultRequest.oracleDbAzureVaultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOracleDbAzureVaultRequest.ifMatch,
      "opc-request-id": updateOracleDbAzureVaultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOracleDbAzureVaultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVault/{oracleDbAzureVaultId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOracleDbAzureVaultRequest.updateOracleDbAzureVaultDetails,
        "UpdateOracleDbAzureVaultDetails",
        model.UpdateOracleDbAzureVaultDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOracleDbAzureVaultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OracleDbAzureVaultAssociationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OracleDbAzureVaultAssociationClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OracleDbAzureVaultAssociationWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OracleDbAzureVaultAssociation";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger)
      this.logger.info(`OracleDbAzureVaultAssociationClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OracleDbAzureVaultAssociationClient.serviceEndpointTemplate,
        this._region,
        OracleDbAzureVaultAssociationClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OracleDbAzureVaultAssociationClient.serviceEndpointTemplate,
        this._regionId,
        OracleDbAzureVaultAssociationClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OracleDbAzureVaultAssociationClient.serviceEndpointTemplate,
      region,
      OracleDbAzureVaultAssociationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OracleDbAzureVaultAssociationClient.serviceEndpointTemplate,
      regionId,
      OracleDbAzureVaultAssociationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OracleDbAzureVaultAssociationWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OracleDbAzureVaultAssociationWaiter {
    this._waiters = new OracleDbAzureVaultAssociationWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OracleDbAzureVaultAssociationWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Delete Oracle DB Azure Vault Association details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CascadingDeleteOracleDbAzureVaultAssociationRequest
   * @return CascadingDeleteOracleDbAzureVaultAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CascadingDeleteOracleDbAzureVaultAssociation.ts.html |here} to see how to use CascadingDeleteOracleDbAzureVaultAssociation API.
   */
  public async cascadingDeleteOracleDbAzureVaultAssociation(
    cascadingDeleteOracleDbAzureVaultAssociationRequest: requests.CascadingDeleteOracleDbAzureVaultAssociationRequest
  ): Promise<responses.CascadingDeleteOracleDbAzureVaultAssociationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#cascadingDeleteOracleDbAzureVaultAssociation."
      );
    const operationName = "cascadingDeleteOracleDbAzureVaultAssociation";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultAssociationId}":
        cascadingDeleteOracleDbAzureVaultAssociationRequest.oracleDbAzureVaultAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": cascadingDeleteOracleDbAzureVaultAssociationRequest.opcRetryToken,
      "if-match": cascadingDeleteOracleDbAzureVaultAssociationRequest.ifMatch,
      "opc-request-id": cascadingDeleteOracleDbAzureVaultAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cascadingDeleteOracleDbAzureVaultAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/oracleDbAzureVaultAssociation/{oracleDbAzureVaultAssociationId}/actions/cascadingDelete",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CascadingDeleteOracleDbAzureVaultAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Oracle DB Azure Vault Association resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOracleDbAzureVaultAssociationCompartmentRequest
   * @return ChangeOracleDbAzureVaultAssociationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ChangeOracleDbAzureVaultAssociationCompartment.ts.html |here} to see how to use ChangeOracleDbAzureVaultAssociationCompartment API.
   */
  public async changeOracleDbAzureVaultAssociationCompartment(
    changeOracleDbAzureVaultAssociationCompartmentRequest: requests.ChangeOracleDbAzureVaultAssociationCompartmentRequest
  ): Promise<responses.ChangeOracleDbAzureVaultAssociationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#changeOracleDbAzureVaultAssociationCompartment."
      );
    const operationName = "changeOracleDbAzureVaultAssociationCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultAssociationId}":
        changeOracleDbAzureVaultAssociationCompartmentRequest.oracleDbAzureVaultAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeOracleDbAzureVaultAssociationCompartmentRequest.opcRetryToken,
      "if-match": changeOracleDbAzureVaultAssociationCompartmentRequest.ifMatch,
      "opc-request-id": changeOracleDbAzureVaultAssociationCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOracleDbAzureVaultAssociationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/oracleDbAzureVaultAssociation/{oracleDbAzureVaultAssociationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOracleDbAzureVaultAssociationCompartmentRequest.changeOracleDbAzureVaultAssociationCompartmentDetails,
        "ChangeOracleDbAzureVaultAssociationCompartmentDetails",
        model.ChangeOracleDbAzureVaultAssociationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOracleDbAzureVaultAssociationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create Oracle DB Azure Vault Association based on the provided information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOracleDbAzureVaultAssociationRequest
   * @return CreateOracleDbAzureVaultAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CreateOracleDbAzureVaultAssociation.ts.html |here} to see how to use CreateOracleDbAzureVaultAssociation API.
   */
  public async createOracleDbAzureVaultAssociation(
    createOracleDbAzureVaultAssociationRequest: requests.CreateOracleDbAzureVaultAssociationRequest
  ): Promise<responses.CreateOracleDbAzureVaultAssociationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#createOracleDbAzureVaultAssociation."
      );
    const operationName = "createOracleDbAzureVaultAssociation";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOracleDbAzureVaultAssociationRequest.opcRetryToken,
      "if-match": createOracleDbAzureVaultAssociationRequest.ifMatch,
      "opc-request-id": createOracleDbAzureVaultAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOracleDbAzureVaultAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVaultAssociation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOracleDbAzureVaultAssociationRequest.createOracleDbAzureVaultAssociationDetails,
        "CreateOracleDbAzureVaultAssociationDetails",
        model.CreateOracleDbAzureVaultAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOracleDbAzureVaultAssociationResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVaultAssociation",
        bodyModel: model.OracleDbAzureVaultAssociation,
        type: "model.OracleDbAzureVaultAssociation",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete Oracle DB Azure Vault Association details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOracleDbAzureVaultAssociationRequest
   * @return DeleteOracleDbAzureVaultAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/DeleteOracleDbAzureVaultAssociation.ts.html |here} to see how to use DeleteOracleDbAzureVaultAssociation API.
   */
  public async deleteOracleDbAzureVaultAssociation(
    deleteOracleDbAzureVaultAssociationRequest: requests.DeleteOracleDbAzureVaultAssociationRequest
  ): Promise<responses.DeleteOracleDbAzureVaultAssociationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#deleteOracleDbAzureVaultAssociation."
      );
    const operationName = "deleteOracleDbAzureVaultAssociation";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultAssociationId}":
        deleteOracleDbAzureVaultAssociationRequest.oracleDbAzureVaultAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOracleDbAzureVaultAssociationRequest.ifMatch,
      "opc-request-id": deleteOracleDbAzureVaultAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOracleDbAzureVaultAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVaultAssociation/{oracleDbAzureVaultAssociationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOracleDbAzureVaultAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Oracle DB Azure Vault Details Association form a particular Container Resource ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOracleDbAzureVaultAssociationRequest
   * @return GetOracleDbAzureVaultAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetOracleDbAzureVaultAssociation.ts.html |here} to see how to use GetOracleDbAzureVaultAssociation API.
   */
  public async getOracleDbAzureVaultAssociation(
    getOracleDbAzureVaultAssociationRequest: requests.GetOracleDbAzureVaultAssociationRequest
  ): Promise<responses.GetOracleDbAzureVaultAssociationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#getOracleDbAzureVaultAssociation."
      );
    const operationName = "getOracleDbAzureVaultAssociation";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultAssociationId}":
        getOracleDbAzureVaultAssociationRequest.oracleDbAzureVaultAssociationId
    };

    const queryParams = {
      "limit": getOracleDbAzureVaultAssociationRequest.limit,
      "page": getOracleDbAzureVaultAssociationRequest.page,
      "sortOrder": getOracleDbAzureVaultAssociationRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOracleDbAzureVaultAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOracleDbAzureVaultAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVaultAssociation/{oracleDbAzureVaultAssociationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOracleDbAzureVaultAssociationResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVaultAssociation",
        bodyModel: model.OracleDbAzureVaultAssociation,
        type: "model.OracleDbAzureVaultAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the all Oracle DB Azure Associations based on filters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOracleDbAzureVaultAssociationsRequest
   * @return ListOracleDbAzureVaultAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListOracleDbAzureVaultAssociations.ts.html |here} to see how to use ListOracleDbAzureVaultAssociations API.
   */
  public async listOracleDbAzureVaultAssociations(
    listOracleDbAzureVaultAssociationsRequest: requests.ListOracleDbAzureVaultAssociationsRequest
  ): Promise<responses.ListOracleDbAzureVaultAssociationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#listOracleDbAzureVaultAssociations."
      );
    const operationName = "listOracleDbAzureVaultAssociations";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOracleDbAzureVaultAssociationsRequest.compartmentId,
      "oracleDbAzureVaultId": listOracleDbAzureVaultAssociationsRequest.oracleDbAzureVaultId,
      "displayName": listOracleDbAzureVaultAssociationsRequest.displayName,
      "oracleDbAzureVaultAssociationId":
        listOracleDbAzureVaultAssociationsRequest.oracleDbAzureVaultAssociationId,
      "lifecycleState": listOracleDbAzureVaultAssociationsRequest.lifecycleState,
      "oracleDbAzureConnectorId":
        listOracleDbAzureVaultAssociationsRequest.oracleDbAzureConnectorId,
      "limit": listOracleDbAzureVaultAssociationsRequest.limit,
      "page": listOracleDbAzureVaultAssociationsRequest.page,
      "sortOrder": listOracleDbAzureVaultAssociationsRequest.sortOrder,
      "sortBy": listOracleDbAzureVaultAssociationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOracleDbAzureVaultAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOracleDbAzureVaultAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVaultAssociation",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOracleDbAzureVaultAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "oracleDbAzureVaultAssociationSummaryCollection",
        bodyModel: model.OracleDbAzureVaultAssociationSummaryCollection,
        type: "model.OracleDbAzureVaultAssociationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies the existing Oracle DB Azure Vault Association Details for a given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOracleDbAzureVaultAssociationRequest
   * @return UpdateOracleDbAzureVaultAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/UpdateOracleDbAzureVaultAssociation.ts.html |here} to see how to use UpdateOracleDbAzureVaultAssociation API.
   */
  public async updateOracleDbAzureVaultAssociation(
    updateOracleDbAzureVaultAssociationRequest: requests.UpdateOracleDbAzureVaultAssociationRequest
  ): Promise<responses.UpdateOracleDbAzureVaultAssociationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OracleDbAzureVaultAssociationClient#updateOracleDbAzureVaultAssociation."
      );
    const operationName = "updateOracleDbAzureVaultAssociation";
    const apiReferenceLink = "";
    const pathParams = {
      "{oracleDbAzureVaultAssociationId}":
        updateOracleDbAzureVaultAssociationRequest.oracleDbAzureVaultAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOracleDbAzureVaultAssociationRequest.ifMatch,
      "opc-request-id": updateOracleDbAzureVaultAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOracleDbAzureVaultAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/oracleDbAzureVaultAssociation/{oracleDbAzureVaultAssociationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOracleDbAzureVaultAssociationRequest.updateOracleDbAzureVaultAssociationDetails,
        "UpdateOracleDbAzureVaultAssociationDetails",
        model.UpdateOracleDbAzureVaultAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOracleDbAzureVaultAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum WorkRequestApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class WorkRequestClient {
  protected static serviceEndpointTemplate =
    "https://dbmulticloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WorkRequestWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "WorkRequest";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dbmulticloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dbmulticloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240501";
    if (this.logger) this.logger.info(`WorkRequestClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        WorkRequestClient.serviceEndpointTemplate,
        this._region,
        WorkRequestClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        WorkRequestClient.serviceEndpointTemplate,
        this._regionId,
        WorkRequestClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WorkRequestClient.serviceEndpointTemplate,
      region,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WorkRequestClient.serviceEndpointTemplate,
      regionId,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new WorkRequestWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter {
    this._waiters = new WorkRequestWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WorkRequestWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Cancels a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WorkRequestClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dbmulticloud/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
