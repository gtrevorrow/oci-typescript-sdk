/**
 * Blockchain Platform Control Plane API
 * Blockchain Platform Control Plane API
 * OpenAPI spec version: 20191010
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { BlockchainPlatformWaiter } from "./blockchainplatform-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BlockchainPlatformApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class BlockchainPlatformClient {
  protected static serviceEndpointTemplate = "https://blockchain.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": BlockchainPlatformWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "BlockchainPlatform";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("blockchain")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("blockchain");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20191010";
    if (this.logger) this.logger.info(`BlockchainPlatformClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        BlockchainPlatformClient.serviceEndpointTemplate,
        this._region,
        BlockchainPlatformClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        BlockchainPlatformClient.serviceEndpointTemplate,
        this._regionId,
        BlockchainPlatformClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      BlockchainPlatformClient.serviceEndpointTemplate,
      region,
      BlockchainPlatformClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      BlockchainPlatformClient.serviceEndpointTemplate,
      regionId,
      BlockchainPlatformClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new BlockchainPlatformWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): BlockchainPlatformWaiter {
    this._waiters = new BlockchainPlatformWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): BlockchainPlatformWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Change Blockchain Platform Compartment
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeBlockchainPlatformCompartmentRequest
   * @return ChangeBlockchainPlatformCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ChangeBlockchainPlatformCompartment.ts.html |here} to see how to use ChangeBlockchainPlatformCompartment API.
   */
  public async changeBlockchainPlatformCompartment(
    changeBlockchainPlatformCompartmentRequest: requests.ChangeBlockchainPlatformCompartmentRequest
  ): Promise<responses.ChangeBlockchainPlatformCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation BlockchainPlatformClient#changeBlockchainPlatformCompartment."
      );
    const operationName = "changeBlockchainPlatformCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/ChangeBlockchainPlatformCompartment";
    const pathParams = {
      "{blockchainPlatformId}": changeBlockchainPlatformCompartmentRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeBlockchainPlatformCompartmentRequest.ifMatch,
      "opc-request-id": changeBlockchainPlatformCompartmentRequest.opcRequestId,
      "opc-retry-token": changeBlockchainPlatformCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeBlockchainPlatformCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBlockchainPlatformCompartmentRequest.changeBlockchainPlatformCompartmentDetails,
        "ChangeBlockchainPlatformCompartmentDetails",
        model.ChangeBlockchainPlatformCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBlockchainPlatformCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Blockchain Platform.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBlockchainPlatformRequest
   * @return CreateBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/CreateBlockchainPlatform.ts.html |here} to see how to use CreateBlockchainPlatform API.
   */
  public async createBlockchainPlatform(
    createBlockchainPlatformRequest: requests.CreateBlockchainPlatformRequest
  ): Promise<responses.CreateBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#createBlockchainPlatform.");
    const operationName = "createBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/CreateBlockchainPlatform";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBlockchainPlatformRequest.opcRetryToken,
      "opc-request-id": createBlockchainPlatformRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBlockchainPlatformRequest.createBlockchainPlatformDetails,
        "CreateBlockchainPlatformDetails",
        model.CreateBlockchainPlatformDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create Blockchain Platform Osn
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateOsnRequest
   * @return CreateOsnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/CreateOsn.ts.html |here} to see how to use CreateOsn API.
   */
  public async createOsn(
    createOsnRequest: requests.CreateOsnRequest
  ): Promise<responses.CreateOsnResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#createOsn.");
    const operationName = "createOsn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/CreateOsn";
    const pathParams = {
      "{blockchainPlatformId}": createOsnRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": createOsnRequest.ifMatch,
      "opc-request-id": createOsnRequest.opcRequestId,
      "opc-retry-token": createOsnRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOsnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/osns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOsnRequest.createOsnDetails,
        "CreateOsnDetails",
        model.CreateOsnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOsnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create Blockchain Platform Peer
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePeerRequest
   * @return CreatePeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/CreatePeer.ts.html |here} to see how to use CreatePeer API.
   */
  public async createPeer(
    createPeerRequest: requests.CreatePeerRequest
  ): Promise<responses.CreatePeerResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#createPeer.");
    const operationName = "createPeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/CreatePeer";
    const pathParams = {
      "{blockchainPlatformId}": createPeerRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPeerRequest.opcRequestId,
      "opc-retry-token": createPeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/peers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPeerRequest.createPeerDetails,
        "CreatePeerDetails",
        model.CreatePeerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a particular of a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBlockchainPlatformRequest
   * @return DeleteBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/DeleteBlockchainPlatform.ts.html |here} to see how to use DeleteBlockchainPlatform API.
   */
  public async deleteBlockchainPlatform(
    deleteBlockchainPlatformRequest: requests.DeleteBlockchainPlatformRequest
  ): Promise<responses.DeleteBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#deleteBlockchainPlatform.");
    const operationName = "deleteBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/DeleteBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": deleteBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBlockchainPlatformRequest.opcRequestId,
      "if-match": deleteBlockchainPlatformRequest.ifMatch,
      "opc-retry-token": deleteBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a particular OSN of a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOsnRequest
   * @return DeleteOsnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/DeleteOsn.ts.html |here} to see how to use DeleteOsn API.
   */
  public async deleteOsn(
    deleteOsnRequest: requests.DeleteOsnRequest
  ): Promise<responses.DeleteOsnResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#deleteOsn.");
    const operationName = "deleteOsn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/DeleteOsn";
    const pathParams = {
      "{blockchainPlatformId}": deleteOsnRequest.blockchainPlatformId,
      "{osnId}": deleteOsnRequest.osnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteOsnRequest.opcRequestId,
      "if-match": deleteOsnRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOsnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/osns/{osnId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOsnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a particular peer of a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePeerRequest
   * @return DeletePeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/DeletePeer.ts.html |here} to see how to use DeletePeer API.
   */
  public async deletePeer(
    deletePeerRequest: requests.DeletePeerRequest
  ): Promise<responses.DeletePeerResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#deletePeer.");
    const operationName = "deletePeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/DeletePeer";
    const pathParams = {
      "{blockchainPlatformId}": deletePeerRequest.blockchainPlatformId,
      "{peerId}": deletePeerRequest.peerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deletePeerRequest.opcRequestId,
      "if-match": deletePeerRequest.ifMatch,
      "opc-retry-token": deletePeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/peers/{peerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attempts to cancel the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteWorkRequestRequest
   * @return DeleteWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/DeleteWorkRequest.ts.html |here} to see how to use DeleteWorkRequest API.
   */
  public async deleteWorkRequest(
    deleteWorkRequestRequest: requests.DeleteWorkRequestRequest
  ): Promise<responses.DeleteWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#deleteWorkRequest.");
    const operationName = "deleteWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/WorkRequest/DeleteWorkRequest";
    const pathParams = {
      "{workRequestId}": deleteWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteWorkRequestRequest.opcRequestId,
      "if-match": deleteWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a Blockchain Platform identified by the specific id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBlockchainPlatformRequest
   * @return GetBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/GetBlockchainPlatform.ts.html |here} to see how to use GetBlockchainPlatform API.
   */
  public async getBlockchainPlatform(
    getBlockchainPlatformRequest: requests.GetBlockchainPlatformRequest
  ): Promise<responses.GetBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#getBlockchainPlatform.");
    const operationName = "getBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/GetBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": getBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBlockchainPlatformRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBlockchainPlatformResponse>{},
        body: await response.json(),
        bodyKey: "blockchainPlatform",
        bodyModel: model.BlockchainPlatform,
        type: "model.BlockchainPlatform",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about an OSN identified by the specific id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOsnRequest
   * @return GetOsnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/GetOsn.ts.html |here} to see how to use GetOsn API.
   */
  public async getOsn(getOsnRequest: requests.GetOsnRequest): Promise<responses.GetOsnResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#getOsn.");
    const operationName = "getOsn";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/Osn/GetOsn";
    const pathParams = {
      "{blockchainPlatformId}": getOsnRequest.blockchainPlatformId,
      "{osnId}": getOsnRequest.osnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOsnRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOsnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/osns/{osnId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOsnResponse>{},
        body: await response.json(),
        bodyKey: "osn",
        bodyModel: model.Osn,
        type: "model.Osn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a peer identified by the specific id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPeerRequest
   * @return GetPeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/GetPeer.ts.html |here} to see how to use GetPeer API.
   */
  public async getPeer(
    getPeerRequest: requests.GetPeerRequest
  ): Promise<responses.GetPeerResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#getPeer.");
    const operationName = "getPeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/Peer/GetPeer";
    const pathParams = {
      "{blockchainPlatformId}": getPeerRequest.blockchainPlatformId,
      "{peerId}": getPeerRequest.peerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPeerRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/peers/{peerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPeerResponse>{},
        body: await response.json(),
        bodyKey: "peer",
        bodyModel: model.Peer,
        type: "model.Peer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Blockchain Platform Patches
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBlockchainPlatformPatchesRequest
   * @return ListBlockchainPlatformPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListBlockchainPlatformPatches.ts.html |here} to see how to use ListBlockchainPlatformPatches API.
   */
  public async listBlockchainPlatformPatches(
    listBlockchainPlatformPatchesRequest: requests.ListBlockchainPlatformPatchesRequest
  ): Promise<responses.ListBlockchainPlatformPatchesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation BlockchainPlatformClient#listBlockchainPlatformPatches."
      );
    const operationName = "listBlockchainPlatformPatches";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/ListBlockchainPlatformPatches";
    const pathParams = {
      "{blockchainPlatformId}": listBlockchainPlatformPatchesRequest.blockchainPlatformId
    };

    const queryParams = {
      "page": listBlockchainPlatformPatchesRequest.page,
      "limit": listBlockchainPlatformPatchesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBlockchainPlatformPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBlockchainPlatformPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/patches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBlockchainPlatformPatchesResponse>{},
        body: await response.json(),
        bodyKey: "blockchainPlatformPatchCollection",
        bodyModel: model.BlockchainPlatformPatchCollection,
        type: "model.BlockchainPlatformPatchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list Blockchain Platform Instances in a compartment
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBlockchainPlatformsRequest
   * @return ListBlockchainPlatformsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListBlockchainPlatforms.ts.html |here} to see how to use ListBlockchainPlatforms API.
   */
  public async listBlockchainPlatforms(
    listBlockchainPlatformsRequest: requests.ListBlockchainPlatformsRequest
  ): Promise<responses.ListBlockchainPlatformsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#listBlockchainPlatforms.");
    const operationName = "listBlockchainPlatforms";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/ListBlockchainPlatforms";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listBlockchainPlatformsRequest.compartmentId,
      "displayName": listBlockchainPlatformsRequest.displayName,
      "page": listBlockchainPlatformsRequest.page,
      "limit": listBlockchainPlatformsRequest.limit,
      "sortOrder": listBlockchainPlatformsRequest.sortOrder,
      "sortBy": listBlockchainPlatformsRequest.sortBy,
      "lifecycleState": listBlockchainPlatformsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBlockchainPlatformsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBlockchainPlatformsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBlockchainPlatformsResponse>{},
        body: await response.json(),
        bodyKey: "blockchainPlatformCollection",
        bodyModel: model.BlockchainPlatformCollection,
        type: "model.BlockchainPlatformCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Blockchain Platform OSNs
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListOsnsRequest
   * @return ListOsnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListOsns.ts.html |here} to see how to use ListOsns API.
   */
  public async listOsns(
    listOsnsRequest: requests.ListOsnsRequest
  ): Promise<responses.ListOsnsResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#listOsns.");
    const operationName = "listOsns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/Osn/ListOsns";
    const pathParams = {
      "{blockchainPlatformId}": listOsnsRequest.blockchainPlatformId
    };

    const queryParams = {
      "displayName": listOsnsRequest.displayName,
      "sortOrder": listOsnsRequest.sortOrder,
      "sortBy": listOsnsRequest.sortBy,
      "page": listOsnsRequest.page,
      "limit": listOsnsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOsnsRequest.opcRequestId,
      "opc-retry-token": listOsnsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOsnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/osns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOsnsResponse>{},
        body: await response.json(),
        bodyKey: "osnCollection",
        bodyModel: model.OsnCollection,
        type: "model.OsnCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Blockchain Platform Peers
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPeersRequest
   * @return ListPeersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListPeers.ts.html |here} to see how to use ListPeers API.
   */
  public async listPeers(
    listPeersRequest: requests.ListPeersRequest
  ): Promise<responses.ListPeersResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#listPeers.");
    const operationName = "listPeers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/Peer/ListPeers";
    const pathParams = {
      "{blockchainPlatformId}": listPeersRequest.blockchainPlatformId
    };

    const queryParams = {
      "displayName": listPeersRequest.displayName,
      "sortOrder": listPeersRequest.sortOrder,
      "sortBy": listPeersRequest.sortBy,
      "page": listPeersRequest.page,
      "limit": listPeersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPeersRequest.opcRequestId,
      "opc-retry-token": listPeersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPeersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/peers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPeersResponse>{},
        body: await response.json(),
        bodyKey: "peerCollection",
        bodyModel: model.PeerCollection,
        type: "model.PeerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "blockchainPlatformId": listWorkRequestsRequest.blockchainPlatformId,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Preview Scale Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PreviewScaleBlockchainPlatformRequest
   * @return PreviewScaleBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/PreviewScaleBlockchainPlatform.ts.html |here} to see how to use PreviewScaleBlockchainPlatform API.
   */
  public async previewScaleBlockchainPlatform(
    previewScaleBlockchainPlatformRequest: requests.PreviewScaleBlockchainPlatformRequest
  ): Promise<responses.PreviewScaleBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation BlockchainPlatformClient#previewScaleBlockchainPlatform."
      );
    const operationName = "previewScaleBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/PreviewScaleBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": previewScaleBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": previewScaleBlockchainPlatformRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      previewScaleBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/scale/preview",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        previewScaleBlockchainPlatformRequest.scaleBlockchainPlatformDetails,
        "ScaleBlockchainPlatformDetails",
        model.ScaleBlockchainPlatformDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PreviewScaleBlockchainPlatformResponse>{},
        body: await response.json(),
        bodyKey: "scaledBlockchainPlatformPreview",
        bodyModel: model.ScaledBlockchainPlatformPreview,
        type: "model.ScaledBlockchainPlatformPreview",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Scale Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ScaleBlockchainPlatformRequest
   * @return ScaleBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/ScaleBlockchainPlatform.ts.html |here} to see how to use ScaleBlockchainPlatform API.
   */
  public async scaleBlockchainPlatform(
    scaleBlockchainPlatformRequest: requests.ScaleBlockchainPlatformRequest
  ): Promise<responses.ScaleBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#scaleBlockchainPlatform.");
    const operationName = "scaleBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/ScaleBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": scaleBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scaleBlockchainPlatformRequest.ifMatch,
      "opc-request-id": scaleBlockchainPlatformRequest.opcRequestId,
      "opc-retry-token": scaleBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scaleBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/scale",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scaleBlockchainPlatformRequest.scaleBlockchainPlatformDetails,
        "ScaleBlockchainPlatformDetails",
        model.ScaleBlockchainPlatformDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScaleBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartBlockchainPlatformRequest
   * @return StartBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/StartBlockchainPlatform.ts.html |here} to see how to use StartBlockchainPlatform API.
   */
  public async startBlockchainPlatform(
    startBlockchainPlatformRequest: requests.StartBlockchainPlatformRequest
  ): Promise<responses.StartBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#startBlockchainPlatform.");
    const operationName = "startBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/StartBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": startBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startBlockchainPlatformRequest.ifMatch,
      "opc-request-id": startBlockchainPlatformRequest.opcRequestId,
      "opc-retry-token": startBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stop a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopBlockchainPlatformRequest
   * @return StopBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/StopBlockchainPlatform.ts.html |here} to see how to use StopBlockchainPlatform API.
   */
  public async stopBlockchainPlatform(
    stopBlockchainPlatformRequest: requests.StopBlockchainPlatformRequest
  ): Promise<responses.StopBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#stopBlockchainPlatform.");
    const operationName = "stopBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/StopBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": stopBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopBlockchainPlatformRequest.ifMatch,
      "opc-request-id": stopBlockchainPlatformRequest.opcRequestId,
      "opc-retry-token": stopBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a particular of a Blockchain Platform
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBlockchainPlatformRequest
   * @return UpdateBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/UpdateBlockchainPlatform.ts.html |here} to see how to use UpdateBlockchainPlatform API.
   */
  public async updateBlockchainPlatform(
    updateBlockchainPlatformRequest: requests.UpdateBlockchainPlatformRequest
  ): Promise<responses.UpdateBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#updateBlockchainPlatform.");
    const operationName = "updateBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/UpdateBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": updateBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBlockchainPlatformRequest.opcRequestId,
      "if-match": updateBlockchainPlatformRequest.ifMatch,
      "opc-retry-token": updateBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBlockchainPlatformRequest.updateBlockchainPlatformDetails,
        "UpdateBlockchainPlatformDetails",
        model.UpdateBlockchainPlatformDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update Blockchain Platform OSN
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOsnRequest
   * @return UpdateOsnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/UpdateOsn.ts.html |here} to see how to use UpdateOsn API.
   */
  public async updateOsn(
    updateOsnRequest: requests.UpdateOsnRequest
  ): Promise<responses.UpdateOsnResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#updateOsn.");
    const operationName = "updateOsn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/UpdateOsn";
    const pathParams = {
      "{blockchainPlatformId}": updateOsnRequest.blockchainPlatformId,
      "{osnId}": updateOsnRequest.osnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOsnRequest.ifMatch,
      "opc-request-id": updateOsnRequest.opcRequestId,
      "opc-retry-token": updateOsnRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOsnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/osns/{osnId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOsnRequest.updateOsnDetails,
        "UpdateOsnDetails",
        model.UpdateOsnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOsnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update Blockchain Platform Peer
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdatePeerRequest
   * @return UpdatePeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/UpdatePeer.ts.html |here} to see how to use UpdatePeer API.
   */
  public async updatePeer(
    updatePeerRequest: requests.UpdatePeerRequest
  ): Promise<responses.UpdatePeerResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockchainPlatformClient#updatePeer.");
    const operationName = "updatePeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/UpdatePeer";
    const pathParams = {
      "{blockchainPlatformId}": updatePeerRequest.blockchainPlatformId,
      "{peerId}": updatePeerRequest.peerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePeerRequest.ifMatch,
      "opc-request-id": updatePeerRequest.opcRequestId,
      "opc-retry-token": updatePeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/peers/{peerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePeerRequest.updatePeerDetails,
        "UpdatePeerDetails",
        model.UpdatePeerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upgrade a Blockchain Platform version
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpgradeBlockchainPlatformRequest
   * @return UpgradeBlockchainPlatformResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/blockchain/UpgradeBlockchainPlatform.ts.html |here} to see how to use UpgradeBlockchainPlatform API.
   */
  public async upgradeBlockchainPlatform(
    upgradeBlockchainPlatformRequest: requests.UpgradeBlockchainPlatformRequest
  ): Promise<responses.UpgradeBlockchainPlatformResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockchainPlatformClient#upgradeBlockchainPlatform.");
    const operationName = "upgradeBlockchainPlatform";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/blockchain/20191010/BlockchainPlatform/UpgradeBlockchainPlatform";
    const pathParams = {
      "{blockchainPlatformId}": upgradeBlockchainPlatformRequest.blockchainPlatformId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": upgradeBlockchainPlatformRequest.ifMatch,
      "opc-request-id": upgradeBlockchainPlatformRequest.opcRequestId,
      "opc-retry-token": upgradeBlockchainPlatformRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upgradeBlockchainPlatformRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockchainPlatforms/{blockchainPlatformId}/actions/upgrade",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upgradeBlockchainPlatformRequest.upgradeBlockchainPlatformDetails,
        "UpgradeBlockchainPlatformDetails",
        model.UpgradeBlockchainPlatformDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpgradeBlockchainPlatformResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
