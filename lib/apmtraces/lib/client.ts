/**
 * Application Performance Monitoring Trace Explorer API
 * Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20200630
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ScheduledQueryWaiter } from "./scheduledquery-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AttributesApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AttributesClient {
  protected static serviceEndpointTemplate = "https://apm-trace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Attributes";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("apmtraces")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("apmtraces");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`AttributesClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        AttributesClient.serviceEndpointTemplate,
        this._region,
        AttributesClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        AttributesClient.serviceEndpointTemplate,
        this._regionId,
        AttributesClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AttributesClient.serviceEndpointTemplate,
      region,
      AttributesClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AttributesClient.serviceEndpointTemplate,
      regionId,
      AttributesClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Activates a set of attributes for the given APM Domain.  Attribute names are not case-sensitive.  Any duplicates present in the bulk activation
   * request are deduplicated and only unique attributes are activated.  A maximum number of 700 string attributes and 100 numeric attributes
   * can be activated in an APM Domain subject to the available string and numeric slots.  Once an attribute has been activated, it may take some time
   * for it to be appear in searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The
   * bulk activation operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they
   * get a success status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk
   * request are activated.  Attributes that are activated are unpinned by default if they are pinned.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkActivateAttributeRequest
   * @return BulkActivateAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkActivateAttribute.ts.html |here} to see how to use BulkActivateAttribute API.
   */
  public async bulkActivateAttribute(
    bulkActivateAttributeRequest: requests.BulkActivateAttributeRequest
  ): Promise<responses.BulkActivateAttributeResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#bulkActivateAttribute.");
    const operationName = "bulkActivateAttribute";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkActivationStatus/BulkActivateAttribute";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkActivateAttributeRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkActivateAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkActivateAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/activateAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkActivateAttributeRequest.bulkActivateAttributeDetails,
        "BulkActivateAttributeDetails",
        model.BulkActivateAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkActivateAttributeResponse>{},
        body: await response.json(),
        bodyKey: "bulkActivationStatus",
        bodyModel: model.BulkActivationStatus,
        type: "model.BulkActivationStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates a set of attributes for the given APM Domain.  Attribute names are not case-sensitive.  Any duplicates present in the bulk deactivation
   * request are deduplicated and only unique attributes are deactivated.  A maximum number of 700 string attributes and 100 numeric attributes
   * can be deactivated in an APM Domain subject to the available string and numeric slots.  Out of box attributes (Trace and Span) cannot be
   * deactivated, and will result in a processing error.  Once an attribute has been deactivated, it may take some time for it to disappear in
   * searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The bulk deactivation
   * operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they get a success
   * status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk request
   * are deactivated.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkDeActivateAttributeRequest
   * @return BulkDeActivateAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkDeActivateAttribute.ts.html |here} to see how to use BulkDeActivateAttribute API.
   */
  public async bulkDeActivateAttribute(
    bulkDeActivateAttributeRequest: requests.BulkDeActivateAttributeRequest
  ): Promise<responses.BulkDeActivateAttributeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AttributesClient#bulkDeActivateAttribute.");
    const operationName = "bulkDeActivateAttribute";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkDeActivationStatus/BulkDeActivateAttribute";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkDeActivateAttributeRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkDeActivateAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkDeActivateAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/deActivateAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkDeActivateAttributeRequest.bulkDeActivateAttributeDetails,
        "BulkDeActivateAttributeDetails",
        model.BulkDeActivateAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkDeActivateAttributeResponse>{},
        body: await response.json(),
        bodyKey: "bulkDeActivationStatus",
        bodyModel: model.BulkDeActivationStatus,
        type: "model.BulkDeActivationStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Pin a set of attributes in the APM Domain.  Attributes that are marked pinned are not autoactivated by ingest.
   * Attributes that are deactivated are pinned by default.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkPinAttributeRequest
   * @return BulkPinAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkPinAttribute.ts.html |here} to see how to use BulkPinAttribute API.
   */
  public async bulkPinAttribute(
    bulkPinAttributeRequest: requests.BulkPinAttributeRequest
  ): Promise<responses.BulkPinAttributeResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#bulkPinAttribute.");
    const operationName = "bulkPinAttribute";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkPinStatus/BulkPinAttribute";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkPinAttributeRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkPinAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkPinAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/pinAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkPinAttributeRequest.bulkPinAttributeDetails,
        "BulkPinAttributeDetails",
        model.BulkPinAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkPinAttributeResponse>{},
        body: await response.json(),
        bodyKey: "bulkPinStatus",
        bodyModel: model.BulkPinStatus,
        type: "model.BulkPinStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unpin a set of attributes in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkUnpinAttributeRequest
   * @return BulkUnpinAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUnpinAttribute.ts.html |here} to see how to use BulkUnpinAttribute API.
   */
  public async bulkUnpinAttribute(
    bulkUnpinAttributeRequest: requests.BulkUnpinAttributeRequest
  ): Promise<responses.BulkUnpinAttributeResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#bulkUnpinAttribute.");
    const operationName = "bulkUnpinAttribute";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkUnpinStatus/BulkUnpinAttribute";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkUnpinAttributeRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkUnpinAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUnpinAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/unPinAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkUnpinAttributeRequest.bulkUnpinAttributeDetails,
        "BulkUnpinAttributeDetails",
        model.BulkUnpinAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUnpinAttributeResponse>{},
        body: await response.json(),
        bodyKey: "bulkUnpinStatus",
        bodyModel: model.BulkUnpinStatus,
        type: "model.BulkUnpinStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a set of attribute properties in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkUpdateAttributeRequest
   * @return BulkUpdateAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUpdateAttribute.ts.html |here} to see how to use BulkUpdateAttribute API.
   */
  public async bulkUpdateAttribute(
    bulkUpdateAttributeRequest: requests.BulkUpdateAttributeRequest
  ): Promise<responses.BulkUpdateAttributeResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#bulkUpdateAttribute.");
    const operationName = "bulkUpdateAttribute";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkUpdateAttributeStatus/BulkUpdateAttribute";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkUpdateAttributeRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkUpdateAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUpdateAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/updateAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkUpdateAttributeRequest.bulkUpdateAttributeDetails,
        "BulkUpdateAttributeDetails",
        model.BulkUpdateAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUpdateAttributeResponse>{},
        body: await response.json(),
        bodyKey: "bulkUpdateAttributeStatus",
        bodyModel: model.BulkUpdateAttributeStatus,
        type: "model.BulkUpdateAttributeStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add or edit notes to a set of attributes in the APM Domain.  Notes can be added to either an active or an inactive attribute.  The
   * notes will be preserved even if the attribute changes state (when an active attribute is deactivated or when an inactive attribute
   * is activated).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BulkUpdateAttributeNotesRequest
   * @return BulkUpdateAttributeNotesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUpdateAttributeNotes.ts.html |here} to see how to use BulkUpdateAttributeNotes API.
   */
  public async bulkUpdateAttributeNotes(
    bulkUpdateAttributeNotesRequest: requests.BulkUpdateAttributeNotesRequest
  ): Promise<responses.BulkUpdateAttributeNotesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AttributesClient#bulkUpdateAttributeNotes.");
    const operationName = "bulkUpdateAttributeNotes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/BulkUpdateNotesStatus/BulkUpdateAttributeNotes";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": bulkUpdateAttributeNotesRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkUpdateAttributeNotesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUpdateAttributeNotesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/updateNotes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkUpdateAttributeNotesRequest.bulkUpdateAttributeNotesDetails,
        "BulkUpdateAttributeNotesDetails",
        model.BulkUpdateAttributeNotesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUpdateAttributeNotesResponse>{},
        body: await response.json(),
        bodyKey: "bulkUpdateNotesStatus",
        bodyModel: model.BulkUpdateNotesStatus,
        type: "model.BulkUpdateNotesStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get autoactivation status for a private data key or public data key in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetStatusAutoActivateRequest
   * @return GetStatusAutoActivateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetStatusAutoActivate.ts.html |here} to see how to use GetStatusAutoActivate API.
   */
  public async getStatusAutoActivate(
    getStatusAutoActivateRequest: requests.GetStatusAutoActivateRequest
  ): Promise<responses.GetStatusAutoActivateResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#getStatusAutoActivate.");
    const operationName = "getStatusAutoActivate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/AutoActivateStatus/GetStatusAutoActivate";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": getStatusAutoActivateRequest.apmDomainId,
      "dataKeyType": getStatusAutoActivateRequest.dataKeyType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStatusAutoActivateRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStatusAutoActivateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/autoActivateStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStatusAutoActivateResponse>{},
        body: await response.json(),
        bodyKey: "autoActivateStatus",
        bodyModel: model.AutoActivateStatus,
        type: "model.AutoActivateStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Turn on or off autoactivate for private data key or public data key traffic a given APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutToggleAutoActivateRequest
   * @return PutToggleAutoActivateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/PutToggleAutoActivate.ts.html |here} to see how to use PutToggleAutoActivate API.
   */
  public async putToggleAutoActivate(
    putToggleAutoActivateRequest: requests.PutToggleAutoActivateRequest
  ): Promise<responses.PutToggleAutoActivateResponse> {
    if (this.logger) this.logger.debug("Calling operation AttributesClient#putToggleAutoActivate.");
    const operationName = "putToggleAutoActivate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/AutoActivateToggleStatus/PutToggleAutoActivate";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": putToggleAutoActivateRequest.apmDomainId,
      "isAutoActivateOn": putToggleAutoActivateRequest.isAutoActivateOn,
      "dataKeyType": putToggleAutoActivateRequest.dataKeyType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": putToggleAutoActivateRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putToggleAutoActivateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/attributes/actions/autoActivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutToggleAutoActivateResponse>{},
        body: await response.json(),
        bodyKey: "autoActivateToggleStatus",
        bodyModel: model.AutoActivateToggleStatus,
        type: "model.AutoActivateToggleStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum QueryApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class QueryClient {
  protected static serviceEndpointTemplate = "https://apm-trace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Query";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("apmtraces")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("apmtraces");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`QueryClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        QueryClient.serviceEndpointTemplate,
        this._region,
        QueryClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        QueryClient.serviceEndpointTemplate,
        this._regionId,
        QueryClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      QueryClient.serviceEndpointTemplate,
      region,
      QueryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      QueryClient.serviceEndpointTemplate,
      regionId,
      QueryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Returns a list of predefined Quick Pick queries intended to assist the user
   * to choose a query to run.  There is no sorting applied on the results.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListQuickPicksRequest
   * @return ListQuickPicksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/ListQuickPicks.ts.html |here} to see how to use ListQuickPicks API.
   */
  public async listQuickPicks(
    listQuickPicksRequest: requests.ListQuickPicksRequest
  ): Promise<responses.ListQuickPicksResponse> {
    if (this.logger) this.logger.debug("Calling operation QueryClient#listQuickPicks.");
    const operationName = "listQuickPicks";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/QuickPickSummary/ListQuickPicks";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listQuickPicksRequest.apmDomainId,
      "limit": listQuickPicksRequest.limit,
      "page": listQuickPicksRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listQuickPicksRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listQuickPicksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries/quickPicks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListQuickPicksResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.QuickPickSummary,
        type: "Array<model.QuickPickSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listQuickPicksRecordIterator function.
   * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
   * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllQuickPicks(
    request: requests.ListQuickPicksRequest
  ): AsyncIterableIterator<model.QuickPickSummary> {
    return paginateRecords(request, req => this.listQuickPicks(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listQuickPicksResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllQuickPicksResponses(
    request: requests.ListQuickPicksRequest
  ): AsyncIterableIterator<responses.ListQuickPicksResponse> {
    return paginateResponses(request, req => this.listQuickPicks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
   * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listQuickPicksRecordIterator(
    request: requests.ListQuickPicksRequest
  ): AsyncIterableIterator<model.QuickPickSummary> {
    return paginateRecords(request, req => this.listQuickPicks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listQuickPicksResponseIterator(
    request: requests.ListQuickPicksRequest
  ): AsyncIterableIterator<responses.ListQuickPicksResponse> {
    return paginateResponses(request, req => this.listQuickPicks(req));
  }

  /**
   * Retrieves the results (selected attributes and aggregations) of a query constructed according to the Application Performance Monitoring Defined Query Syntax.
   * Query results are filtered by the filter criteria specified in the where clause.
   * Further query results are grouped by the attributes specified in the group by clause.  Finally,
   * ordering (asc/desc) is done by the specified attributes in the order by clause.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param QueryRequest
   * @return QueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/Query.ts.html |here} to see how to use Query API.
   */
  public async query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse> {
    if (this.logger) this.logger.debug("Calling operation QueryClient#query.");
    const operationName = "query";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/QueryResultResponse/Query";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": queryRequest.apmDomainId,
      "limit": queryRequest.limit,
      "page": queryRequest.page,
      "timeSpanStartedGreaterThanOrEqualTo": queryRequest.timeSpanStartedGreaterThanOrEqualTo,
      "timeSpanStartedLessThan": queryRequest.timeSpanStartedLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": queryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      queryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/queries/actions/runQuery",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        queryRequest.queryDetails,
        "QueryDetails",
        model.QueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.QueryResponse>{},
        body: await response.json(),
        bodyKey: "queryResultResponse",
        bodyModel: model.QueryResultResponse,
        type: "model.QueryResultResponse",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ScheduledQueryApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ScheduledQueryClient {
  protected static serviceEndpointTemplate = "https://apm-trace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ScheduledQueryWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ScheduledQuery";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("apmtraces")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("apmtraces");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`ScheduledQueryClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ScheduledQueryClient.serviceEndpointTemplate,
        this._region,
        ScheduledQueryClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ScheduledQueryClient.serviceEndpointTemplate,
        this._regionId,
        ScheduledQueryClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ScheduledQueryClient.serviceEndpointTemplate,
      region,
      ScheduledQueryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ScheduledQueryClient.serviceEndpointTemplate,
      regionId,
      ScheduledQueryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ScheduledQueryWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ScheduledQueryWaiter {
    this._waiters = new ScheduledQueryWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ScheduledQueryWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Create a scheduled query in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateScheduledQueryRequest
   * @return CreateScheduledQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/CreateScheduledQuery.ts.html |here} to see how to use CreateScheduledQuery API.
   */
  public async createScheduledQuery(
    createScheduledQueryRequest: requests.CreateScheduledQueryRequest
  ): Promise<responses.CreateScheduledQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ScheduledQueryClient#createScheduledQuery.");
    const operationName = "createScheduledQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/ScheduledQuery/CreateScheduledQuery";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": createScheduledQueryRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createScheduledQueryRequest.opcRequestId,
      "opc-retry-token": createScheduledQueryRequest.opcRetryToken,
      "opc-dry-run": createScheduledQueryRequest.opcDryRun
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScheduledQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledQueries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduledQueryRequest.createScheduledQueryDetails,
        "CreateScheduledQueryDetails",
        model.CreateScheduledQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduledQueryResponse>{},
        body: await response.json(),
        bodyKey: "scheduledQuery",
        bodyModel: model.ScheduledQuery,
        type: "model.ScheduledQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a scheduled query in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteScheduledQueryRequest
   * @return DeleteScheduledQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/DeleteScheduledQuery.ts.html |here} to see how to use DeleteScheduledQuery API.
   */
  public async deleteScheduledQuery(
    deleteScheduledQueryRequest: requests.DeleteScheduledQueryRequest
  ): Promise<responses.DeleteScheduledQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ScheduledQueryClient#deleteScheduledQuery.");
    const operationName = "deleteScheduledQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/ScheduledQuery/DeleteScheduledQuery";
    const pathParams = {
      "{scheduledQueryId}": deleteScheduledQueryRequest.scheduledQueryId
    };

    const queryParams = {
      "apmDomainId": deleteScheduledQueryRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteScheduledQueryRequest.opcRequestId,
      "if-match": deleteScheduledQueryRequest.ifMatch,
      "opc-retry-token": deleteScheduledQueryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScheduledQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledQueries/{scheduledQueryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduledQueryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a scheduled query in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetScheduledQueryRequest
   * @return GetScheduledQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetScheduledQuery.ts.html |here} to see how to use GetScheduledQuery API.
   */
  public async getScheduledQuery(
    getScheduledQueryRequest: requests.GetScheduledQueryRequest
  ): Promise<responses.GetScheduledQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledQueryClient#getScheduledQuery.");
    const operationName = "getScheduledQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/ScheduledQuery/GetScheduledQuery";
    const pathParams = {
      "{scheduledQueryId}": getScheduledQueryRequest.scheduledQueryId
    };

    const queryParams = {
      "apmDomainId": getScheduledQueryRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduledQueryRequest.opcRequestId,
      "opc-retry-token": getScheduledQueryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduledQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledQueries/{scheduledQueryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduledQueryResponse>{},
        body: await response.json(),
        bodyKey: "scheduledQuery",
        bodyModel: model.ScheduledQuery,
        type: "model.ScheduledQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all scheduled queries in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListScheduledQueriesRequest
   * @return ListScheduledQueriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/ListScheduledQueries.ts.html |here} to see how to use ListScheduledQueries API.
   */
  public async listScheduledQueries(
    listScheduledQueriesRequest: requests.ListScheduledQueriesRequest
  ): Promise<responses.ListScheduledQueriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ScheduledQueryClient#listScheduledQueries.");
    const operationName = "listScheduledQueries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/ScheduledQueryCollection/ListScheduledQueries";
    const pathParams = {};

    const queryParams = {
      "apmDomainId": listScheduledQueriesRequest.apmDomainId,
      "limit": listScheduledQueriesRequest.limit,
      "page": listScheduledQueriesRequest.page,
      "displayName": listScheduledQueriesRequest.displayName,
      "sortOrder": listScheduledQueriesRequest.sortOrder,
      "sortBy": listScheduledQueriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScheduledQueriesRequest.opcRequestId,
      "opc-retry-token": listScheduledQueriesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScheduledQueriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledQueries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledQueriesResponse>{},
        body: await response.json(),
        bodyKey: "scheduledQueryCollection",
        bodyModel: model.ScheduledQueryCollection,
        type: "model.ScheduledQueryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a scheduled query in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateScheduledQueryRequest
   * @return UpdateScheduledQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/UpdateScheduledQuery.ts.html |here} to see how to use UpdateScheduledQuery API.
   */
  public async updateScheduledQuery(
    updateScheduledQueryRequest: requests.UpdateScheduledQueryRequest
  ): Promise<responses.UpdateScheduledQueryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ScheduledQueryClient#updateScheduledQuery.");
    const operationName = "updateScheduledQuery";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/ScheduledQuery/UpdateScheduledQuery";
    const pathParams = {
      "{scheduledQueryId}": updateScheduledQueryRequest.scheduledQueryId
    };

    const queryParams = {
      "apmDomainId": updateScheduledQueryRequest.apmDomainId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateScheduledQueryRequest.ifMatch,
      "opc-request-id": updateScheduledQueryRequest.opcRequestId,
      "opc-retry-token": updateScheduledQueryRequest.opcRetryToken,
      "opc-dry-run": updateScheduledQueryRequest.opcDryRun
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScheduledQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledQueries/{scheduledQueryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduledQueryRequest.updateScheduledQueryDetails,
        "UpdateScheduledQueryDetails",
        model.UpdateScheduledQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduledQueryResponse>{},
        body: await response.json(),
        bodyKey: "scheduledQuery",
        bodyModel: model.ScheduledQuery,
        type: "model.ScheduledQuery",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TraceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class TraceClient {
  protected static serviceEndpointTemplate = "https://apm-trace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Trace";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("apmtraces")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("apmtraces");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`TraceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        TraceClient.serviceEndpointTemplate,
        this._region,
        TraceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        TraceClient.serviceEndpointTemplate,
        this._regionId,
        TraceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TraceClient.serviceEndpointTemplate,
      region,
      TraceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TraceClient.serviceEndpointTemplate,
      regionId,
      TraceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets the aggregated snapshot identified by trace ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAggregatedSnapshotRequest
   * @return GetAggregatedSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetAggregatedSnapshot.ts.html |here} to see how to use GetAggregatedSnapshot API.
   */
  public async getAggregatedSnapshot(
    getAggregatedSnapshotRequest: requests.GetAggregatedSnapshotRequest
  ): Promise<responses.GetAggregatedSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation TraceClient#getAggregatedSnapshot.");
    const operationName = "getAggregatedSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/AggregatedSnapshot/GetAggregatedSnapshot";
    const pathParams = {
      "{traceKey}": getAggregatedSnapshotRequest.traceKey
    };

    const queryParams = {
      "apmDomainId": getAggregatedSnapshotRequest.apmDomainId,
      "serviceName": getAggregatedSnapshotRequest.serviceName,
      "serverName": getAggregatedSnapshotRequest.serverName,
      "spanKey": getAggregatedSnapshotRequest.spanKey,
      "spanName": getAggregatedSnapshotRequest.spanName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAggregatedSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAggregatedSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/traces/{traceKey}/aggregatedSnapshotData",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAggregatedSnapshotResponse>{},
        body: await response.json(),
        bodyKey: "aggregatedSnapshot",
        bodyModel: model.AggregatedSnapshot,
        type: "model.AggregatedSnapshot",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a log in the APM Domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogRequest
   * @return GetLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetLog.ts.html |here} to see how to use GetLog API.
   */
  public async getLog(getLogRequest: requests.GetLogRequest): Promise<responses.GetLogResponse> {
    if (this.logger) this.logger.debug("Calling operation TraceClient#getLog.");
    const operationName = "getLog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/Log/GetLog";
    const pathParams = {
      "{logKey}": getLogRequest.logKey
    };

    const queryParams = {
      "apmDomainId": getLogRequest.apmDomainId,
      "timeLogStartedGreaterThanOrEqualTo": getLogRequest.timeLogStartedGreaterThanOrEqualTo,
      "timeLogEndedLessThan": getLogRequest.timeLogEndedLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogRequest.opcRequestId,
      "opc-retry-token": getLogRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logs/{logKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogResponse>{},
        body: await response.json(),
        bodyKey: "log",
        bodyModel: model.Log,
        type: "model.Log",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the span details identified by spanId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSpanRequest
   * @return GetSpanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetSpan.ts.html |here} to see how to use GetSpan API.
   */
  public async getSpan(
    getSpanRequest: requests.GetSpanRequest
  ): Promise<responses.GetSpanResponse> {
    if (this.logger) this.logger.debug("Calling operation TraceClient#getSpan.");
    const operationName = "getSpan";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/Span/GetSpan";
    const pathParams = {
      "{spanKey}": getSpanRequest.spanKey,
      "{traceKey}": getSpanRequest.traceKey
    };

    const queryParams = {
      "apmDomainId": getSpanRequest.apmDomainId,
      "timeSpanStartedGreaterThanOrEqualTo": getSpanRequest.timeSpanStartedGreaterThanOrEqualTo,
      "timeSpanStartedLessThan": getSpanRequest.timeSpanStartedLessThan,
      "spanNamespace": getSpanRequest.spanNamespace
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSpanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSpanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/spans/{traceKey}/{spanKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSpanResponse>{},
        body: await response.json(),
        bodyKey: "span",
        bodyModel: model.Span,
        type: "model.Span",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the trace details identified by traceId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTraceRequest
   * @return GetTraceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetTrace.ts.html |here} to see how to use GetTrace API.
   */
  public async getTrace(
    getTraceRequest: requests.GetTraceRequest
  ): Promise<responses.GetTraceResponse> {
    if (this.logger) this.logger.debug("Calling operation TraceClient#getTrace.");
    const operationName = "getTrace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/Trace/GetTrace";
    const pathParams = {
      "{traceKey}": getTraceRequest.traceKey
    };

    const queryParams = {
      "apmDomainId": getTraceRequest.apmDomainId,
      "timeTraceStartedGreaterThanOrEqualTo": getTraceRequest.timeTraceStartedGreaterThanOrEqualTo,
      "timeTraceStartedLessThan": getTraceRequest.timeTraceStartedLessThan,
      "traceNamespace": getTraceRequest.traceNamespace
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTraceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTraceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/traces/{traceKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTraceResponse>{},
        body: await response.json(),
        bodyKey: "trace",
        bodyModel: model.Trace,
        type: "model.Trace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the trace snapshots data identified by trace ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTraceSnapshotRequest
   * @return GetTraceSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetTraceSnapshot.ts.html |here} to see how to use GetTraceSnapshot API.
   */
  public async getTraceSnapshot(
    getTraceSnapshotRequest: requests.GetTraceSnapshotRequest
  ): Promise<responses.GetTraceSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation TraceClient#getTraceSnapshot.");
    const operationName = "getTraceSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/apm-trace-explorer/20200630/TraceSnapshot/GetTraceSnapshot";
    const pathParams = {
      "{traceKey}": getTraceSnapshotRequest.traceKey
    };

    const queryParams = {
      "apmDomainId": getTraceSnapshotRequest.apmDomainId,
      "isSummarized": getTraceSnapshotRequest.isSummarized,
      "threadId": getTraceSnapshotRequest.threadId,
      "snapshotTime": getTraceSnapshotRequest.snapshotTime
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTraceSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTraceSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/traces/{traceKey}/snapshotData",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTraceSnapshotResponse>{},
        body: await response.json(),
        bodyKey: "traceSnapshot",
        bodyModel: model.TraceSnapshot,
        type: "model.TraceSnapshot",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
