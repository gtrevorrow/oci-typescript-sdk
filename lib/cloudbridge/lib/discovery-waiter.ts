/**
 * Oracle Cloud Bridge API
 * API for Oracle Cloud Bridge service.
 * OpenAPI spec version: 20220509
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DiscoveryClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DiscoveryWaiter {
  public constructor(
    private client: DiscoveryClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAssetSource till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAssetSourceResponse | null (null in case of 404 response)
   */
  public async forAssetSource(
    request: serviceRequests.GetAssetSourceRequest,
    ...targetStates: models.AssetSourceLifecycleState[]
  ): Promise<serviceResponses.GetAssetSourceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAssetSource(request),
      response => targetStates.includes(response.assetSource.lifecycleState!),
      targetStates.includes(models.AssetSourceLifecycleState.Deleted)
    );
  }

  /**
   * Waits forDiscoverySchedule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDiscoveryScheduleResponse | null (null in case of 404 response)
   */
  public async forDiscoverySchedule(
    request: serviceRequests.GetDiscoveryScheduleRequest,
    ...targetStates: models.DiscoveryScheduleLifecycleState[]
  ): Promise<serviceResponses.GetDiscoveryScheduleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDiscoverySchedule(request),
      response => targetStates.includes(response.discoverySchedule.lifecycleState!),
      targetStates.includes(models.DiscoveryScheduleLifecycleState.Deleted)
    );
  }
}
