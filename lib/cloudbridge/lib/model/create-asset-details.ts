/**
 * Oracle Cloud Bridge API
 * API for Oracle Cloud Bridge service.
 * OpenAPI spec version: 20220509
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information about the new asset.
 */
export interface CreateAssetDetails {
  /**
   * Asset display name.
   */
  "displayName"?: string;
  /**
   * Inventory ID to which an asset belongs.
   */
  "inventoryId": string;
  /**
   * The OCID of the compartment that the asset belongs to.
   */
  "compartmentId": string;
  /**
   * The source key to which the asset belongs.
   */
  "sourceKey": string;
  /**
   * The key of the asset from the external environment.
   */
  "externalAssetKey": string;
  /**
   * List of asset source OCID.
   */
  "assetSourceIds"?: Array<string>;
  /**
   * The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no
   * predefined name, type, or namespace/scope. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Department\": \"Finance\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };

  "assetType": string;
}

export namespace CreateAssetDetails {
  export function getJsonObj(obj: CreateAssetDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "assetType" in obj && obj.assetType) {
      switch (obj.assetType) {
        case "AWS_EBS":
          return model.CreateAwsEbsAssetDetails.getJsonObj(
            <model.CreateAwsEbsAssetDetails>(<object>jsonObj),
            true
          );
        case "VMWARE_VM":
          return model.CreateVmwareVmAssetDetails.getJsonObj(
            <model.CreateVmwareVmAssetDetails>(<object>jsonObj),
            true
          );
        case "AWS_EC2":
          return model.CreateAwsEc2AssetDetails.getJsonObj(
            <model.CreateAwsEc2AssetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.assetType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateAssetDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "assetType" in obj && obj.assetType) {
      switch (obj.assetType) {
        case "AWS_EBS":
          return model.CreateAwsEbsAssetDetails.getDeserializedJsonObj(
            <model.CreateAwsEbsAssetDetails>(<object>jsonObj),
            true
          );
        case "VMWARE_VM":
          return model.CreateVmwareVmAssetDetails.getDeserializedJsonObj(
            <model.CreateVmwareVmAssetDetails>(<object>jsonObj),
            true
          );
        case "AWS_EC2":
          return model.CreateAwsEc2AssetDetails.getDeserializedJsonObj(
            <model.CreateAwsEc2AssetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.assetType}`);
      }
    }
    return jsonObj;
  }
}
