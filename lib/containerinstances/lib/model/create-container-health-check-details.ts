/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Container Health Check is used to check and report the status of a container.
 *
 */
export interface CreateContainerHealthCheckDetails {
  /**
   * Health check name.
   */
  "name"?: string;
  /**
   * The initial delay in seconds before start checking container health status. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "initialDelayInSeconds"?: number;
  /**
   * Number of seconds between two consecutive runs for checking container health. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "intervalInSeconds"?: number;
  /**
   * Number of consecutive failures at which we consider the check failed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "failureThreshold"?: number;
  /**
   * Number of consecutive successes at which we consider the check succeeded again after it was in failure state. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "successThreshold"?: number;
  /**
   * Length of waiting time in seconds before marking health check failed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "timeoutInSeconds"?: number;
  /**
   * The action will be triggered when the container health check fails. There are two types of action: KILL or NONE. The default
   * action is KILL. If failure action is KILL, the container will be subject to the container restart policy.
   *
   */
  "failureAction"?: model.ContainerHealthCheckFailureAction;

  "healthCheckType": string;
}

export namespace CreateContainerHealthCheckDetails {
  export function getJsonObj(obj: CreateContainerHealthCheckDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "healthCheckType" in obj && obj.healthCheckType) {
      switch (obj.healthCheckType) {
        case "TCP":
          return model.CreateContainerTcpHealthCheckDetails.getJsonObj(
            <model.CreateContainerTcpHealthCheckDetails>(<object>jsonObj),
            true
          );
        case "HTTP":
          return model.CreateContainerHttpHealthCheckDetails.getJsonObj(
            <model.CreateContainerHttpHealthCheckDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.healthCheckType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateContainerHealthCheckDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "healthCheckType" in obj && obj.healthCheckType) {
      switch (obj.healthCheckType) {
        case "TCP":
          return model.CreateContainerTcpHealthCheckDetails.getDeserializedJsonObj(
            <model.CreateContainerTcpHealthCheckDetails>(<object>jsonObj),
            true
          );
        case "HTTP":
          return model.CreateContainerHttpHealthCheckDetails.getDeserializedJsonObj(
            <model.CreateContainerHttpHealthCheckDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.healthCheckType}`);
      }
    }
    return jsonObj;
  }
}
