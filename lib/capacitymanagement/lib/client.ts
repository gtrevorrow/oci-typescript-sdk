/**
 * OCI Control Center Capacity Management API
 * OCI Control Center (OCC) Capacity Management enables you to manage capacity requests in realms where OCI Control Center Capacity Management is available. For more information, see [OCI Control Center](/iaas/Content/control-center/home.htm).
 * OpenAPI spec version: 20231107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { CapacityManagementWaiter } from "./capacitymanagement-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CapacityManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class CapacityManagementClient {
  protected static serviceEndpointTemplate =
    "https://control-center-cp.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "control-center-cp";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": CapacityManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "CapacityManagement";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("capacitymanagement")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("capacitymanagement");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20231107";
    if (this.logger) this.logger.info(`CapacityManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        CapacityManagementClient.serviceEndpointTemplate,
        this._region,
        CapacityManagementClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        CapacityManagementClient.serviceEndpointTemplate,
        this._regionId,
        CapacityManagementClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      CapacityManagementClient.serviceEndpointTemplate,
      region,
      CapacityManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      CapacityManagementClient.serviceEndpointTemplate,
      regionId,
      CapacityManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new CapacityManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): CapacityManagementWaiter {
    this._waiters = new CapacityManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): CapacityManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Create availability catalog
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOccAvailabilityCatalogRequest
   * @return CreateOccAvailabilityCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccAvailabilityCatalog.ts.html |here} to see how to use CreateOccAvailabilityCatalog API.
   */
  public async createOccAvailabilityCatalog(
    createOccAvailabilityCatalogRequest: requests.CreateOccAvailabilityCatalogRequest
  ): Promise<responses.CreateOccAvailabilityCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#createOccAvailabilityCatalog.");
    const operationName = "createOccAvailabilityCatalog";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOccAvailabilityCatalogRequest.opcRetryToken,
      "opc-request-id": createOccAvailabilityCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOccAvailabilityCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOccAvailabilityCatalogRequest.createOccAvailabilityCatalogDetails,
        "CreateOccAvailabilityCatalogDetails",
        model.CreateOccAvailabilityCatalogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOccAvailabilityCatalogResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCatalog",
        bodyModel: model.OccAvailabilityCatalog,
        type: "model.OccAvailabilityCatalog",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create Capacity Request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOccCapacityRequestRequest
   * @return CreateOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCapacityRequest.ts.html |here} to see how to use CreateOccCapacityRequest API.
   */
  public async createOccCapacityRequest(
    createOccCapacityRequestRequest: requests.CreateOccCapacityRequestRequest
  ): Promise<responses.CreateOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#createOccCapacityRequest.");
    const operationName = "createOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOccCapacityRequestRequest.opcRetryToken,
      "opc-request-id": createOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOccCapacityRequestRequest.createOccCapacityRequestDetails,
        "CreateOccCapacityRequestDetails",
        model.CreateOccCapacityRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create customer.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOccCustomerRequest
   * @return CreateOccCustomerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCustomer.ts.html |here} to see how to use CreateOccCustomer API.
   */
  public async createOccCustomer(
    createOccCustomerRequest: requests.CreateOccCustomerRequest
  ): Promise<responses.CreateOccCustomerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#createOccCustomer.");
    const operationName = "createOccCustomer";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": createOccCustomerRequest.occCustomerGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOccCustomerRequest.opcRetryToken,
      "opc-request-id": createOccCustomerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOccCustomerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOccCustomerRequest.createOccCustomerDetails,
        "CreateOccCustomerDetails",
        model.CreateOccCustomerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOccCustomerResponse>{},
        body: await response.json(),
        bodyKey: "occCustomer",
        bodyModel: model.OccCustomer,
        type: "model.OccCustomer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create customer group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOccCustomerGroupRequest
   * @return CreateOccCustomerGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCustomerGroup.ts.html |here} to see how to use CreateOccCustomerGroup API.
   */
  public async createOccCustomerGroup(
    createOccCustomerGroupRequest: requests.CreateOccCustomerGroupRequest
  ): Promise<responses.CreateOccCustomerGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#createOccCustomerGroup.");
    const operationName = "createOccCustomerGroup";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOccCustomerGroupRequest.opcRetryToken,
      "opc-request-id": createOccCustomerGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOccCustomerGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOccCustomerGroupRequest.createOccCustomerGroupDetails,
        "CreateOccCustomerGroupDetails",
        model.CreateOccCustomerGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOccCustomerGroupResponse>{},
        body: await response.json(),
        bodyKey: "occCustomerGroup",
        bodyModel: model.OccCustomerGroup,
        type: "model.OccCustomerGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the availability catalog resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOccAvailabilityCatalogRequest
   * @return DeleteOccAvailabilityCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccAvailabilityCatalog.ts.html |here} to see how to use DeleteOccAvailabilityCatalog API.
   */
  public async deleteOccAvailabilityCatalog(
    deleteOccAvailabilityCatalogRequest: requests.DeleteOccAvailabilityCatalogRequest
  ): Promise<responses.DeleteOccAvailabilityCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#deleteOccAvailabilityCatalog.");
    const operationName = "deleteOccAvailabilityCatalog";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": deleteOccAvailabilityCatalogRequest.occAvailabilityCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOccAvailabilityCatalogRequest.ifMatch,
      "opc-request-id": deleteOccAvailabilityCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOccAvailabilityCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOccAvailabilityCatalogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the capacity request resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOccCapacityRequestRequest
   * @return DeleteOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCapacityRequest.ts.html |here} to see how to use DeleteOccCapacityRequest API.
   */
  public async deleteOccCapacityRequest(
    deleteOccCapacityRequestRequest: requests.DeleteOccCapacityRequestRequest
  ): Promise<responses.DeleteOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#deleteOccCapacityRequest.");
    const operationName = "deleteOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": deleteOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOccCapacityRequestRequest.ifMatch,
      "opc-request-id": deleteOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests/{occCapacityRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOccCapacityRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the customer resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOccCustomerRequest
   * @return DeleteOccCustomerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCustomer.ts.html |here} to see how to use DeleteOccCustomer API.
   */
  public async deleteOccCustomer(
    deleteOccCustomerRequest: requests.DeleteOccCustomerRequest
  ): Promise<responses.DeleteOccCustomerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#deleteOccCustomer.");
    const operationName = "deleteOccCustomer";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": deleteOccCustomerRequest.occCustomerGroupId,
      "{occCustomerId}": deleteOccCustomerRequest.occCustomerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOccCustomerRequest.ifMatch,
      "opc-request-id": deleteOccCustomerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOccCustomerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers/{occCustomerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOccCustomerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the customer group resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOccCustomerGroupRequest
   * @return DeleteOccCustomerGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCustomerGroup.ts.html |here} to see how to use DeleteOccCustomerGroup API.
   */
  public async deleteOccCustomerGroup(
    deleteOccCustomerGroupRequest: requests.DeleteOccCustomerGroupRequest
  ): Promise<responses.DeleteOccCustomerGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#deleteOccCustomerGroup.");
    const operationName = "deleteOccCustomerGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": deleteOccCustomerGroupRequest.occCustomerGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOccCustomerGroupRequest.ifMatch,
      "opc-request-id": deleteOccCustomerGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOccCustomerGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOccCustomerGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details about availability catalog.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOccAvailabilityCatalogRequest
   * @return GetOccAvailabilityCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccAvailabilityCatalog.ts.html |here} to see how to use GetOccAvailabilityCatalog API.
   */
  public async getOccAvailabilityCatalog(
    getOccAvailabilityCatalogRequest: requests.GetOccAvailabilityCatalogRequest
  ): Promise<responses.GetOccAvailabilityCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#getOccAvailabilityCatalog.");
    const operationName = "getOccAvailabilityCatalog";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": getOccAvailabilityCatalogRequest.occAvailabilityCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOccAvailabilityCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOccAvailabilityCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOccAvailabilityCatalogResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCatalog",
        bodyModel: model.OccAvailabilityCatalog,
        type: "model.OccAvailabilityCatalog",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the binary contents of the availability catalog. Can be saved as a csv file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOccAvailabilityCatalogContentRequest
   * @return GetOccAvailabilityCatalogContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccAvailabilityCatalogContent.ts.html |here} to see how to use GetOccAvailabilityCatalogContent API.
   */
  public async getOccAvailabilityCatalogContent(
    getOccAvailabilityCatalogContentRequest: requests.GetOccAvailabilityCatalogContentRequest
  ): Promise<responses.GetOccAvailabilityCatalogContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#getOccAvailabilityCatalogContent."
      );
    const operationName = "getOccAvailabilityCatalogContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": getOccAvailabilityCatalogContentRequest.occAvailabilityCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": getOccAvailabilityCatalogContentRequest.opcRetryToken,
      "opc-request-id": getOccAvailabilityCatalogContentRequest.opcRequestId,
      "if-match": getOccAvailabilityCatalogContentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOccAvailabilityCatalogContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOccAvailabilityCatalogContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details about the capacity request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOccCapacityRequestRequest
   * @return GetOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccCapacityRequest.ts.html |here} to see how to use GetOccCapacityRequest API.
   */
  public async getOccCapacityRequest(
    getOccCapacityRequestRequest: requests.GetOccCapacityRequestRequest
  ): Promise<responses.GetOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#getOccCapacityRequest.");
    const operationName = "getOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": getOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests/{occCapacityRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified customer group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOccCustomerGroupRequest
   * @return GetOccCustomerGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccCustomerGroup.ts.html |here} to see how to use GetOccCustomerGroup API.
   */
  public async getOccCustomerGroup(
    getOccCustomerGroupRequest: requests.GetOccCustomerGroupRequest
  ): Promise<responses.GetOccCustomerGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#getOccCustomerGroup.");
    const operationName = "getOccCustomerGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": getOccCustomerGroupRequest.occCustomerGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOccCustomerGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOccCustomerGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOccCustomerGroupResponse>{},
        body: await response.json(),
        bodyKey: "occCustomerGroup",
        bodyModel: model.OccCustomerGroup,
        type: "model.OccCustomerGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists an overview of all resources in that namespace in a given time interval.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListInternalNamespaceOccOverviewsRequest
   * @return ListInternalNamespaceOccOverviewsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalNamespaceOccOverviews.ts.html |here} to see how to use ListInternalNamespaceOccOverviews API.
   */
  public async listInternalNamespaceOccOverviews(
    listInternalNamespaceOccOverviewsRequest: requests.ListInternalNamespaceOccOverviewsRequest
  ): Promise<responses.ListInternalNamespaceOccOverviewsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listInternalNamespaceOccOverviews."
      );
    const operationName = "listInternalNamespaceOccOverviews";
    const apiReferenceLink = "";
    const pathParams = {
      "{namespace}": listInternalNamespaceOccOverviewsRequest.namespace
    };

    const queryParams = {
      "compartmentId": listInternalNamespaceOccOverviewsRequest.compartmentId,
      "occCustomerGroupId": listInternalNamespaceOccOverviewsRequest.occCustomerGroupId,
      "workloadType": listInternalNamespaceOccOverviewsRequest.workloadType,
      "from": listInternalNamespaceOccOverviewsRequest.from,
      "to": listInternalNamespaceOccOverviewsRequest.to,
      "limit": listInternalNamespaceOccOverviewsRequest.limit,
      "page": listInternalNamespaceOccOverviewsRequest.page,
      "sortOrder": listInternalNamespaceOccOverviewsRequest.sortOrder,
      "sortBy": listInternalNamespaceOccOverviewsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInternalNamespaceOccOverviewsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInternalNamespaceOccOverviewsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/namespace/{namespace}/occOverview",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInternalNamespaceOccOverviewsResponse>{},
        body: await response.json(),
        bodyKey: "occOverviewCollection",
        bodyModel: model.OccOverviewCollection,
        type: "model.OccOverviewCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List details about a given occHandoverResourceBlock.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListInternalOccHandoverResourceBlockDetailsRequest
   * @return ListInternalOccHandoverResourceBlockDetailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccHandoverResourceBlockDetails.ts.html |here} to see how to use ListInternalOccHandoverResourceBlockDetails API.
   */
  public async listInternalOccHandoverResourceBlockDetails(
    listInternalOccHandoverResourceBlockDetailsRequest: requests.ListInternalOccHandoverResourceBlockDetailsRequest
  ): Promise<responses.ListInternalOccHandoverResourceBlockDetailsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listInternalOccHandoverResourceBlockDetails."
      );
    const operationName = "listInternalOccHandoverResourceBlockDetails";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "occHandoverResourceBlockId":
        listInternalOccHandoverResourceBlockDetailsRequest.occHandoverResourceBlockId,
      "hostId": listInternalOccHandoverResourceBlockDetailsRequest.hostId,
      "limit": listInternalOccHandoverResourceBlockDetailsRequest.limit,
      "page": listInternalOccHandoverResourceBlockDetailsRequest.page,
      "sortOrder": listInternalOccHandoverResourceBlockDetailsRequest.sortOrder,
      "sortBy": listInternalOccHandoverResourceBlockDetailsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInternalOccHandoverResourceBlockDetailsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInternalOccHandoverResourceBlockDetailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occHandoverResourceBlockDetails",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInternalOccHandoverResourceBlockDetailsResponse>{},
        body: await response.json(),
        bodyKey: "occHandoverResourceBlockDetailCollection",
        bodyModel: model.OccHandoverResourceBlockDetailCollection,
        type: "model.OccHandoverResourceBlockDetailCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Occ Handover Resource blocks.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListInternalOccHandoverResourceBlocksRequest
   * @return ListInternalOccHandoverResourceBlocksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccHandoverResourceBlocks.ts.html |here} to see how to use ListInternalOccHandoverResourceBlocks API.
   */
  public async listInternalOccHandoverResourceBlocks(
    listInternalOccHandoverResourceBlocksRequest: requests.ListInternalOccHandoverResourceBlocksRequest
  ): Promise<responses.ListInternalOccHandoverResourceBlocksResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listInternalOccHandoverResourceBlocks."
      );
    const operationName = "listInternalOccHandoverResourceBlocks";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "namespace": listInternalOccHandoverResourceBlocksRequest.namespace,
      "compartmentId": listInternalOccHandoverResourceBlocksRequest.compartmentId,
      "occCustomerGroupId": listInternalOccHandoverResourceBlocksRequest.occCustomerGroupId,
      "handoverResourceName": listInternalOccHandoverResourceBlocksRequest.handoverResourceName,
      "handoverDateGreaterThanOrEqualTo":
        listInternalOccHandoverResourceBlocksRequest.handoverDateGreaterThanOrEqualTo,
      "handoverDateLessThanOrEqualTo":
        listInternalOccHandoverResourceBlocksRequest.handoverDateLessThanOrEqualTo,
      "occHandoverResourceBlockId":
        listInternalOccHandoverResourceBlocksRequest.occHandoverResourceBlockId,
      "limit": listInternalOccHandoverResourceBlocksRequest.limit,
      "page": listInternalOccHandoverResourceBlocksRequest.page,
      "sortOrder": listInternalOccHandoverResourceBlocksRequest.sortOrder,
      "sortBy": listInternalOccHandoverResourceBlocksRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInternalOccHandoverResourceBlocksRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInternalOccHandoverResourceBlocksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occHandoverResourceBlocks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInternalOccHandoverResourceBlocksResponse>{},
        body: await response.json(),
        bodyKey: "occHandoverResourceBlockCollection",
        bodyModel: model.OccHandoverResourceBlockCollection,
        type: "model.OccHandoverResourceBlockCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists availabilities for a particular availability catalog.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccAvailabilitiesRequest
   * @return ListOccAvailabilitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilities.ts.html |here} to see how to use ListOccAvailabilities API.
   */
  public async listOccAvailabilities(
    listOccAvailabilitiesRequest: requests.ListOccAvailabilitiesRequest
  ): Promise<responses.ListOccAvailabilitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilities.");
    const operationName = "listOccAvailabilities";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": listOccAvailabilitiesRequest.occAvailabilityCatalogId
    };

    const queryParams = {
      "dateExpectedCapacityHandover": listOccAvailabilitiesRequest.dateExpectedCapacityHandover,
      "resourceName": listOccAvailabilitiesRequest.resourceName,
      "resourceType": listOccAvailabilitiesRequest.resourceType,
      "workloadType": listOccAvailabilitiesRequest.workloadType,
      "limit": listOccAvailabilitiesRequest.limit,
      "page": listOccAvailabilitiesRequest.page,
      "sortOrder": listOccAvailabilitiesRequest.sortOrder,
      "sortBy": listOccAvailabilitiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccAvailabilitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccAvailabilitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/occAvailabilities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccAvailabilitiesResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCollection",
        bodyModel: model.OccAvailabilityCollection,
        type: "model.OccAvailabilityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all availability catalogs.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccAvailabilityCatalogsRequest
   * @return ListOccAvailabilityCatalogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilityCatalogs.ts.html |here} to see how to use ListOccAvailabilityCatalogs API.
   */
  public async listOccAvailabilityCatalogs(
    listOccAvailabilityCatalogsRequest: requests.ListOccAvailabilityCatalogsRequest
  ): Promise<responses.ListOccAvailabilityCatalogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilityCatalogs.");
    const operationName = "listOccAvailabilityCatalogs";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOccAvailabilityCatalogsRequest.compartmentId,
      "namespace": listOccAvailabilityCatalogsRequest.namespace,
      "id": listOccAvailabilityCatalogsRequest.id,
      "displayName": listOccAvailabilityCatalogsRequest.displayName,
      "catalogState": listOccAvailabilityCatalogsRequest.catalogState,
      "limit": listOccAvailabilityCatalogsRequest.limit,
      "page": listOccAvailabilityCatalogsRequest.page,
      "sortOrder": listOccAvailabilityCatalogsRequest.sortOrder,
      "sortBy": listOccAvailabilityCatalogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccAvailabilityCatalogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccAvailabilityCatalogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccAvailabilityCatalogsResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCatalogCollection",
        bodyModel: model.OccAvailabilityCatalogCollection,
        type: "model.OccAvailabilityCatalogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * An internal api to list availability catalogs.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccAvailabilityCatalogsInternalRequest
   * @return ListOccAvailabilityCatalogsInternalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilityCatalogsInternal.ts.html |here} to see how to use ListOccAvailabilityCatalogsInternal API.
   */
  public async listOccAvailabilityCatalogsInternal(
    listOccAvailabilityCatalogsInternalRequest: requests.ListOccAvailabilityCatalogsInternalRequest
  ): Promise<responses.ListOccAvailabilityCatalogsInternalResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listOccAvailabilityCatalogsInternal."
      );
    const operationName = "listOccAvailabilityCatalogsInternal";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOccAvailabilityCatalogsInternalRequest.compartmentId,
      "namespace": listOccAvailabilityCatalogsInternalRequest.namespace,
      "id": listOccAvailabilityCatalogsInternalRequest.id,
      "displayName": listOccAvailabilityCatalogsInternalRequest.displayName,
      "catalogState": listOccAvailabilityCatalogsInternalRequest.catalogState,
      "occCustomerGroupId": listOccAvailabilityCatalogsInternalRequest.occCustomerGroupId,
      "limit": listOccAvailabilityCatalogsInternalRequest.limit,
      "page": listOccAvailabilityCatalogsInternalRequest.page,
      "sortOrder": listOccAvailabilityCatalogsInternalRequest.sortOrder,
      "sortBy": listOccAvailabilityCatalogsInternalRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccAvailabilityCatalogsInternalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccAvailabilityCatalogsInternalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occAvailabilityCatalogs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccAvailabilityCatalogsInternalResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCatalogCollection",
        bodyModel: model.OccAvailabilityCatalogCollection,
        type: "model.OccAvailabilityCatalogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all capacity requests.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccCapacityRequestsRequest
   * @return ListOccCapacityRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCapacityRequests.ts.html |here} to see how to use ListOccCapacityRequests API.
   */
  public async listOccCapacityRequests(
    listOccCapacityRequestsRequest: requests.ListOccCapacityRequestsRequest
  ): Promise<responses.ListOccCapacityRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#listOccCapacityRequests.");
    const operationName = "listOccCapacityRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOccCapacityRequestsRequest.compartmentId,
      "occAvailabilityCatalogId": listOccCapacityRequestsRequest.occAvailabilityCatalogId,
      "namespace": listOccCapacityRequestsRequest.namespace,
      "requestType": listOccCapacityRequestsRequest.requestType,
      "displayName": listOccCapacityRequestsRequest.displayName,
      "id": listOccCapacityRequestsRequest.id,
      "limit": listOccCapacityRequestsRequest.limit,
      "page": listOccCapacityRequestsRequest.page,
      "sortOrder": listOccCapacityRequestsRequest.sortOrder,
      "sortBy": listOccCapacityRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccCapacityRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccCapacityRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccCapacityRequestsResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequestCollection",
        bodyModel: model.OccCapacityRequestCollection,
        type: "model.OccCapacityRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * An internal api to list all capacity requests.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccCapacityRequestsInternalRequest
   * @return ListOccCapacityRequestsInternalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCapacityRequestsInternal.ts.html |here} to see how to use ListOccCapacityRequestsInternal API.
   */
  public async listOccCapacityRequestsInternal(
    listOccCapacityRequestsInternalRequest: requests.ListOccCapacityRequestsInternalRequest
  ): Promise<responses.ListOccCapacityRequestsInternalResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listOccCapacityRequestsInternal."
      );
    const operationName = "listOccCapacityRequestsInternal";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOccCapacityRequestsInternalRequest.compartmentId,
      "occCustomerGroupId": listOccCapacityRequestsInternalRequest.occCustomerGroupId,
      "occAvailabilityCatalogId": listOccCapacityRequestsInternalRequest.occAvailabilityCatalogId,
      "namespace": listOccCapacityRequestsInternalRequest.namespace,
      "displayName": listOccCapacityRequestsInternalRequest.displayName,
      "requestType": listOccCapacityRequestsInternalRequest.requestType,
      "id": listOccCapacityRequestsInternalRequest.id,
      "limit": listOccCapacityRequestsInternalRequest.limit,
      "page": listOccCapacityRequestsInternalRequest.page,
      "sortOrder": listOccCapacityRequestsInternalRequest.sortOrder,
      "sortBy": listOccCapacityRequestsInternalRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccCapacityRequestsInternalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccCapacityRequestsInternalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occCapacityRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccCapacityRequestsInternalResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequestCollection",
        bodyModel: model.OccCapacityRequestCollection,
        type: "model.OccCapacityRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the customer groups.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccCustomerGroupsRequest
   * @return ListOccCustomerGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCustomerGroups.ts.html |here} to see how to use ListOccCustomerGroups API.
   */
  public async listOccCustomerGroups(
    listOccCustomerGroupsRequest: requests.ListOccCustomerGroupsRequest
  ): Promise<responses.ListOccCustomerGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#listOccCustomerGroups.");
    const operationName = "listOccCustomerGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOccCustomerGroupsRequest.compartmentId,
      "status": listOccCustomerGroupsRequest.status,
      "displayName": listOccCustomerGroupsRequest.displayName,
      "id": listOccCustomerGroupsRequest.id,
      "limit": listOccCustomerGroupsRequest.limit,
      "page": listOccCustomerGroupsRequest.page,
      "sortOrder": listOccCustomerGroupsRequest.sortOrder,
      "sortBy": listOccCustomerGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccCustomerGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccCustomerGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccCustomerGroupsResponse>{},
        body: await response.json(),
        bodyKey: "occCustomerGroupCollection",
        bodyModel: model.OccCustomerGroupCollection,
        type: "model.OccCustomerGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List details about a given occHandoverResourceBlock.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccHandoverResourceBlockDetailsRequest
   * @return ListOccHandoverResourceBlockDetailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccHandoverResourceBlockDetails.ts.html |here} to see how to use ListOccHandoverResourceBlockDetails API.
   */
  public async listOccHandoverResourceBlockDetails(
    listOccHandoverResourceBlockDetailsRequest: requests.ListOccHandoverResourceBlockDetailsRequest
  ): Promise<responses.ListOccHandoverResourceBlockDetailsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listOccHandoverResourceBlockDetails."
      );
    const operationName = "listOccHandoverResourceBlockDetails";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "occHandoverResourceBlockId":
        listOccHandoverResourceBlockDetailsRequest.occHandoverResourceBlockId,
      "hostId": listOccHandoverResourceBlockDetailsRequest.hostId,
      "limit": listOccHandoverResourceBlockDetailsRequest.limit,
      "page": listOccHandoverResourceBlockDetailsRequest.page,
      "sortOrder": listOccHandoverResourceBlockDetailsRequest.sortOrder,
      "sortBy": listOccHandoverResourceBlockDetailsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccHandoverResourceBlockDetailsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccHandoverResourceBlockDetailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occHandoverResourceBlockDetails",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccHandoverResourceBlockDetailsResponse>{},
        body: await response.json(),
        bodyKey: "occHandoverResourceBlockDetailCollection",
        bodyModel: model.OccHandoverResourceBlockDetailCollection,
        type: "model.OccHandoverResourceBlockDetailCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Occ Handover Resource blocks.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccHandoverResourceBlocksRequest
   * @return ListOccHandoverResourceBlocksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccHandoverResourceBlocks.ts.html |here} to see how to use ListOccHandoverResourceBlocks API.
   */
  public async listOccHandoverResourceBlocks(
    listOccHandoverResourceBlocksRequest: requests.ListOccHandoverResourceBlocksRequest
  ): Promise<responses.ListOccHandoverResourceBlocksResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#listOccHandoverResourceBlocks."
      );
    const operationName = "listOccHandoverResourceBlocks";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "namespace": listOccHandoverResourceBlocksRequest.namespace,
      "compartmentId": listOccHandoverResourceBlocksRequest.compartmentId,
      "handoverResourceName": listOccHandoverResourceBlocksRequest.handoverResourceName,
      "handoverDateGreaterThanOrEqualTo":
        listOccHandoverResourceBlocksRequest.handoverDateGreaterThanOrEqualTo,
      "handoverDateLessThanOrEqualTo":
        listOccHandoverResourceBlocksRequest.handoverDateLessThanOrEqualTo,
      "occHandoverResourceBlockId": listOccHandoverResourceBlocksRequest.occHandoverResourceBlockId,
      "limit": listOccHandoverResourceBlocksRequest.limit,
      "page": listOccHandoverResourceBlocksRequest.page,
      "sortOrder": listOccHandoverResourceBlocksRequest.sortOrder,
      "sortBy": listOccHandoverResourceBlocksRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccHandoverResourceBlocksRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccHandoverResourceBlocksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occHandoverResourceBlocks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccHandoverResourceBlocksResponse>{},
        body: await response.json(),
        bodyKey: "occHandoverResourceBlockCollection",
        bodyModel: model.OccHandoverResourceBlockCollection,
        type: "model.OccHandoverResourceBlockCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists an overview of all resources in that namespace in a given time interval.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOccOverviewsRequest
   * @return ListOccOverviewsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccOverviews.ts.html |here} to see how to use ListOccOverviews API.
   */
  public async listOccOverviews(
    listOccOverviewsRequest: requests.ListOccOverviewsRequest
  ): Promise<responses.ListOccOverviewsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#listOccOverviews.");
    const operationName = "listOccOverviews";
    const apiReferenceLink = "";
    const pathParams = {
      "{namespace}": listOccOverviewsRequest.namespace
    };

    const queryParams = {
      "compartmentId": listOccOverviewsRequest.compartmentId,
      "from": listOccOverviewsRequest.from,
      "to": listOccOverviewsRequest.to,
      "workloadType": listOccOverviewsRequest.workloadType,
      "limit": listOccOverviewsRequest.limit,
      "page": listOccOverviewsRequest.page,
      "sortOrder": listOccOverviewsRequest.sortOrder,
      "sortBy": listOccOverviewsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOccOverviewsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOccOverviewsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespace/{namespace}/occOverview",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOccOverviewsResponse>{},
        body: await response.json(),
        bodyKey: "occOverviewCollection",
        bodyModel: model.OccOverviewCollection,
        type: "model.OccOverviewCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the OccCapacityRequest by evaluating a sequence of instructions.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchInternalOccCapacityRequestRequest
   * @return PatchInternalOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PatchInternalOccCapacityRequest.ts.html |here} to see how to use PatchInternalOccCapacityRequest API.
   */
  public async patchInternalOccCapacityRequest(
    patchInternalOccCapacityRequestRequest: requests.PatchInternalOccCapacityRequestRequest
  ): Promise<responses.PatchInternalOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#patchInternalOccCapacityRequest."
      );
    const operationName = "patchInternalOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": patchInternalOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchInternalOccCapacityRequestRequest.ifMatch,
      "opc-request-id": patchInternalOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchInternalOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occCapacityRequests/{occCapacityRequestId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchInternalOccCapacityRequestRequest.patchOccCapacityRequestDetails,
        "PatchOccCapacityRequestDetails",
        model.PatchOccCapacityRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchInternalOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the OccCapacityRequest by evaluating a sequence of instructions.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchOccCapacityRequestRequest
   * @return PatchOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PatchOccCapacityRequest.ts.html |here} to see how to use PatchOccCapacityRequest API.
   */
  public async patchOccCapacityRequest(
    patchOccCapacityRequestRequest: requests.PatchOccCapacityRequestRequest
  ): Promise<responses.PatchOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#patchOccCapacityRequest.");
    const operationName = "patchOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": patchOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchOccCapacityRequestRequest.ifMatch,
      "opc-request-id": patchOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests/{occCapacityRequestId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchOccCapacityRequestRequest.patchOccCapacityRequestDetails,
        "PatchOccCapacityRequestDetails",
        model.PatchOccCapacityRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publishes the version of availability catalog specified by the operator. This makes that catalog version visible to customers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PublishOccAvailabilityCatalogRequest
   * @return PublishOccAvailabilityCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PublishOccAvailabilityCatalog.ts.html |here} to see how to use PublishOccAvailabilityCatalog API.
   */
  public async publishOccAvailabilityCatalog(
    publishOccAvailabilityCatalogRequest: requests.PublishOccAvailabilityCatalogRequest
  ): Promise<responses.PublishOccAvailabilityCatalogResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#publishOccAvailabilityCatalog."
      );
    const operationName = "publishOccAvailabilityCatalog";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": publishOccAvailabilityCatalogRequest.occAvailabilityCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": publishOccAvailabilityCatalogRequest.opcRetryToken,
      "opc-request-id": publishOccAvailabilityCatalogRequest.opcRequestId,
      "if-match": publishOccAvailabilityCatalogRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishOccAvailabilityCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishOccAvailabilityCatalogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The internal api to update the capacity request. This api will be used by operators for updating the capacity request to either completed, resubmitted or rejected.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateInternalOccCapacityRequestRequest
   * @return UpdateInternalOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateInternalOccCapacityRequest.ts.html |here} to see how to use UpdateInternalOccCapacityRequest API.
   */
  public async updateInternalOccCapacityRequest(
    updateInternalOccCapacityRequestRequest: requests.UpdateInternalOccCapacityRequestRequest
  ): Promise<responses.UpdateInternalOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CapacityManagementClient#updateInternalOccCapacityRequest."
      );
    const operationName = "updateInternalOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": updateInternalOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateInternalOccCapacityRequestRequest.ifMatch,
      "opc-request-id": updateInternalOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInternalOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internal/occCapacityRequests/{occCapacityRequestId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInternalOccCapacityRequestRequest.updateInternalOccCapacityRequestDetails,
        "UpdateInternalOccCapacityRequestDetails",
        model.UpdateInternalOccCapacityRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInternalOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The request to update the availability catalog. Currently only freeform tags can be updated via this api.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOccAvailabilityCatalogRequest
   * @return UpdateOccAvailabilityCatalogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccAvailabilityCatalog.ts.html |here} to see how to use UpdateOccAvailabilityCatalog API.
   */
  public async updateOccAvailabilityCatalog(
    updateOccAvailabilityCatalogRequest: requests.UpdateOccAvailabilityCatalogRequest
  ): Promise<responses.UpdateOccAvailabilityCatalogResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#updateOccAvailabilityCatalog.");
    const operationName = "updateOccAvailabilityCatalog";
    const apiReferenceLink = "";
    const pathParams = {
      "{occAvailabilityCatalogId}": updateOccAvailabilityCatalogRequest.occAvailabilityCatalogId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOccAvailabilityCatalogRequest.ifMatch,
      "opc-request-id": updateOccAvailabilityCatalogRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOccAvailabilityCatalogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOccAvailabilityCatalogRequest.updateOccAvailabilityCatalogDetails,
        "UpdateOccAvailabilityCatalogDetails",
        model.UpdateOccAvailabilityCatalogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOccAvailabilityCatalogResponse>{},
        body: await response.json(),
        bodyKey: "occAvailabilityCatalog",
        bodyModel: model.OccAvailabilityCatalog,
        type: "model.OccAvailabilityCatalog",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The request to update the capacity request. The user can perform actions like closing a partially completed request so that it doesn't go ahead for full completion.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOccCapacityRequestRequest
   * @return UpdateOccCapacityRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCapacityRequest.ts.html |here} to see how to use UpdateOccCapacityRequest API.
   */
  public async updateOccCapacityRequest(
    updateOccCapacityRequestRequest: requests.UpdateOccCapacityRequestRequest
  ): Promise<responses.UpdateOccCapacityRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#updateOccCapacityRequest.");
    const operationName = "updateOccCapacityRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCapacityRequestId}": updateOccCapacityRequestRequest.occCapacityRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOccCapacityRequestRequest.ifMatch,
      "opc-request-id": updateOccCapacityRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOccCapacityRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCapacityRequests/{occCapacityRequestId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOccCapacityRequestRequest.updateOccCapacityRequestDetails,
        "UpdateOccCapacityRequestDetails",
        model.UpdateOccCapacityRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOccCapacityRequestResponse>{},
        body: await response.json(),
        bodyKey: "occCapacityRequest",
        bodyModel: model.OccCapacityRequest,
        type: "model.OccCapacityRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The request to update the customer.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOccCustomerRequest
   * @return UpdateOccCustomerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCustomer.ts.html |here} to see how to use UpdateOccCustomer API.
   */
  public async updateOccCustomer(
    updateOccCustomerRequest: requests.UpdateOccCustomerRequest
  ): Promise<responses.UpdateOccCustomerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#updateOccCustomer.");
    const operationName = "updateOccCustomer";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": updateOccCustomerRequest.occCustomerGroupId,
      "{occCustomerId}": updateOccCustomerRequest.occCustomerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOccCustomerRequest.ifMatch,
      "opc-request-id": updateOccCustomerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOccCustomerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers/{occCustomerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOccCustomerRequest.updateOccCustomerDetails,
        "UpdateOccCustomerDetails",
        model.UpdateOccCustomerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOccCustomerResponse>{},
        body: await response.json(),
        bodyKey: "occCustomer",
        bodyModel: model.OccCustomer,
        type: "model.OccCustomer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The request to update the customer group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOccCustomerGroupRequest
   * @return UpdateOccCustomerGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCustomerGroup.ts.html |here} to see how to use UpdateOccCustomerGroup API.
   */
  public async updateOccCustomerGroup(
    updateOccCustomerGroupRequest: requests.UpdateOccCustomerGroupRequest
  ): Promise<responses.UpdateOccCustomerGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CapacityManagementClient#updateOccCustomerGroup.");
    const operationName = "updateOccCustomerGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{occCustomerGroupId}": updateOccCustomerGroupRequest.occCustomerGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOccCustomerGroupRequest.ifMatch,
      "opc-request-id": updateOccCustomerGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOccCustomerGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/occCustomerGroups/{occCustomerGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOccCustomerGroupRequest.updateOccCustomerGroupDetails,
        "UpdateOccCustomerGroupDetails",
        model.UpdateOccCustomerGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOccCustomerGroupResponse>{},
        body: await response.json(),
        bodyKey: "occCustomerGroup",
        bodyModel: model.OccCustomerGroup,
        type: "model.OccCustomerGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
