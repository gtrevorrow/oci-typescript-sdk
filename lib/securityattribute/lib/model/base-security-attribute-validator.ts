/**
 * Security Attribute API
 * Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
 * OpenAPI spec version: 20240815
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* Validates a security attribute value. Each validator performs validation steps in addition to the standard
* validation for security attribute values. For more information, see
* [Limits on Security Attributes](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
* <p>
If you define a validator after a value has been set for a security attribute, then any updates that
* attempt to change the value must pass the additional validation defined by the current rule.
* Previously set values (even those that would fail the current validation) are not updated. You can
* still update other attributes to resources that contain a non-valid security attribute.
* <p>
To clear the validator call UpdateSecurityAttribute with
* [DefaultSecuirtyAttributeValidator](https://docs.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
* 
*/
export interface BaseSecurityAttributeValidator {
  "validatorType": string;
}

export namespace BaseSecurityAttributeValidator {
  export function getJsonObj(obj: BaseSecurityAttributeValidator): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "validatorType" in obj && obj.validatorType) {
      switch (obj.validatorType) {
        case "ENUM":
          return model.EnumSecurityAttributeValidator.getJsonObj(
            <model.EnumSecurityAttributeValidator>(<object>jsonObj),
            true
          );
        case "DEFAULT":
          return model.DefaultSecurityAttributeValidator.getJsonObj(
            <model.DefaultSecurityAttributeValidator>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.validatorType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: BaseSecurityAttributeValidator): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "validatorType" in obj && obj.validatorType) {
      switch (obj.validatorType) {
        case "ENUM":
          return model.EnumSecurityAttributeValidator.getDeserializedJsonObj(
            <model.EnumSecurityAttributeValidator>(<object>jsonObj),
            true
          );
        case "DEFAULT":
          return model.DefaultSecurityAttributeValidator.getDeserializedJsonObj(
            <model.DefaultSecurityAttributeValidator>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.validatorType}`);
      }
    }
    return jsonObj;
  }
}
