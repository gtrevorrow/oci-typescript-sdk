/**
 * Security Attribute API
 * Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Nampespaces](/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
 * OpenAPI spec version: 20240815
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { SecurityAttributeWaiter } from "./securityattribute-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SecurityAttributeApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class SecurityAttributeClient {
  protected static serviceEndpointTemplate =
    "https://security-attribute.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": SecurityAttributeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "SecurityAttribute";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("securityattribute")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("securityattribute");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20240815";
    if (this.logger) this.logger.info(`SecurityAttributeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        SecurityAttributeClient.serviceEndpointTemplate,
        this._region,
        SecurityAttributeClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        SecurityAttributeClient.serviceEndpointTemplate,
        this._regionId,
        SecurityAttributeClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      SecurityAttributeClient.serviceEndpointTemplate,
      region,
      SecurityAttributeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      SecurityAttributeClient.serviceEndpointTemplate,
      regionId,
      SecurityAttributeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new SecurityAttributeWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): SecurityAttributeWaiter {
    this._waiters = new SecurityAttributeWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): SecurityAttributeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Deletes the specified security attribute definitions. This operation triggers a process that removes the
   * security attributes from all resources in your tenancy. The security attributes must be within the same security attribute namespace.
   *
   * The following actions happen immediately:
   *
   * After you start this operation, the state of the tag changes to DELETING, and security attribute removal
   * from resources begins. This process can take up to 48 hours depending on the number of resources that
   * are tagged and the regions in which those resources reside.
   *
   * When all security attributes have been removed, the state changes to DELETED. You cannot restore a deleted security attribute. After the security attribute state
   * changes to DELETED, you can use the same security attribute name again.
   *
   * After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #cascadeDeleteSecurityAttributeNamespace(CascadeDeleteSecurityAttributeNamespaceRequest) cascadeDeleteSecurityAttributeNamespace} operation until this process completes.
   *
   * In order to delete security attribute, you must first retire the security attribute. Use {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}
   * to retire a security attribute.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkDeleteSecurityAttributesRequest
   * @return BulkDeleteSecurityAttributesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkDeleteSecurityAttributes.ts.html |here} to see how to use BulkDeleteSecurityAttributes API.
   */
  public async bulkDeleteSecurityAttributes(
    bulkDeleteSecurityAttributesRequest: requests.BulkDeleteSecurityAttributesRequest
  ): Promise<responses.BulkDeleteSecurityAttributesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#bulkDeleteSecurityAttributes.");
    const operationName = "bulkDeleteSecurityAttributes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkDeleteSecurityAttributesRequest.opcRequestId,
      "opc-retry-token": bulkDeleteSecurityAttributesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkDeleteSecurityAttributesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributes/actions/bulkDelete",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkDeleteSecurityAttributesRequest.bulkDeleteSecurityAttributesDetails,
        "BulkDeleteSecurityAttributesDetails",
        model.BulkDeleteSecurityAttributesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkDeleteSecurityAttributesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Edits the specified list of security attributes for the selected resources.
* This operation triggers a process that edits the attributes on all selected resources. The possible actions are:
* <p>
  * Add a security attribute when it does not already exist on the resource.
*   * Update the value for a security attribute when it is present on the resource.
*   * Add a security attribute when it does not already exist on the resource or update the value when it is present on the resource.
*   * Remove a security attribute from a resource. The security attribute is removed from the resource regardless of the value.
* <p>
The edits can include a combination of operations and attributes.
* However, multiple operations cannot apply to the same attribute in the same request.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkEditSecurityAttributesRequest
     * @return BulkEditSecurityAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkEditSecurityAttributes.ts.html |here} to see how to use BulkEditSecurityAttributes API.
     */
  public async bulkEditSecurityAttributes(
    bulkEditSecurityAttributesRequest: requests.BulkEditSecurityAttributesRequest
  ): Promise<responses.BulkEditSecurityAttributesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#bulkEditSecurityAttributes.");
    const operationName = "bulkEditSecurityAttributes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkEditSecurityAttributesRequest.opcRequestId,
      "opc-retry-token": bulkEditSecurityAttributesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkEditSecurityAttributesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributes/actions/bulkEdit",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkEditSecurityAttributesRequest.bulkEditSecurityAttributeDetails,
        "BulkEditSecurityAttributeDetails",
        model.BulkEditSecurityAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkEditSecurityAttributesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified security attribute namespace. This operation triggers a process that removes all of the security attributes
* defined in the specified security attribute namespace from all resources in your tenancy and then deletes the security attribute namespace.
* <p>
After you start the delete operation:
* <p>
  * New security attribute key definitions cannot be created under the namespace.
*   * The state of the security attribute namespace changes to DELETING.
*   * Security attribute removal from the resources begins.
* <p>
This process can take up to 48 hours depending on the number of security attributes in the namespace, the number of resources
* that are tagged, and the locations of the regions in which those resources reside.
* <p>
After all security attributes are removed, the state changes to DELETED. You cannot restore a deleted security attribute namespace. After the deleted security attribute namespace
* changes its state to DELETED, you can use the name of the deleted security attribute namespace again.
* <p>
After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} operation until this process completes.
* <p>
To delete a security attribute namespace, you must first retire it. Use {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}
* to retire a security attribute namespace.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CascadingDeleteSecurityAttributeNamespaceRequest
     * @return CascadingDeleteSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CascadingDeleteSecurityAttributeNamespace.ts.html |here} to see how to use CascadingDeleteSecurityAttributeNamespace API.
     */
  public async cascadingDeleteSecurityAttributeNamespace(
    cascadingDeleteSecurityAttributeNamespaceRequest: requests.CascadingDeleteSecurityAttributeNamespaceRequest
  ): Promise<responses.CascadingDeleteSecurityAttributeNamespaceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#cascadingDeleteSecurityAttributeNamespace."
      );
    const operationName = "cascadingDeleteSecurityAttributeNamespace";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}":
        cascadingDeleteSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cascadingDeleteSecurityAttributeNamespaceRequest.ifMatch,
      "opc-request-id": cascadingDeleteSecurityAttributeNamespaceRequest.opcRequestId,
      "opc-retry-token": cascadingDeleteSecurityAttributeNamespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cascadingDeleteSecurityAttributeNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/cascadeDelete",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CascadingDeleteSecurityAttributeNamespaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves the specified security attribute namespace to the specified compartment within the same tenancy.
* <p>
To move the security attribute namespace, you must have the manage security-attributes permission on both compartments.
* For more information about IAM policies, see [Details for IAM](https://docs.cloud.oracle.com/Content/Identity/policyreference/iampolicyreference.htm).
* <p>
Moving a security attribute namespace moves all the security attributes contained in the security attribute namespace.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSecurityAttributeNamespaceCompartmentRequest
     * @return ChangeSecurityAttributeNamespaceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ChangeSecurityAttributeNamespaceCompartment.ts.html |here} to see how to use ChangeSecurityAttributeNamespaceCompartment API.
     */
  public async changeSecurityAttributeNamespaceCompartment(
    changeSecurityAttributeNamespaceCompartmentRequest: requests.ChangeSecurityAttributeNamespaceCompartmentRequest
  ): Promise<responses.ChangeSecurityAttributeNamespaceCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#changeSecurityAttributeNamespaceCompartment."
      );
    const operationName = "changeSecurityAttributeNamespaceCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}":
        changeSecurityAttributeNamespaceCompartmentRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeSecurityAttributeNamespaceCompartmentRequest.opcRetryToken,
      "if-match": changeSecurityAttributeNamespaceCompartmentRequest.ifMatch,
      "opc-request-id": changeSecurityAttributeNamespaceCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityAttributeNamespaceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityAttributeNamespaceCompartmentRequest.changeSecurityAttributeNamespaceCompartmentDetails,
        "ChangeSecurityAttributeNamespaceCompartmentDetails",
        model.ChangeSecurityAttributeNamespaceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityAttributeNamespaceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new security attribute in the specified security attribute namespace.
* <p>
The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
* security attribute.
* <p>
You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
* and cannot be changed. The only valid characters for security attribute names are:\u00A00-9, A-Z, a-z, -, _ characters.
* Names are case insensitive. That means, for example, \"mySecurityAttribute\" and \"mysecurityattribute\" are not allowed in the same namespace.
* If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
* <p>
The security attribute must have a *description*. It does not have to be unique, and you can change it with
* {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}.
* <p>
The security attribute must have a value type, which is specified with a validator. Security attribute can use either a
* static value or a list of possible values. Static values are entered by a user applying the security attribute
* to a resource. Lists are created by the user and the user must apply a value from the list. Lists
* are validated.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSecurityAttributeRequest
     * @return CreateSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttribute.ts.html |here} to see how to use CreateSecurityAttribute API.
     */
  public async createSecurityAttribute(
    createSecurityAttributeRequest: requests.CreateSecurityAttributeRequest
  ): Promise<responses.CreateSecurityAttributeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#createSecurityAttribute.");
    const operationName = "createSecurityAttribute";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}": createSecurityAttributeRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSecurityAttributeRequest.opcRequestId,
      "opc-retry-token": createSecurityAttributeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityAttributeRequest.createSecurityAttributeDetails,
        "CreateSecurityAttributeDetails",
        model.CreateSecurityAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityAttributeResponse>{},
        body: await response.json(),
        bodyKey: "securityAttribute",
        bodyModel: model.SecurityAttribute,
        type: "model.SecurityAttribute",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new security attribute namespace in the specified compartment.
* <p>
You must specify the compartment ID in the request object (remember that the tenancy is simply the root
* compartment).
* <p>
You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
* and cannot be changed. The only valid characters for security attribute names are: \u00A00-9, A-Z, a-z, -, _ characters.
* Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
* in the same tenancy. Once you created a namespace, you cannot change the name.
* If you specify a name that's already in use in the tenancy, a 409 error is returned.
* <p>
You must also specify a *description* for the namespace.
* It does not have to be unique, and you can change it with
* {@link #securityAttributeNamespace(SecurityAttributeNamespaceRequest) securityAttributeNamespace}.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSecurityAttributeNamespaceRequest
     * @return CreateSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttributeNamespace.ts.html |here} to see how to use CreateSecurityAttributeNamespace API.
     */
  public async createSecurityAttributeNamespace(
    createSecurityAttributeNamespaceRequest: requests.CreateSecurityAttributeNamespaceRequest
  ): Promise<responses.CreateSecurityAttributeNamespaceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#createSecurityAttributeNamespace."
      );
    const operationName = "createSecurityAttributeNamespace";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityAttributeNamespaceRequest.opcRetryToken,
      "opc-request-id": createSecurityAttributeNamespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityAttributeNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityAttributeNamespaceRequest.createSecurityAttributeNamespaceDetails,
        "CreateSecurityAttributeNamespaceDetails",
        model.CreateSecurityAttributeNamespaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityAttributeNamespaceResponse>{},
        body: await response.json(),
        bodyKey: "securityAttributeNamespace",
        bodyModel: model.SecurityAttributeNamespace,
        type: "model.SecurityAttributeNamespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified security attribute. This operation triggers a process that removes the
* security attribute from all resources in your tenancy.
* <p>
When you start the delete operation, the state of the security attribute changes to DELETING and security attribute removal
* from resources begins. This can take up to 48 hours depending on the number of resources that
* were tagged as well as the regions in which those resources reside.
* <p>
When all attributes have been removed, the state changes to DELETED. You cannot restore a deleted attribute. Once the deleted attribute
* changes its state to DELETED, you can use the same security attribute name again.
* <p>
After you start this operation, you cannot start either the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} or the {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} operation until this process completes.
* <p>
To delete a security attribute, you must first retire it. Use {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}
* to retire a security attribute.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSecurityAttributeRequest
     * @return DeleteSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttribute.ts.html |here} to see how to use DeleteSecurityAttribute API.
     */
  public async deleteSecurityAttribute(
    deleteSecurityAttributeRequest: requests.DeleteSecurityAttributeRequest
  ): Promise<responses.DeleteSecurityAttributeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#deleteSecurityAttribute.");
    const operationName = "deleteSecurityAttribute";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}": deleteSecurityAttributeRequest.securityAttributeNamespaceId,
      "{securityAttributeName}": deleteSecurityAttributeRequest.securityAttributeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSecurityAttributeRequest.ifMatch,
      "opc-request-id": deleteSecurityAttributeRequest.opcRequestId,
      "opc-retry-token": deleteSecurityAttributeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityAttributeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified security attribute namespace. Only an empty security attribute namespace can be deleted with this operation. To use this operation
   * to delete a security attribute namespace that contains security attributes, first delete all of its security attributes.
   * Use {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} to delete a security attribute.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSecurityAttributeNamespaceRequest
   * @return DeleteSecurityAttributeNamespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttributeNamespace.ts.html |here} to see how to use DeleteSecurityAttributeNamespace API.
   */
  public async deleteSecurityAttributeNamespace(
    deleteSecurityAttributeNamespaceRequest: requests.DeleteSecurityAttributeNamespaceRequest
  ): Promise<responses.DeleteSecurityAttributeNamespaceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#deleteSecurityAttributeNamespace."
      );
    const operationName = "deleteSecurityAttributeNamespace";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}":
        deleteSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSecurityAttributeNamespaceRequest.ifMatch,
      "opc-request-id": deleteSecurityAttributeNamespaceRequest.opcRequestId,
      "opc-retry-token": deleteSecurityAttributeNamespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityAttributeNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityAttributeNamespaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified security attribute's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityAttributeRequest
   * @return GetSecurityAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttribute.ts.html |here} to see how to use GetSecurityAttribute API.
   */
  public async getSecurityAttribute(
    getSecurityAttributeRequest: requests.GetSecurityAttributeRequest
  ): Promise<responses.GetSecurityAttributeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#getSecurityAttribute.");
    const operationName = "getSecurityAttribute";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}": getSecurityAttributeRequest.securityAttributeNamespaceId,
      "{securityAttributeName}": getSecurityAttributeRequest.securityAttributeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAttributeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAttributeResponse>{},
        body: await response.json(),
        bodyKey: "securityAttribute",
        bodyModel: model.SecurityAttribute,
        type: "model.SecurityAttribute",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified security attribute namespace's information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityAttributeNamespaceRequest
   * @return GetSecurityAttributeNamespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeNamespace.ts.html |here} to see how to use GetSecurityAttributeNamespace API.
   */
  public async getSecurityAttributeNamespace(
    getSecurityAttributeNamespaceRequest: requests.GetSecurityAttributeNamespaceRequest
  ): Promise<responses.GetSecurityAttributeNamespaceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#getSecurityAttributeNamespace.");
    const operationName = "getSecurityAttributeNamespace";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}":
        getSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAttributeNamespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAttributeNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAttributeNamespaceResponse>{},
        body: await response.json(),
        bodyKey: "securityAttributeNamespace",
        bodyModel: model.SecurityAttributeNamespace,
        type: "model.SecurityAttributeNamespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details on a specified work request. The workRequestID is returned in the opc-work-request-id header
   * for any asynchronous operation in security attributes service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityAttributeWorkRequestRequest
   * @return GetSecurityAttributeWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeWorkRequest.ts.html |here} to see how to use GetSecurityAttributeWorkRequest API.
   */
  public async getSecurityAttributeWorkRequest(
    getSecurityAttributeWorkRequestRequest: requests.GetSecurityAttributeWorkRequestRequest
  ): Promise<responses.GetSecurityAttributeWorkRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#getSecurityAttributeWorkRequest."
      );
    const operationName = "getSecurityAttributeWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getSecurityAttributeWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAttributeWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAttributeWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeWorkRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAttributeWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "securityAttributeWorkRequest",
        bodyModel: model.SecurityAttributeWorkRequest,
        type: "model.SecurityAttributeWorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the security attribute namespaces in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityAttributeNamespacesRequest
   * @return ListSecurityAttributeNamespacesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeNamespaces.ts.html |here} to see how to use ListSecurityAttributeNamespaces API.
   */
  public async listSecurityAttributeNamespaces(
    listSecurityAttributeNamespacesRequest: requests.ListSecurityAttributeNamespacesRequest
  ): Promise<responses.ListSecurityAttributeNamespacesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#listSecurityAttributeNamespaces."
      );
    const operationName = "listSecurityAttributeNamespaces";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityAttributeNamespacesRequest.compartmentId,
      "page": listSecurityAttributeNamespacesRequest.page,
      "limit": listSecurityAttributeNamespacesRequest.limit,
      "sortOrder": listSecurityAttributeNamespacesRequest.sortOrder,
      "sortBy": listSecurityAttributeNamespacesRequest.sortBy,
      "name": listSecurityAttributeNamespacesRequest.name,
      "compartmentIdInSubtree": listSecurityAttributeNamespacesRequest.compartmentIdInSubtree,
      "lifecycleState": listSecurityAttributeNamespacesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAttributeNamespacesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAttributeNamespacesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAttributeNamespacesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAttributeNamespaceSummary,
        type: "Array<model.SecurityAttributeNamespaceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
   * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeNamespaces(
    request: requests.ListSecurityAttributeNamespacesRequest
  ): AsyncIterableIterator<model.SecurityAttributeNamespaceSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeNamespaces(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeNamespacesResponses(
    request: requests.ListSecurityAttributeNamespacesRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeNamespacesResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeNamespaces(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
   * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeNamespacesRecordIterator(
    request: requests.ListSecurityAttributeNamespacesRequest
  ): AsyncIterableIterator<model.SecurityAttributeNamespaceSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeNamespaces(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeNamespacesResponseIterator(
    request: requests.ListSecurityAttributeNamespacesRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeNamespacesResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeNamespaces(req));
  }

  /**
   * Gets the errors for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityAttributeWorkRequestErrorsRequest
   * @return ListSecurityAttributeWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestErrors.ts.html |here} to see how to use ListSecurityAttributeWorkRequestErrors API.
   */
  public async listSecurityAttributeWorkRequestErrors(
    listSecurityAttributeWorkRequestErrorsRequest: requests.ListSecurityAttributeWorkRequestErrorsRequest
  ): Promise<responses.ListSecurityAttributeWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequestErrors."
      );
    const operationName = "listSecurityAttributeWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listSecurityAttributeWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listSecurityAttributeWorkRequestErrorsRequest.page,
      "limit": listSecurityAttributeWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAttributeWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAttributeWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeWorkRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAttributeWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAttributeWorkRequestErrorSummary,
        type: "Array<model.SecurityAttributeWorkRequestErrorSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
   * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequestErrors(
    request: requests.ListSecurityAttributeWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestErrorSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequestErrorsResponses(
    request: requests.ListSecurityAttributeWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
   * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestErrorsRecordIterator(
    request: requests.ListSecurityAttributeWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestErrorSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestErrorsResponseIterator(
    request: requests.ListSecurityAttributeWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequestErrors(req));
  }

  /**
   * Gets the logs for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityAttributeWorkRequestLogsRequest
   * @return ListSecurityAttributeWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestLogs.ts.html |here} to see how to use ListSecurityAttributeWorkRequestLogs API.
   */
  public async listSecurityAttributeWorkRequestLogs(
    listSecurityAttributeWorkRequestLogsRequest: requests.ListSecurityAttributeWorkRequestLogsRequest
  ): Promise<responses.ListSecurityAttributeWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequestLogs."
      );
    const operationName = "listSecurityAttributeWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listSecurityAttributeWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listSecurityAttributeWorkRequestLogsRequest.page,
      "limit": listSecurityAttributeWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAttributeWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAttributeWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeWorkRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAttributeWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAttributeWorkRequestLogSummary,
        type: "Array<model.SecurityAttributeWorkRequestLogSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
   * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequestLogs(
    request: requests.ListSecurityAttributeWorkRequestLogsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestLogSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequestLogsResponses(
    request: requests.ListSecurityAttributeWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
   * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestLogsRecordIterator(
    request: requests.ListSecurityAttributeWorkRequestLogsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestLogSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestLogsResponseIterator(
    request: requests.ListSecurityAttributeWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequestLogs(req));
  }

  /**
   * Lists the security attribute work requests in compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityAttributeWorkRequestsRequest
   * @return ListSecurityAttributeWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequests.ts.html |here} to see how to use ListSecurityAttributeWorkRequests API.
   */
  public async listSecurityAttributeWorkRequests(
    listSecurityAttributeWorkRequestsRequest: requests.ListSecurityAttributeWorkRequestsRequest
  ): Promise<responses.ListSecurityAttributeWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequests."
      );
    const operationName = "listSecurityAttributeWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityAttributeWorkRequestsRequest.compartmentId,
      "page": listSecurityAttributeWorkRequestsRequest.page,
      "limit": listSecurityAttributeWorkRequestsRequest.limit,
      "resourceIdentifier": listSecurityAttributeWorkRequestsRequest.resourceIdentifier
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAttributeWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAttributeWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeWorkRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAttributeWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAttributeWorkRequestSummary,
        type: "Array<model.SecurityAttributeWorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
   * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequests(
    request: requests.ListSecurityAttributeWorkRequestsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributeWorkRequestsResponses(
    request: requests.ListSecurityAttributeWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
   * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestsRecordIterator(
    request: requests.ListSecurityAttributeWorkRequestsRequest
  ): AsyncIterableIterator<model.SecurityAttributeWorkRequestSummary> {
    return paginateRecords(request, req => this.listSecurityAttributeWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributeWorkRequestsResponseIterator(
    request: requests.ListSecurityAttributeWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestsResponse> {
    return paginateResponses(request, req => this.listSecurityAttributeWorkRequests(req));
  }

  /**
   * Lists the security attributes in the specified namespace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityAttributesRequest
   * @return ListSecurityAttributesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributes.ts.html |here} to see how to use ListSecurityAttributes API.
   */
  public async listSecurityAttributes(
    listSecurityAttributesRequest: requests.ListSecurityAttributesRequest
  ): Promise<responses.ListSecurityAttributesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributes.");
    const operationName = "listSecurityAttributes";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}": listSecurityAttributesRequest.securityAttributeNamespaceId
    };

    const queryParams = {
      "page": listSecurityAttributesRequest.page,
      "limit": listSecurityAttributesRequest.limit,
      "lifecycleState": listSecurityAttributesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAttributesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAttributesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAttributesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAttributeSummary,
        type: "Array<model.SecurityAttributeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
   * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributes(
    request: requests.ListSecurityAttributesRequest
  ): AsyncIterableIterator<model.SecurityAttributeSummary> {
    return paginateRecords(request, req => this.listSecurityAttributes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAttributesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAttributesResponses(
    request: requests.ListSecurityAttributesRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributesResponse> {
    return paginateResponses(request, req => this.listSecurityAttributes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
   * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributesRecordIterator(
    request: requests.ListSecurityAttributesRequest
  ): AsyncIterableIterator<model.SecurityAttributeSummary> {
    return paginateRecords(request, req => this.listSecurityAttributes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAttributesResponseIterator(
    request: requests.ListSecurityAttributesRequest
  ): AsyncIterableIterator<responses.ListSecurityAttributesResponse> {
    return paginateResponses(request, req => this.listSecurityAttributes(req));
  }

  /**
   * Updates the specified security attribute. You can only update `description`, and `isRetired`.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSecurityAttributeRequest
   * @return UpdateSecurityAttributeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttribute.ts.html |here} to see how to use UpdateSecurityAttribute API.
   */
  public async updateSecurityAttribute(
    updateSecurityAttributeRequest: requests.UpdateSecurityAttributeRequest
  ): Promise<responses.UpdateSecurityAttributeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SecurityAttributeClient#updateSecurityAttribute.");
    const operationName = "updateSecurityAttribute";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}": updateSecurityAttributeRequest.securityAttributeNamespaceId,
      "{securityAttributeName}": updateSecurityAttributeRequest.securityAttributeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityAttributeRequest.ifMatch,
      "opc-request-id": updateSecurityAttributeRequest.opcRequestId,
      "opc-retry-token": updateSecurityAttributeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityAttributeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityAttributeRequest.updateSecurityAttributeDetails,
        "UpdateSecurityAttributeDetails",
        model.UpdateSecurityAttributeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityAttributeResponse>{},
        body: await response.json(),
        bodyKey: "securityAttribute",
        bodyModel: model.SecurityAttribute,
        type: "model.SecurityAttribute",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified security attribute namespace. You can't update the namespace name.
* <p>
Updating `isRetired` to 'true' retires the namespace and all the security attributes in the namespace. Reactivating a
* namespace (changing `isRetired` from 'true' to 'false') does not reactivate security attributes.
* To reactivate the security attributes, you must reactivate each one individually *after* you reactivate the namespace,
* using {@link #updateTag(UpdateTagRequest) updateTag}. For more information about retiring security attribute namespaces, see
* [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
* <p>
You can't add a namespace with the same name as a retired namespace in the same tenancy.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityAttributeNamespaceRequest
     * @return UpdateSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttributeNamespace.ts.html |here} to see how to use UpdateSecurityAttributeNamespace API.
     */
  public async updateSecurityAttributeNamespace(
    updateSecurityAttributeNamespaceRequest: requests.UpdateSecurityAttributeNamespaceRequest
  ): Promise<responses.UpdateSecurityAttributeNamespaceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SecurityAttributeClient#updateSecurityAttributeNamespace."
      );
    const operationName = "updateSecurityAttributeNamespace";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityAttributeNamespaceId}":
        updateSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityAttributeNamespaceRequest.ifMatch,
      "opc-request-id": updateSecurityAttributeNamespaceRequest.opcRequestId,
      "opc-retry-token": updateSecurityAttributeNamespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityAttributeNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityAttributeNamespaceRequest.updateSecurityAttributeNamespaceDetails,
        "UpdateSecurityAttributeNamespaceDetails",
        model.UpdateSecurityAttributeNamespaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityAttributeNamespaceResponse>{},
        body: await response.json(),
        bodyKey: "securityAttributeNamespace",
        bodyModel: model.SecurityAttributeNamespace,
        type: "model.SecurityAttributeNamespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
