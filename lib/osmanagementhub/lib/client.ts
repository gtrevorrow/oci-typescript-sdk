/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for instances in OCI, your private data center, or 3rd-party clouds. 
For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { EventWaiter } from "./event-waiter";
import { LifecycleEnvironmentWaiter } from "./lifecycleenvironment-waiter";
import { ManagedInstanceGroupWaiter } from "./managedinstancegroup-waiter";
import { ManagementStationWaiter } from "./managementstation-waiter";
import { OnboardingWaiter } from "./onboarding-waiter";
import { ScheduledJobWaiter } from "./scheduledjob-waiter";
import { SoftwareSourceWaiter } from "./softwaresource-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum EventApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class EventClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": EventWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Event";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`EventClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        EventClient.serviceEndpointTemplate,
        this._region,
        EventClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        EventClient.serviceEndpointTemplate,
        this._regionId,
        EventClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      EventClient.serviceEndpointTemplate,
      region,
      EventClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      EventClient.serviceEndpointTemplate,
      regionId,
      EventClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new EventWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): EventWaiter {
    this._waiters = new EventWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): EventWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves an event into a different compartment within the same tenancy. For information about moving resources between
   * compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeEventCompartmentRequest
   * @return ChangeEventCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeEventCompartment.ts.html |here} to see how to use ChangeEventCompartment API.
   */
  public async changeEventCompartment(
    changeEventCompartmentRequest: requests.ChangeEventCompartmentRequest
  ): Promise<responses.ChangeEventCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#changeEventCompartment.");
    const operationName = "changeEventCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": changeEventCompartmentRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeEventCompartmentRequest.ifMatch,
      "opc-request-id": changeEventCompartmentRequest.opcRequestId,
      "opc-retry-token": changeEventCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeEventCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeEventCompartmentRequest.changeEventCompartmentDetails,
        "ChangeEventCompartmentDetails",
        model.ChangeEventCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeEventCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified event.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteEventRequest
   * @return DeleteEventResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteEvent.ts.html |here} to see how to use DeleteEvent API.
   */
  public async deleteEvent(
    deleteEventRequest: requests.DeleteEventRequest
  ): Promise<responses.DeleteEventResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#deleteEvent.");
    const operationName = "deleteEvent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": deleteEventRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteEventRequest.ifMatch,
      "opc-request-id": deleteEventRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEventRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEventResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an event content ZIP archive from the service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteEventContentRequest
   * @return DeleteEventContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteEventContent.ts.html |here} to see how to use DeleteEventContent API.
   */
  public async deleteEventContent(
    deleteEventContentRequest: requests.DeleteEventContentRequest
  ): Promise<responses.DeleteEventContentResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#deleteEventContent.");
    const operationName = "deleteEventContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": deleteEventContentRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteEventContentRequest.opcRequestId,
      "if-match": deleteEventContentRequest.ifMatch,
      "opc-retry-token": deleteEventContentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEventContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}/content",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEventContentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified event.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetEventRequest
   * @return GetEventResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetEvent.ts.html |here} to see how to use GetEvent API.
   */
  public async getEvent(
    getEventRequest: requests.GetEventRequest
  ): Promise<responses.GetEventResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#getEvent.");
    const operationName = "getEvent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": getEventRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEventRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEventRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEventResponse>{},
        body: await response.json(),
        bodyKey: "event",
        bodyModel: model.Event,
        type: "model.Event",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a ZIP archive with additional information about an event. The archive content depends on the event type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetEventContentRequest
   * @return GetEventContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetEventContent.ts.html |here} to see how to use GetEventContent API.
   */
  public async getEventContent(
    getEventContentRequest: requests.GetEventContentRequest
  ): Promise<responses.GetEventContentResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#getEventContent.");
    const operationName = "getEventContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": getEventContentRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEventContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEventContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEventContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Uploads an event content ZIP archive from an instance to the service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ImportEventContentRequest
   * @return ImportEventContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ImportEventContent.ts.html |here} to see how to use ImportEventContent API.
   */
  public async importEventContent(
    importEventContentRequest: requests.ImportEventContentRequest
  ): Promise<responses.ImportEventContentResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#importEventContent.");
    const operationName = "importEventContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": importEventContentRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": importEventContentRequest.opcRequestId,
      "if-match": importEventContentRequest.ifMatch,
      "opc-retry-token": importEventContentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      importEventContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}/actions/importContent",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ImportEventContentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists events that match the specified criteria, such as compartment, state, and event type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListEventsRequest
   * @return ListEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListEvents.ts.html |here} to see how to use ListEvents API.
   */
  public async listEvents(
    listEventsRequest: requests.ListEventsRequest
  ): Promise<responses.ListEventsResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#listEvents.");
    const operationName = "listEvents";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "eventSummary": listEventsRequest.eventSummary,
      "eventSummaryContains": listEventsRequest.eventSummaryContains,
      "id": listEventsRequest.id,
      "eventFingerprint": listEventsRequest.eventFingerprint,
      "compartmentId": listEventsRequest.compartmentId,
      "lifecycleState": listEventsRequest.lifecycleState,
      "resourceId": listEventsRequest.resourceId,
      "type": listEventsRequest.type,
      "limit": listEventsRequest.limit,
      "page": listEventsRequest.page,
      "timeCreatedLessThan": listEventsRequest.timeCreatedLessThan,
      "timeCreatedGreaterThanOrEqualTo": listEventsRequest.timeCreatedGreaterThanOrEqualTo,
      "sortOrder": listEventsRequest.sortOrder,
      "sortBy": listEventsRequest.sortBy,
      "isManagedByAutonomousLinux": listEventsRequest.isManagedByAutonomousLinux
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEventsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEventsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEventsResponse>{},
        body: await response.json(),
        bodyKey: "eventCollection",
        bodyModel: model.EventCollection,
        type: "model.EventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the tags for an event.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateEventRequest
   * @return UpdateEventResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateEvent.ts.html |here} to see how to use UpdateEvent API.
   */
  public async updateEvent(
    updateEventRequest: requests.UpdateEventRequest
  ): Promise<responses.UpdateEventResponse> {
    if (this.logger) this.logger.debug("Calling operation EventClient#updateEvent.");
    const operationName = "updateEvent";
    const apiReferenceLink = "";
    const pathParams = {
      "{eventId}": updateEventRequest.eventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateEventRequest.ifMatch,
      "opc-request-id": updateEventRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEventRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/events/{eventId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEventRequest.updateEventDetails,
        "UpdateEventDetails",
        model.UpdateEventDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEventResponse>{},
        body: await response.json(),
        bodyKey: "event",
        bodyModel: model.Event,
        type: "model.Event",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum LifecycleEnvironmentApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class LifecycleEnvironmentClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": LifecycleEnvironmentWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "LifecycleEnvironment";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger)
      this.logger.info(`LifecycleEnvironmentClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        LifecycleEnvironmentClient.serviceEndpointTemplate,
        this._region,
        LifecycleEnvironmentClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        LifecycleEnvironmentClient.serviceEndpointTemplate,
        this._regionId,
        LifecycleEnvironmentClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      LifecycleEnvironmentClient.serviceEndpointTemplate,
      region,
      LifecycleEnvironmentClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      LifecycleEnvironmentClient.serviceEndpointTemplate,
      regionId,
      LifecycleEnvironmentClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new LifecycleEnvironmentWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): LifecycleEnvironmentWaiter {
    this._waiters = new LifecycleEnvironmentWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): LifecycleEnvironmentWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Attaches (adds) managed instances to a lifecycle stage. Once added, you can apply operations to all managed instances in the lifecycle stage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AttachManagedInstancesToLifecycleStageRequest
   * @return AttachManagedInstancesToLifecycleStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AttachManagedInstancesToLifecycleStage.ts.html |here} to see how to use AttachManagedInstancesToLifecycleStage API.
   */
  public async attachManagedInstancesToLifecycleStage(
    attachManagedInstancesToLifecycleStageRequest: requests.AttachManagedInstancesToLifecycleStageRequest
  ): Promise<responses.AttachManagedInstancesToLifecycleStageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LifecycleEnvironmentClient#attachManagedInstancesToLifecycleStage."
      );
    const operationName = "attachManagedInstancesToLifecycleStage";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleStageId}": attachManagedInstancesToLifecycleStageRequest.lifecycleStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": attachManagedInstancesToLifecycleStageRequest.opcRequestId,
      "opc-retry-token": attachManagedInstancesToLifecycleStageRequest.opcRetryToken,
      "if-match": attachManagedInstancesToLifecycleStageRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachManagedInstancesToLifecycleStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages/{lifecycleStageId}/actions/attachManagedInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachManagedInstancesToLifecycleStageRequest.attachManagedInstancesToLifecycleStageDetails,
        "AttachManagedInstancesToLifecycleStageDetails",
        model.AttachManagedInstancesToLifecycleStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachManagedInstancesToLifecycleStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a lifecycle environment into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeLifecycleEnvironmentCompartmentRequest
   * @return ChangeLifecycleEnvironmentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeLifecycleEnvironmentCompartment.ts.html |here} to see how to use ChangeLifecycleEnvironmentCompartment API.
   */
  public async changeLifecycleEnvironmentCompartment(
    changeLifecycleEnvironmentCompartmentRequest: requests.ChangeLifecycleEnvironmentCompartmentRequest
  ): Promise<responses.ChangeLifecycleEnvironmentCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LifecycleEnvironmentClient#changeLifecycleEnvironmentCompartment."
      );
    const operationName = "changeLifecycleEnvironmentCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleEnvironmentId}":
        changeLifecycleEnvironmentCompartmentRequest.lifecycleEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeLifecycleEnvironmentCompartmentRequest.opcRequestId,
      "if-match": changeLifecycleEnvironmentCompartmentRequest.ifMatch,
      "opc-retry-token": changeLifecycleEnvironmentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLifecycleEnvironmentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments/{lifecycleEnvironmentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLifecycleEnvironmentCompartmentRequest.changeLifecycleEnvironmentCompartmentDetails,
        "ChangeLifecycleEnvironmentCompartmentDetails",
        model.ChangeLifecycleEnvironmentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLifecycleEnvironmentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a lifecycle environment. A lifecycle environment is a user-defined pipeline to deliver curated, versioned content in a prescribed, methodical manner.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateLifecycleEnvironmentRequest
   * @return CreateLifecycleEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateLifecycleEnvironment.ts.html |here} to see how to use CreateLifecycleEnvironment API.
   */
  public async createLifecycleEnvironment(
    createLifecycleEnvironmentRequest: requests.CreateLifecycleEnvironmentRequest
  ): Promise<responses.CreateLifecycleEnvironmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#createLifecycleEnvironment.");
    const operationName = "createLifecycleEnvironment";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLifecycleEnvironmentRequest.opcRetryToken,
      "opc-request-id": createLifecycleEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLifecycleEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLifecycleEnvironmentRequest.createLifecycleEnvironmentDetails,
        "CreateLifecycleEnvironmentDetails",
        model.CreateLifecycleEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLifecycleEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleEnvironment",
        bodyModel: model.LifecycleEnvironment,
        type: "model.LifecycleEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified lifecycle environment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteLifecycleEnvironmentRequest
   * @return DeleteLifecycleEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteLifecycleEnvironment.ts.html |here} to see how to use DeleteLifecycleEnvironment API.
   */
  public async deleteLifecycleEnvironment(
    deleteLifecycleEnvironmentRequest: requests.DeleteLifecycleEnvironmentRequest
  ): Promise<responses.DeleteLifecycleEnvironmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#deleteLifecycleEnvironment.");
    const operationName = "deleteLifecycleEnvironment";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleEnvironmentId}": deleteLifecycleEnvironmentRequest.lifecycleEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLifecycleEnvironmentRequest.ifMatch,
      "opc-request-id": deleteLifecycleEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLifecycleEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLifecycleEnvironmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches (removes) a managed instance from a lifecycle stage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DetachManagedInstancesFromLifecycleStageRequest
   * @return DetachManagedInstancesFromLifecycleStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DetachManagedInstancesFromLifecycleStage.ts.html |here} to see how to use DetachManagedInstancesFromLifecycleStage API.
   */
  public async detachManagedInstancesFromLifecycleStage(
    detachManagedInstancesFromLifecycleStageRequest: requests.DetachManagedInstancesFromLifecycleStageRequest
  ): Promise<responses.DetachManagedInstancesFromLifecycleStageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LifecycleEnvironmentClient#detachManagedInstancesFromLifecycleStage."
      );
    const operationName = "detachManagedInstancesFromLifecycleStage";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleStageId}": detachManagedInstancesFromLifecycleStageRequest.lifecycleStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detachManagedInstancesFromLifecycleStageRequest.opcRequestId,
      "opc-retry-token": detachManagedInstancesFromLifecycleStageRequest.opcRetryToken,
      "if-match": detachManagedInstancesFromLifecycleStageRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachManagedInstancesFromLifecycleStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages/{lifecycleStageId}/actions/detachManagedInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachManagedInstancesFromLifecycleStageRequest.detachManagedInstancesFromLifecycleStageDetails,
        "DetachManagedInstancesFromLifecycleStageDetails",
        model.DetachManagedInstancesFromLifecycleStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachManagedInstancesFromLifecycleStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified lifecycle environment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLifecycleEnvironmentRequest
   * @return GetLifecycleEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetLifecycleEnvironment.ts.html |here} to see how to use GetLifecycleEnvironment API.
   */
  public async getLifecycleEnvironment(
    getLifecycleEnvironmentRequest: requests.GetLifecycleEnvironmentRequest
  ): Promise<responses.GetLifecycleEnvironmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#getLifecycleEnvironment.");
    const operationName = "getLifecycleEnvironment";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleEnvironmentId}": getLifecycleEnvironmentRequest.lifecycleEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLifecycleEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLifecycleEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLifecycleEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleEnvironment",
        bodyModel: model.LifecycleEnvironment,
        type: "model.LifecycleEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified lifecycle stage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLifecycleStageRequest
   * @return GetLifecycleStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetLifecycleStage.ts.html |here} to see how to use GetLifecycleStage API.
   */
  public async getLifecycleStage(
    getLifecycleStageRequest: requests.GetLifecycleStageRequest
  ): Promise<responses.GetLifecycleStageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#getLifecycleStage.");
    const operationName = "getLifecycleStage";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleStageId}": getLifecycleStageRequest.lifecycleStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLifecycleStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLifecycleStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages/{lifecycleStageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLifecycleStageResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleStage",
        bodyModel: model.LifecycleStage,
        type: "model.LifecycleStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists lifecycle environments that match the specified compartment or lifecycle environment OCID. Filter the list
   * against a variety of criteria including but not limited to its name, status, architecture, and OS family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLifecycleEnvironmentsRequest
   * @return ListLifecycleEnvironmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListLifecycleEnvironments.ts.html |here} to see how to use ListLifecycleEnvironments API.
   */
  public async listLifecycleEnvironments(
    listLifecycleEnvironmentsRequest: requests.ListLifecycleEnvironmentsRequest
  ): Promise<responses.ListLifecycleEnvironmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#listLifecycleEnvironments.");
    const operationName = "listLifecycleEnvironments";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLifecycleEnvironmentsRequest.compartmentId,
      "displayName": listLifecycleEnvironmentsRequest.displayName,
      "displayNameContains": listLifecycleEnvironmentsRequest.displayNameContains,
      "lifecycleEnvironmentId": listLifecycleEnvironmentsRequest.lifecycleEnvironmentId,
      "archType": listLifecycleEnvironmentsRequest.archType,
      "osFamily": listLifecycleEnvironmentsRequest.osFamily,
      "location": listLifecycleEnvironmentsRequest.location,
      "locationNotEqualTo": listLifecycleEnvironmentsRequest.locationNotEqualTo,
      "limit": listLifecycleEnvironmentsRequest.limit,
      "page": listLifecycleEnvironmentsRequest.page,
      "lifecycleState": listLifecycleEnvironmentsRequest.lifecycleState,
      "sortOrder": listLifecycleEnvironmentsRequest.sortOrder,
      "sortBy": listLifecycleEnvironmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLifecycleEnvironmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLifecycleEnvironmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLifecycleEnvironmentsResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleEnvironmentCollection",
        bodyModel: model.LifecycleEnvironmentCollection,
        type: "model.LifecycleEnvironmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists installed packages on managed instances in a specified lifecycle stage. Filter the list against a variety
   * of criteria including but not limited to the package name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLifecycleStageInstalledPackagesRequest
   * @return ListLifecycleStageInstalledPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListLifecycleStageInstalledPackages.ts.html |here} to see how to use ListLifecycleStageInstalledPackages API.
   */
  public async listLifecycleStageInstalledPackages(
    listLifecycleStageInstalledPackagesRequest: requests.ListLifecycleStageInstalledPackagesRequest
  ): Promise<responses.ListLifecycleStageInstalledPackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LifecycleEnvironmentClient#listLifecycleStageInstalledPackages."
      );
    const operationName = "listLifecycleStageInstalledPackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleStageId}": listLifecycleStageInstalledPackagesRequest.lifecycleStageId
    };

    const queryParams = {
      "compartmentId": listLifecycleStageInstalledPackagesRequest.compartmentId,
      "displayName": listLifecycleStageInstalledPackagesRequest.displayName,
      "displayNameContains": listLifecycleStageInstalledPackagesRequest.displayNameContains,
      "limit": listLifecycleStageInstalledPackagesRequest.limit,
      "page": listLifecycleStageInstalledPackagesRequest.page,
      "lifecycleState": listLifecycleStageInstalledPackagesRequest.lifecycleState,
      "sortOrder": listLifecycleStageInstalledPackagesRequest.sortOrder,
      "sortBy": listLifecycleStageInstalledPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLifecycleStageInstalledPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLifecycleStageInstalledPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages/{lifecycleStageId}/installedPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLifecycleStageInstalledPackagesResponse>{},
        body: await response.json(),
        bodyKey: "installedPackageCollection",
        bodyModel: model.InstalledPackageCollection,
        type: "model.InstalledPackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists lifecycle stages that match the specified compartment or lifecycle stage [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLifecycleStagesRequest
   * @return ListLifecycleStagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListLifecycleStages.ts.html |here} to see how to use ListLifecycleStages API.
   */
  public async listLifecycleStages(
    listLifecycleStagesRequest: requests.ListLifecycleStagesRequest
  ): Promise<responses.ListLifecycleStagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#listLifecycleStages.");
    const operationName = "listLifecycleStages";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLifecycleStagesRequest.compartmentId,
      "displayName": listLifecycleStagesRequest.displayName,
      "displayNameContains": listLifecycleStagesRequest.displayNameContains,
      "lifecycleStageId": listLifecycleStagesRequest.lifecycleStageId,
      "softwareSourceId": listLifecycleStagesRequest.softwareSourceId,
      "archType": listLifecycleStagesRequest.archType,
      "osFamily": listLifecycleStagesRequest.osFamily,
      "location": listLifecycleStagesRequest.location,
      "locationNotEqualTo": listLifecycleStagesRequest.locationNotEqualTo,
      "limit": listLifecycleStagesRequest.limit,
      "page": listLifecycleStagesRequest.page,
      "lifecycleState": listLifecycleStagesRequest.lifecycleState,
      "sortOrder": listLifecycleStagesRequest.sortOrder,
      "sortBy": listLifecycleStagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLifecycleStagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLifecycleStagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLifecycleStagesResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleStageCollection",
        bodyModel: model.LifecycleStageCollection,
        type: "model.LifecycleStageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the versioned custom software source content to the specified lifecycle stage.
   * A versioned custom software source OCID (softwareSourceId) is required when promoting content to the first lifecycle stage. You must promote content to the first stage before promoting to subsequent stages, otherwise the service returns an error.
   * The softwareSourceId is optional when promoting content to the second, third, forth, or fifth stages. If you provide a softwareSourceId, the service validates that it matches the softwareSourceId of the previous stage. If it does not match, the service returns an error. If you don't provide a softwareSourceId, the service promotes the versioned software source from the previous lifecycle stage. If the previous lifecycle stage has no software source, the service returns an error.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PromoteSoftwareSourceToLifecycleStageRequest
   * @return PromoteSoftwareSourceToLifecycleStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/PromoteSoftwareSourceToLifecycleStage.ts.html |here} to see how to use PromoteSoftwareSourceToLifecycleStage API.
   */
  public async promoteSoftwareSourceToLifecycleStage(
    promoteSoftwareSourceToLifecycleStageRequest: requests.PromoteSoftwareSourceToLifecycleStageRequest
  ): Promise<responses.PromoteSoftwareSourceToLifecycleStageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LifecycleEnvironmentClient#promoteSoftwareSourceToLifecycleStage."
      );
    const operationName = "promoteSoftwareSourceToLifecycleStage";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleStageId}": promoteSoftwareSourceToLifecycleStageRequest.lifecycleStageId
    };

    const queryParams = {
      "softwareSourceId": promoteSoftwareSourceToLifecycleStageRequest.softwareSourceId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": promoteSoftwareSourceToLifecycleStageRequest.opcRequestId,
      "opc-retry-token": promoteSoftwareSourceToLifecycleStageRequest.opcRetryToken,
      "if-match": promoteSoftwareSourceToLifecycleStageRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      promoteSoftwareSourceToLifecycleStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleStages/{lifecycleStageId}/actions/promoteSoftwareSource",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        promoteSoftwareSourceToLifecycleStageRequest.promoteSoftwareSourceToLifecycleStageDetails,
        "PromoteSoftwareSourceToLifecycleStageDetails",
        model.PromoteSoftwareSourceToLifecycleStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PromoteSoftwareSourceToLifecycleStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified lifecycle environment's name, description, stages, or tags.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateLifecycleEnvironmentRequest
   * @return UpdateLifecycleEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateLifecycleEnvironment.ts.html |here} to see how to use UpdateLifecycleEnvironment API.
   */
  public async updateLifecycleEnvironment(
    updateLifecycleEnvironmentRequest: requests.UpdateLifecycleEnvironmentRequest
  ): Promise<responses.UpdateLifecycleEnvironmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LifecycleEnvironmentClient#updateLifecycleEnvironment.");
    const operationName = "updateLifecycleEnvironment";
    const apiReferenceLink = "";
    const pathParams = {
      "{lifecycleEnvironmentId}": updateLifecycleEnvironmentRequest.lifecycleEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLifecycleEnvironmentRequest.ifMatch,
      "opc-request-id": updateLifecycleEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLifecycleEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLifecycleEnvironmentRequest.updateLifecycleEnvironmentDetails,
        "UpdateLifecycleEnvironmentDetails",
        model.UpdateLifecycleEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLifecycleEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "lifecycleEnvironment",
        bodyModel: model.LifecycleEnvironment,
        type: "model.LifecycleEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ManagedInstanceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ManagedInstanceClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ManagedInstance";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`ManagedInstanceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ManagedInstanceClient.serviceEndpointTemplate,
        this._region,
        ManagedInstanceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ManagedInstanceClient.serviceEndpointTemplate,
        this._regionId,
        ManagedInstanceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ManagedInstanceClient.serviceEndpointTemplate,
      region,
      ManagedInstanceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ManagedInstanceClient.serviceEndpointTemplate,
      regionId,
      ManagedInstanceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Adds profile to a managed instance. After the profile has been added,
   * the instance can be registered as a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AttachProfileToManagedInstanceRequest
   * @return AttachProfileToManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AttachProfileToManagedInstance.ts.html |here} to see how to use AttachProfileToManagedInstance API.
   */
  public async attachProfileToManagedInstance(
    attachProfileToManagedInstanceRequest: requests.AttachProfileToManagedInstanceRequest
  ): Promise<responses.AttachProfileToManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#attachProfileToManagedInstance.");
    const operationName = "attachProfileToManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": attachProfileToManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": attachProfileToManagedInstanceRequest.ifMatch,
      "opc-request-id": attachProfileToManagedInstanceRequest.opcRequestId,
      "opc-retry-token": attachProfileToManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachProfileToManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/attachProfile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachProfileToManagedInstanceRequest.attachProfileToManagedInstanceDetails,
        "AttachProfileToManagedInstanceDetails",
        model.AttachProfileToManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachProfileToManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds software sources to a managed instance. After the software source has been added,
   * then packages from that software source can be installed on the managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AttachSoftwareSourcesToManagedInstanceRequest
   * @return AttachSoftwareSourcesToManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AttachSoftwareSourcesToManagedInstance.ts.html |here} to see how to use AttachSoftwareSourcesToManagedInstance API.
   */
  public async attachSoftwareSourcesToManagedInstance(
    attachSoftwareSourcesToManagedInstanceRequest: requests.AttachSoftwareSourcesToManagedInstanceRequest
  ): Promise<responses.AttachSoftwareSourcesToManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#attachSoftwareSourcesToManagedInstance."
      );
    const operationName = "attachSoftwareSourcesToManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": attachSoftwareSourcesToManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": attachSoftwareSourcesToManagedInstanceRequest.ifMatch,
      "opc-request-id": attachSoftwareSourcesToManagedInstanceRequest.opcRequestId,
      "opc-retry-token": attachSoftwareSourcesToManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachSoftwareSourcesToManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/attachSoftwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachSoftwareSourcesToManagedInstanceRequest.attachSoftwareSourcesToManagedInstanceDetails,
        "AttachSoftwareSourcesToManagedInstanceDetails",
        model.AttachSoftwareSourcesToManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachSoftwareSourcesToManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unregisters the specified managed instance from the service. Once unregistered, the service will no longer manage the instance.
   * For Linux instances, yum or DNF repository files will be restored to their state prior to registration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteManagedInstanceRequest
   * @return DeleteManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteManagedInstance.ts.html |here} to see how to use DeleteManagedInstance API.
   */
  public async deleteManagedInstance(
    deleteManagedInstanceRequest: requests.DeleteManagedInstanceRequest
  ): Promise<responses.DeleteManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#deleteManagedInstance.");
    const operationName = "deleteManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": deleteManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagedInstanceRequest.ifMatch,
      "opc-request-id": deleteManagedInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches profile from a managed instance. After the profile has been removed,
   * the instance cannot be registered as a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DetachProfileFromManagedInstanceRequest
   * @return DetachProfileFromManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DetachProfileFromManagedInstance.ts.html |here} to see how to use DetachProfileFromManagedInstance API.
   */
  public async detachProfileFromManagedInstance(
    detachProfileFromManagedInstanceRequest: requests.DetachProfileFromManagedInstanceRequest
  ): Promise<responses.DetachProfileFromManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#detachProfileFromManagedInstance."
      );
    const operationName = "detachProfileFromManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": detachProfileFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachProfileFromManagedInstanceRequest.ifMatch,
      "opc-request-id": detachProfileFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": detachProfileFromManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachProfileFromManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/detachProfile",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachProfileFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes software sources from a managed instance.
   * Packages will no longer be able to be installed from these software sources.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DetachSoftwareSourcesFromManagedInstanceRequest
   * @return DetachSoftwareSourcesFromManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DetachSoftwareSourcesFromManagedInstance.ts.html |here} to see how to use DetachSoftwareSourcesFromManagedInstance API.
   */
  public async detachSoftwareSourcesFromManagedInstance(
    detachSoftwareSourcesFromManagedInstanceRequest: requests.DetachSoftwareSourcesFromManagedInstanceRequest
  ): Promise<responses.DetachSoftwareSourcesFromManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#detachSoftwareSourcesFromManagedInstance."
      );
    const operationName = "detachSoftwareSourcesFromManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": detachSoftwareSourcesFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachSoftwareSourcesFromManagedInstanceRequest.ifMatch,
      "opc-request-id": detachSoftwareSourcesFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": detachSoftwareSourcesFromManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachSoftwareSourcesFromManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/detachSoftwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachSoftwareSourcesFromManagedInstanceRequest.detachSoftwareSourcesFromManagedInstanceDetails,
        "DetachSoftwareSourcesFromManagedInstanceDetails",
        model.DetachSoftwareSourcesFromManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachSoftwareSourcesFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disables a module stream on a managed instance.  After the stream is
   * disabled, it is no longer possible to install the profiles that are
   * contained by the stream.  All installed profiles must be removed prior
   * to disabling a module stream.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DisableModuleStreamOnManagedInstanceRequest
   * @return DisableModuleStreamOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DisableModuleStreamOnManagedInstance.ts.html |here} to see how to use DisableModuleStreamOnManagedInstance API.
   */
  public async disableModuleStreamOnManagedInstance(
    disableModuleStreamOnManagedInstanceRequest: requests.DisableModuleStreamOnManagedInstanceRequest
  ): Promise<responses.DisableModuleStreamOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#disableModuleStreamOnManagedInstance."
      );
    const operationName = "disableModuleStreamOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": disableModuleStreamOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": disableModuleStreamOnManagedInstanceRequest.ifMatch,
      "opc-request-id": disableModuleStreamOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": disableModuleStreamOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableModuleStreamOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/disableModuleStreams",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableModuleStreamOnManagedInstanceRequest.disableModuleStreamOnManagedInstanceDetails,
        "DisableModuleStreamOnManagedInstanceDetails",
        model.DisableModuleStreamOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableModuleStreamOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables a module stream on a managed instance.  After the stream is
   * enabled, it is possible to install the profiles that are contained
   * by the stream.  Enabling a stream that is already enabled will
   * succeed.  Attempting to enable a different stream for a module that
   * already has a stream enabled results in an error.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EnableModuleStreamOnManagedInstanceRequest
   * @return EnableModuleStreamOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/EnableModuleStreamOnManagedInstance.ts.html |here} to see how to use EnableModuleStreamOnManagedInstance API.
   */
  public async enableModuleStreamOnManagedInstance(
    enableModuleStreamOnManagedInstanceRequest: requests.EnableModuleStreamOnManagedInstanceRequest
  ): Promise<responses.EnableModuleStreamOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#enableModuleStreamOnManagedInstance."
      );
    const operationName = "enableModuleStreamOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": enableModuleStreamOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableModuleStreamOnManagedInstanceRequest.ifMatch,
      "opc-request-id": enableModuleStreamOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": enableModuleStreamOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableModuleStreamOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/enableModuleStreams",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableModuleStreamOnManagedInstanceRequest.enableModuleStreamOnManagedInstanceDetails,
        "EnableModuleStreamOnManagedInstanceDetails",
        model.EnableModuleStreamOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableModuleStreamOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified managed instance.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceRequest
   * @return GetManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetManagedInstance.ts.html |here} to see how to use GetManagedInstance API.
   */
  public async getManagedInstance(
    getManagedInstanceRequest: requests.GetManagedInstanceRequest
  ): Promise<responses.GetManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#getManagedInstance.");
    const operationName = "getManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": getManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "managedInstance",
        bodyModel: model.ManagedInstance,
        type: "model.ManagedInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Windows Update object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWindowsUpdateRequest
   * @return GetWindowsUpdateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetWindowsUpdate.ts.html |here} to see how to use GetWindowsUpdate API.
   */
  public async getWindowsUpdate(
    getWindowsUpdateRequest: requests.GetWindowsUpdateRequest
  ): Promise<responses.GetWindowsUpdateResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagedInstanceClient#getWindowsUpdate.");
    const operationName = "getWindowsUpdate";
    const apiReferenceLink = "";
    const pathParams = {
      "{windowsUpdateId}": getWindowsUpdateRequest.windowsUpdateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWindowsUpdateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWindowsUpdateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/windowsUpdates/{windowsUpdateId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWindowsUpdateResponse>{},
        body: await response.json(),
        bodyKey: "windowsUpdate",
        bodyModel: model.WindowsUpdate,
        type: "model.WindowsUpdate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs all of the available Windows updates for managed instances in a compartment. This applies only to standalone Windows instances. This will not update instances that belong to a group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallAllWindowsUpdatesOnManagedInstancesInCompartmentRequest
   * @return InstallAllWindowsUpdatesOnManagedInstancesInCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallAllWindowsUpdatesOnManagedInstancesInCompartment.ts.html |here} to see how to use InstallAllWindowsUpdatesOnManagedInstancesInCompartment API.
   */
  public async installAllWindowsUpdatesOnManagedInstancesInCompartment(
    installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest: requests.InstallAllWindowsUpdatesOnManagedInstancesInCompartmentRequest
  ): Promise<responses.InstallAllWindowsUpdatesOnManagedInstancesInCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#installAllWindowsUpdatesOnManagedInstancesInCompartment."
      );
    const operationName = "installAllWindowsUpdatesOnManagedInstancesInCompartment";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest.opcRequestId,
      "opc-retry-token":
        installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest.opcRetryToken,
      "if-match": installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/actions/installWindowsUpdates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installAllWindowsUpdatesOnManagedInstancesInCompartmentRequest.installAllWindowsUpdatesOnManagedInstancesInCompartmentDetails,
        "InstallAllWindowsUpdatesOnManagedInstancesInCompartmentDetails",
        model.InstallAllWindowsUpdatesOnManagedInstancesInCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <
          responses.InstallAllWindowsUpdatesOnManagedInstancesInCompartmentResponse
        >{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs a profile for an module stream.  The stream must be
   * enabled before a profile can be installed.  If a module stream
   * defines multiple profiles, each one can be installed independently.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallModuleStreamProfileOnManagedInstanceRequest
   * @return InstallModuleStreamProfileOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallModuleStreamProfileOnManagedInstance.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstance API.
   */
  public async installModuleStreamProfileOnManagedInstance(
    installModuleStreamProfileOnManagedInstanceRequest: requests.InstallModuleStreamProfileOnManagedInstanceRequest
  ): Promise<responses.InstallModuleStreamProfileOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#installModuleStreamProfileOnManagedInstance."
      );
    const operationName = "installModuleStreamProfileOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": installModuleStreamProfileOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": installModuleStreamProfileOnManagedInstanceRequest.ifMatch,
      "opc-request-id": installModuleStreamProfileOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installModuleStreamProfileOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installModuleStreamProfileOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/installStreamProfiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installModuleStreamProfileOnManagedInstanceRequest.installModuleStreamProfileOnManagedInstanceDetails,
        "InstallModuleStreamProfileOnManagedInstanceDetails",
        model.InstallModuleStreamProfileOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallModuleStreamProfileOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs packages on a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallPackagesOnManagedInstanceRequest
   * @return InstallPackagesOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallPackagesOnManagedInstance.ts.html |here} to see how to use InstallPackagesOnManagedInstance API.
   */
  public async installPackagesOnManagedInstance(
    installPackagesOnManagedInstanceRequest: requests.InstallPackagesOnManagedInstanceRequest
  ): Promise<responses.InstallPackagesOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#installPackagesOnManagedInstance."
      );
    const operationName = "installPackagesOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": installPackagesOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": installPackagesOnManagedInstanceRequest.ifMatch,
      "opc-request-id": installPackagesOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installPackagesOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installPackagesOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/installPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installPackagesOnManagedInstanceRequest.installPackagesOnManagedInstanceDetails,
        "InstallPackagesOnManagedInstanceDetails",
        model.InstallPackagesOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallPackagesOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs Windows updates on the specified managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallWindowsUpdatesOnManagedInstanceRequest
   * @return InstallWindowsUpdatesOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallWindowsUpdatesOnManagedInstance.ts.html |here} to see how to use InstallWindowsUpdatesOnManagedInstance API.
   */
  public async installWindowsUpdatesOnManagedInstance(
    installWindowsUpdatesOnManagedInstanceRequest: requests.InstallWindowsUpdatesOnManagedInstanceRequest
  ): Promise<responses.InstallWindowsUpdatesOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#installWindowsUpdatesOnManagedInstance."
      );
    const operationName = "installWindowsUpdatesOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": installWindowsUpdatesOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": installWindowsUpdatesOnManagedInstanceRequest.ifMatch,
      "opc-request-id": installWindowsUpdatesOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": installWindowsUpdatesOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installWindowsUpdatesOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/installWindowsUpdates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installWindowsUpdatesOnManagedInstanceRequest.installWindowsUpdatesOnManagedInstanceDetails,
        "InstallWindowsUpdatesOnManagedInstanceDetails",
        model.InstallWindowsUpdatesOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallWindowsUpdatesOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of packages that are available for installation on a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceAvailablePackagesRequest
   * @return ListManagedInstanceAvailablePackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceAvailablePackages.ts.html |here} to see how to use ListManagedInstanceAvailablePackages API.
   */
  public async listManagedInstanceAvailablePackages(
    listManagedInstanceAvailablePackagesRequest: requests.ListManagedInstanceAvailablePackagesRequest
  ): Promise<responses.ListManagedInstanceAvailablePackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceAvailablePackages."
      );
    const operationName = "listManagedInstanceAvailablePackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceAvailablePackagesRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listManagedInstanceAvailablePackagesRequest.displayName,
      "displayNameContains": listManagedInstanceAvailablePackagesRequest.displayNameContains,
      "compartmentId": listManagedInstanceAvailablePackagesRequest.compartmentId,
      "limit": listManagedInstanceAvailablePackagesRequest.limit,
      "page": listManagedInstanceAvailablePackagesRequest.page,
      "sortOrder": listManagedInstanceAvailablePackagesRequest.sortOrder,
      "sortBy": listManagedInstanceAvailablePackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceAvailablePackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceAvailablePackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/availablePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceAvailablePackagesResponse>{},
        body: await response.json(),
        bodyKey: "availablePackageCollection",
        bodyModel: model.AvailablePackageCollection,
        type: "model.AvailablePackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of software sources that can be attached to the specified managed instance. Any software sources already attached to the instance are not included in the list.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceAvailableSoftwareSourcesRequest
   * @return ListManagedInstanceAvailableSoftwareSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceAvailableSoftwareSources.ts.html |here} to see how to use ListManagedInstanceAvailableSoftwareSources API.
   */
  public async listManagedInstanceAvailableSoftwareSources(
    listManagedInstanceAvailableSoftwareSourcesRequest: requests.ListManagedInstanceAvailableSoftwareSourcesRequest
  ): Promise<responses.ListManagedInstanceAvailableSoftwareSourcesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceAvailableSoftwareSources."
      );
    const operationName = "listManagedInstanceAvailableSoftwareSources";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceAvailableSoftwareSourcesRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listManagedInstanceAvailableSoftwareSourcesRequest.displayName,
      "displayNameContains": listManagedInstanceAvailableSoftwareSourcesRequest.displayNameContains,
      "compartmentId": listManagedInstanceAvailableSoftwareSourcesRequest.compartmentId,
      "limit": listManagedInstanceAvailableSoftwareSourcesRequest.limit,
      "page": listManagedInstanceAvailableSoftwareSourcesRequest.page,
      "sortOrder": listManagedInstanceAvailableSoftwareSourcesRequest.sortOrder,
      "sortBy": listManagedInstanceAvailableSoftwareSourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceAvailableSoftwareSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceAvailableSoftwareSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/availableSoftwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceAvailableSoftwareSourcesResponse>{},
        body: await response.json(),
        bodyKey: "availableSoftwareSourceCollection",
        bodyModel: model.AvailableSoftwareSourceCollection,
        type: "model.AvailableSoftwareSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Windows updates that can be installed on the specified managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceAvailableWindowsUpdatesRequest
   * @return ListManagedInstanceAvailableWindowsUpdatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceAvailableWindowsUpdates.ts.html |here} to see how to use ListManagedInstanceAvailableWindowsUpdates API.
   */
  public async listManagedInstanceAvailableWindowsUpdates(
    listManagedInstanceAvailableWindowsUpdatesRequest: requests.ListManagedInstanceAvailableWindowsUpdatesRequest
  ): Promise<responses.ListManagedInstanceAvailableWindowsUpdatesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceAvailableWindowsUpdates."
      );
    const operationName = "listManagedInstanceAvailableWindowsUpdates";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceAvailableWindowsUpdatesRequest.managedInstanceId
    };

    const queryParams = {
      "classificationType": listManagedInstanceAvailableWindowsUpdatesRequest.classificationType,
      "name": listManagedInstanceAvailableWindowsUpdatesRequest.name,
      "displayName": listManagedInstanceAvailableWindowsUpdatesRequest.displayName,
      "displayNameContains": listManagedInstanceAvailableWindowsUpdatesRequest.displayNameContains,
      "isInstallable": listManagedInstanceAvailableWindowsUpdatesRequest.isInstallable,
      "compartmentId": listManagedInstanceAvailableWindowsUpdatesRequest.compartmentId,
      "limit": listManagedInstanceAvailableWindowsUpdatesRequest.limit,
      "page": listManagedInstanceAvailableWindowsUpdatesRequest.page,
      "sortOrder": listManagedInstanceAvailableWindowsUpdatesRequest.sortOrder,
      "sortBy": listManagedInstanceAvailableWindowsUpdatesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceAvailableWindowsUpdatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceAvailableWindowsUpdatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/availableWindowsUpdates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceAvailableWindowsUpdatesResponse>{},
        body: await response.json(),
        bodyKey: "availableWindowsUpdateCollection",
        bodyModel: model.AvailableWindowsUpdateCollection,
        type: "model.AvailableWindowsUpdateCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of applicable errata on the managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceErrataRequest
   * @return ListManagedInstanceErrataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceErrata.ts.html |here} to see how to use ListManagedInstanceErrata API.
   */
  public async listManagedInstanceErrata(
    listManagedInstanceErrataRequest: requests.ListManagedInstanceErrataRequest
  ): Promise<responses.ListManagedInstanceErrataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceErrata.");
    const operationName = "listManagedInstanceErrata";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceErrataRequest.managedInstanceId
    };

    const queryParams = {
      "classificationType": listManagedInstanceErrataRequest.classificationType,
      "name": listManagedInstanceErrataRequest.name,
      "nameContains": listManagedInstanceErrataRequest.nameContains,
      "compartmentId": listManagedInstanceErrataRequest.compartmentId,
      "limit": listManagedInstanceErrataRequest.limit,
      "page": listManagedInstanceErrataRequest.page,
      "sortOrder": listManagedInstanceErrataRequest.sortOrder,
      "sortBy": listManagedInstanceErrataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceErrataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceErrataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/errata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceErrataResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceErratumSummaryCollection",
        bodyModel: model.ManagedInstanceErratumSummaryCollection,
        type: "model.ManagedInstanceErratumSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the packages that are installed on the managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceInstalledPackagesRequest
   * @return ListManagedInstanceInstalledPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceInstalledPackages.ts.html |here} to see how to use ListManagedInstanceInstalledPackages API.
   */
  public async listManagedInstanceInstalledPackages(
    listManagedInstanceInstalledPackagesRequest: requests.ListManagedInstanceInstalledPackagesRequest
  ): Promise<responses.ListManagedInstanceInstalledPackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceInstalledPackages."
      );
    const operationName = "listManagedInstanceInstalledPackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceInstalledPackagesRequest.managedInstanceId
    };

    const queryParams = {
      "displayName": listManagedInstanceInstalledPackagesRequest.displayName,
      "displayNameContains": listManagedInstanceInstalledPackagesRequest.displayNameContains,
      "timeInstallDateStart": listManagedInstanceInstalledPackagesRequest.timeInstallDateStart,
      "timeInstallDateEnd": listManagedInstanceInstalledPackagesRequest.timeInstallDateEnd,
      "compartmentId": listManagedInstanceInstalledPackagesRequest.compartmentId,
      "limit": listManagedInstanceInstalledPackagesRequest.limit,
      "page": listManagedInstanceInstalledPackagesRequest.page,
      "sortOrder": listManagedInstanceInstalledPackagesRequest.sortOrder,
      "sortBy": listManagedInstanceInstalledPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceInstalledPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceInstalledPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/installedPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceInstalledPackagesResponse>{},
        body: await response.json(),
        bodyKey: "installedPackageCollection",
        bodyModel: model.InstalledPackageCollection,
        type: "model.InstalledPackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Windows updates that have been installed on the specified managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceInstalledWindowsUpdatesRequest
   * @return ListManagedInstanceInstalledWindowsUpdatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceInstalledWindowsUpdates.ts.html |here} to see how to use ListManagedInstanceInstalledWindowsUpdates API.
   */
  public async listManagedInstanceInstalledWindowsUpdates(
    listManagedInstanceInstalledWindowsUpdatesRequest: requests.ListManagedInstanceInstalledWindowsUpdatesRequest
  ): Promise<responses.ListManagedInstanceInstalledWindowsUpdatesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceInstalledWindowsUpdates."
      );
    const operationName = "listManagedInstanceInstalledWindowsUpdates";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceInstalledWindowsUpdatesRequest.managedInstanceId
    };

    const queryParams = {
      "name": listManagedInstanceInstalledWindowsUpdatesRequest.name,
      "displayName": listManagedInstanceInstalledWindowsUpdatesRequest.displayName,
      "displayNameContains": listManagedInstanceInstalledWindowsUpdatesRequest.displayNameContains,
      "compartmentId": listManagedInstanceInstalledWindowsUpdatesRequest.compartmentId,
      "limit": listManagedInstanceInstalledWindowsUpdatesRequest.limit,
      "page": listManagedInstanceInstalledWindowsUpdatesRequest.page,
      "sortOrder": listManagedInstanceInstalledWindowsUpdatesRequest.sortOrder,
      "sortBy": listManagedInstanceInstalledWindowsUpdatesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceInstalledWindowsUpdatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceInstalledWindowsUpdatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/installedWindowsUpdates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceInstalledWindowsUpdatesResponse>{},
        body: await response.json(),
        bodyKey: "installedWindowsUpdateCollection",
        bodyModel: model.InstalledWindowsUpdateCollection,
        type: "model.InstalledWindowsUpdateCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of modules, along with streams of the modules, from a managed instance. Filters may be applied to select a subset of modules based on the filter criteria.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceModulesRequest
   * @return ListManagedInstanceModulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceModules.ts.html |here} to see how to use ListManagedInstanceModules API.
   */
  public async listManagedInstanceModules(
    listManagedInstanceModulesRequest: requests.ListManagedInstanceModulesRequest
  ): Promise<responses.ListManagedInstanceModulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceModules.");
    const operationName = "listManagedInstanceModules";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceModulesRequest.managedInstanceId
    };

    const queryParams = {
      "compartmentId": listManagedInstanceModulesRequest.compartmentId,
      "name": listManagedInstanceModulesRequest.name,
      "nameContains": listManagedInstanceModulesRequest.nameContains,
      "limit": listManagedInstanceModulesRequest.limit,
      "page": listManagedInstanceModulesRequest.page,
      "sortOrder": listManagedInstanceModulesRequest.sortOrder,
      "sortBy": listManagedInstanceModulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceModulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceModulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/modules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceModulesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceModuleCollection",
        bodyModel: model.ManagedInstanceModuleCollection,
        type: "model.ManagedInstanceModuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of updatable packages for a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceUpdatablePackagesRequest
   * @return ListManagedInstanceUpdatablePackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceUpdatablePackages.ts.html |here} to see how to use ListManagedInstanceUpdatablePackages API.
   */
  public async listManagedInstanceUpdatablePackages(
    listManagedInstanceUpdatablePackagesRequest: requests.ListManagedInstanceUpdatablePackagesRequest
  ): Promise<responses.ListManagedInstanceUpdatablePackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#listManagedInstanceUpdatablePackages."
      );
    const operationName = "listManagedInstanceUpdatablePackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceUpdatablePackagesRequest.managedInstanceId
    };

    const queryParams = {
      "classificationType": listManagedInstanceUpdatablePackagesRequest.classificationType,
      "displayName": listManagedInstanceUpdatablePackagesRequest.displayName,
      "displayNameContains": listManagedInstanceUpdatablePackagesRequest.displayNameContains,
      "advisoryName": listManagedInstanceUpdatablePackagesRequest.advisoryName,
      "compartmentId": listManagedInstanceUpdatablePackagesRequest.compartmentId,
      "limit": listManagedInstanceUpdatablePackagesRequest.limit,
      "page": listManagedInstanceUpdatablePackagesRequest.page,
      "sortOrder": listManagedInstanceUpdatablePackagesRequest.sortOrder,
      "sortBy": listManagedInstanceUpdatablePackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceUpdatablePackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceUpdatablePackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/updatablePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceUpdatablePackagesResponse>{},
        body: await response.json(),
        bodyKey: "updatablePackageCollection",
        bodyModel: model.UpdatablePackageCollection,
        type: "model.UpdatablePackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status, architecture, and OS version.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstancesRequest
   * @return ListManagedInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstances.ts.html |here} to see how to use ListManagedInstances API.
   */
  public async listManagedInstances(
    listManagedInstancesRequest: requests.ListManagedInstancesRequest
  ): Promise<responses.ListManagedInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstances.");
    const operationName = "listManagedInstances";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedInstancesRequest.compartmentId,
      "displayName": listManagedInstancesRequest.displayName,
      "displayNameContains": listManagedInstancesRequest.displayNameContains,
      "managedInstanceId": listManagedInstancesRequest.managedInstanceId,
      "status": listManagedInstancesRequest.status,
      "archType": listManagedInstancesRequest.archType,
      "osFamily": listManagedInstancesRequest.osFamily,
      "isManagementStation": listManagedInstancesRequest.isManagementStation,
      "group": listManagedInstancesRequest.group,
      "groupNotEqualTo": listManagedInstancesRequest.groupNotEqualTo,
      "lifecycleStage": listManagedInstancesRequest.lifecycleStage,
      "lifecycleStageNotEqualTo": listManagedInstancesRequest.lifecycleStageNotEqualTo,
      "isAttachedToGroupOrLifecycleStage":
        listManagedInstancesRequest.isAttachedToGroupOrLifecycleStage,
      "softwareSourceId": listManagedInstancesRequest.softwareSourceId,
      "advisoryName": listManagedInstancesRequest.advisoryName,
      "lifecycleEnvironment": listManagedInstancesRequest.lifecycleEnvironment,
      "lifecycleEnvironmentNotEqualTo": listManagedInstancesRequest.lifecycleEnvironmentNotEqualTo,
      "location": listManagedInstancesRequest.location,
      "locationNotEqualTo": listManagedInstancesRequest.locationNotEqualTo,
      "profile": listManagedInstancesRequest.profile,
      "profileNotEqualTo": listManagedInstancesRequest.profileNotEqualTo,
      "isProfileAttached": listManagedInstancesRequest.isProfileAttached,
      "isManagedByAutonomousLinux": listManagedInstancesRequest.isManagedByAutonomousLinux,
      "limit": listManagedInstancesRequest.limit,
      "page": listManagedInstancesRequest.page,
      "sortOrder": listManagedInstancesRequest.sortOrder,
      "sortBy": listManagedInstancesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstancesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstancesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceCollection",
        bodyModel: model.ManagedInstanceCollection,
        type: "model.ManagedInstanceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Windows updates that have been reported to the service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWindowsUpdatesRequest
   * @return ListWindowsUpdatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListWindowsUpdates.ts.html |here} to see how to use ListWindowsUpdates API.
   */
  public async listWindowsUpdates(
    listWindowsUpdatesRequest: requests.ListWindowsUpdatesRequest
  ): Promise<responses.ListWindowsUpdatesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#listWindowsUpdates.");
    const operationName = "listWindowsUpdates";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "classificationType": listWindowsUpdatesRequest.classificationType,
      "name": listWindowsUpdatesRequest.name,
      "displayNameContains": listWindowsUpdatesRequest.displayNameContains,
      "compartmentId": listWindowsUpdatesRequest.compartmentId,
      "limit": listWindowsUpdatesRequest.limit,
      "page": listWindowsUpdatesRequest.page,
      "sortOrder": listWindowsUpdatesRequest.sortOrder,
      "sortBy": listWindowsUpdatesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWindowsUpdatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWindowsUpdatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/windowsUpdates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWindowsUpdatesResponse>{},
        body: await response.json(),
        bodyKey: "windowsUpdateCollection",
        bodyModel: model.WindowsUpdateCollection,
        type: "model.WindowsUpdateCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables or disables module streams and installs or removes module stream profiles. Once complete, the state of the modules, streams, and
   * profiles will match the state indicated in the operation. See {@link #manageModuleStreamsOnManagedInstanceDetails(ManageModuleStreamsOnManagedInstanceDetailsRequest) manageModuleStreamsOnManagedInstanceDetails}
   * for more information. You can preform this operation as a dry run. For a dry run, the service evaluates the operation against the
   * current module, stream, and profile state on the managed instance, but does not commit the changes. Instead, the service returns work request log or error entries indicating the impact of the operation.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ManageModuleStreamsOnManagedInstanceRequest
   * @return ManageModuleStreamsOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ManageModuleStreamsOnManagedInstance.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstance API.
   */
  public async manageModuleStreamsOnManagedInstance(
    manageModuleStreamsOnManagedInstanceRequest: requests.ManageModuleStreamsOnManagedInstanceRequest
  ): Promise<responses.ManageModuleStreamsOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#manageModuleStreamsOnManagedInstance."
      );
    const operationName = "manageModuleStreamsOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": manageModuleStreamsOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": manageModuleStreamsOnManagedInstanceRequest.ifMatch,
      "opc-request-id": manageModuleStreamsOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": manageModuleStreamsOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      manageModuleStreamsOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/manageModuleStreams",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        manageModuleStreamsOnManagedInstanceRequest.manageModuleStreamsOnManagedInstanceDetails,
        "ManageModuleStreamsOnManagedInstanceDetails",
        model.ManageModuleStreamsOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ManageModuleStreamsOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the package or Windows update information on a managed instance with the latest data from the software source. This does not update packages on the instance. It provides the service with the latest package data.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshSoftwareOnManagedInstanceRequest
   * @return RefreshSoftwareOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RefreshSoftwareOnManagedInstance.ts.html |here} to see how to use RefreshSoftwareOnManagedInstance API.
   */
  public async refreshSoftwareOnManagedInstance(
    refreshSoftwareOnManagedInstanceRequest: requests.RefreshSoftwareOnManagedInstanceRequest
  ): Promise<responses.RefreshSoftwareOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#refreshSoftwareOnManagedInstance."
      );
    const operationName = "refreshSoftwareOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": refreshSoftwareOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": refreshSoftwareOnManagedInstanceRequest.ifMatch,
      "opc-request-id": refreshSoftwareOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": refreshSoftwareOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshSoftwareOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/refreshSoftware",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshSoftwareOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a profile for a module stream that is installed on a managed instance.
   * If a module stream is provided, rather than a fully qualified profile, all
   * profiles that have been installed for the module stream will be removed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveModuleStreamProfileFromManagedInstanceRequest
   * @return RemoveModuleStreamProfileFromManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RemoveModuleStreamProfileFromManagedInstance.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstance API.
   */
  public async removeModuleStreamProfileFromManagedInstance(
    removeModuleStreamProfileFromManagedInstanceRequest: requests.RemoveModuleStreamProfileFromManagedInstanceRequest
  ): Promise<responses.RemoveModuleStreamProfileFromManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#removeModuleStreamProfileFromManagedInstance."
      );
    const operationName = "removeModuleStreamProfileFromManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": removeModuleStreamProfileFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeModuleStreamProfileFromManagedInstanceRequest.ifMatch,
      "opc-request-id": removeModuleStreamProfileFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": removeModuleStreamProfileFromManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeModuleStreamProfileFromManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/removeStreamProfiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeModuleStreamProfileFromManagedInstanceRequest.removeModuleStreamProfileFromManagedInstanceDetails,
        "RemoveModuleStreamProfileFromManagedInstanceDetails",
        model.RemoveModuleStreamProfileFromManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveModuleStreamProfileFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes an installed package from a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemovePackagesFromManagedInstanceRequest
   * @return RemovePackagesFromManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RemovePackagesFromManagedInstance.ts.html |here} to see how to use RemovePackagesFromManagedInstance API.
   */
  public async removePackagesFromManagedInstance(
    removePackagesFromManagedInstanceRequest: requests.RemovePackagesFromManagedInstanceRequest
  ): Promise<responses.RemovePackagesFromManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#removePackagesFromManagedInstance."
      );
    const operationName = "removePackagesFromManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": removePackagesFromManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removePackagesFromManagedInstanceRequest.ifMatch,
      "opc-request-id": removePackagesFromManagedInstanceRequest.opcRequestId,
      "opc-retry-token": removePackagesFromManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removePackagesFromManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/removePackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePackagesFromManagedInstanceRequest.removePackagesFromManagedInstanceDetails,
        "RemovePackagesFromManagedInstanceDetails",
        model.RemovePackagesFromManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePackagesFromManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables a new stream for a module that already has a stream enabled.
   * If any profiles or packages from the original module are installed,
   * switching to a new stream will remove the existing packages and
   * install their counterparts in the new stream.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SwitchModuleStreamOnManagedInstanceRequest
   * @return SwitchModuleStreamOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SwitchModuleStreamOnManagedInstance.ts.html |here} to see how to use SwitchModuleStreamOnManagedInstance API.
   */
  public async switchModuleStreamOnManagedInstance(
    switchModuleStreamOnManagedInstanceRequest: requests.SwitchModuleStreamOnManagedInstanceRequest
  ): Promise<responses.SwitchModuleStreamOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#switchModuleStreamOnManagedInstance."
      );
    const operationName = "switchModuleStreamOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": switchModuleStreamOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": switchModuleStreamOnManagedInstanceRequest.ifMatch,
      "opc-request-id": switchModuleStreamOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": switchModuleStreamOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      switchModuleStreamOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/switchModuleStreams",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        switchModuleStreamOnManagedInstanceRequest.switchModuleStreamOnManagedInstanceDetails,
        "SwitchModuleStreamOnManagedInstanceDetails",
        model.SwitchModuleStreamOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SwitchModuleStreamOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Install all of the available package updates for all of the managed instances in a compartment. This applies only to standalone non-Windows instances. This will not update instances that belong to a group or lifecycle environment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAllPackagesOnManagedInstancesInCompartmentRequest
   * @return UpdateAllPackagesOnManagedInstancesInCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateAllPackagesOnManagedInstancesInCompartment.ts.html |here} to see how to use UpdateAllPackagesOnManagedInstancesInCompartment API.
   */
  public async updateAllPackagesOnManagedInstancesInCompartment(
    updateAllPackagesOnManagedInstancesInCompartmentRequest: requests.UpdateAllPackagesOnManagedInstancesInCompartmentRequest
  ): Promise<responses.UpdateAllPackagesOnManagedInstancesInCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceClient#updateAllPackagesOnManagedInstancesInCompartment."
      );
    const operationName = "updateAllPackagesOnManagedInstancesInCompartment";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateAllPackagesOnManagedInstancesInCompartmentRequest.opcRequestId,
      "opc-retry-token": updateAllPackagesOnManagedInstancesInCompartmentRequest.opcRetryToken,
      "if-match": updateAllPackagesOnManagedInstancesInCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAllPackagesOnManagedInstancesInCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/actions/updatePackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateAllPackagesOnManagedInstancesInCompartmentRequest.updateAllPackagesOnManagedInstancesInCompartmentDetails,
        "UpdateAllPackagesOnManagedInstancesInCompartmentDetails",
        model.UpdateAllPackagesOnManagedInstancesInCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAllPackagesOnManagedInstancesInCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified managed instance information, such as description, ONS topic, and associated management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateManagedInstanceRequest
   * @return UpdateManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateManagedInstance.ts.html |here} to see how to use UpdateManagedInstance API.
   */
  public async updateManagedInstance(
    updateManagedInstanceRequest: requests.UpdateManagedInstanceRequest
  ): Promise<responses.UpdateManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#updateManagedInstance.");
    const operationName = "updateManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": updateManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagedInstanceRequest.ifMatch,
      "opc-request-id": updateManagedInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedInstanceRequest.updateManagedInstanceDetails,
        "UpdateManagedInstanceDetails",
        model.UpdateManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "managedInstance",
        bodyModel: model.ManagedInstance,
        type: "model.ManagedInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a package on a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePackagesOnManagedInstanceRequest
   * @return UpdatePackagesOnManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdatePackagesOnManagedInstance.ts.html |here} to see how to use UpdatePackagesOnManagedInstance API.
   */
  public async updatePackagesOnManagedInstance(
    updatePackagesOnManagedInstanceRequest: requests.UpdatePackagesOnManagedInstanceRequest
  ): Promise<responses.UpdatePackagesOnManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceClient#updatePackagesOnManagedInstance.");
    const operationName = "updatePackagesOnManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": updatePackagesOnManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePackagesOnManagedInstanceRequest.ifMatch,
      "opc-request-id": updatePackagesOnManagedInstanceRequest.opcRequestId,
      "opc-retry-token": updatePackagesOnManagedInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePackagesOnManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/updatePackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updatePackagesOnManagedInstanceRequest.updatePackagesOnManagedInstanceDetails,
        "UpdatePackagesOnManagedInstanceDetails",
        model.UpdatePackagesOnManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePackagesOnManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ManagedInstanceGroupApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ManagedInstanceGroupClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ManagedInstanceGroupWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ManagedInstanceGroup";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger)
      this.logger.info(`ManagedInstanceGroupClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ManagedInstanceGroupClient.serviceEndpointTemplate,
        this._region,
        ManagedInstanceGroupClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ManagedInstanceGroupClient.serviceEndpointTemplate,
        this._regionId,
        ManagedInstanceGroupClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ManagedInstanceGroupClient.serviceEndpointTemplate,
      region,
      ManagedInstanceGroupClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ManagedInstanceGroupClient.serviceEndpointTemplate,
      regionId,
      ManagedInstanceGroupClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ManagedInstanceGroupWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ManagedInstanceGroupWaiter {
    this._waiters = new ManagedInstanceGroupWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ManagedInstanceGroupWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Adds managed instances to the specified managed instance group. After adding instances to the group, any operation applied to the group will be applied to all instances in the group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AttachManagedInstancesToManagedInstanceGroupRequest
   * @return AttachManagedInstancesToManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AttachManagedInstancesToManagedInstanceGroup.ts.html |here} to see how to use AttachManagedInstancesToManagedInstanceGroup API.
   */
  public async attachManagedInstancesToManagedInstanceGroup(
    attachManagedInstancesToManagedInstanceGroupRequest: requests.AttachManagedInstancesToManagedInstanceGroupRequest
  ): Promise<responses.AttachManagedInstancesToManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#attachManagedInstancesToManagedInstanceGroup."
      );
    const operationName = "attachManagedInstancesToManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        attachManagedInstancesToManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": attachManagedInstancesToManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": attachManagedInstancesToManagedInstanceGroupRequest.opcRetryToken,
      "if-match": attachManagedInstancesToManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachManagedInstancesToManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachManagedInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachManagedInstancesToManagedInstanceGroupRequest.attachManagedInstancesToManagedInstanceGroupDetails,
        "AttachManagedInstancesToManagedInstanceGroupDetails",
        model.AttachManagedInstancesToManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachManagedInstancesToManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches software sources to the specified managed instance group. The software sources must be compatible with the type of instances in the group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AttachSoftwareSourcesToManagedInstanceGroupRequest
   * @return AttachSoftwareSourcesToManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AttachSoftwareSourcesToManagedInstanceGroup.ts.html |here} to see how to use AttachSoftwareSourcesToManagedInstanceGroup API.
   */
  public async attachSoftwareSourcesToManagedInstanceGroup(
    attachSoftwareSourcesToManagedInstanceGroupRequest: requests.AttachSoftwareSourcesToManagedInstanceGroupRequest
  ): Promise<responses.AttachSoftwareSourcesToManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#attachSoftwareSourcesToManagedInstanceGroup."
      );
    const operationName = "attachSoftwareSourcesToManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        attachSoftwareSourcesToManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": attachSoftwareSourcesToManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": attachSoftwareSourcesToManagedInstanceGroupRequest.opcRetryToken,
      "if-match": attachSoftwareSourcesToManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachSoftwareSourcesToManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachSoftwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachSoftwareSourcesToManagedInstanceGroupRequest.attachSoftwareSourcesToManagedInstanceGroupDetails,
        "AttachSoftwareSourcesToManagedInstanceGroupDetails",
        model.AttachSoftwareSourcesToManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachSoftwareSourcesToManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified managed instance group to a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeManagedInstanceGroupCompartmentRequest
   * @return ChangeManagedInstanceGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeManagedInstanceGroupCompartment.ts.html |here} to see how to use ChangeManagedInstanceGroupCompartment API.
   */
  public async changeManagedInstanceGroupCompartment(
    changeManagedInstanceGroupCompartmentRequest: requests.ChangeManagedInstanceGroupCompartmentRequest
  ): Promise<responses.ChangeManagedInstanceGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#changeManagedInstanceGroupCompartment."
      );
    const operationName = "changeManagedInstanceGroupCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        changeManagedInstanceGroupCompartmentRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeManagedInstanceGroupCompartmentRequest.opcRequestId,
      "if-match": changeManagedInstanceGroupCompartmentRequest.ifMatch,
      "opc-retry-token": changeManagedInstanceGroupCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeManagedInstanceGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagedInstanceGroupCompartmentRequest.changeManagedInstanceGroupCompartmentDetails,
        "ChangeManagedInstanceGroupCompartmentDetails",
        model.ChangeManagedInstanceGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagedInstanceGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateManagedInstanceGroupRequest
   * @return CreateManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateManagedInstanceGroup.ts.html |here} to see how to use CreateManagedInstanceGroup API.
   */
  public async createManagedInstanceGroup(
    createManagedInstanceGroupRequest: requests.CreateManagedInstanceGroupRequest
  ): Promise<responses.CreateManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceGroupClient#createManagedInstanceGroup.");
    const operationName = "createManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createManagedInstanceGroupRequest.opcRetryToken,
      "opc-request-id": createManagedInstanceGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagedInstanceGroupRequest.createManagedInstanceGroupDetails,
        "CreateManagedInstanceGroupDetails",
        model.CreateManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: model.ManagedInstanceGroup,
        type: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified managed instance group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteManagedInstanceGroupRequest
   * @return DeleteManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteManagedInstanceGroup.ts.html |here} to see how to use DeleteManagedInstanceGroup API.
   */
  public async deleteManagedInstanceGroup(
    deleteManagedInstanceGroupRequest: requests.DeleteManagedInstanceGroupRequest
  ): Promise<responses.DeleteManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceGroupClient#deleteManagedInstanceGroup.");
    const operationName = "deleteManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}": deleteManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagedInstanceGroupRequest.ifMatch,
      "opc-request-id": deleteManagedInstanceGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a managed instance from the specified managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DetachManagedInstancesFromManagedInstanceGroupRequest
   * @return DetachManagedInstancesFromManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DetachManagedInstancesFromManagedInstanceGroup.ts.html |here} to see how to use DetachManagedInstancesFromManagedInstanceGroup API.
   */
  public async detachManagedInstancesFromManagedInstanceGroup(
    detachManagedInstancesFromManagedInstanceGroupRequest: requests.DetachManagedInstancesFromManagedInstanceGroupRequest
  ): Promise<responses.DetachManagedInstancesFromManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#detachManagedInstancesFromManagedInstanceGroup."
      );
    const operationName = "detachManagedInstancesFromManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        detachManagedInstancesFromManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detachManagedInstancesFromManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": detachManagedInstancesFromManagedInstanceGroupRequest.opcRetryToken,
      "if-match": detachManagedInstancesFromManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachManagedInstancesFromManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachManagedInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachManagedInstancesFromManagedInstanceGroupRequest.detachManagedInstancesFromManagedInstanceGroupDetails,
        "DetachManagedInstancesFromManagedInstanceGroupDetails",
        model.DetachManagedInstancesFromManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachManagedInstancesFromManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches the specified software sources from a managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DetachSoftwareSourcesFromManagedInstanceGroupRequest
   * @return DetachSoftwareSourcesFromManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DetachSoftwareSourcesFromManagedInstanceGroup.ts.html |here} to see how to use DetachSoftwareSourcesFromManagedInstanceGroup API.
   */
  public async detachSoftwareSourcesFromManagedInstanceGroup(
    detachSoftwareSourcesFromManagedInstanceGroupRequest: requests.DetachSoftwareSourcesFromManagedInstanceGroupRequest
  ): Promise<responses.DetachSoftwareSourcesFromManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#detachSoftwareSourcesFromManagedInstanceGroup."
      );
    const operationName = "detachSoftwareSourcesFromManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        detachSoftwareSourcesFromManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detachSoftwareSourcesFromManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": detachSoftwareSourcesFromManagedInstanceGroupRequest.opcRetryToken,
      "if-match": detachSoftwareSourcesFromManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachSoftwareSourcesFromManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachSoftwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachSoftwareSourcesFromManagedInstanceGroupRequest.detachSoftwareSourcesFromManagedInstanceGroupDetails,
        "DetachSoftwareSourcesFromManagedInstanceGroupDetails",
        model.DetachSoftwareSourcesFromManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachSoftwareSourcesFromManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disables a module stream on a managed instance group. After the stream is disabled, you can no longer install the profiles contained by the stream.  Before removing the stream, you must remove all installed profiles for the stream by using the {@link #removeModuleStreamProfileFromManagedInstanceGroup(RemoveModuleStreamProfileFromManagedInstanceGroupRequest) removeModuleStreamProfileFromManagedInstanceGroup} operation.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DisableModuleStreamOnManagedInstanceGroupRequest
   * @return DisableModuleStreamOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DisableModuleStreamOnManagedInstanceGroup.ts.html |here} to see how to use DisableModuleStreamOnManagedInstanceGroup API.
   */
  public async disableModuleStreamOnManagedInstanceGroup(
    disableModuleStreamOnManagedInstanceGroupRequest: requests.DisableModuleStreamOnManagedInstanceGroupRequest
  ): Promise<responses.DisableModuleStreamOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#disableModuleStreamOnManagedInstanceGroup."
      );
    const operationName = "disableModuleStreamOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        disableModuleStreamOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": disableModuleStreamOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": disableModuleStreamOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": disableModuleStreamOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableModuleStreamOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/disableModuleStream",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableModuleStreamOnManagedInstanceGroupRequest.disableModuleStreamOnManagedInstanceGroupDetails,
        "DisableModuleStreamOnManagedInstanceGroupDetails",
        model.DisableModuleStreamOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableModuleStreamOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables a module stream on a managed instance group.  After the stream is enabled, you can install a module stream profile. Enabling a stream that is already enabled will succeed.  Enabling a different stream for a module that already has a stream enabled results in an error. Instead, use the {@link #switchModuleStreamOnManagedInstanceGroup(SwitchModuleStreamOnManagedInstanceGroupRequest) switchModuleStreamOnManagedInstanceGroup} operation.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EnableModuleStreamOnManagedInstanceGroupRequest
   * @return EnableModuleStreamOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/EnableModuleStreamOnManagedInstanceGroup.ts.html |here} to see how to use EnableModuleStreamOnManagedInstanceGroup API.
   */
  public async enableModuleStreamOnManagedInstanceGroup(
    enableModuleStreamOnManagedInstanceGroupRequest: requests.EnableModuleStreamOnManagedInstanceGroupRequest
  ): Promise<responses.EnableModuleStreamOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#enableModuleStreamOnManagedInstanceGroup."
      );
    const operationName = "enableModuleStreamOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        enableModuleStreamOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": enableModuleStreamOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": enableModuleStreamOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": enableModuleStreamOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableModuleStreamOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/enableModuleStream",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableModuleStreamOnManagedInstanceGroupRequest.enableModuleStreamOnManagedInstanceGroupDetails,
        "EnableModuleStreamOnManagedInstanceGroupDetails",
        model.EnableModuleStreamOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableModuleStreamOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified managed instance group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceGroupRequest
   * @return GetManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetManagedInstanceGroup.ts.html |here} to see how to use GetManagedInstanceGroup API.
   */
  public async getManagedInstanceGroup(
    getManagedInstanceGroupRequest: requests.GetManagedInstanceGroupRequest
  ): Promise<responses.GetManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceGroupClient#getManagedInstanceGroup.");
    const operationName = "getManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}": getManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: model.ManagedInstanceGroup,
        type: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs a profile for an enabled module stream. If a module stream defines multiple profiles, you can install each one independently.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallModuleStreamProfileOnManagedInstanceGroupRequest
   * @return InstallModuleStreamProfileOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallModuleStreamProfileOnManagedInstanceGroup.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstanceGroup API.
   */
  public async installModuleStreamProfileOnManagedInstanceGroup(
    installModuleStreamProfileOnManagedInstanceGroupRequest: requests.InstallModuleStreamProfileOnManagedInstanceGroupRequest
  ): Promise<responses.InstallModuleStreamProfileOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#installModuleStreamProfileOnManagedInstanceGroup."
      );
    const operationName = "installModuleStreamProfileOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        installModuleStreamProfileOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": installModuleStreamProfileOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": installModuleStreamProfileOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": installModuleStreamProfileOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installModuleStreamProfileOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/installStreamProfile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installModuleStreamProfileOnManagedInstanceGroupRequest.installModuleStreamProfileOnManagedInstanceGroupDetails,
        "InstallModuleStreamProfileOnManagedInstanceGroupDetails",
        model.InstallModuleStreamProfileOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallModuleStreamProfileOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs the specified packages on each managed instance in a managed instance group. The package must be compatible with the instances in the group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallPackagesOnManagedInstanceGroupRequest
   * @return InstallPackagesOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallPackagesOnManagedInstanceGroup.ts.html |here} to see how to use InstallPackagesOnManagedInstanceGroup API.
   */
  public async installPackagesOnManagedInstanceGroup(
    installPackagesOnManagedInstanceGroupRequest: requests.InstallPackagesOnManagedInstanceGroupRequest
  ): Promise<responses.InstallPackagesOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#installPackagesOnManagedInstanceGroup."
      );
    const operationName = "installPackagesOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        installPackagesOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": installPackagesOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": installPackagesOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": installPackagesOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installPackagesOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/installPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installPackagesOnManagedInstanceGroupRequest.installPackagesOnManagedInstanceGroupDetails,
        "InstallPackagesOnManagedInstanceGroupDetails",
        model.InstallPackagesOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallPackagesOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Installs Windows updates on each managed instance in the managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallWindowsUpdatesOnManagedInstanceGroupRequest
   * @return InstallWindowsUpdatesOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/InstallWindowsUpdatesOnManagedInstanceGroup.ts.html |here} to see how to use InstallWindowsUpdatesOnManagedInstanceGroup API.
   */
  public async installWindowsUpdatesOnManagedInstanceGroup(
    installWindowsUpdatesOnManagedInstanceGroupRequest: requests.InstallWindowsUpdatesOnManagedInstanceGroupRequest
  ): Promise<responses.InstallWindowsUpdatesOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#installWindowsUpdatesOnManagedInstanceGroup."
      );
    const operationName = "installWindowsUpdatesOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        installWindowsUpdatesOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": installWindowsUpdatesOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": installWindowsUpdatesOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": installWindowsUpdatesOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installWindowsUpdatesOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/installWindowsUpdates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installWindowsUpdatesOnManagedInstanceGroupRequest.installWindowsUpdatesOnManagedInstanceGroupDetails,
        "InstallWindowsUpdatesOnManagedInstanceGroupDetails",
        model.InstallWindowsUpdatesOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallWindowsUpdatesOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List modules that are available for installation on the specified managed instance group. Filter the list against a variety of criteria including but not limited to module name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceGroupAvailableModulesRequest
   * @return ListManagedInstanceGroupAvailableModulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroupAvailableModules.ts.html |here} to see how to use ListManagedInstanceGroupAvailableModules API.
   */
  public async listManagedInstanceGroupAvailableModules(
    listManagedInstanceGroupAvailableModulesRequest: requests.ListManagedInstanceGroupAvailableModulesRequest
  ): Promise<responses.ListManagedInstanceGroupAvailableModulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailableModules."
      );
    const operationName = "listManagedInstanceGroupAvailableModules";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        listManagedInstanceGroupAvailableModulesRequest.managedInstanceGroupId
    };

    const queryParams = {
      "compartmentId": listManagedInstanceGroupAvailableModulesRequest.compartmentId,
      "name": listManagedInstanceGroupAvailableModulesRequest.name,
      "nameContains": listManagedInstanceGroupAvailableModulesRequest.nameContains,
      "limit": listManagedInstanceGroupAvailableModulesRequest.limit,
      "page": listManagedInstanceGroupAvailableModulesRequest.page,
      "sortOrder": listManagedInstanceGroupAvailableModulesRequest.sortOrder,
      "sortBy": listManagedInstanceGroupAvailableModulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupAvailableModulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupAvailableModulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/availableModules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupAvailableModulesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroupAvailableModuleCollection",
        bodyModel: model.ManagedInstanceGroupAvailableModuleCollection,
        type: "model.ManagedInstanceGroupAvailableModuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists available packages on the specified managed instances group. Filter the list against a variety
   * of criteria including but not limited to the package name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceGroupAvailablePackagesRequest
   * @return ListManagedInstanceGroupAvailablePackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroupAvailablePackages.ts.html |here} to see how to use ListManagedInstanceGroupAvailablePackages API.
   */
  public async listManagedInstanceGroupAvailablePackages(
    listManagedInstanceGroupAvailablePackagesRequest: requests.ListManagedInstanceGroupAvailablePackagesRequest
  ): Promise<responses.ListManagedInstanceGroupAvailablePackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailablePackages."
      );
    const operationName = "listManagedInstanceGroupAvailablePackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        listManagedInstanceGroupAvailablePackagesRequest.managedInstanceGroupId
    };

    const queryParams = {
      "displayName": listManagedInstanceGroupAvailablePackagesRequest.displayName,
      "displayNameContains": listManagedInstanceGroupAvailablePackagesRequest.displayNameContains,
      "compartmentId": listManagedInstanceGroupAvailablePackagesRequest.compartmentId,
      "limit": listManagedInstanceGroupAvailablePackagesRequest.limit,
      "page": listManagedInstanceGroupAvailablePackagesRequest.page,
      "sortOrder": listManagedInstanceGroupAvailablePackagesRequest.sortOrder,
      "sortBy": listManagedInstanceGroupAvailablePackagesRequest.sortBy,
      "isLatest": listManagedInstanceGroupAvailablePackagesRequest.isLatest
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupAvailablePackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupAvailablePackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/availablePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupAvailablePackagesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroupAvailablePackageCollection",
        bodyModel: model.ManagedInstanceGroupAvailablePackageCollection,
        type: "model.ManagedInstanceGroupAvailablePackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists available software sources for a specified managed instance group. Filter the list against a variety of criteria including but not limited to the software source name. The results list only software sources that have not already been added to the group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceGroupAvailableSoftwareSourcesRequest
   * @return ListManagedInstanceGroupAvailableSoftwareSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroupAvailableSoftwareSources.ts.html |here} to see how to use ListManagedInstanceGroupAvailableSoftwareSources API.
   */
  public async listManagedInstanceGroupAvailableSoftwareSources(
    listManagedInstanceGroupAvailableSoftwareSourcesRequest: requests.ListManagedInstanceGroupAvailableSoftwareSourcesRequest
  ): Promise<responses.ListManagedInstanceGroupAvailableSoftwareSourcesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailableSoftwareSources."
      );
    const operationName = "listManagedInstanceGroupAvailableSoftwareSources";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        listManagedInstanceGroupAvailableSoftwareSourcesRequest.managedInstanceGroupId
    };

    const queryParams = {
      "displayName": listManagedInstanceGroupAvailableSoftwareSourcesRequest.displayName,
      "displayNameContains":
        listManagedInstanceGroupAvailableSoftwareSourcesRequest.displayNameContains,
      "compartmentId": listManagedInstanceGroupAvailableSoftwareSourcesRequest.compartmentId,
      "limit": listManagedInstanceGroupAvailableSoftwareSourcesRequest.limit,
      "page": listManagedInstanceGroupAvailableSoftwareSourcesRequest.page,
      "sortOrder": listManagedInstanceGroupAvailableSoftwareSourcesRequest.sortOrder,
      "sortBy": listManagedInstanceGroupAvailableSoftwareSourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupAvailableSoftwareSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupAvailableSoftwareSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/availableSoftwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupAvailableSoftwareSourcesResponse>{},
        body: await response.json(),
        bodyKey: "availableSoftwareSourceCollection",
        bodyModel: model.AvailableSoftwareSourceCollection,
        type: "model.AvailableSoftwareSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists installed packages on the specified managed instances group. Filter the list against a variety
   * of criteria including but not limited to the package name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceGroupInstalledPackagesRequest
   * @return ListManagedInstanceGroupInstalledPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroupInstalledPackages.ts.html |here} to see how to use ListManagedInstanceGroupInstalledPackages API.
   */
  public async listManagedInstanceGroupInstalledPackages(
    listManagedInstanceGroupInstalledPackagesRequest: requests.ListManagedInstanceGroupInstalledPackagesRequest
  ): Promise<responses.ListManagedInstanceGroupInstalledPackagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupInstalledPackages."
      );
    const operationName = "listManagedInstanceGroupInstalledPackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        listManagedInstanceGroupInstalledPackagesRequest.managedInstanceGroupId
    };

    const queryParams = {
      "displayName": listManagedInstanceGroupInstalledPackagesRequest.displayName,
      "displayNameContains": listManagedInstanceGroupInstalledPackagesRequest.displayNameContains,
      "timeInstallDateStart": listManagedInstanceGroupInstalledPackagesRequest.timeInstallDateStart,
      "timeInstallDateEnd": listManagedInstanceGroupInstalledPackagesRequest.timeInstallDateEnd,
      "compartmentId": listManagedInstanceGroupInstalledPackagesRequest.compartmentId,
      "limit": listManagedInstanceGroupInstalledPackagesRequest.limit,
      "page": listManagedInstanceGroupInstalledPackagesRequest.page,
      "sortOrder": listManagedInstanceGroupInstalledPackagesRequest.sortOrder,
      "sortBy": listManagedInstanceGroupInstalledPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupInstalledPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupInstalledPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/installedPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupInstalledPackagesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroupInstalledPackageCollection",
        bodyModel: model.ManagedInstanceGroupInstalledPackageCollection,
        type: "model.ManagedInstanceGroupInstalledPackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieve a list of module streams, along with a summary of their
* status, from a managed instance group.  Filters may be applied to select
* a subset of module streams based on the filter criteria.
* <p>
The 'moduleName' attribute filters against the name of a module.
* It accepts strings of the format \"<module>\".  If this attribute
* is defined, only streams that belong to the specified module are
* included in the result set.  If it is not defined, the request is
* not subject to this filter.
* <p>
The \"status\" attribute filters against the state of a module stream.
* Valid values are \"ENABLED\", \"DISABLED\", and \"ACTIVE\".  If the
* attribute is set to \"ENABLED\", only module streams that are enabled
* are included in the result set.  If the attribute is set to \"DISABLED\",
* only module streams that are not enabled are included in the result
* set.  If the attribute is set to \"ACTIVE\", only module streams that
* are active are included in the result set.  If the attribute is not
* defined, the request is not subject to this filter.
* <p>
When sorting by the display name, the result set is sorted first
* by the module name and then by the stream name.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupModulesRequest
     * @return ListManagedInstanceGroupModulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroupModules.ts.html |here} to see how to use ListManagedInstanceGroupModules API.
     */
  public async listManagedInstanceGroupModules(
    listManagedInstanceGroupModulesRequest: requests.ListManagedInstanceGroupModulesRequest
  ): Promise<responses.ListManagedInstanceGroupModulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupModules."
      );
    const operationName = "listManagedInstanceGroupModules";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}": listManagedInstanceGroupModulesRequest.managedInstanceGroupId
    };

    const queryParams = {
      "compartmentId": listManagedInstanceGroupModulesRequest.compartmentId,
      "name": listManagedInstanceGroupModulesRequest.name,
      "nameContains": listManagedInstanceGroupModulesRequest.nameContains,
      "streamName": listManagedInstanceGroupModulesRequest.streamName,
      "limit": listManagedInstanceGroupModulesRequest.limit,
      "page": listManagedInstanceGroupModulesRequest.page,
      "sortOrder": listManagedInstanceGroupModulesRequest.sortOrder,
      "sortBy": listManagedInstanceGroupModulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupModulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupModulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/modules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupModulesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroupModuleCollection",
        bodyModel: model.ManagedInstanceGroupModuleCollection,
        type: "model.ManagedInstanceGroupModuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists managed instance groups that match the specified compartment or managed instance group [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of criteria including but not limited to name, status, architecture, and OS family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceGroupsRequest
   * @return ListManagedInstanceGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagedInstanceGroups.ts.html |here} to see how to use ListManagedInstanceGroups API.
   */
  public async listManagedInstanceGroups(
    listManagedInstanceGroupsRequest: requests.ListManagedInstanceGroupsRequest
  ): Promise<responses.ListManagedInstanceGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroups.");
    const operationName = "listManagedInstanceGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedInstanceGroupsRequest.compartmentId,
      "managedInstanceGroupId": listManagedInstanceGroupsRequest.managedInstanceGroupId,
      "softwareSourceId": listManagedInstanceGroupsRequest.softwareSourceId,
      "displayName": listManagedInstanceGroupsRequest.displayName,
      "displayNameContains": listManagedInstanceGroupsRequest.displayNameContains,
      "archType": listManagedInstanceGroupsRequest.archType,
      "osFamily": listManagedInstanceGroupsRequest.osFamily,
      "limit": listManagedInstanceGroupsRequest.limit,
      "page": listManagedInstanceGroupsRequest.page,
      "lifecycleState": listManagedInstanceGroupsRequest.lifecycleState,
      "location": listManagedInstanceGroupsRequest.location,
      "locationNotEqualTo": listManagedInstanceGroupsRequest.locationNotEqualTo,
      "isManagedByAutonomousLinux": listManagedInstanceGroupsRequest.isManagedByAutonomousLinux,
      "sortOrder": listManagedInstanceGroupsRequest.sortOrder,
      "sortBy": listManagedInstanceGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceGroupsResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroupCollection",
        bodyModel: model.ManagedInstanceGroupCollection,
        type: "model.ManagedInstanceGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables or disables module streams and installs or removes module stream profiles. Once complete, the state of the modules, streams, and profiles will match the state indicated in the operation. See {@link #manageModuleStreamsOnManagedInstanceGroupDetails(ManageModuleStreamsOnManagedInstanceGroupDetailsRequest) manageModuleStreamsOnManagedInstanceGroupDetails} for more information.
   * You can preform this operation as a dry run. For a dry run, the service evaluates the operation against the current module, stream, and profile state on the managed instance, but does not commit the changes. Instead, the service returns work request log or error entries indicating the impact of the operation.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ManageModuleStreamsOnManagedInstanceGroupRequest
   * @return ManageModuleStreamsOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ManageModuleStreamsOnManagedInstanceGroup.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstanceGroup API.
   */
  public async manageModuleStreamsOnManagedInstanceGroup(
    manageModuleStreamsOnManagedInstanceGroupRequest: requests.ManageModuleStreamsOnManagedInstanceGroupRequest
  ): Promise<responses.ManageModuleStreamsOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#manageModuleStreamsOnManagedInstanceGroup."
      );
    const operationName = "manageModuleStreamsOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        manageModuleStreamsOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": manageModuleStreamsOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": manageModuleStreamsOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": manageModuleStreamsOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      manageModuleStreamsOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/manageModuleStreams",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        manageModuleStreamsOnManagedInstanceGroupRequest.manageModuleStreamsOnManagedInstanceGroupDetails,
        "ManageModuleStreamsOnManagedInstanceGroupDetails",
        model.ManageModuleStreamsOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ManageModuleStreamsOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a profile for a module stream that is installed on a managed instance group. Providing the module stream name (without specifying a profile name) removes all profiles that have been installed for the module stream.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveModuleStreamProfileFromManagedInstanceGroupRequest
   * @return RemoveModuleStreamProfileFromManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RemoveModuleStreamProfileFromManagedInstanceGroup.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstanceGroup API.
   */
  public async removeModuleStreamProfileFromManagedInstanceGroup(
    removeModuleStreamProfileFromManagedInstanceGroupRequest: requests.RemoveModuleStreamProfileFromManagedInstanceGroupRequest
  ): Promise<responses.RemoveModuleStreamProfileFromManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#removeModuleStreamProfileFromManagedInstanceGroup."
      );
    const operationName = "removeModuleStreamProfileFromManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        removeModuleStreamProfileFromManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeModuleStreamProfileFromManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": removeModuleStreamProfileFromManagedInstanceGroupRequest.opcRetryToken,
      "if-match": removeModuleStreamProfileFromManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeModuleStreamProfileFromManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/removeStreamProfile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeModuleStreamProfileFromManagedInstanceGroupRequest.removeModuleStreamProfileFromManagedInstanceGroupDetails,
        "RemoveModuleStreamProfileFromManagedInstanceGroupDetails",
        model.RemoveModuleStreamProfileFromManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveModuleStreamProfileFromManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified packages from each managed instance in a managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemovePackagesFromManagedInstanceGroupRequest
   * @return RemovePackagesFromManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RemovePackagesFromManagedInstanceGroup.ts.html |here} to see how to use RemovePackagesFromManagedInstanceGroup API.
   */
  public async removePackagesFromManagedInstanceGroup(
    removePackagesFromManagedInstanceGroupRequest: requests.RemovePackagesFromManagedInstanceGroupRequest
  ): Promise<responses.RemovePackagesFromManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#removePackagesFromManagedInstanceGroup."
      );
    const operationName = "removePackagesFromManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        removePackagesFromManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removePackagesFromManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": removePackagesFromManagedInstanceGroupRequest.opcRetryToken,
      "if-match": removePackagesFromManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removePackagesFromManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/removePackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePackagesFromManagedInstanceGroupRequest.removePackagesFromManagedInstanceGroupDetails,
        "RemovePackagesFromManagedInstanceGroupDetails",
        model.RemovePackagesFromManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePackagesFromManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables a new stream for a module that already has a stream enabled.
   * If any profiles or packages from the original module are installed,
   * switching to a new stream will remove the existing packages and
   * install their counterparts in the new stream.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SwitchModuleStreamOnManagedInstanceGroupRequest
   * @return SwitchModuleStreamOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SwitchModuleStreamOnManagedInstanceGroup.ts.html |here} to see how to use SwitchModuleStreamOnManagedInstanceGroup API.
   */
  public async switchModuleStreamOnManagedInstanceGroup(
    switchModuleStreamOnManagedInstanceGroupRequest: requests.SwitchModuleStreamOnManagedInstanceGroupRequest
  ): Promise<responses.SwitchModuleStreamOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#switchModuleStreamOnManagedInstanceGroup."
      );
    const operationName = "switchModuleStreamOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        switchModuleStreamOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": switchModuleStreamOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": switchModuleStreamOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": switchModuleStreamOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      switchModuleStreamOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedInstanceGroups/{managedInstanceGroupId}/actions/moduleStreams/switchModuleStream",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        switchModuleStreamOnManagedInstanceGroupRequest.switchModuleStreamOnManagedInstanceGroupDetails,
        "SwitchModuleStreamOnManagedInstanceGroupDetails",
        model.SwitchModuleStreamOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SwitchModuleStreamOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates all packages on each managed instance in the specified managed instance group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAllPackagesOnManagedInstanceGroupRequest
   * @return UpdateAllPackagesOnManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateAllPackagesOnManagedInstanceGroup.ts.html |here} to see how to use UpdateAllPackagesOnManagedInstanceGroup API.
   */
  public async updateAllPackagesOnManagedInstanceGroup(
    updateAllPackagesOnManagedInstanceGroupRequest: requests.UpdateAllPackagesOnManagedInstanceGroupRequest
  ): Promise<responses.UpdateAllPackagesOnManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagedInstanceGroupClient#updateAllPackagesOnManagedInstanceGroup."
      );
    const operationName = "updateAllPackagesOnManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}":
        updateAllPackagesOnManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateAllPackagesOnManagedInstanceGroupRequest.opcRequestId,
      "opc-retry-token": updateAllPackagesOnManagedInstanceGroupRequest.opcRetryToken,
      "if-match": updateAllPackagesOnManagedInstanceGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAllPackagesOnManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/updateAllPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateAllPackagesOnManagedInstanceGroupRequest.updateAllPackagesOnManagedInstanceGroupDetails,
        "UpdateAllPackagesOnManagedInstanceGroupDetails",
        model.UpdateAllPackagesOnManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAllPackagesOnManagedInstanceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified managed instance group's name, description, and tags.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateManagedInstanceGroupRequest
   * @return UpdateManagedInstanceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateManagedInstanceGroup.ts.html |here} to see how to use UpdateManagedInstanceGroup API.
   */
  public async updateManagedInstanceGroup(
    updateManagedInstanceGroupRequest: requests.UpdateManagedInstanceGroupRequest
  ): Promise<responses.UpdateManagedInstanceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagedInstanceGroupClient#updateManagedInstanceGroup.");
    const operationName = "updateManagedInstanceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceGroupId}": updateManagedInstanceGroupRequest.managedInstanceGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagedInstanceGroupRequest.ifMatch,
      "opc-request-id": updateManagedInstanceGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagedInstanceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceGroups/{managedInstanceGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedInstanceGroupRequest.updateManagedInstanceGroupDetails,
        "UpdateManagedInstanceGroupDetails",
        model.UpdateManagedInstanceGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedInstanceGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceGroup",
        bodyModel: model.ManagedInstanceGroup,
        type: "model.ManagedInstanceGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ManagementStationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ManagementStationClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ManagementStationWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ManagementStation";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`ManagementStationClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ManagementStationClient.serviceEndpointTemplate,
        this._region,
        ManagementStationClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ManagementStationClient.serviceEndpointTemplate,
        this._regionId,
        ManagementStationClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ManagementStationClient.serviceEndpointTemplate,
      region,
      ManagementStationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ManagementStationClient.serviceEndpointTemplate,
      regionId,
      ManagementStationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ManagementStationWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ManagementStationWaiter {
    this._waiters = new ManagementStationWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ManagementStationWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a managment station to a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeManagementStationCompartmentRequest
   * @return ChangeManagementStationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeManagementStationCompartment.ts.html |here} to see how to use ChangeManagementStationCompartment API.
   */
  public async changeManagementStationCompartment(
    changeManagementStationCompartmentRequest: requests.ChangeManagementStationCompartmentRequest
  ): Promise<responses.ChangeManagementStationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagementStationClient#changeManagementStationCompartment."
      );
    const operationName = "changeManagementStationCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": changeManagementStationCompartmentRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeManagementStationCompartmentRequest.opcRequestId,
      "if-match": changeManagementStationCompartmentRequest.ifMatch,
      "opc-retry-token": changeManagementStationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeManagementStationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagementStationCompartmentRequest.changeManagementStationCompartmentDetails,
        "ChangeManagementStationCompartmentDetails",
        model.ChangeManagementStationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagementStationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a management station. You must provide proxy and mirror configuration information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateManagementStationRequest
   * @return CreateManagementStationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateManagementStation.ts.html |here} to see how to use CreateManagementStation API.
   */
  public async createManagementStation(
    createManagementStationRequest: requests.CreateManagementStationRequest
  ): Promise<responses.CreateManagementStationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#createManagementStation.");
    const operationName = "createManagementStation";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createManagementStationRequest.opcRetryToken,
      "opc-request-id": createManagementStationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createManagementStationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagementStationRequest.createManagementStationDetails,
        "CreateManagementStationDetails",
        model.CreateManagementStationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagementStationResponse>{},
        body: await response.json(),
        bodyKey: "managementStation",
        bodyModel: model.ManagementStation,
        type: "model.ManagementStation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteManagementStationRequest
   * @return DeleteManagementStationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteManagementStation.ts.html |here} to see how to use DeleteManagementStation API.
   */
  public async deleteManagementStation(
    deleteManagementStationRequest: requests.DeleteManagementStationRequest
  ): Promise<responses.DeleteManagementStationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#deleteManagementStation.");
    const operationName = "deleteManagementStation";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": deleteManagementStationRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagementStationRequest.ifMatch,
      "opc-request-id": deleteManagementStationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteManagementStationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagementStationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagementStationRequest
   * @return GetManagementStationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetManagementStation.ts.html |here} to see how to use GetManagementStation API.
   */
  public async getManagementStation(
    getManagementStationRequest: requests.GetManagementStationRequest
  ): Promise<responses.GetManagementStationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#getManagementStation.");
    const operationName = "getManagementStation";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": getManagementStationRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagementStationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagementStationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagementStationResponse>{},
        body: await response.json(),
        bodyKey: "managementStation",
        bodyModel: model.ManagementStation,
        type: "model.ManagementStation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists management stations in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagementStationsRequest
   * @return ListManagementStationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListManagementStations.ts.html |here} to see how to use ListManagementStations API.
   */
  public async listManagementStations(
    listManagementStationsRequest: requests.ListManagementStationsRequest
  ): Promise<responses.ListManagementStationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#listManagementStations.");
    const operationName = "listManagementStations";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagementStationsRequest.compartmentId,
      "displayName": listManagementStationsRequest.displayName,
      "displayNameContains": listManagementStationsRequest.displayNameContains,
      "lifecycleState": listManagementStationsRequest.lifecycleState,
      "managedInstanceId": listManagementStationsRequest.managedInstanceId,
      "limit": listManagementStationsRequest.limit,
      "page": listManagementStationsRequest.page,
      "sortOrder": listManagementStationsRequest.sortOrder,
      "sortBy": listManagementStationsRequest.sortBy,
      "id": listManagementStationsRequest.id
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagementStationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagementStationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagementStationsResponse>{},
        body: await response.json(),
        bodyKey: "managementStationCollection",
        bodyModel: model.ManagementStationCollection,
        type: "model.ManagementStationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all software source mirrors associated with a specified management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMirrorsRequest
   * @return ListMirrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListMirrors.ts.html |here} to see how to use ListMirrors API.
   */
  public async listMirrors(
    listMirrorsRequest: requests.ListMirrorsRequest
  ): Promise<responses.ListMirrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementStationClient#listMirrors.");
    const operationName = "listMirrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": listMirrorsRequest.managementStationId
    };

    const queryParams = {
      "displayName": listMirrorsRequest.displayName,
      "displayNameContains": listMirrorsRequest.displayNameContains,
      "limit": listMirrorsRequest.limit,
      "page": listMirrorsRequest.page,
      "sortOrder": listMirrorsRequest.sortOrder,
      "sortBy": listMirrorsRequest.sortBy,
      "mirrorStates": listMirrorsRequest.mirrorStates
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMirrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMirrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}/mirrors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMirrorsResponse>{},
        body: await response.json(),
        bodyKey: "mirrorsCollection",
        bodyModel: model.MirrorsCollection,
        type: "model.MirrorsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the list of software sources mirrored by the management station to support the associated instances.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshManagementStationConfigRequest
   * @return RefreshManagementStationConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RefreshManagementStationConfig.ts.html |here} to see how to use RefreshManagementStationConfig API.
   */
  public async refreshManagementStationConfig(
    refreshManagementStationConfigRequest: requests.RefreshManagementStationConfigRequest
  ): Promise<responses.RefreshManagementStationConfigResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ManagementStationClient#refreshManagementStationConfig."
      );
    const operationName = "refreshManagementStationConfig";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": refreshManagementStationConfigRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": refreshManagementStationConfigRequest.opcRequestId,
      "if-match": refreshManagementStationConfigRequest.ifMatch,
      "opc-retry-token": refreshManagementStationConfigRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshManagementStationConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}/actions/refresh",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshManagementStationConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Synchronize the specified software sources mirrors on the management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SynchronizeMirrorsRequest
   * @return SynchronizeMirrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SynchronizeMirrors.ts.html |here} to see how to use SynchronizeMirrors API.
   */
  public async synchronizeMirrors(
    synchronizeMirrorsRequest: requests.SynchronizeMirrorsRequest
  ): Promise<responses.SynchronizeMirrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#synchronizeMirrors.");
    const operationName = "synchronizeMirrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": synchronizeMirrorsRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": synchronizeMirrorsRequest.ifMatch,
      "opc-request-id": synchronizeMirrorsRequest.opcRequestId,
      "opc-retry-token": synchronizeMirrorsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      synchronizeMirrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}/actions/synchronizeMirrors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        synchronizeMirrorsRequest.synchronizeMirrorsDetails,
        "SynchronizeMirrorsDetails",
        model.SynchronizeMirrorsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SynchronizeMirrorsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Synchronize the specified software source mirrors on the management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SynchronizeSingleMirrorsRequest
   * @return SynchronizeSingleMirrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SynchronizeSingleMirrors.ts.html |here} to see how to use SynchronizeSingleMirrors API.
   */
  public async synchronizeSingleMirrors(
    synchronizeSingleMirrorsRequest: requests.SynchronizeSingleMirrorsRequest
  ): Promise<responses.SynchronizeSingleMirrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#synchronizeSingleMirrors.");
    const operationName = "synchronizeSingleMirrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": synchronizeSingleMirrorsRequest.managementStationId,
      "{mirrorId}": synchronizeSingleMirrorsRequest.mirrorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": synchronizeSingleMirrorsRequest.ifMatch,
      "opc-request-id": synchronizeSingleMirrorsRequest.opcRequestId,
      "opc-retry-token": synchronizeSingleMirrorsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      synchronizeSingleMirrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}/mirrors/{mirrorId}/actions/synchronize",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SynchronizeSingleMirrorsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of the specified management station.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateManagementStationRequest
   * @return UpdateManagementStationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateManagementStation.ts.html |here} to see how to use UpdateManagementStation API.
   */
  public async updateManagementStation(
    updateManagementStationRequest: requests.UpdateManagementStationRequest
  ): Promise<responses.UpdateManagementStationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementStationClient#updateManagementStation.");
    const operationName = "updateManagementStation";
    const apiReferenceLink = "";
    const pathParams = {
      "{managementStationId}": updateManagementStationRequest.managementStationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagementStationRequest.ifMatch,
      "opc-request-id": updateManagementStationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagementStationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managementStations/{managementStationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagementStationRequest.updateManagementStationDetails,
        "UpdateManagementStationDetails",
        model.UpdateManagementStationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagementStationResponse>{},
        body: await response.json(),
        bodyKey: "managementStation",
        bodyModel: model.ManagementStation,
        type: "model.ManagementStation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OnboardingApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OnboardingClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OnboardingWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Onboarding";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`OnboardingClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OnboardingClient.serviceEndpointTemplate,
        this._region,
        OnboardingClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OnboardingClient.serviceEndpointTemplate,
        this._regionId,
        OnboardingClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OnboardingClient.serviceEndpointTemplate,
      region,
      OnboardingClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OnboardingClient.serviceEndpointTemplate,
      regionId,
      OnboardingClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OnboardingWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OnboardingWaiter {
    this._waiters = new OnboardingWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OnboardingWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the profile to a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProfileCompartmentRequest
   * @return ChangeProfileCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeProfileCompartment.ts.html |here} to see how to use ChangeProfileCompartment API.
   */
  public async changeProfileCompartment(
    changeProfileCompartmentRequest: requests.ChangeProfileCompartmentRequest
  ): Promise<responses.ChangeProfileCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OnboardingClient#changeProfileCompartment.");
    const operationName = "changeProfileCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{profileId}": changeProfileCompartmentRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeProfileCompartmentRequest.opcRetryToken,
      "if-match": changeProfileCompartmentRequest.ifMatch,
      "opc-request-id": changeProfileCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProfileCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProfileCompartmentRequest.changeProfileCompartmentDetails,
        "ChangeProfileCompartmentDetails",
        model.ChangeProfileCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProfileCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a registration profile. A profile defines the content applied to the instance when registering it with the service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProfileRequest
   * @return CreateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateProfile.ts.html |here} to see how to use CreateProfile API.
   */
  public async createProfile(
    createProfileRequest: requests.CreateProfileRequest
  ): Promise<responses.CreateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OnboardingClient#createProfile.");
    const operationName = "createProfile";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProfileRequest.opcRetryToken,
      "opc-request-id": createProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProfileRequest.createProfileDetails,
        "CreateProfileDetails",
        model.CreateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a specified registration profile.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProfileRequest
   * @return DeleteProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteProfile.ts.html |here} to see how to use DeleteProfile API.
   */
  public async deleteProfile(
    deleteProfileRequest: requests.DeleteProfileRequest
  ): Promise<responses.DeleteProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OnboardingClient#deleteProfile.");
    const operationName = "deleteProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{profileId}": deleteProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProfileRequest.ifMatch,
      "opc-request-id": deleteProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProfileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified registration profile.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProfileRequest
   * @return GetProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetProfile.ts.html |here} to see how to use GetProfile API.
   */
  public async getProfile(
    getProfileRequest: requests.GetProfileRequest
  ): Promise<responses.GetProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OnboardingClient#getProfile.");
    const operationName = "getProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{profileId}": getProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a
   * variety of criteria including but not limited to its name, status, vendor name, and architecture type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProfilesRequest
   * @return ListProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListProfiles.ts.html |here} to see how to use ListProfiles API.
   */
  public async listProfiles(
    listProfilesRequest: requests.ListProfilesRequest
  ): Promise<responses.ListProfilesResponse> {
    if (this.logger) this.logger.debug("Calling operation OnboardingClient#listProfiles.");
    const operationName = "listProfiles";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProfilesRequest.compartmentId,
      "displayName": listProfilesRequest.displayName,
      "displayNameContains": listProfilesRequest.displayNameContains,
      "profileType": listProfilesRequest.profileType,
      "profileId": listProfilesRequest.profileId,
      "osFamily": listProfilesRequest.osFamily,
      "archType": listProfilesRequest.archType,
      "registrationType": listProfilesRequest.registrationType,
      "isDefaultProfile": listProfilesRequest.isDefaultProfile,
      "isServiceProvidedProfile": listProfilesRequest.isServiceProvidedProfile,
      "vendorName": listProfilesRequest.vendorName,
      "limit": listProfilesRequest.limit,
      "page": listProfilesRequest.page,
      "lifecycleState": listProfilesRequest.lifecycleState,
      "sortOrder": listProfilesRequest.sortOrder,
      "sortBy": listProfilesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfilesResponse>{},
        body: await response.json(),
        bodyKey: "profileCollection",
        bodyModel: model.ProfileCollection,
        type: "model.ProfileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified profile's name, description, and tags.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProfileRequest
   * @return UpdateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateProfile.ts.html |here} to see how to use UpdateProfile API.
   */
  public async updateProfile(
    updateProfileRequest: requests.UpdateProfileRequest
  ): Promise<responses.UpdateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OnboardingClient#updateProfile.");
    const operationName = "updateProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{profileId}": updateProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProfileRequest.ifMatch,
      "opc-request-id": updateProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProfileRequest.updateProfileDetails,
        "UpdateProfileDetails",
        model.UpdateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: model.Profile,
        type: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ReportingManagedInstanceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ReportingManagedInstanceClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ReportingManagedInstance";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger)
      this.logger.info(`ReportingManagedInstanceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ReportingManagedInstanceClient.serviceEndpointTemplate,
        this._region,
        ReportingManagedInstanceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ReportingManagedInstanceClient.serviceEndpointTemplate,
        this._regionId,
        ReportingManagedInstanceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ReportingManagedInstanceClient.serviceEndpointTemplate,
      region,
      ReportingManagedInstanceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ReportingManagedInstanceClient.serviceEndpointTemplate,
      regionId,
      ReportingManagedInstanceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Returns a report of managed instances matching the given filters. You can select CSV, XML, or JSON format.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceAnalyticContentRequest
   * @return GetManagedInstanceAnalyticContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetManagedInstanceAnalyticContent.ts.html |here} to see how to use GetManagedInstanceAnalyticContent API.
   */
  public async getManagedInstanceAnalyticContent(
    getManagedInstanceAnalyticContentRequest: requests.GetManagedInstanceAnalyticContentRequest
  ): Promise<responses.GetManagedInstanceAnalyticContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ReportingManagedInstanceClient#getManagedInstanceAnalyticContent."
      );
    const operationName = "getManagedInstanceAnalyticContent";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getManagedInstanceAnalyticContentRequest.compartmentId,
      "managedInstanceGroupId": getManagedInstanceAnalyticContentRequest.managedInstanceGroupId,
      "lifecycleEnvironmentId": getManagedInstanceAnalyticContentRequest.lifecycleEnvironmentId,
      "lifecycleStageId": getManagedInstanceAnalyticContentRequest.lifecycleStageId,
      "status": getManagedInstanceAnalyticContentRequest.status,
      "displayName": getManagedInstanceAnalyticContentRequest.displayName,
      "displayNameContains": getManagedInstanceAnalyticContentRequest.displayNameContains,
      "securityUpdatesAvailableEqualsTo":
        getManagedInstanceAnalyticContentRequest.securityUpdatesAvailableEqualsTo,
      "bugUpdatesAvailableEqualsTo":
        getManagedInstanceAnalyticContentRequest.bugUpdatesAvailableEqualsTo,
      "securityUpdatesAvailableGreaterThan":
        getManagedInstanceAnalyticContentRequest.securityUpdatesAvailableGreaterThan,
      "bugUpdatesAvailableGreaterThan":
        getManagedInstanceAnalyticContentRequest.bugUpdatesAvailableGreaterThan,
      "location": getManagedInstanceAnalyticContentRequest.location,
      "locationNotEqualTo": getManagedInstanceAnalyticContentRequest.locationNotEqualTo,
      "osFamily": getManagedInstanceAnalyticContentRequest.osFamily,
      "isManagedByAutonomousLinux":
        getManagedInstanceAnalyticContentRequest.isManagedByAutonomousLinux,
      "reportFormat": getManagedInstanceAnalyticContentRequest.reportFormat,
      "reportType": getManagedInstanceAnalyticContentRequest.reportType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceAnalyticContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceAnalyticContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceAnalytics/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceAnalyticContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a report for a single managed instance whose associated erratas match the given filters. You can select CSV, XML, or JSON format.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceContentRequest
   * @return GetManagedInstanceContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetManagedInstanceContent.ts.html |here} to see how to use GetManagedInstanceContent API.
   */
  public async getManagedInstanceContent(
    getManagedInstanceContentRequest: requests.GetManagedInstanceContentRequest
  ): Promise<responses.GetManagedInstanceContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ReportingManagedInstanceClient#getManagedInstanceContent."
      );
    const operationName = "getManagedInstanceContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": getManagedInstanceContentRequest.managedInstanceId
    };

    const queryParams = {
      "advisoryName": getManagedInstanceContentRequest.advisoryName,
      "advisoryNameContains": getManagedInstanceContentRequest.advisoryNameContains,
      "advisoryType": getManagedInstanceContentRequest.advisoryType,
      "vulnerabilityName": getManagedInstanceContentRequest.vulnerabilityName,
      "vulnerabilityNameContains": getManagedInstanceContentRequest.vulnerabilityNameContains,
      "vulnerabilityType": getManagedInstanceContentRequest.vulnerabilityType,
      "reportFormat": getManagedInstanceContentRequest.reportFormat
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of user specified metrics for a collection of managed instances.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeManagedInstanceAnalyticsRequest
   * @return SummarizeManagedInstanceAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SummarizeManagedInstanceAnalytics.ts.html |here} to see how to use SummarizeManagedInstanceAnalytics API.
   */
  public async summarizeManagedInstanceAnalytics(
    summarizeManagedInstanceAnalyticsRequest: requests.SummarizeManagedInstanceAnalyticsRequest
  ): Promise<responses.SummarizeManagedInstanceAnalyticsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ReportingManagedInstanceClient#summarizeManagedInstanceAnalytics."
      );
    const operationName = "summarizeManagedInstanceAnalytics";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "metricNames": summarizeManagedInstanceAnalyticsRequest.metricNames,
      "compartmentId": summarizeManagedInstanceAnalyticsRequest.compartmentId,
      "managedInstanceGroupId": summarizeManagedInstanceAnalyticsRequest.managedInstanceGroupId,
      "lifecycleEnvironmentId": summarizeManagedInstanceAnalyticsRequest.lifecycleEnvironmentId,
      "lifecycleStageId": summarizeManagedInstanceAnalyticsRequest.lifecycleStageId,
      "status": summarizeManagedInstanceAnalyticsRequest.status,
      "location": summarizeManagedInstanceAnalyticsRequest.location,
      "locationNotEqualTo": summarizeManagedInstanceAnalyticsRequest.locationNotEqualTo,
      "osFamily": summarizeManagedInstanceAnalyticsRequest.osFamily,
      "isManagedByAutonomousLinux":
        summarizeManagedInstanceAnalyticsRequest.isManagedByAutonomousLinux,
      "displayName": summarizeManagedInstanceAnalyticsRequest.displayName,
      "displayNameContains": summarizeManagedInstanceAnalyticsRequest.displayNameContains,
      "limit": summarizeManagedInstanceAnalyticsRequest.limit,
      "page": summarizeManagedInstanceAnalyticsRequest.page,
      "sortBy": summarizeManagedInstanceAnalyticsRequest.sortBy,
      "sortOrder": summarizeManagedInstanceAnalyticsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeManagedInstanceAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeManagedInstanceAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstanceAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeManagedInstanceAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceAnalyticCollection",
        bodyModel: model.ManagedInstanceAnalyticCollection,
        type: "model.ManagedInstanceAnalyticCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ScheduledJobApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ScheduledJobClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ScheduledJobWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ScheduledJob";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`ScheduledJobClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ScheduledJobClient.serviceEndpointTemplate,
        this._region,
        ScheduledJobClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ScheduledJobClient.serviceEndpointTemplate,
        this._regionId,
        ScheduledJobClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ScheduledJobClient.serviceEndpointTemplate,
      region,
      ScheduledJobClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ScheduledJobClient.serviceEndpointTemplate,
      regionId,
      ScheduledJobClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ScheduledJobWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ScheduledJobWaiter {
    this._waiters = new ScheduledJobWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ScheduledJobWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a scheduled job to another compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeScheduledJobCompartmentRequest
   * @return ChangeScheduledJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeScheduledJobCompartment.ts.html |here} to see how to use ChangeScheduledJobCompartment API.
   */
  public async changeScheduledJobCompartment(
    changeScheduledJobCompartmentRequest: requests.ChangeScheduledJobCompartmentRequest
  ): Promise<responses.ChangeScheduledJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ScheduledJobClient#changeScheduledJobCompartment.");
    const operationName = "changeScheduledJobCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{scheduledJobId}": changeScheduledJobCompartmentRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeScheduledJobCompartmentRequest.opcRequestId,
      "if-match": changeScheduledJobCompartmentRequest.ifMatch,
      "opc-retry-token": changeScheduledJobCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeScheduledJobCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeScheduledJobCompartmentRequest.changeScheduledJobCompartmentDetails,
        "ChangeScheduledJobCompartmentDetails",
        model.ChangeScheduledJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeScheduledJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new scheduled job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateScheduledJobRequest
   * @return CreateScheduledJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateScheduledJob.ts.html |here} to see how to use CreateScheduledJob API.
   */
  public async createScheduledJob(
    createScheduledJobRequest: requests.CreateScheduledJobRequest
  ): Promise<responses.CreateScheduledJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#createScheduledJob.");
    const operationName = "createScheduledJob";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createScheduledJobRequest.opcRetryToken,
      "opc-request-id": createScheduledJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScheduledJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduledJobRequest.createScheduledJobDetails,
        "CreateScheduledJobDetails",
        model.CreateScheduledJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: model.ScheduledJob,
        type: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified scheduled job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteScheduledJobRequest
   * @return DeleteScheduledJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteScheduledJob.ts.html |here} to see how to use DeleteScheduledJob API.
   */
  public async deleteScheduledJob(
    deleteScheduledJobRequest: requests.DeleteScheduledJobRequest
  ): Promise<responses.DeleteScheduledJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#deleteScheduledJob.");
    const operationName = "deleteScheduledJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{scheduledJobId}": deleteScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteScheduledJobRequest.ifMatch,
      "opc-request-id": deleteScheduledJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScheduledJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduledJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified scheduled job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetScheduledJobRequest
   * @return GetScheduledJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetScheduledJob.ts.html |here} to see how to use GetScheduledJob API.
   */
  public async getScheduledJob(
    getScheduledJobRequest: requests.GetScheduledJobRequest
  ): Promise<responses.GetScheduledJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#getScheduledJob.");
    const operationName = "getScheduledJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{scheduledJobId}": getScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduledJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduledJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: model.ScheduledJob,
        type: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists scheduled jobs that match the specified compartment or scheduled job [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListScheduledJobsRequest
   * @return ListScheduledJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListScheduledJobs.ts.html |here} to see how to use ListScheduledJobs API.
   */
  public async listScheduledJobs(
    listScheduledJobsRequest: requests.ListScheduledJobsRequest
  ): Promise<responses.ListScheduledJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#listScheduledJobs.");
    const operationName = "listScheduledJobs";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listScheduledJobsRequest.compartmentId,
      "displayName": listScheduledJobsRequest.displayName,
      "displayNameContains": listScheduledJobsRequest.displayNameContains,
      "lifecycleState": listScheduledJobsRequest.lifecycleState,
      "managedInstanceId": listScheduledJobsRequest.managedInstanceId,
      "managedInstanceGroupId": listScheduledJobsRequest.managedInstanceGroupId,
      "managedCompartmentId": listScheduledJobsRequest.managedCompartmentId,
      "lifecycleStageId": listScheduledJobsRequest.lifecycleStageId,
      "operationType": listScheduledJobsRequest.operationType,
      "scheduleType": listScheduledJobsRequest.scheduleType,
      "timeStart": listScheduledJobsRequest.timeStart,
      "timeEnd": listScheduledJobsRequest.timeEnd,
      "limit": listScheduledJobsRequest.limit,
      "page": listScheduledJobsRequest.page,
      "sortOrder": listScheduledJobsRequest.sortOrder,
      "sortBy": listScheduledJobsRequest.sortBy,
      "isRestricted": listScheduledJobsRequest.isRestricted,
      "id": listScheduledJobsRequest.id,
      "compartmentIdInSubtree": listScheduledJobsRequest.compartmentIdInSubtree,
      "location": listScheduledJobsRequest.location,
      "locationNotEqualTo": listScheduledJobsRequest.locationNotEqualTo,
      "isManagedByAutonomousLinux": listScheduledJobsRequest.isManagedByAutonomousLinux
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScheduledJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScheduledJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledJobsResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJobCollection",
        bodyModel: model.ScheduledJobCollection,
        type: "model.ScheduledJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Triggers an already created recurring scheduled job to run immediately instead of waiting for its next regularly
   * scheduled time. This operation only applies to recurring jobs, not one-time scheduled jobs.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RunScheduledJobNowRequest
   * @return RunScheduledJobNowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/RunScheduledJobNow.ts.html |here} to see how to use RunScheduledJobNow API.
   */
  public async runScheduledJobNow(
    runScheduledJobNowRequest: requests.RunScheduledJobNowRequest
  ): Promise<responses.RunScheduledJobNowResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#runScheduledJobNow.");
    const operationName = "runScheduledJobNow";
    const apiReferenceLink = "";
    const pathParams = {
      "{scheduledJobId}": runScheduledJobNowRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": runScheduledJobNowRequest.opcRequestId,
      "if-match": runScheduledJobNowRequest.ifMatch,
      "opc-retry-token": runScheduledJobNowRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      runScheduledJobNowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}/actions/runNow",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RunScheduledJobNowResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified scheduled job's name, description, and other details, such as next execution and recurrence.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateScheduledJobRequest
   * @return UpdateScheduledJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateScheduledJob.ts.html |here} to see how to use UpdateScheduledJob API.
   */
  public async updateScheduledJob(
    updateScheduledJobRequest: requests.UpdateScheduledJobRequest
  ): Promise<responses.UpdateScheduledJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ScheduledJobClient#updateScheduledJob.");
    const operationName = "updateScheduledJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{scheduledJobId}": updateScheduledJobRequest.scheduledJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateScheduledJobRequest.ifMatch,
      "opc-request-id": updateScheduledJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScheduledJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/scheduledJobs/{scheduledJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduledJobRequest.updateScheduledJobDetails,
        "UpdateScheduledJobDetails",
        model.UpdateScheduledJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduledJobResponse>{},
        body: await response.json(),
        bodyKey: "scheduledJob",
        bodyModel: model.ScheduledJob,
        type: "model.ScheduledJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum SoftwareSourceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class SoftwareSourceClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": SoftwareSourceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "SoftwareSource";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`SoftwareSourceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        SoftwareSourceClient.serviceEndpointTemplate,
        this._region,
        SoftwareSourceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        SoftwareSourceClient.serviceEndpointTemplate,
        this._regionId,
        SoftwareSourceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      SoftwareSourceClient.serviceEndpointTemplate,
      region,
      SoftwareSourceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      SoftwareSourceClient.serviceEndpointTemplate,
      regionId,
      SoftwareSourceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new SoftwareSourceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): SoftwareSourceWaiter {
    this._waiters = new SoftwareSourceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): SoftwareSourceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Adds packages to a software source. This operation can only be done for custom and versioned custom software sources that are not created using filters.
   * For a versioned custom software source, you can only add packages when the source is created. Once content is added to a versioned custom software source, it is immutable.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddPackagesToSoftwareSourceRequest
   * @return AddPackagesToSoftwareSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/AddPackagesToSoftwareSource.ts.html |here} to see how to use AddPackagesToSoftwareSource API.
   */
  public async addPackagesToSoftwareSource(
    addPackagesToSoftwareSourceRequest: requests.AddPackagesToSoftwareSourceRequest
  ): Promise<responses.AddPackagesToSoftwareSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#addPackagesToSoftwareSource.");
    const operationName = "addPackagesToSoftwareSource";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": addPackagesToSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addPackagesToSoftwareSourceRequest.opcRequestId,
      "if-match": addPackagesToSoftwareSourceRequest.ifMatch,
      "opc-retry-token": addPackagesToSoftwareSourceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addPackagesToSoftwareSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/actions/addPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addPackagesToSoftwareSourceRequest.addPackagesToSoftwareSourceDetails,
        "AddPackagesToSoftwareSourceDetails",
        model.AddPackagesToSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddPackagesToSoftwareSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the availability for a list of specified software sources.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAvailabilityOfSoftwareSourcesRequest
   * @return ChangeAvailabilityOfSoftwareSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeAvailabilityOfSoftwareSources.ts.html |here} to see how to use ChangeAvailabilityOfSoftwareSources API.
   */
  public async changeAvailabilityOfSoftwareSources(
    changeAvailabilityOfSoftwareSourcesRequest: requests.ChangeAvailabilityOfSoftwareSourcesRequest
  ): Promise<responses.ChangeAvailabilityOfSoftwareSourcesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SoftwareSourceClient#changeAvailabilityOfSoftwareSources."
      );
    const operationName = "changeAvailabilityOfSoftwareSources";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeAvailabilityOfSoftwareSourcesRequest.opcRequestId,
      "opc-retry-token": changeAvailabilityOfSoftwareSourcesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAvailabilityOfSoftwareSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/actions/changeAvailability",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAvailabilityOfSoftwareSourcesRequest.changeAvailabilityOfSoftwareSourcesDetails,
        "ChangeAvailabilityOfSoftwareSourcesDetails",
        model.ChangeAvailabilityOfSoftwareSourcesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAvailabilityOfSoftwareSourcesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified software sources to a different compartment within the same tenancy.
   * For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSoftwareSourceCompartmentRequest
   * @return ChangeSoftwareSourceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ChangeSoftwareSourceCompartment.ts.html |here} to see how to use ChangeSoftwareSourceCompartment API.
   */
  public async changeSoftwareSourceCompartment(
    changeSoftwareSourceCompartmentRequest: requests.ChangeSoftwareSourceCompartmentRequest
  ): Promise<responses.ChangeSoftwareSourceCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#changeSoftwareSourceCompartment.");
    const operationName = "changeSoftwareSourceCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": changeSoftwareSourceCompartmentRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSoftwareSourceCompartmentRequest.opcRequestId,
      "if-match": changeSoftwareSourceCompartmentRequest.ifMatch,
      "opc-retry-token": changeSoftwareSourceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSoftwareSourceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSoftwareSourceCompartmentRequest.changeSoftwareSourceCompartmentDetails,
        "ChangeSoftwareSourceCompartmentDetails",
        model.ChangeSoftwareSourceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSoftwareSourceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers the necessary entitlement credentials for OS vendor software sources for a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateEntitlementRequest
   * @return CreateEntitlementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateEntitlement.ts.html |here} to see how to use CreateEntitlement API.
   */
  public async createEntitlement(
    createEntitlementRequest: requests.CreateEntitlementRequest
  ): Promise<responses.CreateEntitlementResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#createEntitlement.");
    const operationName = "createEntitlement";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEntitlementRequest.opcRequestId,
      "opc-retry-token": createEntitlementRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEntitlementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/entitlements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEntitlementRequest.createEntitlementDetails,
        "CreateEntitlementDetails",
        model.CreateEntitlementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEntitlementResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new versioned or custom software source.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSoftwareSourceRequest
   * @return CreateSoftwareSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/CreateSoftwareSource.ts.html |here} to see how to use CreateSoftwareSource API.
   */
  public async createSoftwareSource(
    createSoftwareSourceRequest: requests.CreateSoftwareSourceRequest
  ): Promise<responses.CreateSoftwareSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#createSoftwareSource.");
    const operationName = "createSoftwareSource";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSoftwareSourceRequest.opcRequestId,
      "opc-retry-token": createSoftwareSourceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSoftwareSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSoftwareSourceRequest.createSoftwareSourceDetails,
        "CreateSoftwareSourceDetails",
        model.CreateSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: model.SoftwareSource,
        type: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified software source.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSoftwareSourceRequest
   * @return DeleteSoftwareSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/DeleteSoftwareSource.ts.html |here} to see how to use DeleteSoftwareSource API.
   */
  public async deleteSoftwareSource(
    deleteSoftwareSourceRequest: requests.DeleteSoftwareSourceRequest
  ): Promise<responses.DeleteSoftwareSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#deleteSoftwareSource.");
    const operationName = "deleteSoftwareSource";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": deleteSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteSoftwareSourceRequest.opcRequestId,
      "if-match": deleteSoftwareSourceRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSoftwareSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSoftwareSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified erratum based on its advisory name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetErratumRequest
   * @return GetErratumResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetErratum.ts.html |here} to see how to use GetErratum API.
   */
  public async getErratum(
    getErratumRequest: requests.GetErratumRequest
  ): Promise<responses.GetErratumResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#getErratum.");
    const operationName = "getErratum";
    const apiReferenceLink = "";
    const pathParams = {
      "{name}": getErratumRequest.name
    };

    const queryParams = {
      "compartmentId": getErratumRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getErratumRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getErratumRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/errata/{name}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetErratumResponse>{},
        body: await response.json(),
        bodyKey: "erratum",
        bodyModel: model.Erratum,
        type: "model.Erratum",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified module stream in a software source.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModuleStreamRequest
   * @return GetModuleStreamResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetModuleStream.ts.html |here} to see how to use GetModuleStream API.
   */
  public async getModuleStream(
    getModuleStreamRequest: requests.GetModuleStreamRequest
  ): Promise<responses.GetModuleStreamResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#getModuleStream.");
    const operationName = "getModuleStream";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": getModuleStreamRequest.softwareSourceId,
      "{moduleName}": getModuleStreamRequest.moduleName
    };

    const queryParams = {
      "streamName": getModuleStreamRequest.streamName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModuleStreamRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModuleStreamRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/moduleStreams/{moduleName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModuleStreamResponse>{},
        body: await response.json(),
        bodyKey: "moduleStream",
        bodyModel: model.ModuleStream,
        type: "model.ModuleStream",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified module stream profile in a software source.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModuleStreamProfileRequest
   * @return GetModuleStreamProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetModuleStreamProfile.ts.html |here} to see how to use GetModuleStreamProfile API.
   */
  public async getModuleStreamProfile(
    getModuleStreamProfileRequest: requests.GetModuleStreamProfileRequest
  ): Promise<responses.GetModuleStreamProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#getModuleStreamProfile.");
    const operationName = "getModuleStreamProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": getModuleStreamProfileRequest.softwareSourceId,
      "{profileName}": getModuleStreamProfileRequest.profileName
    };

    const queryParams = {
      "moduleName": getModuleStreamProfileRequest.moduleName,
      "streamName": getModuleStreamProfileRequest.streamName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModuleStreamProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModuleStreamProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/moduleStreamProfiles/{profileName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModuleStreamProfileResponse>{},
        body: await response.json(),
        bodyKey: "moduleStreamProfile",
        bodyModel: model.ModuleStreamProfile,
        type: "model.ModuleStreamProfile",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified package group from a software source.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPackageGroupRequest
   * @return GetPackageGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetPackageGroup.ts.html |here} to see how to use GetPackageGroup API.
   */
  public async getPackageGroup(
    getPackageGroupRequest: requests.GetPackageGroupRequest
  ): Promise<responses.GetPackageGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#getPackageGroup.");
    const operationName = "getPackageGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": getPackageGroupRequest.softwareSourceId,
      "{packageGroupId}": getPackageGroupRequest.packageGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPackageGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPackageGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/packageGroups/{packageGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPackageGroupResponse>{},
        body: await response.json(),
        bodyKey: "packageGroup",
        bodyModel: model.PackageGroup,
        type: "model.PackageGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified software package.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSoftwarePackageRequest
   * @return GetSoftwarePackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetSoftwarePackage.ts.html |here} to see how to use GetSoftwarePackage API.
   */
  public async getSoftwarePackage(
    getSoftwarePackageRequest: requests.GetSoftwarePackageRequest
  ): Promise<responses.GetSoftwarePackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#getSoftwarePackage.");
    const operationName = "getSoftwarePackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": getSoftwarePackageRequest.softwareSourceId,
      "{softwarePackageName}": getSoftwarePackageRequest.softwarePackageName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSoftwarePackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSoftwarePackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/softwarePackages/{softwarePackageName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSoftwarePackageResponse>{},
        body: await response.json(),
        bodyKey: "softwarePackage",
        bodyModel: model.SoftwarePackage,
        type: "model.SoftwarePackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified software package based on its fully qualified name.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSoftwarePackageByNameRequest
   * @return GetSoftwarePackageByNameResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetSoftwarePackageByName.ts.html |here} to see how to use GetSoftwarePackageByName API.
   */
  public async getSoftwarePackageByName(
    getSoftwarePackageByNameRequest: requests.GetSoftwarePackageByNameRequest
  ): Promise<responses.GetSoftwarePackageByNameResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#getSoftwarePackageByName.");
    const operationName = "getSoftwarePackageByName";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwarePackageName}": getSoftwarePackageByNameRequest.softwarePackageName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSoftwarePackageByNameRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSoftwarePackageByNameRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwarePackages/{softwarePackageName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSoftwarePackageByNameResponse>{},
        body: await response.json(),
        bodyKey: "softwarePackage",
        bodyModel: model.SoftwarePackage,
        type: "model.SoftwarePackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the specified software source.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSoftwareSourceRequest
   * @return GetSoftwareSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetSoftwareSource.ts.html |here} to see how to use GetSoftwareSource API.
   */
  public async getSoftwareSource(
    getSoftwareSourceRequest: requests.GetSoftwareSourceRequest
  ): Promise<responses.GetSoftwareSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#getSoftwareSource.");
    const operationName = "getSoftwareSource";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": getSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSoftwareSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSoftwareSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: model.SoftwareSource,
        type: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
   * including but not limited to its name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAllSoftwarePackagesRequest
   * @return ListAllSoftwarePackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListAllSoftwarePackages.ts.html |here} to see how to use ListAllSoftwarePackages API.
   */
  public async listAllSoftwarePackages(
    listAllSoftwarePackagesRequest: requests.ListAllSoftwarePackagesRequest
  ): Promise<responses.ListAllSoftwarePackagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#listAllSoftwarePackages.");
    const operationName = "listAllSoftwarePackages";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "displayName": listAllSoftwarePackagesRequest.displayName,
      "displayNameContains": listAllSoftwarePackagesRequest.displayNameContains,
      "version": listAllSoftwarePackagesRequest.version,
      "architecture": listAllSoftwarePackagesRequest.architecture,
      "isLatest": listAllSoftwarePackagesRequest.isLatest,
      "osFamily": listAllSoftwarePackagesRequest.osFamily,
      "limit": listAllSoftwarePackagesRequest.limit,
      "page": listAllSoftwarePackagesRequest.page,
      "sortOrder": listAllSoftwarePackagesRequest.sortOrder,
      "sortBy": listAllSoftwarePackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAllSoftwarePackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAllSoftwarePackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwarePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAllSoftwarePackagesResponse>{},
        body: await response.json(),
        bodyKey: "softwarePackageCollection",
        bodyModel: model.SoftwarePackageCollection,
        type: "model.SoftwarePackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists entitlements in the specified tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of criteria including but
   * not limited to its Customer Support Identifier (CSI), and vendor name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListEntitlementsRequest
   * @return ListEntitlementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListEntitlements.ts.html |here} to see how to use ListEntitlements API.
   */
  public async listEntitlements(
    listEntitlementsRequest: requests.ListEntitlementsRequest
  ): Promise<responses.ListEntitlementsResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#listEntitlements.");
    const operationName = "listEntitlements";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEntitlementsRequest.compartmentId,
      "csi": listEntitlementsRequest.csi,
      "vendorName": listEntitlementsRequest.vendorName,
      "limit": listEntitlementsRequest.limit,
      "page": listEntitlementsRequest.page,
      "sortOrder": listEntitlementsRequest.sortOrder,
      "sortBy": listEntitlementsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEntitlementsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEntitlementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/entitlements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEntitlementsResponse>{},
        body: await response.json(),
        bodyKey: "entitlementCollection",
        bodyModel: model.EntitlementCollection,
        type: "model.EntitlementCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all of the currently available errata. Filter the list against a variety of criteria including but not
   * limited to its name, classification type, advisory severity, and OS family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListErrataRequest
   * @return ListErrataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListErrata.ts.html |here} to see how to use ListErrata API.
   */
  public async listErrata(
    listErrataRequest: requests.ListErrataRequest
  ): Promise<responses.ListErrataResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#listErrata.");
    const operationName = "listErrata";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listErrataRequest.compartmentId,
      "name": listErrataRequest.name,
      "nameContains": listErrataRequest.nameContains,
      "classificationType": listErrataRequest.classificationType,
      "advisoryType": listErrataRequest.advisoryType,
      "osFamily": listErrataRequest.osFamily,
      "advisorySeverity": listErrataRequest.advisorySeverity,
      "timeIssueDateStart": listErrataRequest.timeIssueDateStart,
      "timeIssueDateEnd": listErrataRequest.timeIssueDateEnd,
      "limit": listErrataRequest.limit,
      "page": listErrataRequest.page,
      "sortOrder": listErrataRequest.sortOrder,
      "sortBy": listErrataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listErrataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listErrataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/errata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListErrataResponse>{},
        body: await response.json(),
        bodyKey: "erratumCollection",
        bodyModel: model.ErratumCollection,
        type: "model.ErratumCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists module stream profiles from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of
   * criteria including but not limited to its module name, stream name, and profile name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModuleStreamProfilesRequest
   * @return ListModuleStreamProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListModuleStreamProfiles.ts.html |here} to see how to use ListModuleStreamProfiles API.
   */
  public async listModuleStreamProfiles(
    listModuleStreamProfilesRequest: requests.ListModuleStreamProfilesRequest
  ): Promise<responses.ListModuleStreamProfilesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#listModuleStreamProfiles.");
    const operationName = "listModuleStreamProfiles";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": listModuleStreamProfilesRequest.softwareSourceId
    };

    const queryParams = {
      "moduleName": listModuleStreamProfilesRequest.moduleName,
      "streamName": listModuleStreamProfilesRequest.streamName,
      "name": listModuleStreamProfilesRequest.name,
      "limit": listModuleStreamProfilesRequest.limit,
      "page": listModuleStreamProfilesRequest.page,
      "sortOrder": listModuleStreamProfilesRequest.sortOrder,
      "sortBy": listModuleStreamProfilesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModuleStreamProfilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModuleStreamProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/moduleStreamProfiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModuleStreamProfilesResponse>{},
        body: await response.json(),
        bodyKey: "moduleStreamProfileCollection",
        bodyModel: model.ModuleStreamProfileCollection,
        type: "model.ModuleStreamProfileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists module streams from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * Filter the list against a variety of criteria including but not limited to its module name and (stream) name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModuleStreamsRequest
   * @return ListModuleStreamsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListModuleStreams.ts.html |here} to see how to use ListModuleStreams API.
   */
  public async listModuleStreams(
    listModuleStreamsRequest: requests.ListModuleStreamsRequest
  ): Promise<responses.ListModuleStreamsResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#listModuleStreams.");
    const operationName = "listModuleStreams";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": listModuleStreamsRequest.softwareSourceId
    };

    const queryParams = {
      "moduleName": listModuleStreamsRequest.moduleName,
      "name": listModuleStreamsRequest.name,
      "isLatest": listModuleStreamsRequest.isLatest,
      "limit": listModuleStreamsRequest.limit,
      "page": listModuleStreamsRequest.page,
      "sortOrder": listModuleStreamsRequest.sortOrder,
      "sortBy": listModuleStreamsRequest.sortBy,
      "moduleNameContains": listModuleStreamsRequest.moduleNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModuleStreamsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModuleStreamsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/moduleStreams",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModuleStreamsResponse>{},
        body: await response.json(),
        bodyKey: "moduleStreamCollection",
        bodyModel: model.ModuleStreamCollection,
        type: "model.ModuleStreamCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists package groups that are associated with the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
   * variety of criteria including but not limited to its name, and package group type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPackageGroupsRequest
   * @return ListPackageGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListPackageGroups.ts.html |here} to see how to use ListPackageGroups API.
   */
  public async listPackageGroups(
    listPackageGroupsRequest: requests.ListPackageGroupsRequest
  ): Promise<responses.ListPackageGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation SoftwareSourceClient#listPackageGroups.");
    const operationName = "listPackageGroups";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": listPackageGroupsRequest.softwareSourceId
    };

    const queryParams = {
      "compartmentId": listPackageGroupsRequest.compartmentId,
      "name": listPackageGroupsRequest.name,
      "nameContains": listPackageGroupsRequest.nameContains,
      "groupType": listPackageGroupsRequest.groupType,
      "limit": listPackageGroupsRequest.limit,
      "page": listPackageGroupsRequest.page,
      "sortOrder": listPackageGroupsRequest.sortOrder,
      "sortBy": listPackageGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPackageGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPackageGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/packageGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPackageGroupsResponse>{},
        body: await response.json(),
        bodyKey: "packageGroupCollection",
        bodyModel: model.PackageGroupCollection,
        type: "model.PackageGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the software sources in the tenancy that contain the software package. Filter the list against a
   * variety of criteria including but not limited to its name, type, architecture, and OS family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSoftwarePackageSoftwareSourcesRequest
   * @return ListSoftwarePackageSoftwareSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListSoftwarePackageSoftwareSources.ts.html |here} to see how to use ListSoftwarePackageSoftwareSources API.
   */
  public async listSoftwarePackageSoftwareSources(
    listSoftwarePackageSoftwareSourcesRequest: requests.ListSoftwarePackageSoftwareSourcesRequest
  ): Promise<responses.ListSoftwarePackageSoftwareSourcesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SoftwareSourceClient#listSoftwarePackageSoftwareSources."
      );
    const operationName = "listSoftwarePackageSoftwareSources";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwarePackageName}": listSoftwarePackageSoftwareSourcesRequest.softwarePackageName
    };

    const queryParams = {
      "compartmentId": listSoftwarePackageSoftwareSourcesRequest.compartmentId,
      "softwareSourceType": listSoftwarePackageSoftwareSourcesRequest.softwareSourceType,
      "osFamily": listSoftwarePackageSoftwareSourcesRequest.osFamily,
      "archType": listSoftwarePackageSoftwareSourcesRequest.archType,
      "availability": listSoftwarePackageSoftwareSourcesRequest.availability,
      "availabilityAtOci": listSoftwarePackageSoftwareSourcesRequest.availabilityAtOci,
      "availabilityAnywhere": listSoftwarePackageSoftwareSourcesRequest.availabilityAnywhere,
      "displayName": listSoftwarePackageSoftwareSourcesRequest.displayName,
      "displayNameContains": listSoftwarePackageSoftwareSourcesRequest.displayNameContains,
      "limit": listSoftwarePackageSoftwareSourcesRequest.limit,
      "page": listSoftwarePackageSoftwareSourcesRequest.page,
      "sortOrder": listSoftwarePackageSoftwareSourcesRequest.sortOrder,
      "sortBy": listSoftwarePackageSoftwareSourcesRequest.sortBy,
      "lifecycleState": listSoftwarePackageSoftwareSourcesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSoftwarePackageSoftwareSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSoftwarePackageSoftwareSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwarePackages/{softwarePackageName}/softwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwarePackageSoftwareSourcesResponse>{},
        body: await response.json(),
        bodyKey: "softwareSourceCollection",
        bodyModel: model.SoftwareSourceCollection,
        type: "model.SoftwareSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists software packages in the specified software source.  Filter the list against a variety of criteria
   * including but not limited to its name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSoftwarePackagesRequest
   * @return ListSoftwarePackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListSoftwarePackages.ts.html |here} to see how to use ListSoftwarePackages API.
   */
  public async listSoftwarePackages(
    listSoftwarePackagesRequest: requests.ListSoftwarePackagesRequest
  ): Promise<responses.ListSoftwarePackagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#listSoftwarePackages.");
    const operationName = "listSoftwarePackages";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": listSoftwarePackagesRequest.softwareSourceId
    };

    const queryParams = {
      "displayName": listSoftwarePackagesRequest.displayName,
      "displayNameContains": listSoftwarePackagesRequest.displayNameContains,
      "isLatest": listSoftwarePackagesRequest.isLatest,
      "limit": listSoftwarePackagesRequest.limit,
      "page": listSoftwarePackagesRequest.page,
      "sortOrder": listSoftwarePackagesRequest.sortOrder,
      "sortBy": listSoftwarePackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSoftwarePackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSoftwarePackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}/softwarePackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwarePackagesResponse>{},
        body: await response.json(),
        bodyKey: "softwarePackageCollection",
        bodyModel: model.SoftwarePackageCollection,
        type: "model.SoftwarePackageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists available software source vendors. Filter the list against a variety of criteria including but not limited
   * to its name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSoftwareSourceVendorsRequest
   * @return ListSoftwareSourceVendorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListSoftwareSourceVendors.ts.html |here} to see how to use ListSoftwareSourceVendors API.
   */
  public async listSoftwareSourceVendors(
    listSoftwareSourceVendorsRequest: requests.ListSoftwareSourceVendorsRequest
  ): Promise<responses.ListSoftwareSourceVendorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#listSoftwareSourceVendors.");
    const operationName = "listSoftwareSourceVendors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSoftwareSourceVendorsRequest.compartmentId,
      "sortOrder": listSoftwareSourceVendorsRequest.sortOrder,
      "sortBy": listSoftwareSourceVendorsRequest.sortBy,
      "name": listSoftwareSourceVendorsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSoftwareSourceVendorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSoftwareSourceVendorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSourceVendors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwareSourceVendorsResponse>{},
        body: await response.json(),
        bodyKey: "softwareSourceVendorCollection",
        bodyModel: model.SoftwareSourceVendorCollection,
        type: "model.SoftwareSourceVendorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists software sources that match the specified tenancy or software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
   * variety of criteria including but not limited to its name, status, architecture, and OS family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSoftwareSourcesRequest
   * @return ListSoftwareSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListSoftwareSources.ts.html |here} to see how to use ListSoftwareSources API.
   */
  public async listSoftwareSources(
    listSoftwareSourcesRequest: requests.ListSoftwareSourcesRequest
  ): Promise<responses.ListSoftwareSourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#listSoftwareSources.");
    const operationName = "listSoftwareSources";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSoftwareSourcesRequest.compartmentId,
      "softwareSourceId": listSoftwareSourcesRequest.softwareSourceId,
      "softwareSourceType": listSoftwareSourcesRequest.softwareSourceType,
      "vendorName": listSoftwareSourcesRequest.vendorName,
      "osFamily": listSoftwareSourcesRequest.osFamily,
      "archType": listSoftwareSourcesRequest.archType,
      "availability": listSoftwareSourcesRequest.availability,
      "availabilityAtOci": listSoftwareSourcesRequest.availabilityAtOci,
      "availabilityAnywhere": listSoftwareSourcesRequest.availabilityAnywhere,
      "isMandatoryForAutonomousLinux": listSoftwareSourcesRequest.isMandatoryForAutonomousLinux,
      "displayName": listSoftwareSourcesRequest.displayName,
      "displayNameContains": listSoftwareSourcesRequest.displayNameContains,
      "displayNameNotEqualTo": listSoftwareSourcesRequest.displayNameNotEqualTo,
      "limit": listSoftwareSourcesRequest.limit,
      "page": listSoftwareSourcesRequest.page,
      "sortOrder": listSoftwareSourcesRequest.sortOrder,
      "sortBy": listSoftwareSourcesRequest.sortBy,
      "lifecycleState": listSoftwareSourcesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSoftwareSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSoftwareSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSoftwareSourcesResponse>{},
        body: await response.json(),
        bodyKey: "softwareSourceCollection",
        bodyModel: model.SoftwareSourceCollection,
        type: "model.SoftwareSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of module streams from the specified software sources. Filter the list against a variety of
   * criteria including the module name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchSoftwareSourceModuleStreamsRequest
   * @return SearchSoftwareSourceModuleStreamsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SearchSoftwareSourceModuleStreams.ts.html |here} to see how to use SearchSoftwareSourceModuleStreams API.
   */
  public async searchSoftwareSourceModuleStreams(
    searchSoftwareSourceModuleStreamsRequest: requests.SearchSoftwareSourceModuleStreamsRequest
  ): Promise<responses.SearchSoftwareSourceModuleStreamsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SoftwareSourceClient#searchSoftwareSourceModuleStreams."
      );
    const operationName = "searchSoftwareSourceModuleStreams";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": searchSoftwareSourceModuleStreamsRequest.limit,
      "page": searchSoftwareSourceModuleStreamsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchSoftwareSourceModuleStreamsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSoftwareSourceModuleStreamsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSourceModuleStreams/actions/search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSoftwareSourceModuleStreamsRequest.searchSoftwareSourceModuleStreamsDetails,
        "SearchSoftwareSourceModuleStreamsDetails",
        model.SearchSoftwareSourceModuleStreamsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSoftwareSourceModuleStreamsResponse>{},
        body: await response.json(),
        bodyKey: "moduleStreamCollection",
        bodyModel: model.ModuleStreamCollection,
        type: "model.ModuleStreamCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists modules from a list of software sources. Filter the list against a variety of
   * criteria including the module name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchSoftwareSourceModulesRequest
   * @return SearchSoftwareSourceModulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SearchSoftwareSourceModules.ts.html |here} to see how to use SearchSoftwareSourceModules API.
   */
  public async searchSoftwareSourceModules(
    searchSoftwareSourceModulesRequest: requests.SearchSoftwareSourceModulesRequest
  ): Promise<responses.SearchSoftwareSourceModulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#searchSoftwareSourceModules.");
    const operationName = "searchSoftwareSourceModules";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": searchSoftwareSourceModulesRequest.limit,
      "page": searchSoftwareSourceModulesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchSoftwareSourceModulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSoftwareSourceModulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSourceModules/actions/search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSoftwareSourceModulesRequest.searchSoftwareSourceModulesDetails,
        "SearchSoftwareSourceModulesDetails",
        model.SearchSoftwareSourceModulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSoftwareSourceModulesResponse>{},
        body: await response.json(),
        bodyKey: "moduleCollection",
        bodyModel: model.ModuleCollection,
        type: "model.ModuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Searches the package groups from the specified list of software sources. Filter the list against a variety of criteria
   * including but not limited to its name, and group type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchSoftwareSourcePackageGroupsRequest
   * @return SearchSoftwareSourcePackageGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/SearchSoftwareSourcePackageGroups.ts.html |here} to see how to use SearchSoftwareSourcePackageGroups API.
   */
  public async searchSoftwareSourcePackageGroups(
    searchSoftwareSourcePackageGroupsRequest: requests.SearchSoftwareSourcePackageGroupsRequest
  ): Promise<responses.SearchSoftwareSourcePackageGroupsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SoftwareSourceClient#searchSoftwareSourcePackageGroups."
      );
    const operationName = "searchSoftwareSourcePackageGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "limit": searchSoftwareSourcePackageGroupsRequest.limit,
      "page": searchSoftwareSourcePackageGroupsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchSoftwareSourcePackageGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSoftwareSourcePackageGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSourcePackageGroups/actions/search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSoftwareSourcePackageGroupsRequest.searchSoftwareSourcePackageGroupsDetails,
        "SearchSoftwareSourcePackageGroupsDetails",
        model.SearchSoftwareSourcePackageGroupsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSoftwareSourcePackageGroupsResponse>{},
        body: await response.json(),
        bodyKey: "packageGroupCollection",
        bodyModel: model.PackageGroupCollection,
        type: "model.PackageGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified software source's details, including but not limited to name, description, and tags.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSoftwareSourceRequest
   * @return UpdateSoftwareSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/UpdateSoftwareSource.ts.html |here} to see how to use UpdateSoftwareSource API.
   */
  public async updateSoftwareSource(
    updateSoftwareSourceRequest: requests.UpdateSoftwareSourceRequest
  ): Promise<responses.UpdateSoftwareSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SoftwareSourceClient#updateSoftwareSource.");
    const operationName = "updateSoftwareSource";
    const apiReferenceLink = "";
    const pathParams = {
      "{softwareSourceId}": updateSoftwareSourceRequest.softwareSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateSoftwareSourceRequest.opcRequestId,
      "if-match": updateSoftwareSourceRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSoftwareSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/softwareSources/{softwareSourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSoftwareSourceRequest.updateSoftwareSourceDetails,
        "UpdateSoftwareSourceDetails",
        model.UpdateSoftwareSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSoftwareSourceResponse>{},
        body: await response.json(),
        bodyKey: "softwareSource",
        bodyModel: model.SoftwareSource,
        type: "model.SoftwareSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum WorkRequestApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class WorkRequestClient {
  protected static serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WorkRequestWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "WorkRequest";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("osmanagementhub");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220901";
    if (this.logger) this.logger.info(`WorkRequestClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        WorkRequestClient.serviceEndpointTemplate,
        this._region,
        WorkRequestClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        WorkRequestClient.serviceEndpointTemplate,
        this._regionId,
        WorkRequestClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WorkRequestClient.serviceEndpointTemplate,
      region,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WorkRequestClient.serviceEndpointTemplate,
      regionId,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new WorkRequestWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter {
    this._waiters = new WorkRequestWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WorkRequestWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets information about the specified work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the errors for the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WorkRequestClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the logs for the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work requests that match the specified compartment or work request OCID. Filter the list against
   * a variety of criteria including but not limited to its name, status, and operation type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagementhub/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy,
      "initiatorId": listWorkRequestsRequest.initiatorId,
      "parentId": listWorkRequestsRequest.parentId,
      "parentResourcesNotEqualTo": listWorkRequestsRequest.parentResourcesNotEqualTo,
      "operationType": listWorkRequestsRequest.operationType,
      "displayNameContains": listWorkRequestsRequest.displayNameContains,
      "retryOfId": listWorkRequestsRequest.retryOfId,
      "timeCreatedLessThan": listWorkRequestsRequest.timeCreatedLessThan,
      "timeCreatedGreaterThanOrEqualTo": listWorkRequestsRequest.timeCreatedGreaterThanOrEqualTo,
      "isManagedByAutonomousLinux": listWorkRequestsRequest.isManagedByAutonomousLinux
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
