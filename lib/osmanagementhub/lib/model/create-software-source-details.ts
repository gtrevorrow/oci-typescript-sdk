/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for instances in OCI, your private data center, or 3rd-party clouds. 
For more information, see [Overview of OS Management Hub](https://docs.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Provides the information used to create a software source.
 */
export interface CreateSoftwareSourceDetails {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
   */
  "compartmentId": string;
  /**
   * User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
   */
  "displayName"?: string;
  /**
   * User-specified description for the software source. Avoid entering confidential information.
   */
  "description"?: string;
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
   * For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Department\": \"Finance\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };

  "softwareSourceType": string;
}

export namespace CreateSoftwareSourceDetails {
  export function getJsonObj(obj: CreateSoftwareSourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "softwareSourceType" in obj && obj.softwareSourceType) {
      switch (obj.softwareSourceType) {
        case "CUSTOM":
          return model.CreateCustomSoftwareSourceDetails.getJsonObj(
            <model.CreateCustomSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "VENDOR":
          return model.CreateVendorSoftwareSourceDetails.getJsonObj(
            <model.CreateVendorSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "PRIVATE":
          return model.CreatePrivateSoftwareSourceDetails.getJsonObj(
            <model.CreatePrivateSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "VERSIONED":
          return model.CreateVersionedCustomSoftwareSourceDetails.getJsonObj(
            <model.CreateVersionedCustomSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "THIRD_PARTY":
          return model.CreateThirdPartySoftwareSourceDetails.getJsonObj(
            <model.CreateThirdPartySoftwareSourceDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.softwareSourceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateSoftwareSourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "softwareSourceType" in obj && obj.softwareSourceType) {
      switch (obj.softwareSourceType) {
        case "CUSTOM":
          return model.CreateCustomSoftwareSourceDetails.getDeserializedJsonObj(
            <model.CreateCustomSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "VENDOR":
          return model.CreateVendorSoftwareSourceDetails.getDeserializedJsonObj(
            <model.CreateVendorSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "PRIVATE":
          return model.CreatePrivateSoftwareSourceDetails.getDeserializedJsonObj(
            <model.CreatePrivateSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "VERSIONED":
          return model.CreateVersionedCustomSoftwareSourceDetails.getDeserializedJsonObj(
            <model.CreateVersionedCustomSoftwareSourceDetails>(<object>jsonObj),
            true
          );
        case "THIRD_PARTY":
          return model.CreateThirdPartySoftwareSourceDetails.getDeserializedJsonObj(
            <model.CreateThirdPartySoftwareSourceDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.softwareSourceType}`);
      }
    }
    return jsonObj;
  }
}
