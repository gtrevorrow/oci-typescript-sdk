/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for instances in OCI, your private data center, or 3rd-party clouds. 
For more information, see [Overview of OS Management Hub](https://docs.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An object that defines a software package.
 */
export interface SoftwarePackage {
  /**
   * Package name.
   */
  "displayName": string;
  /**
   * Unique identifier for the package. Note that this is not an OCID.
   */
  "name": string;
  /**
   * Type of the package.
   */
  "type": string;
  /**
   * Version of the package.
   */
  "version": string;
  /**
   * The architecture for which this software was built
   */
  "architecture"?: model.SoftwarePackageArchitecture;
  /**
   * The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
   */
  "lastModifiedDate"?: string;
  /**
   * Checksum of the package.
   */
  "checksum"?: string;
  /**
   * Type of the checksum.
   */
  "checksumType"?: string;
  /**
   * Description of the package.
   */
  "description"?: string;
  /**
   * Size of the package in bytes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "sizeInBytes"?: number;
  /**
   * List of dependencies for the software package.
   */
  "dependencies"?: Array<model.SoftwarePackageDependency>;
  /**
   * List of files for the software package.
   */
  "files"?: Array<model.SoftwarePackageFile>;
  /**
   * List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
   */
  "softwareSources"?: Array<model.SoftwareSourceDetails>;
  /**
   * Indicates whether this package is the latest version.
   */
  "isLatest"?: boolean;
  /**
   * The OS families the package belongs to.
   */
  "osFamilies"?: Array<model.OsFamily>;
}

export namespace SoftwarePackage {
  export function getJsonObj(obj: SoftwarePackage): object {
    const jsonObj = {
      ...obj,
      ...{
        "dependencies": obj.dependencies
          ? obj.dependencies.map(item => {
              return model.SoftwarePackageDependency.getJsonObj(item);
            })
          : undefined,
        "files": obj.files
          ? obj.files.map(item => {
              return model.SoftwarePackageFile.getJsonObj(item);
            })
          : undefined,
        "softwareSources": obj.softwareSources
          ? obj.softwareSources.map(item => {
              return model.SoftwareSourceDetails.getJsonObj(item);
            })
          : undefined,

        "osFamilies": obj.osFamilies
          ? obj.osFamilies.map(item => {
              return model.OsFamily.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SoftwarePackage): object {
    const jsonObj = {
      ...obj,
      ...{
        "dependencies": obj.dependencies
          ? obj.dependencies.map(item => {
              return model.SoftwarePackageDependency.getDeserializedJsonObj(item);
            })
          : undefined,
        "files": obj.files
          ? obj.files.map(item => {
              return model.SoftwarePackageFile.getDeserializedJsonObj(item);
            })
          : undefined,
        "softwareSources": obj.softwareSources
          ? obj.softwareSources.map(item => {
              return model.SoftwareSourceDetails.getDeserializedJsonObj(item);
            })
          : undefined,

        "osFamilies": obj.osFamilies
          ? obj.osFamilies.map(item => {
              return model.OsFamily.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
