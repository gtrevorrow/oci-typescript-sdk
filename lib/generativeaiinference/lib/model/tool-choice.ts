/**
 * Generative AI Service Inference API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings. 

Use the Generative AI service inference API to access your custom model endpoints, or to try the out-of-the-box models to [chat](#/EN/generative-ai-inference/latest/ChatResult/Chat), [generate text](#/EN/generative-ai-inference/latest/GenerateTextResult/GenerateText), [summarize](#/EN/generative-ai-inference/latest/SummarizeTextResult/SummarizeText), and [create text embeddings](#/EN/generative-ai-inference/latest/EmbedTextResult/EmbedText).

To use a Generative AI custom model for inference, you must first create an endpoint for that model. Use the [Generative AI service management API](#/EN/generative-ai/latest/) to [create a custom model](#/EN/generative-ai/latest/Model/) by fine-tuning an out-of-the-box model, or a previous version of a custom model, using your own data. Fine-tune the custom model on a [fine-tuning dedicated AI cluster](#/EN/generative-ai/latest/DedicatedAiCluster/). Then, create a [hosting dedicated AI cluster](#/EN/generative-ai/latest/DedicatedAiCluster/) with an [endpoint](#/en/generative-ai/latest/Endpoint/) to host your custom model. For resource management in the Generative AI service, use the [Generative AI service management API](#/EN/generative-ai/latest/).

To learn more about the service, see the [Generative AI documentation](/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The tool choice for a tool.
 */
export interface ToolChoice {
  "type": string;
}

export namespace ToolChoice {
  export function getJsonObj(obj: ToolChoice): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "FUNCTION":
          return model.ToolChoiceFunction.getJsonObj(
            <model.ToolChoiceFunction>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.ToolChoiceNone.getJsonObj(<model.ToolChoiceNone>(<object>jsonObj), true);
        case "AUTO":
          return model.ToolChoiceAuto.getJsonObj(<model.ToolChoiceAuto>(<object>jsonObj), true);
        case "REQUIRED":
          return model.ToolChoiceRequired.getJsonObj(
            <model.ToolChoiceRequired>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ToolChoice): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "FUNCTION":
          return model.ToolChoiceFunction.getDeserializedJsonObj(
            <model.ToolChoiceFunction>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.ToolChoiceNone.getDeserializedJsonObj(
            <model.ToolChoiceNone>(<object>jsonObj),
            true
          );
        case "AUTO":
          return model.ToolChoiceAuto.getDeserializedJsonObj(
            <model.ToolChoiceAuto>(<object>jsonObj),
            true
          );
        case "REQUIRED":
          return model.ToolChoiceRequired.getDeserializedJsonObj(
            <model.ToolChoiceRequired>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
