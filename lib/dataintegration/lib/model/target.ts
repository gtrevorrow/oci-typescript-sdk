/**
 * Data Integration API
 * Use the Data Integration API to organize your data integration projects, create data flows, pipelines and tasks, and then publish, schedule, and run tasks that extract, transform, and load data. For more information, see [Data Integration](https://docs.oracle.com/iaas/data-integration/home.htm).
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information about the target operator. The target operator lets you specify the data entity to store the transformed data.
 */
export interface Target extends model.Operator {
  "entity"?:
    | model.DataEntityFromTable
    | model.DataEntityFromDataStore
    | model.DataEntityFromObject
    | model.DataEntityFromView
    | model.DataEntityFromSql
    | model.DataEntityFromFile
    | model.DerivedEntity;
  /**
   * Specifies the read access.
   */
  "isReadAccess"?: boolean;
  /**
   * Specifies the copy fields.
   */
  "isCopyFields"?: boolean;
  /**
   * Specifies if this uses a predefined shape.
   */
  "isPredefinedShape"?: boolean;
  /**
   * Specifies if entity name is the same as source.
   */
  "isUseSameSourceName"?: boolean;
  /**
   * Prefix for the entity Name.
   */
  "targetEntityNamePrefix"?: string;
  /**
   * Suffix for the entity Name.
   */
  "targetEntityNameSuffix"?: string;
  /**
   * Specifies the data property.
   */
  "dataProperty"?: Target.DataProperty;
  "schemaDriftConfig"?: model.SchemaDriftConfig;
  "fixedDataShape"?: model.Shape;
  "writeOperationConfig"?: model.WriteOperationConfig;
  /**
   * A numeric loading order number for the target. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "loadOrder"?: number;

  "modelType": string;
}

export namespace Target {
  export enum DataProperty {
    Truncate = "TRUNCATE",
    Merge = "MERGE",
    Backup = "BACKUP",
    Overwrite = "OVERWRITE",
    Append = "APPEND",
    Ignore = "IGNORE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Target, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Operator.getJsonObj(obj) as Target)),
      ...{
        "entity": obj.entity ? model.DataEntity.getJsonObj(obj.entity) : undefined,

        "schemaDriftConfig": obj.schemaDriftConfig
          ? model.SchemaDriftConfig.getJsonObj(obj.schemaDriftConfig)
          : undefined,
        "fixedDataShape": obj.fixedDataShape
          ? model.Shape.getJsonObj(obj.fixedDataShape)
          : undefined,
        "writeOperationConfig": obj.writeOperationConfig
          ? model.WriteOperationConfig.getJsonObj(obj.writeOperationConfig)
          : undefined
      }
    };

    return jsonObj;
  }
  export const modelType = "TARGET_OPERATOR";
  export function getDeserializedJsonObj(obj: Target, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Operator.getDeserializedJsonObj(obj) as Target)),
      ...{
        "entity": obj.entity ? model.DataEntity.getDeserializedJsonObj(obj.entity) : undefined,

        "schemaDriftConfig": obj.schemaDriftConfig
          ? model.SchemaDriftConfig.getDeserializedJsonObj(obj.schemaDriftConfig)
          : undefined,
        "fixedDataShape": obj.fixedDataShape
          ? model.Shape.getDeserializedJsonObj(obj.fixedDataShape)
          : undefined,
        "writeOperationConfig": obj.writeOperationConfig
          ? model.WriteOperationConfig.getDeserializedJsonObj(obj.writeOperationConfig)
          : undefined
      }
    };

    return jsonObj;
  }
}
