/**
 * Data Integration API
 * Use the Data Integration API to organize your data integration projects, create data flows, pipelines and tasks, and then publish, schedule, and run tasks that extract, transform, and load data. For more information, see [Data Integration](https://docs.oracle.com/iaas/data-integration/home.htm).
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataIntegrationWaiter } from "./dataintegration-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataIntegrationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DataIntegrationClient {
  protected static serviceEndpointTemplate =
    "https://dataintegration.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataIntegrationWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DataIntegration";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("dataintegration")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("dataintegration");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200430";
    if (this.logger) this.logger.info(`DataIntegrationClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DataIntegrationClient.serviceEndpointTemplate,
        this._region,
        DataIntegrationClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DataIntegrationClient.serviceEndpointTemplate,
        this._regionId,
        DataIntegrationClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataIntegrationClient.serviceEndpointTemplate,
      region,
      DataIntegrationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataIntegrationClient.serviceEndpointTemplate,
      regionId,
      DataIntegrationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DataIntegrationWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataIntegrationWaiter {
    this._waiters = new DataIntegrationWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataIntegrationWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a workspace to a specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeCompartmentRequest
   * @return ChangeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ChangeCompartment.ts.html |here} to see how to use ChangeCompartment API.
   */
  public async changeCompartment(
    changeCompartmentRequest: requests.ChangeCompartmentRequest
  ): Promise<responses.ChangeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#changeCompartment.");
    const operationName = "changeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/ChangeCompartment";
    const pathParams = {
      "{workspaceId}": changeCompartmentRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeCompartmentRequest.ifMatch,
      "opc-request-id": changeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCompartmentRequest.changeCompartmentDetails,
        "ChangeCompartmentDetails",
        model.ChangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a DIS Application to a specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDisApplicationCompartmentRequest
   * @return ChangeDisApplicationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ChangeDisApplicationCompartment.ts.html |here} to see how to use ChangeDisApplicationCompartment API.
   */
  public async changeDisApplicationCompartment(
    changeDisApplicationCompartmentRequest: requests.ChangeDisApplicationCompartmentRequest
  ): Promise<responses.ChangeDisApplicationCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#changeDisApplicationCompartment.");
    const operationName = "changeDisApplicationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/ChangeDisApplicationCompartment";
    const pathParams = {
      "{workspaceId}": changeDisApplicationCompartmentRequest.workspaceId,
      "{disApplicationId}": changeDisApplicationCompartmentRequest.disApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDisApplicationCompartmentRequest.ifMatch,
      "opc-request-id": changeDisApplicationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDisApplicationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDisApplicationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/disApplications/{disApplicationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDisApplicationCompartmentRequest.changeDisApplicationCompartmentDetails,
        "ChangeDisApplicationCompartmentDetails",
        model.ChangeDisApplicationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDisApplicationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an application.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateApplicationRequest
   * @return CreateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateApplication.ts.html |here} to see how to use CreateApplication API.
   */
  public async createApplication(
    createApplicationRequest: requests.CreateApplicationRequest
  ): Promise<responses.CreateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createApplication.");
    const operationName = "createApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/CreateApplication";
    const pathParams = {
      "{workspaceId}": createApplicationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createApplicationRequest.opcRequestId,
      "opc-retry-token": createApplicationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplicationRequest.createApplicationDetails,
        "CreateApplicationDetails",
        model.CreateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates detailed description for an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateApplicationDetailedDescriptionRequest
   * @return CreateApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateApplicationDetailedDescription.ts.html |here} to see how to use CreateApplicationDetailedDescription API.
   */
  public async createApplicationDetailedDescription(
    createApplicationDetailedDescriptionRequest: requests.CreateApplicationDetailedDescriptionRequest
  ): Promise<responses.CreateApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#createApplicationDetailedDescription."
      );
    const operationName = "createApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/CreateApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": createApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": createApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createApplicationDetailedDescriptionRequest.opcRequestId,
      "opc-retry-token": createApplicationDetailedDescriptionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/detailedDescription",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplicationDetailedDescriptionRequest.createApplicationDetailedDescriptionDetails,
        "CreateDetailedDescriptionDetails",
        model.CreateDetailedDescriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a connection under an existing data asset.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateConnectionRequest
   * @return CreateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateConnection.ts.html |here} to see how to use CreateConnection API.
   */
  public async createConnection(
    createConnectionRequest: requests.CreateConnectionRequest
  ): Promise<responses.CreateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createConnection.");
    const operationName = "createConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Connection/CreateConnection";
    const pathParams = {
      "{workspaceId}": createConnectionRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConnectionRequest.opcRequestId,
      "opc-retry-token": createConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionRequest.createConnectionDetails,
        "CreateConnectionDetails",
        model.CreateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a connection validation.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateConnectionValidationRequest
   * @return CreateConnectionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateConnectionValidation.ts.html |here} to see how to use CreateConnectionValidation API.
   */
  public async createConnectionValidation(
    createConnectionValidationRequest: requests.CreateConnectionValidationRequest
  ): Promise<responses.CreateConnectionValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createConnectionValidation.");
    const operationName = "createConnectionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ConnectionValidation/CreateConnectionValidation";
    const pathParams = {
      "{workspaceId}": createConnectionValidationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConnectionValidationRequest.opcRequestId,
      "opc-retry-token": createConnectionValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connectionValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionValidationRequest.createConnectionValidationDetails,
        "CreateConnectionValidationDetails",
        model.CreateConnectionValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionValidationResponse>{},
        body: await response.json(),
        bodyKey: "connectionValidation",
        bodyModel: model.ConnectionValidation,
        type: "model.ConnectionValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Copy Metadata Object.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateCopyObjectRequestRequest
   * @return CreateCopyObjectRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateCopyObjectRequest.ts.html |here} to see how to use CreateCopyObjectRequest API.
   */
  public async createCopyObjectRequest(
    createCopyObjectRequestRequest: requests.CreateCopyObjectRequestRequest
  ): Promise<responses.CreateCopyObjectRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createCopyObjectRequest.");
    const operationName = "createCopyObjectRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workspaceId}": createCopyObjectRequestRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createCopyObjectRequestRequest.opcRequestId,
      "opc-retry-token": createCopyObjectRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCopyObjectRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/copyObjectRequests",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCopyObjectRequestRequest.createCopyObjectRequestDetails,
        "CreateCopyObjectRequestDetails",
        model.CreateCopyObjectRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCopyObjectRequestResponse>{},
        body: await response.json(),
        bodyKey: "copyObjectRequest",
        bodyModel: model.CopyObjectRequest,
        type: "model.CopyObjectRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a data asset with default connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDataAssetRequest
   * @return CreateDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateDataAsset.ts.html |here} to see how to use CreateDataAsset API.
   */
  public async createDataAsset(
    createDataAssetRequest: requests.CreateDataAssetRequest
  ): Promise<responses.CreateDataAssetResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createDataAsset.");
    const operationName = "createDataAsset";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataAsset/CreateDataAsset";
    const pathParams = {
      "{workspaceId}": createDataAssetRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDataAssetRequest.opcRequestId,
      "opc-retry-token": createDataAssetRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataAssets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataAssetRequest.createDataAssetDetails,
        "CreateDataAssetDetails",
        model.CreateDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new data flow in a project or folder ready for performing data integrations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDataFlowRequest
   * @return CreateDataFlowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateDataFlow.ts.html |here} to see how to use CreateDataFlow API.
   */
  public async createDataFlow(
    createDataFlowRequest: requests.CreateDataFlowRequest
  ): Promise<responses.CreateDataFlowResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createDataFlow.");
    const operationName = "createDataFlow";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlow/CreateDataFlow";
    const pathParams = {
      "{workspaceId}": createDataFlowRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDataFlowRequest.opcRetryToken,
      "opc-request-id": createDataFlowRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataFlowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlows",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataFlowRequest.createDataFlowDetails,
        "CreateDataFlowDetails",
        model.CreateDataFlowDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataFlowResponse>{},
        body: await response.json(),
        bodyKey: "dataFlow",
        bodyModel: model.DataFlow,
        type: "model.DataFlow",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts the data flow definition in the request payload and creates a data flow validation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDataFlowValidationRequest
   * @return CreateDataFlowValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateDataFlowValidation.ts.html |here} to see how to use CreateDataFlowValidation API.
   */
  public async createDataFlowValidation(
    createDataFlowValidationRequest: requests.CreateDataFlowValidationRequest
  ): Promise<responses.CreateDataFlowValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createDataFlowValidation.");
    const operationName = "createDataFlowValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlowValidation/CreateDataFlowValidation";
    const pathParams = {
      "{workspaceId}": createDataFlowValidationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDataFlowValidationRequest.opcRequestId,
      "opc-retry-token": createDataFlowValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataFlowValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlowValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataFlowValidationRequest.createDataFlowValidationDetails,
        "CreateDataFlowValidationDetails",
        model.CreateDataFlowValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataFlowValidationResponse>{},
        body: await response.json(),
        bodyKey: "dataFlowValidation",
        bodyModel: model.DataFlowValidation,
        type: "model.DataFlowValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a DIS Application.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDisApplicationRequest
   * @return CreateDisApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateDisApplication.ts.html |here} to see how to use CreateDisApplication API.
   */
  public async createDisApplication(
    createDisApplicationRequest: requests.CreateDisApplicationRequest
  ): Promise<responses.CreateDisApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createDisApplication.");
    const operationName = "createDisApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/CreateDisApplication";
    const pathParams = {
      "{workspaceId}": createDisApplicationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDisApplicationRequest.opcRequestId,
      "opc-retry-token": createDisApplicationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDisApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDisApplicationRequest.createDisApplicationDetails,
        "CreateDisApplicationDetails",
        model.CreateDisApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDisApplicationResponse>{},
        body: await response.json(),
        bodyKey: "disApplication",
        bodyModel: model.DisApplication,
        type: "model.DisApplication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates detailed description for an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDisApplicationDetailedDescriptionRequest
   * @return CreateDisApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateDisApplicationDetailedDescription.ts.html |here} to see how to use CreateDisApplicationDetailedDescription API.
   */
  public async createDisApplicationDetailedDescription(
    createDisApplicationDetailedDescriptionRequest: requests.CreateDisApplicationDetailedDescriptionRequest
  ): Promise<responses.CreateDisApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#createDisApplicationDetailedDescription."
      );
    const operationName = "createDisApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/CreateDisApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": createDisApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": createDisApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDisApplicationDetailedDescriptionRequest.opcRequestId,
      "opc-retry-token": createDisApplicationDetailedDescriptionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDisApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{applicationKey}/detailedDescription",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDisApplicationDetailedDescriptionRequest.createDisApplicationDetailedDescriptionDetails,
        "CreateDetailedDescriptionDetails",
        model.CreateDetailedDescriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDisApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates the data entity shape using the shape from the data asset.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateEntityShapeRequest
   * @return CreateEntityShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateEntityShape.ts.html |here} to see how to use CreateEntityShape API.
   */
  public async createEntityShape(
    createEntityShapeRequest: requests.CreateEntityShapeRequest
  ): Promise<responses.CreateEntityShapeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createEntityShape.");
    const operationName = "createEntityShape";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataEntity/CreateEntityShape";
    const pathParams = {
      "{workspaceId}": createEntityShapeRequest.workspaceId,
      "{connectionKey}": createEntityShapeRequest.connectionKey,
      "{schemaResourceName}": createEntityShapeRequest.schemaResourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEntityShapeRequest.opcRequestId,
      "opc-retry-token": createEntityShapeRequest.opcRetryToken,
      "if-match": createEntityShapeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEntityShapeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/connections/{connectionKey}/schemas/{schemaResourceName}/entityShapes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEntityShapeRequest.createEntityShapeDetails,
        "CreateEntityShapeDetails",
        model.CreateEntityShapeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEntityShapeResponse>{},
        body: await response.json(),
        bodyKey: "entityShape",
        bodyModel: model.EntityShape,
        type: "model.EntityShape",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Export Metadata Object
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateExportRequestRequest
   * @return CreateExportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateExportRequest.ts.html |here} to see how to use CreateExportRequest API.
   */
  public async createExportRequest(
    createExportRequestRequest: requests.CreateExportRequestRequest
  ): Promise<responses.CreateExportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createExportRequest.");
    const operationName = "createExportRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workspaceId}": createExportRequestRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createExportRequestRequest.opcRequestId,
      "opc-retry-token": createExportRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createExportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/exportRequests",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createExportRequestRequest.createExportRequestDetails,
        "CreateExportRequestDetails",
        model.CreateExportRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateExportRequestResponse>{},
        body: await response.json(),
        bodyKey: "exportRequest",
        bodyModel: model.ExportRequest,
        type: "model.ExportRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish a DataFlow in a OCI DataFlow application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateExternalPublicationRequest
   * @return CreateExternalPublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateExternalPublication.ts.html |here} to see how to use CreateExternalPublication API.
   */
  public async createExternalPublication(
    createExternalPublicationRequest: requests.CreateExternalPublicationRequest
  ): Promise<responses.CreateExternalPublicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createExternalPublication.");
    const operationName = "createExternalPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublication/CreateExternalPublication";
    const pathParams = {
      "{workspaceId}": createExternalPublicationRequest.workspaceId,
      "{taskKey}": createExternalPublicationRequest.taskKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createExternalPublicationRequest.opcRequestId,
      "opc-retry-token": createExternalPublicationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createExternalPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createExternalPublicationRequest.createExternalPublicationDetails,
        "CreateExternalPublicationDetails",
        model.CreateExternalPublicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateExternalPublicationResponse>{},
        body: await response.json(),
        bodyKey: "externalPublication",
        bodyModel: model.ExternalPublication,
        type: "model.ExternalPublication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates a specific task.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateExternalPublicationValidationRequest
   * @return CreateExternalPublicationValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateExternalPublicationValidation.ts.html |here} to see how to use CreateExternalPublicationValidation API.
   */
  public async createExternalPublicationValidation(
    createExternalPublicationValidationRequest: requests.CreateExternalPublicationValidationRequest
  ): Promise<responses.CreateExternalPublicationValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#createExternalPublicationValidation."
      );
    const operationName = "createExternalPublicationValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublicationValidation/CreateExternalPublicationValidation";
    const pathParams = {
      "{workspaceId}": createExternalPublicationValidationRequest.workspaceId,
      "{taskKey}": createExternalPublicationValidationRequest.taskKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createExternalPublicationValidationRequest.opcRequestId,
      "opc-retry-token": createExternalPublicationValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createExternalPublicationValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublicationValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createExternalPublicationValidationRequest.createExternalPublicationValidationDetails,
        "CreateExternalPublicationValidationDetails",
        model.CreateExternalPublicationValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateExternalPublicationValidationResponse>{},
        body: await response.json(),
        bodyKey: "externalPublicationValidation",
        bodyModel: model.ExternalPublicationValidation,
        type: "model.ExternalPublicationValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a folder in a project or in another folder, limited to two levels of folders. |
   * Folders are used to organize your design-time resources, such as tasks or data flows.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateFolderRequest
   * @return CreateFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateFolder.ts.html |here} to see how to use CreateFolder API.
   */
  public async createFolder(
    createFolderRequest: requests.CreateFolderRequest
  ): Promise<responses.CreateFolderResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createFolder.");
    const operationName = "createFolder";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Folder/CreateFolder";
    const pathParams = {
      "{workspaceId}": createFolderRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFolderRequest.opcRetryToken,
      "opc-request-id": createFolderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/folders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFolderRequest.createFolderDetails,
        "CreateFolderDetails",
        model.CreateFolderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a function library in a project or in another function library, limited to two levels of function libraries. |
   * FunctionLibraries are used to organize your design-time resources, such as tasks or data flows.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateFunctionLibraryRequest
   * @return CreateFunctionLibraryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateFunctionLibrary.ts.html |here} to see how to use CreateFunctionLibrary API.
   */
  public async createFunctionLibrary(
    createFunctionLibraryRequest: requests.CreateFunctionLibraryRequest
  ): Promise<responses.CreateFunctionLibraryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createFunctionLibrary.");
    const operationName = "createFunctionLibrary";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/FunctionLibrary/CreateFunctionLibrary";
    const pathParams = {
      "{workspaceId}": createFunctionLibraryRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFunctionLibraryRequest.opcRetryToken,
      "opc-request-id": createFunctionLibraryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFunctionLibraryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/functionLibraries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFunctionLibraryRequest.createFunctionLibraryDetails,
        "CreateFunctionLibraryDetails",
        model.CreateFunctionLibraryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFunctionLibraryResponse>{},
        body: await response.json(),
        bodyKey: "functionLibrary",
        bodyModel: model.FunctionLibrary,
        type: "model.FunctionLibrary",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Import Metadata Object
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateImportRequestRequest
   * @return CreateImportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateImportRequest.ts.html |here} to see how to use CreateImportRequest API.
   */
  public async createImportRequest(
    createImportRequestRequest: requests.CreateImportRequestRequest
  ): Promise<responses.CreateImportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createImportRequest.");
    const operationName = "createImportRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workspaceId}": createImportRequestRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createImportRequestRequest.opcRequestId,
      "opc-retry-token": createImportRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createImportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/importRequests",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createImportRequestRequest.createImportRequestDetails,
        "CreateImportRequestDetails",
        model.CreateImportRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateImportRequestResponse>{},
        body: await response.json(),
        bodyKey: "importRequest",
        bodyModel: model.ImportRequest,
        type: "model.ImportRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a patch in an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePatchRequest
   * @return CreatePatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreatePatch.ts.html |here} to see how to use CreatePatch API.
   */
  public async createPatch(
    createPatchRequest: requests.CreatePatchRequest
  ): Promise<responses.CreatePatchResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createPatch.");
    const operationName = "createPatch";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/CreatePatch";
    const pathParams = {
      "{workspaceId}": createPatchRequest.workspaceId,
      "{applicationKey}": createPatchRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPatchRequest.opcRequestId,
      "opc-retry-token": createPatchRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/patches",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPatchRequest.createPatchDetails,
        "CreatePatchDetails",
        model.CreatePatchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePatchResponse>{},
        body: await response.json(),
        bodyKey: "patch",
        bodyModel: model.Patch,
        type: "model.Patch",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new pipeline in a project or folder ready for performing task orchestration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePipelineRequest
   * @return CreatePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreatePipeline.ts.html |here} to see how to use CreatePipeline API.
   */
  public async createPipeline(
    createPipelineRequest: requests.CreatePipelineRequest
  ): Promise<responses.CreatePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createPipeline.");
    const operationName = "createPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Pipeline/CreatePipeline";
    const pathParams = {
      "{workspaceId}": createPipelineRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPipelineRequest.opcRetryToken,
      "opc-request-id": createPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPipelineRequest.createPipelineDetails,
        "CreatePipelineDetails",
        model.CreatePipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePipelineResponse>{},
        body: await response.json(),
        bodyKey: "pipeline",
        bodyModel: model.Pipeline,
        type: "model.Pipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts the data flow definition in the request payload and creates a pipeline validation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePipelineValidationRequest
   * @return CreatePipelineValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreatePipelineValidation.ts.html |here} to see how to use CreatePipelineValidation API.
   */
  public async createPipelineValidation(
    createPipelineValidationRequest: requests.CreatePipelineValidationRequest
  ): Promise<responses.CreatePipelineValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createPipelineValidation.");
    const operationName = "createPipelineValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/PipelineValidation/CreatePipelineValidation";
    const pathParams = {
      "{workspaceId}": createPipelineValidationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPipelineValidationRequest.opcRequestId,
      "opc-retry-token": createPipelineValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPipelineValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelineValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPipelineValidationRequest.createPipelineValidationDetails,
        "CreatePipelineValidationDetails",
        model.CreatePipelineValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePipelineValidationResponse>{},
        body: await response.json(),
        bodyKey: "pipelineValidation",
        bodyModel: model.PipelineValidation,
        type: "model.PipelineValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a project. Projects are organizational constructs within a workspace that you use to organize your design-time resources, such as tasks or data flows. Projects can be organized into folders.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createProject.");
    const operationName = "createProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/CreateProject";
    const pathParams = {
      "{workspaceId}": createProjectRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProjectRequest.opcRetryToken,
      "opc-request-id": createProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint to create a new schedule
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateScheduleRequest
   * @return CreateScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateSchedule.ts.html |here} to see how to use CreateSchedule API.
   */
  public async createSchedule(
    createScheduleRequest: requests.CreateScheduleRequest
  ): Promise<responses.CreateScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createSchedule.");
    const operationName = "createSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schedule/CreateSchedule";
    const pathParams = {
      "{workspaceId}": createScheduleRequest.workspaceId,
      "{applicationKey}": createScheduleRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createScheduleRequest.opcRequestId,
      "opc-retry-token": createScheduleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/schedules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduleRequest.createScheduleDetails,
        "CreateScheduleDetails",
        model.CreateScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new task ready for performing data integrations. There are specialized types of tasks that include data loader and integration tasks.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTaskRequest
   * @return CreateTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateTask.ts.html |here} to see how to use CreateTask API.
   */
  public async createTask(
    createTaskRequest: requests.CreateTaskRequest
  ): Promise<responses.CreateTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createTask.");
    const operationName = "createTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Task/CreateTask";
    const pathParams = {
      "{workspaceId}": createTaskRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTaskRequest.opcRetryToken,
      "opc-request-id": createTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskRequest.createTaskDetails,
        "CreateTaskDetails",
        model.CreateTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskResponse>{},
        body: await response.json(),
        bodyKey: "task",
        bodyModel: model.Task,
        type: "model.Task",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a data integration task run for the specified task.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTaskRunRequest
   * @return CreateTaskRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateTaskRun.ts.html |here} to see how to use CreateTaskRun API.
   */
  public async createTaskRun(
    createTaskRunRequest: requests.CreateTaskRunRequest
  ): Promise<responses.CreateTaskRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createTaskRun.");
    const operationName = "createTaskRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRun/CreateTaskRun";
    const pathParams = {
      "{workspaceId}": createTaskRunRequest.workspaceId,
      "{applicationKey}": createTaskRunRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTaskRunRequest.opcRetryToken,
      "opc-request-id": createTaskRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskRunRequest.createTaskRunDetails,
        "CreateTaskRunDetails",
        model.CreateTaskRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskRunResponse>{},
        body: await response.json(),
        bodyKey: "taskRun",
        bodyModel: model.TaskRun,
        type: "model.TaskRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint to be used create TaskSchedule.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTaskScheduleRequest
   * @return CreateTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateTaskSchedule.ts.html |here} to see how to use CreateTaskSchedule API.
   */
  public async createTaskSchedule(
    createTaskScheduleRequest: requests.CreateTaskScheduleRequest
  ): Promise<responses.CreateTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createTaskSchedule.");
    const operationName = "createTaskSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskSchedule/CreateTaskSchedule";
    const pathParams = {
      "{workspaceId}": createTaskScheduleRequest.workspaceId,
      "{applicationKey}": createTaskScheduleRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTaskScheduleRequest.opcRequestId,
      "opc-retry-token": createTaskScheduleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskSchedules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskScheduleRequest.createTaskScheduleDetails,
        "CreateTaskScheduleDetails",
        model.CreateTaskScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates a specific task.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTaskValidationRequest
   * @return CreateTaskValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateTaskValidation.ts.html |here} to see how to use CreateTaskValidation API.
   */
  public async createTaskValidation(
    createTaskValidationRequest: requests.CreateTaskValidationRequest
  ): Promise<responses.CreateTaskValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createTaskValidation.");
    const operationName = "createTaskValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskValidation/CreateTaskValidation";
    const pathParams = {
      "{workspaceId}": createTaskValidationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTaskValidationRequest.opcRequestId,
      "opc-retry-token": createTaskValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/taskValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskValidationRequest.createTaskValidationDetails,
        "CreateTaskValidationDetails",
        model.CreateTaskValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskValidationResponse>{},
        body: await response.json(),
        bodyKey: "taskValidation",
        bodyModel: model.TaskValidation,
        type: "model.TaskValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new UserDefinedFunction in a function library ready for performing data integrations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUserDefinedFunctionRequest
   * @return CreateUserDefinedFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateUserDefinedFunction.ts.html |here} to see how to use CreateUserDefinedFunction API.
   */
  public async createUserDefinedFunction(
    createUserDefinedFunctionRequest: requests.CreateUserDefinedFunctionRequest
  ): Promise<responses.CreateUserDefinedFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#createUserDefinedFunction.");
    const operationName = "createUserDefinedFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunction/CreateUserDefinedFunction";
    const pathParams = {
      "{workspaceId}": createUserDefinedFunctionRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createUserDefinedFunctionRequest.opcRetryToken,
      "opc-request-id": createUserDefinedFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserDefinedFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserDefinedFunctionRequest.createUserDefinedFunctionDetails,
        "CreateUserDefinedFunctionDetails",
        model.CreateUserDefinedFunctionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserDefinedFunctionResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunction",
        bodyModel: model.UserDefinedFunction,
        type: "model.UserDefinedFunction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts the UserDefinedFunction definition in the request payload and creates a UserDefinedFunction validation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUserDefinedFunctionValidationRequest
   * @return CreateUserDefinedFunctionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateUserDefinedFunctionValidation.ts.html |here} to see how to use CreateUserDefinedFunctionValidation API.
   */
  public async createUserDefinedFunctionValidation(
    createUserDefinedFunctionValidationRequest: requests.CreateUserDefinedFunctionValidationRequest
  ): Promise<responses.CreateUserDefinedFunctionValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#createUserDefinedFunctionValidation."
      );
    const operationName = "createUserDefinedFunctionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunctionValidation/CreateUserDefinedFunctionValidation";
    const pathParams = {
      "{workspaceId}": createUserDefinedFunctionValidationRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createUserDefinedFunctionValidationRequest.opcRequestId,
      "opc-retry-token": createUserDefinedFunctionValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserDefinedFunctionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctionValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserDefinedFunctionValidationRequest.createUserDefinedFunctionValidationDetails,
        "CreateUserDefinedFunctionValidationDetails",
        model.CreateUserDefinedFunctionValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserDefinedFunctionValidationResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunctionValidation",
        bodyModel: model.UserDefinedFunctionValidation,
        type: "model.UserDefinedFunctionValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Integration workspace ready for performing data integration tasks. To retrieve the OCID for the new workspace, use the opc-work-request-id returned by this API and call the {@link #getWorkRequest(GetWorkRequestRequest) getWorkRequest} API.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateWorkspaceRequest
   * @return CreateWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/CreateWorkspace.ts.html |here} to see how to use CreateWorkspace API.
   */
  public async createWorkspace(
    createWorkspaceRequest: requests.CreateWorkspaceRequest
  ): Promise<responses.CreateWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#createWorkspace.");
    const operationName = "createWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/CreateWorkspace";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createWorkspaceRequest.opcRetryToken,
      "opc-request-id": createWorkspaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createWorkspaceRequest.createWorkspaceDetails,
        "CreateWorkspaceDetails",
        model.CreateWorkspaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateWorkspaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes an application using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteApplicationRequest
   * @return DeleteApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteApplication.ts.html |here} to see how to use DeleteApplication API.
   */
  public async deleteApplication(
    deleteApplicationRequest: requests.DeleteApplicationRequest
  ): Promise<responses.DeleteApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteApplication.");
    const operationName = "deleteApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/DeleteApplication";
    const pathParams = {
      "{workspaceId}": deleteApplicationRequest.workspaceId,
      "{applicationKey}": deleteApplicationRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplicationRequest.ifMatch,
      "opc-request-id": deleteApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes detailed description of an Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteApplicationDetailedDescriptionRequest
   * @return DeleteApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteApplicationDetailedDescription.ts.html |here} to see how to use DeleteApplicationDetailedDescription API.
   */
  public async deleteApplicationDetailedDescription(
    deleteApplicationDetailedDescriptionRequest: requests.DeleteApplicationDetailedDescriptionRequest
  ): Promise<responses.DeleteApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#deleteApplicationDetailedDescription."
      );
    const operationName = "deleteApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/DeleteApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": deleteApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": deleteApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplicationDetailedDescriptionRequest.ifMatch,
      "opc-request-id": deleteApplicationDetailedDescriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/detailedDescription",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplicationDetailedDescriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a connection using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteConnectionRequest
   * @return DeleteConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
   */
  public async deleteConnection(
    deleteConnectionRequest: requests.DeleteConnectionRequest
  ): Promise<responses.DeleteConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteConnection.");
    const operationName = "deleteConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Connection/DeleteConnection";
    const pathParams = {
      "{workspaceId}": deleteConnectionRequest.workspaceId,
      "{connectionKey}": deleteConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionRequest.ifMatch,
      "opc-request-id": deleteConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections/{connectionKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a connection validation.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteConnectionValidationRequest
   * @return DeleteConnectionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteConnectionValidation.ts.html |here} to see how to use DeleteConnectionValidation API.
   */
  public async deleteConnectionValidation(
    deleteConnectionValidationRequest: requests.DeleteConnectionValidationRequest
  ): Promise<responses.DeleteConnectionValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteConnectionValidation.");
    const operationName = "deleteConnectionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ConnectionValidation/DeleteConnectionValidation";
    const pathParams = {
      "{workspaceId}": deleteConnectionValidationRequest.workspaceId,
      "{connectionValidationKey}": deleteConnectionValidationRequest.connectionValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionValidationRequest.ifMatch,
      "opc-request-id": deleteConnectionValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connectionValidations/{connectionValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete copy object request using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCopyObjectRequestRequest
   * @return DeleteCopyObjectRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteCopyObjectRequest.ts.html |here} to see how to use DeleteCopyObjectRequest API.
   */
  public async deleteCopyObjectRequest(
    deleteCopyObjectRequestRequest: requests.DeleteCopyObjectRequestRequest
  ): Promise<responses.DeleteCopyObjectRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteCopyObjectRequest.");
    const operationName = "deleteCopyObjectRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/DeleteCopyObjectRequest";
    const pathParams = {
      "{workspaceId}": deleteCopyObjectRequestRequest.workspaceId,
      "{copyObjectRequestKey}": deleteCopyObjectRequestRequest.copyObjectRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteCopyObjectRequestRequest.opcRequestId,
      "if-match": deleteCopyObjectRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCopyObjectRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/copyObjectRequests/{copyObjectRequestKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCopyObjectRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a data asset using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataAssetRequest
   * @return DeleteDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteDataAsset.ts.html |here} to see how to use DeleteDataAsset API.
   */
  public async deleteDataAsset(
    deleteDataAssetRequest: requests.DeleteDataAssetRequest
  ): Promise<responses.DeleteDataAssetResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteDataAsset.");
    const operationName = "deleteDataAsset";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataAsset/DeleteDataAsset";
    const pathParams = {
      "{workspaceId}": deleteDataAssetRequest.workspaceId,
      "{dataAssetKey}": deleteDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataAssetRequest.ifMatch,
      "opc-request-id": deleteDataAssetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataAssets/{dataAssetKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataAssetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a data flow from a project or folder using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataFlowRequest
   * @return DeleteDataFlowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteDataFlow.ts.html |here} to see how to use DeleteDataFlow API.
   */
  public async deleteDataFlow(
    deleteDataFlowRequest: requests.DeleteDataFlowRequest
  ): Promise<responses.DeleteDataFlowResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteDataFlow.");
    const operationName = "deleteDataFlow";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlow/DeleteDataFlow";
    const pathParams = {
      "{workspaceId}": deleteDataFlowRequest.workspaceId,
      "{dataFlowKey}": deleteDataFlowRequest.dataFlowKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataFlowRequest.ifMatch,
      "opc-request-id": deleteDataFlowRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataFlowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlows/{dataFlowKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataFlowResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a data flow validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataFlowValidationRequest
   * @return DeleteDataFlowValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteDataFlowValidation.ts.html |here} to see how to use DeleteDataFlowValidation API.
   */
  public async deleteDataFlowValidation(
    deleteDataFlowValidationRequest: requests.DeleteDataFlowValidationRequest
  ): Promise<responses.DeleteDataFlowValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteDataFlowValidation.");
    const operationName = "deleteDataFlowValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlowValidation/DeleteDataFlowValidation";
    const pathParams = {
      "{workspaceId}": deleteDataFlowValidationRequest.workspaceId,
      "{dataFlowValidationKey}": deleteDataFlowValidationRequest.dataFlowValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataFlowValidationRequest.ifMatch,
      "opc-request-id": deleteDataFlowValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataFlowValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlowValidations/{dataFlowValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataFlowValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a DIS application using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDisApplicationRequest
   * @return DeleteDisApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteDisApplication.ts.html |here} to see how to use DeleteDisApplication API.
   */
  public async deleteDisApplication(
    deleteDisApplicationRequest: requests.DeleteDisApplicationRequest
  ): Promise<responses.DeleteDisApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteDisApplication.");
    const operationName = "deleteDisApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/DeleteDisApplication";
    const pathParams = {
      "{workspaceId}": deleteDisApplicationRequest.workspaceId,
      "{disApplicationId}": deleteDisApplicationRequest.disApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDisApplicationRequest.ifMatch,
      "opc-request-id": deleteDisApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDisApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{disApplicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDisApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes detailed description of an Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDisApplicationDetailedDescriptionRequest
   * @return DeleteDisApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteDisApplicationDetailedDescription.ts.html |here} to see how to use DeleteDisApplicationDetailedDescription API.
   */
  public async deleteDisApplicationDetailedDescription(
    deleteDisApplicationDetailedDescriptionRequest: requests.DeleteDisApplicationDetailedDescriptionRequest
  ): Promise<responses.DeleteDisApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#deleteDisApplicationDetailedDescription."
      );
    const operationName = "deleteDisApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/DeleteDisApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": deleteDisApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": deleteDisApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDisApplicationDetailedDescriptionRequest.ifMatch,
      "opc-request-id": deleteDisApplicationDetailedDescriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDisApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{applicationKey}/detailedDescription",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDisApplicationDetailedDescriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete export object request using the specified identifier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteExportRequestRequest
   * @return DeleteExportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteExportRequest.ts.html |here} to see how to use DeleteExportRequest API.
   */
  public async deleteExportRequest(
    deleteExportRequestRequest: requests.DeleteExportRequestRequest
  ): Promise<responses.DeleteExportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteExportRequest.");
    const operationName = "deleteExportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/DeleteExportRequest";
    const pathParams = {
      "{workspaceId}": deleteExportRequestRequest.workspaceId,
      "{exportRequestKey}": deleteExportRequestRequest.exportRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteExportRequestRequest.opcRequestId,
      "if-match": deleteExportRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteExportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/exportRequests/{exportRequestKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteExportRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a published object using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteExternalPublicationRequest
   * @return DeleteExternalPublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteExternalPublication.ts.html |here} to see how to use DeleteExternalPublication API.
   */
  public async deleteExternalPublication(
    deleteExternalPublicationRequest: requests.DeleteExternalPublicationRequest
  ): Promise<responses.DeleteExternalPublicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteExternalPublication.");
    const operationName = "deleteExternalPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublication/DeleteExternalPublication";
    const pathParams = {
      "{workspaceId}": deleteExternalPublicationRequest.workspaceId,
      "{taskKey}": deleteExternalPublicationRequest.taskKey,
      "{externalPublicationsKey}": deleteExternalPublicationRequest.externalPublicationsKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteExternalPublicationRequest.ifMatch,
      "opc-request-id": deleteExternalPublicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteExternalPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublications/{externalPublicationsKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteExternalPublicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a task validation using the specified identifier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteExternalPublicationValidationRequest
   * @return DeleteExternalPublicationValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteExternalPublicationValidation.ts.html |here} to see how to use DeleteExternalPublicationValidation API.
   */
  public async deleteExternalPublicationValidation(
    deleteExternalPublicationValidationRequest: requests.DeleteExternalPublicationValidationRequest
  ): Promise<responses.DeleteExternalPublicationValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#deleteExternalPublicationValidation."
      );
    const operationName = "deleteExternalPublicationValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublicationValidation/DeleteExternalPublicationValidation";
    const pathParams = {
      "{workspaceId}": deleteExternalPublicationValidationRequest.workspaceId,
      "{taskKey}": deleteExternalPublicationValidationRequest.taskKey,
      "{externalPublicationValidationKey}":
        deleteExternalPublicationValidationRequest.externalPublicationValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteExternalPublicationValidationRequest.ifMatch,
      "opc-request-id": deleteExternalPublicationValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteExternalPublicationValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublicationValidations/{externalPublicationValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteExternalPublicationValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a folder from a project using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFolderRequest
   * @return DeleteFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteFolder.ts.html |here} to see how to use DeleteFolder API.
   */
  public async deleteFolder(
    deleteFolderRequest: requests.DeleteFolderRequest
  ): Promise<responses.DeleteFolderResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteFolder.");
    const operationName = "deleteFolder";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Folder/DeleteFolder";
    const pathParams = {
      "{workspaceId}": deleteFolderRequest.workspaceId,
      "{folderKey}": deleteFolderRequest.folderKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFolderRequest.ifMatch,
      "opc-request-id": deleteFolderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/folders/{folderKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFolderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a Function Library from a project using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFunctionLibraryRequest
   * @return DeleteFunctionLibraryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteFunctionLibrary.ts.html |here} to see how to use DeleteFunctionLibrary API.
   */
  public async deleteFunctionLibrary(
    deleteFunctionLibraryRequest: requests.DeleteFunctionLibraryRequest
  ): Promise<responses.DeleteFunctionLibraryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteFunctionLibrary.");
    const operationName = "deleteFunctionLibrary";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/FunctionLibrary/DeleteFunctionLibrary";
    const pathParams = {
      "{workspaceId}": deleteFunctionLibraryRequest.workspaceId,
      "{functionLibraryKey}": deleteFunctionLibraryRequest.functionLibraryKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFunctionLibraryRequest.ifMatch,
      "opc-request-id": deleteFunctionLibraryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFunctionLibraryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/functionLibraries/{functionLibraryKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFunctionLibraryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete import object request using the specified identifier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteImportRequestRequest
   * @return DeleteImportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteImportRequest.ts.html |here} to see how to use DeleteImportRequest API.
   */
  public async deleteImportRequest(
    deleteImportRequestRequest: requests.DeleteImportRequestRequest
  ): Promise<responses.DeleteImportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteImportRequest.");
    const operationName = "deleteImportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/DeleteImportRequest";
    const pathParams = {
      "{importRequestKey}": deleteImportRequestRequest.importRequestKey,
      "{workspaceId}": deleteImportRequestRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteImportRequestRequest.opcRequestId,
      "if-match": deleteImportRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteImportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/importRequests/{importRequestKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteImportRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a patch using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePatchRequest
   * @return DeletePatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeletePatch.ts.html |here} to see how to use DeletePatch API.
   */
  public async deletePatch(
    deletePatchRequest: requests.DeletePatchRequest
  ): Promise<responses.DeletePatchResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deletePatch.");
    const operationName = "deletePatch";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/DeletePatch";
    const pathParams = {
      "{workspaceId}": deletePatchRequest.workspaceId,
      "{applicationKey}": deletePatchRequest.applicationKey,
      "{patchKey}": deletePatchRequest.patchKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePatchRequest.ifMatch,
      "opc-request-id": deletePatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/patches/{patchKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePatchResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a pipeline from a project or folder using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePipelineRequest
   * @return DeletePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeletePipeline.ts.html |here} to see how to use DeletePipeline API.
   */
  public async deletePipeline(
    deletePipelineRequest: requests.DeletePipelineRequest
  ): Promise<responses.DeletePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deletePipeline.");
    const operationName = "deletePipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Pipeline/DeletePipeline";
    const pathParams = {
      "{workspaceId}": deletePipelineRequest.workspaceId,
      "{pipelineKey}": deletePipelineRequest.pipelineKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePipelineRequest.ifMatch,
      "opc-request-id": deletePipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelines/{pipelineKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a pipeline validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePipelineValidationRequest
   * @return DeletePipelineValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeletePipelineValidation.ts.html |here} to see how to use DeletePipelineValidation API.
   */
  public async deletePipelineValidation(
    deletePipelineValidationRequest: requests.DeletePipelineValidationRequest
  ): Promise<responses.DeletePipelineValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deletePipelineValidation.");
    const operationName = "deletePipelineValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/PipelineValidation/DeletePipelineValidation";
    const pathParams = {
      "{workspaceId}": deletePipelineValidationRequest.workspaceId,
      "{pipelineValidationKey}": deletePipelineValidationRequest.pipelineValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePipelineValidationRequest.ifMatch,
      "opc-request-id": deletePipelineValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePipelineValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelineValidations/{pipelineValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePipelineValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a project from the workspace using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteProject.");
    const operationName = "deleteProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/DeleteProject";
    const pathParams = {
      "{workspaceId}": deleteProjectRequest.workspaceId,
      "{projectKey}": deleteProjectRequest.projectKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/projects/{projectKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint to delete schedule.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteScheduleRequest
   * @return DeleteScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteSchedule.ts.html |here} to see how to use DeleteSchedule API.
   */
  public async deleteSchedule(
    deleteScheduleRequest: requests.DeleteScheduleRequest
  ): Promise<responses.DeleteScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteSchedule.");
    const operationName = "deleteSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schedule/DeleteSchedule";
    const pathParams = {
      "{workspaceId}": deleteScheduleRequest.workspaceId,
      "{applicationKey}": deleteScheduleRequest.applicationKey,
      "{scheduleKey}": deleteScheduleRequest.scheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteScheduleRequest.ifMatch,
      "opc-request-id": deleteScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/schedules/{scheduleKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a task using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTaskRequest
   * @return DeleteTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteTask.ts.html |here} to see how to use DeleteTask API.
   */
  public async deleteTask(
    deleteTaskRequest: requests.DeleteTaskRequest
  ): Promise<responses.DeleteTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteTask.");
    const operationName = "deleteTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Task/DeleteTask";
    const pathParams = {
      "{workspaceId}": deleteTaskRequest.workspaceId,
      "{taskKey}": deleteTaskRequest.taskKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskRequest.ifMatch,
      "opc-request-id": deleteTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a task run using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTaskRunRequest
   * @return DeleteTaskRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteTaskRun.ts.html |here} to see how to use DeleteTaskRun API.
   */
  public async deleteTaskRun(
    deleteTaskRunRequest: requests.DeleteTaskRunRequest
  ): Promise<responses.DeleteTaskRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteTaskRun.");
    const operationName = "deleteTaskRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRun/DeleteTaskRun";
    const pathParams = {
      "{workspaceId}": deleteTaskRunRequest.workspaceId,
      "{applicationKey}": deleteTaskRunRequest.applicationKey,
      "{taskRunKey}": deleteTaskRunRequest.taskRunKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskRunRequest.ifMatch,
      "opc-request-id": deleteTaskRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns/{taskRunKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskRunResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint to delete TaskSchedule.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTaskScheduleRequest
   * @return DeleteTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteTaskSchedule.ts.html |here} to see how to use DeleteTaskSchedule API.
   */
  public async deleteTaskSchedule(
    deleteTaskScheduleRequest: requests.DeleteTaskScheduleRequest
  ): Promise<responses.DeleteTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteTaskSchedule.");
    const operationName = "deleteTaskSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskSchedule/DeleteTaskSchedule";
    const pathParams = {
      "{workspaceId}": deleteTaskScheduleRequest.workspaceId,
      "{applicationKey}": deleteTaskScheduleRequest.applicationKey,
      "{taskScheduleKey}": deleteTaskScheduleRequest.taskScheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskScheduleRequest.ifMatch,
      "opc-request-id": deleteTaskScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/taskSchedules/{taskScheduleKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskScheduleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a task validation using the specified identifier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTaskValidationRequest
   * @return DeleteTaskValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteTaskValidation.ts.html |here} to see how to use DeleteTaskValidation API.
   */
  public async deleteTaskValidation(
    deleteTaskValidationRequest: requests.DeleteTaskValidationRequest
  ): Promise<responses.DeleteTaskValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteTaskValidation.");
    const operationName = "deleteTaskValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskValidation/DeleteTaskValidation";
    const pathParams = {
      "{workspaceId}": deleteTaskValidationRequest.workspaceId,
      "{taskValidationKey}": deleteTaskValidationRequest.taskValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskValidationRequest.ifMatch,
      "opc-request-id": deleteTaskValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/taskValidations/{taskValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a UserDefinedFunction from a function library using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUserDefinedFunctionRequest
   * @return DeleteUserDefinedFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteUserDefinedFunction.ts.html |here} to see how to use DeleteUserDefinedFunction API.
   */
  public async deleteUserDefinedFunction(
    deleteUserDefinedFunctionRequest: requests.DeleteUserDefinedFunctionRequest
  ): Promise<responses.DeleteUserDefinedFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#deleteUserDefinedFunction.");
    const operationName = "deleteUserDefinedFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunction/DeleteUserDefinedFunction";
    const pathParams = {
      "{workspaceId}": deleteUserDefinedFunctionRequest.workspaceId,
      "{userDefinedFunctionKey}": deleteUserDefinedFunctionRequest.userDefinedFunctionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUserDefinedFunctionRequest.ifMatch,
      "opc-request-id": deleteUserDefinedFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserDefinedFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctions/{userDefinedFunctionKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserDefinedFunctionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a UserDefinedFunction validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUserDefinedFunctionValidationRequest
   * @return DeleteUserDefinedFunctionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteUserDefinedFunctionValidation.ts.html |here} to see how to use DeleteUserDefinedFunctionValidation API.
   */
  public async deleteUserDefinedFunctionValidation(
    deleteUserDefinedFunctionValidationRequest: requests.DeleteUserDefinedFunctionValidationRequest
  ): Promise<responses.DeleteUserDefinedFunctionValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#deleteUserDefinedFunctionValidation."
      );
    const operationName = "deleteUserDefinedFunctionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunctionValidation/DeleteUserDefinedFunctionValidation";
    const pathParams = {
      "{workspaceId}": deleteUserDefinedFunctionValidationRequest.workspaceId,
      "{userDefinedFunctionValidationKey}":
        deleteUserDefinedFunctionValidationRequest.userDefinedFunctionValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUserDefinedFunctionValidationRequest.ifMatch,
      "opc-request-id": deleteUserDefinedFunctionValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserDefinedFunctionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/userDefinedFunctionValidations/{userDefinedFunctionValidationKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserDefinedFunctionValidationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Data Integration workspace resource using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteWorkspaceRequest
   * @return DeleteWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/DeleteWorkspace.ts.html |here} to see how to use DeleteWorkspace API.
   */
  public async deleteWorkspace(
    deleteWorkspaceRequest: requests.DeleteWorkspaceRequest
  ): Promise<responses.DeleteWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#deleteWorkspace.");
    const operationName = "deleteWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/DeleteWorkspace";
    const pathParams = {
      "{workspaceId}": deleteWorkspaceRequest.workspaceId
    };

    const queryParams = {
      "quiesceTimeout": deleteWorkspaceRequest.quiesceTimeout,
      "isForceOperation": deleteWorkspaceRequest.isForceOperation
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWorkspaceRequest.ifMatch,
      "opc-request-id": deleteWorkspaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkspaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an application using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetApplicationRequest
   * @return GetApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetApplication.ts.html |here} to see how to use GetApplication API.
   */
  public async getApplication(
    getApplicationRequest: requests.GetApplicationRequest
  ): Promise<responses.GetApplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getApplication.");
    const operationName = "getApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/GetApplication";
    const pathParams = {
      "{workspaceId}": getApplicationRequest.workspaceId,
      "{applicationKey}": getApplicationRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves detailed description of an Application
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetApplicationDetailedDescriptionRequest
   * @return GetApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetApplicationDetailedDescription.ts.html |here} to see how to use GetApplicationDetailedDescription API.
   */
  public async getApplicationDetailedDescription(
    getApplicationDetailedDescriptionRequest: requests.GetApplicationDetailedDescriptionRequest
  ): Promise<responses.GetApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#getApplicationDetailedDescription."
      );
    const operationName = "getApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/GetApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": getApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": getApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplicationDetailedDescriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/detailedDescription",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get composite state for a given aggregator
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCompositeStateRequest
   * @return GetCompositeStateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetCompositeState.ts.html |here} to see how to use GetCompositeState API.
   */
  public async getCompositeState(
    getCompositeStateRequest: requests.GetCompositeStateRequest
  ): Promise<responses.GetCompositeStateResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getCompositeState.");
    const operationName = "getCompositeState";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/CompositeState/GetCompositeState";
    const pathParams = {
      "{workspaceId}": getCompositeStateRequest.workspaceId,
      "{applicationKey}": getCompositeStateRequest.applicationKey
    };

    const queryParams = {
      "aggregatorKey": getCompositeStateRequest.aggregatorKey
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCompositeStateRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCompositeStateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/compositeState",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCompositeStateResponse>{},
        body: await response.json(),
        bodyKey: "compositeState",
        bodyModel: model.CompositeState,
        type: "model.CompositeState",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the connection details using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConnectionRequest
   * @return GetConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetConnection.ts.html |here} to see how to use GetConnection API.
   */
  public async getConnection(
    getConnectionRequest: requests.GetConnectionRequest
  ): Promise<responses.GetConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getConnection.");
    const operationName = "getConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Connection/GetConnection";
    const pathParams = {
      "{workspaceId}": getConnectionRequest.workspaceId,
      "{connectionKey}": getConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections/{connectionKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a connection validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConnectionValidationRequest
   * @return GetConnectionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetConnectionValidation.ts.html |here} to see how to use GetConnectionValidation API.
   */
  public async getConnectionValidation(
    getConnectionValidationRequest: requests.GetConnectionValidationRequest
  ): Promise<responses.GetConnectionValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getConnectionValidation.");
    const operationName = "getConnectionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ConnectionValidation/GetConnectionValidation";
    const pathParams = {
      "{workspaceId}": getConnectionValidationRequest.workspaceId,
      "{connectionValidationKey}": getConnectionValidationRequest.connectionValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connectionValidations/{connectionValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionValidationResponse>{},
        body: await response.json(),
        bodyKey: "connectionValidation",
        bodyModel: model.ConnectionValidation,
        type: "model.ConnectionValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the summary/details of object being copied.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCopyObjectRequestRequest
   * @return GetCopyObjectRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetCopyObjectRequest.ts.html |here} to see how to use GetCopyObjectRequest API.
   */
  public async getCopyObjectRequest(
    getCopyObjectRequestRequest: requests.GetCopyObjectRequestRequest
  ): Promise<responses.GetCopyObjectRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getCopyObjectRequest.");
    const operationName = "getCopyObjectRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/CopyObjectRequest/GetCopyObjectRequest";
    const pathParams = {
      "{workspaceId}": getCopyObjectRequestRequest.workspaceId,
      "{copyObjectRequestKey}": getCopyObjectRequestRequest.copyObjectRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCopyObjectRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCopyObjectRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/copyObjectRequests/{copyObjectRequestKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCopyObjectRequestResponse>{},
        body: await response.json(),
        bodyKey: "copyObjectRequest",
        bodyModel: model.CopyObjectRequest,
        type: "model.CopyObjectRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves statistics on a workspace. It returns an object with an array of property values, such as the number of projects, |
   *        applications, data assets, and so on.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCountStatisticRequest
   * @return GetCountStatisticResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetCountStatistic.ts.html |here} to see how to use GetCountStatistic API.
   */
  public async getCountStatistic(
    getCountStatisticRequest: requests.GetCountStatisticRequest
  ): Promise<responses.GetCountStatisticResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getCountStatistic.");
    const operationName = "getCountStatistic";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/GetCountStatistic";
    const pathParams = {
      "{workspaceId}": getCountStatisticRequest.workspaceId,
      "{countStatisticKey}": getCountStatisticRequest.countStatisticKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCountStatisticRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCountStatisticRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/countStatistics/{countStatisticKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCountStatisticResponse>{},
        body: await response.json(),
        bodyKey: "countStatistic",
        bodyModel: model.CountStatistic,
        type: "model.CountStatistic",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves details of a data asset using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataAssetRequest
   * @return GetDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDataAsset.ts.html |here} to see how to use GetDataAsset API.
   */
  public async getDataAsset(
    getDataAssetRequest: requests.GetDataAssetRequest
  ): Promise<responses.GetDataAssetResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getDataAsset.");
    const operationName = "getDataAsset";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataAsset/GetDataAsset";
    const pathParams = {
      "{workspaceId}": getDataAssetRequest.workspaceId,
      "{dataAssetKey}": getDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataAssetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataAssets/{dataAssetKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the data entity details with the given name from live schema.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataEntityRequest
   * @return GetDataEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDataEntity.ts.html |here} to see how to use GetDataEntity API.
   */
  public async getDataEntity(
    getDataEntityRequest: requests.GetDataEntityRequest
  ): Promise<responses.GetDataEntityResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getDataEntity.");
    const operationName = "getDataEntity";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataEntity/GetDataEntity";
    const pathParams = {
      "{workspaceId}": getDataEntityRequest.workspaceId,
      "{connectionKey}": getDataEntityRequest.connectionKey,
      "{schemaResourceName}": getDataEntityRequest.schemaResourceName,
      "{dataEntityKey}": getDataEntityRequest.dataEntityKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/connections/{connectionKey}/schemas/{schemaResourceName}/dataEntities/{dataEntityKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataEntityResponse>{},
        body: await response.json(),
        bodyKey: "dataEntity",
        bodyModel: model.DataEntity,
        type: "model.DataEntity",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a data flow using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataFlowRequest
   * @return GetDataFlowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDataFlow.ts.html |here} to see how to use GetDataFlow API.
   */
  public async getDataFlow(
    getDataFlowRequest: requests.GetDataFlowRequest
  ): Promise<responses.GetDataFlowResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getDataFlow.");
    const operationName = "getDataFlow";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlow/GetDataFlow";
    const pathParams = {
      "{workspaceId}": getDataFlowRequest.workspaceId,
      "{dataFlowKey}": getDataFlowRequest.dataFlowKey
    };

    const queryParams = {
      "expandReferences": getDataFlowRequest.expandReferences
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataFlowRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataFlowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlows/{dataFlowKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataFlowResponse>{},
        body: await response.json(),
        bodyKey: "dataFlow",
        bodyModel: model.DataFlow,
        type: "model.DataFlow",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a data flow validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataFlowValidationRequest
   * @return GetDataFlowValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDataFlowValidation.ts.html |here} to see how to use GetDataFlowValidation API.
   */
  public async getDataFlowValidation(
    getDataFlowValidationRequest: requests.GetDataFlowValidationRequest
  ): Promise<responses.GetDataFlowValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getDataFlowValidation.");
    const operationName = "getDataFlowValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlowValidation/GetDataFlowValidation";
    const pathParams = {
      "{workspaceId}": getDataFlowValidationRequest.workspaceId,
      "{dataFlowValidationKey}": getDataFlowValidationRequest.dataFlowValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataFlowValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataFlowValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlowValidations/{dataFlowValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataFlowValidationResponse>{},
        body: await response.json(),
        bodyKey: "dataFlowValidation",
        bodyModel: model.DataFlowValidation,
        type: "model.DataFlowValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the details of a dependent object from an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDependentObjectRequest
   * @return GetDependentObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDependentObject.ts.html |here} to see how to use GetDependentObject API.
   */
  public async getDependentObject(
    getDependentObjectRequest: requests.GetDependentObjectRequest
  ): Promise<responses.GetDependentObjectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getDependentObject.");
    const operationName = "getDependentObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/GetDependentObject";
    const pathParams = {
      "{workspaceId}": getDependentObjectRequest.workspaceId,
      "{applicationKey}": getDependentObjectRequest.applicationKey,
      "{dependentObjectKey}": getDependentObjectRequest.dependentObjectKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDependentObjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDependentObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/dependentObjects/{dependentObjectKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDependentObjectResponse>{},
        body: await response.json(),
        bodyKey: "dependentObject",
        bodyModel: model.DependentObject,
        type: "model.DependentObject",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an application using the specified OCID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDisApplicationRequest
   * @return GetDisApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDisApplication.ts.html |here} to see how to use GetDisApplication API.
   */
  public async getDisApplication(
    getDisApplicationRequest: requests.GetDisApplicationRequest
  ): Promise<responses.GetDisApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getDisApplication.");
    const operationName = "getDisApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/GetDisApplication";
    const pathParams = {
      "{workspaceId}": getDisApplicationRequest.workspaceId,
      "{disApplicationId}": getDisApplicationRequest.disApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDisApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDisApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{disApplicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDisApplicationResponse>{},
        body: await response.json(),
        bodyKey: "disApplication",
        bodyModel: model.DisApplication,
        type: "model.DisApplication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves detailed description of an Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDisApplicationDetailedDescriptionRequest
   * @return GetDisApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetDisApplicationDetailedDescription.ts.html |here} to see how to use GetDisApplicationDetailedDescription API.
   */
  public async getDisApplicationDetailedDescription(
    getDisApplicationDetailedDescriptionRequest: requests.GetDisApplicationDetailedDescriptionRequest
  ): Promise<responses.GetDisApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#getDisApplicationDetailedDescription."
      );
    const operationName = "getDisApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/GetDisApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": getDisApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": getDisApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDisApplicationDetailedDescriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDisApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{applicationKey}/detailedDescription",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDisApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the summary/details of object being exported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExportRequestRequest
   * @return GetExportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetExportRequest.ts.html |here} to see how to use GetExportRequest API.
   */
  public async getExportRequest(
    getExportRequestRequest: requests.GetExportRequestRequest
  ): Promise<responses.GetExportRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getExportRequest.");
    const operationName = "getExportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExportRequest/GetExportRequest";
    const pathParams = {
      "{workspaceId}": getExportRequestRequest.workspaceId,
      "{exportRequestKey}": getExportRequestRequest.exportRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExportRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/exportRequests/{exportRequestKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExportRequestResponse>{},
        body: await response.json(),
        bodyKey: "exportRequest",
        bodyModel: model.ExportRequest,
        type: "model.ExportRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a publshed object in an task using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExternalPublicationRequest
   * @return GetExternalPublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetExternalPublication.ts.html |here} to see how to use GetExternalPublication API.
   */
  public async getExternalPublication(
    getExternalPublicationRequest: requests.GetExternalPublicationRequest
  ): Promise<responses.GetExternalPublicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getExternalPublication.");
    const operationName = "getExternalPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublication/GetExternalPublication";
    const pathParams = {
      "{workspaceId}": getExternalPublicationRequest.workspaceId,
      "{taskKey}": getExternalPublicationRequest.taskKey,
      "{externalPublicationsKey}": getExternalPublicationRequest.externalPublicationsKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExternalPublicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExternalPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublications/{externalPublicationsKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExternalPublicationResponse>{},
        body: await response.json(),
        bodyKey: "externalPublication",
        bodyModel: model.ExternalPublication,
        type: "model.ExternalPublication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an external publication validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExternalPublicationValidationRequest
   * @return GetExternalPublicationValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetExternalPublicationValidation.ts.html |here} to see how to use GetExternalPublicationValidation API.
   */
  public async getExternalPublicationValidation(
    getExternalPublicationValidationRequest: requests.GetExternalPublicationValidationRequest
  ): Promise<responses.GetExternalPublicationValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#getExternalPublicationValidation."
      );
    const operationName = "getExternalPublicationValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublicationValidation/GetExternalPublicationValidation";
    const pathParams = {
      "{workspaceId}": getExternalPublicationValidationRequest.workspaceId,
      "{taskKey}": getExternalPublicationValidationRequest.taskKey,
      "{externalPublicationValidationKey}":
        getExternalPublicationValidationRequest.externalPublicationValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExternalPublicationValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExternalPublicationValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublicationValidations/{externalPublicationValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExternalPublicationValidationResponse>{},
        body: await response.json(),
        bodyKey: "externalPublicationValidation",
        bodyModel: model.ExternalPublicationValidation,
        type: "model.ExternalPublicationValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a folder using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFolderRequest
   * @return GetFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetFolder.ts.html |here} to see how to use GetFolder API.
   */
  public async getFolder(
    getFolderRequest: requests.GetFolderRequest
  ): Promise<responses.GetFolderResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getFolder.");
    const operationName = "getFolder";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Folder/GetFolder";
    const pathParams = {
      "{workspaceId}": getFolderRequest.workspaceId,
      "{folderKey}": getFolderRequest.folderKey
    };

    const queryParams = {
      "projection": getFolderRequest.projection
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFolderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/folders/{folderKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Function Library using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFunctionLibraryRequest
   * @return GetFunctionLibraryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetFunctionLibrary.ts.html |here} to see how to use GetFunctionLibrary API.
   */
  public async getFunctionLibrary(
    getFunctionLibraryRequest: requests.GetFunctionLibraryRequest
  ): Promise<responses.GetFunctionLibraryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getFunctionLibrary.");
    const operationName = "getFunctionLibrary";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/FunctionLibrary/GetFunctionLibrary";
    const pathParams = {
      "{workspaceId}": getFunctionLibraryRequest.workspaceId,
      "{functionLibraryKey}": getFunctionLibraryRequest.functionLibraryKey
    };

    const queryParams = {
      "projection": getFunctionLibraryRequest.projection
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFunctionLibraryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFunctionLibraryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/functionLibraries/{functionLibraryKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFunctionLibraryResponse>{},
        body: await response.json(),
        bodyKey: "functionLibrary",
        bodyModel: model.FunctionLibrary,
        type: "model.FunctionLibrary",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the summary/details of object being imported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetImportRequestRequest
   * @return GetImportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetImportRequest.ts.html |here} to see how to use GetImportRequest API.
   */
  public async getImportRequest(
    getImportRequestRequest: requests.GetImportRequestRequest
  ): Promise<responses.GetImportRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getImportRequest.");
    const operationName = "getImportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ImportRequest/GetImportRequest";
    const pathParams = {
      "{workspaceId}": getImportRequestRequest.workspaceId,
      "{importRequestKey}": getImportRequestRequest.importRequestKey
    };

    const queryParams = {
      "limit": getImportRequestRequest.limit,
      "page": getImportRequestRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getImportRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getImportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/importRequests/{importRequestKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImportRequestResponse>{},
        body: await response.json(),
        bodyKey: "importRequest",
        bodyModel: model.ImportRequest,
        type: "model.ImportRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a patch in an application using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPatchRequest
   * @return GetPatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetPatch.ts.html |here} to see how to use GetPatch API.
   */
  public async getPatch(
    getPatchRequest: requests.GetPatchRequest
  ): Promise<responses.GetPatchResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getPatch.");
    const operationName = "getPatch";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/GetPatch";
    const pathParams = {
      "{workspaceId}": getPatchRequest.workspaceId,
      "{applicationKey}": getPatchRequest.applicationKey,
      "{patchKey}": getPatchRequest.patchKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPatchRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/patches/{patchKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPatchResponse>{},
        body: await response.json(),
        bodyKey: "patch",
        bodyModel: model.Patch,
        type: "model.Patch",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a pipeline using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPipelineRequest
   * @return GetPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetPipeline.ts.html |here} to see how to use GetPipeline API.
   */
  public async getPipeline(
    getPipelineRequest: requests.GetPipelineRequest
  ): Promise<responses.GetPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getPipeline.");
    const operationName = "getPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Pipeline/GetPipeline";
    const pathParams = {
      "{workspaceId}": getPipelineRequest.workspaceId,
      "{pipelineKey}": getPipelineRequest.pipelineKey
    };

    const queryParams = {
      "expandReferences": getPipelineRequest.expandReferences
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelines/{pipelineKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPipelineResponse>{},
        body: await response.json(),
        bodyKey: "pipeline",
        bodyModel: model.Pipeline,
        type: "model.Pipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a pipeline validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPipelineValidationRequest
   * @return GetPipelineValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetPipelineValidation.ts.html |here} to see how to use GetPipelineValidation API.
   */
  public async getPipelineValidation(
    getPipelineValidationRequest: requests.GetPipelineValidationRequest
  ): Promise<responses.GetPipelineValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getPipelineValidation.");
    const operationName = "getPipelineValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/PipelineValidation/GetPipelineValidation";
    const pathParams = {
      "{workspaceId}": getPipelineValidationRequest.workspaceId,
      "{pipelineValidationKey}": getPipelineValidationRequest.pipelineValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPipelineValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPipelineValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelineValidations/{pipelineValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPipelineValidationResponse>{},
        body: await response.json(),
        bodyKey: "pipelineValidation",
        bodyModel: model.PipelineValidation,
        type: "model.PipelineValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a project using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getProject.");
    const operationName = "getProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/GetProject";
    const pathParams = {
      "{workspaceId}": getProjectRequest.workspaceId,
      "{projectKey}": getProjectRequest.projectKey
    };

    const queryParams = {
      "projection": getProjectRequest.projection
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/projects/{projectKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the details of a published object from an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPublishedObjectRequest
   * @return GetPublishedObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetPublishedObject.ts.html |here} to see how to use GetPublishedObject API.
   */
  public async getPublishedObject(
    getPublishedObjectRequest: requests.GetPublishedObjectRequest
  ): Promise<responses.GetPublishedObjectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getPublishedObject.");
    const operationName = "getPublishedObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/GetPublishedObject";
    const pathParams = {
      "{workspaceId}": getPublishedObjectRequest.workspaceId,
      "{applicationKey}": getPublishedObjectRequest.applicationKey,
      "{publishedObjectKey}": getPublishedObjectRequest.publishedObjectKey
    };

    const queryParams = {
      "expandReferences": getPublishedObjectRequest.expandReferences
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublishedObjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublishedObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/publishedObjects/{publishedObjectKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublishedObjectResponse>{},
        body: await response.json(),
        bodyKey: "publishedObject",
        bodyModel: model.PublishedObject,
        type: "model.PublishedObject",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a reference in an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetReferenceRequest
   * @return GetReferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetReference.ts.html |here} to see how to use GetReference API.
   */
  public async getReference(
    getReferenceRequest: requests.GetReferenceRequest
  ): Promise<responses.GetReferenceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getReference.");
    const operationName = "getReference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Reference/GetReference";
    const pathParams = {
      "{workspaceId}": getReferenceRequest.workspaceId,
      "{applicationKey}": getReferenceRequest.applicationKey,
      "{referenceKey}": getReferenceRequest.referenceKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReferenceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/references/{referenceKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReferenceResponse>{},
        body: await response.json(),
        bodyKey: "reference",
        bodyModel: model.Reference,
        type: "model.Reference",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a runtime operator using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetRuntimeOperatorRequest
   * @return GetRuntimeOperatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetRuntimeOperator.ts.html |here} to see how to use GetRuntimeOperator API.
   */
  public async getRuntimeOperator(
    getRuntimeOperatorRequest: requests.GetRuntimeOperatorRequest
  ): Promise<responses.GetRuntimeOperatorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getRuntimeOperator.");
    const operationName = "getRuntimeOperator";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/RuntimeOperator/GetRuntimeOperator";
    const pathParams = {
      "{workspaceId}": getRuntimeOperatorRequest.workspaceId,
      "{applicationKey}": getRuntimeOperatorRequest.applicationKey,
      "{runtimePipelineKey}": getRuntimeOperatorRequest.runtimePipelineKey,
      "{runtimeOperatorKey}": getRuntimeOperatorRequest.runtimeOperatorKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRuntimeOperatorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRuntimeOperatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/runtimePipelines/{runtimePipelineKey}/runtimeOperators/{runtimeOperatorKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRuntimeOperatorResponse>{},
        body: await response.json(),
        bodyKey: "runtimeOperator",
        bodyModel: model.RuntimeOperator,
        type: "model.RuntimeOperator",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a runtime pipeline using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetRuntimePipelineRequest
   * @return GetRuntimePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetRuntimePipeline.ts.html |here} to see how to use GetRuntimePipeline API.
   */
  public async getRuntimePipeline(
    getRuntimePipelineRequest: requests.GetRuntimePipelineRequest
  ): Promise<responses.GetRuntimePipelineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getRuntimePipeline.");
    const operationName = "getRuntimePipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/RuntimePipeline/GetRuntimePipeline";
    const pathParams = {
      "{workspaceId}": getRuntimePipelineRequest.workspaceId,
      "{applicationKey}": getRuntimePipelineRequest.applicationKey,
      "{runtimePipelineKey}": getRuntimePipelineRequest.runtimePipelineKey
    };

    const queryParams = {
      "expandReferences": getRuntimePipelineRequest.expandReferences
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRuntimePipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRuntimePipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/runtimePipelines/{runtimePipelineKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRuntimePipelineResponse>{},
        body: await response.json(),
        bodyKey: "runtimePipeline",
        bodyModel: model.RuntimePipeline,
        type: "model.RuntimePipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves schedule by schedule key
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetScheduleRequest
   * @return GetScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetSchedule.ts.html |here} to see how to use GetSchedule API.
   */
  public async getSchedule(
    getScheduleRequest: requests.GetScheduleRequest
  ): Promise<responses.GetScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getSchedule.");
    const operationName = "getSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schedule/GetSchedule";
    const pathParams = {
      "{workspaceId}": getScheduleRequest.workspaceId,
      "{applicationKey}": getScheduleRequest.applicationKey,
      "{scheduleKey}": getScheduleRequest.scheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/schedules/{scheduleKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a schema that can be accessed using the specified connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSchemaRequest
   * @return GetSchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetSchema.ts.html |here} to see how to use GetSchema API.
   */
  public async getSchema(
    getSchemaRequest: requests.GetSchemaRequest
  ): Promise<responses.GetSchemaResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getSchema.");
    const operationName = "getSchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schema/GetSchema";
    const pathParams = {
      "{workspaceId}": getSchemaRequest.workspaceId,
      "{connectionKey}": getSchemaRequest.connectionKey,
      "{schemaResourceName}": getSchemaRequest.schemaResourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSchemaRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections/{connectionKey}/schemas/{schemaResourceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSchemaResponse>{},
        body: await response.json(),
        bodyKey: "schema",
        bodyModel: model.Schema,
        type: "model.Schema",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a task using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTaskRequest
   * @return GetTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetTask.ts.html |here} to see how to use GetTask API.
   */
  public async getTask(
    getTaskRequest: requests.GetTaskRequest
  ): Promise<responses.GetTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getTask.");
    const operationName = "getTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Task/GetTask";
    const pathParams = {
      "{workspaceId}": getTaskRequest.workspaceId,
      "{taskKey}": getTaskRequest.taskKey
    };

    const queryParams = {
      "expandReferences": getTaskRequest.expandReferences
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskResponse>{},
        body: await response.json(),
        bodyKey: "task",
        bodyModel: model.Task,
        type: "model.Task",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a task run using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTaskRunRequest
   * @return GetTaskRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetTaskRun.ts.html |here} to see how to use GetTaskRun API.
   */
  public async getTaskRun(
    getTaskRunRequest: requests.GetTaskRunRequest
  ): Promise<responses.GetTaskRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getTaskRun.");
    const operationName = "getTaskRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRun/GetTaskRun";
    const pathParams = {
      "{workspaceId}": getTaskRunRequest.workspaceId,
      "{applicationKey}": getTaskRunRequest.applicationKey,
      "{taskRunKey}": getTaskRunRequest.taskRunKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns/{taskRunKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskRunResponse>{},
        body: await response.json(),
        bodyKey: "taskRun",
        bodyModel: model.TaskRun,
        type: "model.TaskRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint used to get taskSchedule by its key
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTaskScheduleRequest
   * @return GetTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetTaskSchedule.ts.html |here} to see how to use GetTaskSchedule API.
   */
  public async getTaskSchedule(
    getTaskScheduleRequest: requests.GetTaskScheduleRequest
  ): Promise<responses.GetTaskScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getTaskSchedule.");
    const operationName = "getTaskSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskSchedule/GetTaskSchedule";
    const pathParams = {
      "{workspaceId}": getTaskScheduleRequest.workspaceId,
      "{applicationKey}": getTaskScheduleRequest.applicationKey,
      "{taskScheduleKey}": getTaskScheduleRequest.taskScheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/taskSchedules/{taskScheduleKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a task validation using the specified identifier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTaskValidationRequest
   * @return GetTaskValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetTaskValidation.ts.html |here} to see how to use GetTaskValidation API.
   */
  public async getTaskValidation(
    getTaskValidationRequest: requests.GetTaskValidationRequest
  ): Promise<responses.GetTaskValidationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getTaskValidation.");
    const operationName = "getTaskValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskValidation/GetTaskValidation";
    const pathParams = {
      "{workspaceId}": getTaskValidationRequest.workspaceId,
      "{taskValidationKey}": getTaskValidationRequest.taskValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/taskValidations/{taskValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskValidationResponse>{},
        body: await response.json(),
        bodyKey: "taskValidation",
        bodyModel: model.TaskValidation,
        type: "model.TaskValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get an application template using a key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTemplateRequest
   * @return GetTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetTemplate.ts.html |here} to see how to use GetTemplate API.
   */
  public async getTemplate(
    getTemplateRequest: requests.GetTemplateRequest
  ): Promise<responses.GetTemplateResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getTemplate.");
    const operationName = "getTemplate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Template/GetTemplate";
    const pathParams = {
      "{workspaceId}": getTemplateRequest.workspaceId,
      "{templateId}": getTemplateRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTemplateRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTemplateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/templates/{templateId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTemplateResponse>{},
        body: await response.json(),
        bodyKey: "template",
        bodyModel: model.Template,
        type: "model.Template",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a UserDefinedFunction using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserDefinedFunctionRequest
   * @return GetUserDefinedFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetUserDefinedFunction.ts.html |here} to see how to use GetUserDefinedFunction API.
   */
  public async getUserDefinedFunction(
    getUserDefinedFunctionRequest: requests.GetUserDefinedFunctionRequest
  ): Promise<responses.GetUserDefinedFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#getUserDefinedFunction.");
    const operationName = "getUserDefinedFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunction/GetUserDefinedFunction";
    const pathParams = {
      "{workspaceId}": getUserDefinedFunctionRequest.workspaceId,
      "{userDefinedFunctionKey}": getUserDefinedFunctionRequest.userDefinedFunctionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserDefinedFunctionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserDefinedFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctions/{userDefinedFunctionKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserDefinedFunctionResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunction",
        bodyModel: model.UserDefinedFunction,
        type: "model.UserDefinedFunction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a UserDefinedFunction validation using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserDefinedFunctionValidationRequest
   * @return GetUserDefinedFunctionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetUserDefinedFunctionValidation.ts.html |here} to see how to use GetUserDefinedFunctionValidation API.
   */
  public async getUserDefinedFunctionValidation(
    getUserDefinedFunctionValidationRequest: requests.GetUserDefinedFunctionValidationRequest
  ): Promise<responses.GetUserDefinedFunctionValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#getUserDefinedFunctionValidation."
      );
    const operationName = "getUserDefinedFunctionValidation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunctionValidation/GetUserDefinedFunctionValidation";
    const pathParams = {
      "{workspaceId}": getUserDefinedFunctionValidationRequest.workspaceId,
      "{userDefinedFunctionValidationKey}":
        getUserDefinedFunctionValidationRequest.userDefinedFunctionValidationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserDefinedFunctionValidationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserDefinedFunctionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/userDefinedFunctionValidations/{userDefinedFunctionValidationKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserDefinedFunctionValidationResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunctionValidation",
        bodyModel: model.UserDefinedFunctionValidation,
        type: "model.UserDefinedFunctionValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Data Integration workspace using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkspaceRequest
   * @return GetWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/GetWorkspace.ts.html |here} to see how to use GetWorkspace API.
   */
  public async getWorkspace(
    getWorkspaceRequest: requests.GetWorkspaceRequest
  ): Promise<responses.GetWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#getWorkspace.");
    const operationName = "getWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/GetWorkspace";
    const pathParams = {
      "{workspaceId}": getWorkspaceRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkspaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkspaceResponse>{},
        body: await response.json(),
        bodyKey: "workspace",
        bodyModel: model.Workspace,
        type: "model.Workspace",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of applications and provides options to filter the list.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListApplicationsRequest
   * @return ListApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListApplications.ts.html |here} to see how to use ListApplications API.
   */
  public async listApplications(
    listApplicationsRequest: requests.ListApplicationsRequest
  ): Promise<responses.ListApplicationsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listApplications.");
    const operationName = "listApplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/ListApplications";
    const pathParams = {
      "{workspaceId}": listApplicationsRequest.workspaceId
    };

    const queryParams = {
      "name": listApplicationsRequest.name,
      "nameContains": listApplicationsRequest.nameContains,
      "identifier": listApplicationsRequest.identifier,
      "fields": listApplicationsRequest.fields,
      "limit": listApplicationsRequest.limit,
      "page": listApplicationsRequest.page,
      "sortOrder": listApplicationsRequest.sortOrder,
      "sortBy": listApplicationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "applicationSummaryCollection",
        bodyModel: model.ApplicationSummaryCollection,
        type: "model.ApplicationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of connection validations within the specified workspace.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConnectionValidationsRequest
   * @return ListConnectionValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListConnectionValidations.ts.html |here} to see how to use ListConnectionValidations API.
   */
  public async listConnectionValidations(
    listConnectionValidationsRequest: requests.ListConnectionValidationsRequest
  ): Promise<responses.ListConnectionValidationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listConnectionValidations.");
    const operationName = "listConnectionValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ConnectionValidation/ListConnectionValidations";
    const pathParams = {
      "{workspaceId}": listConnectionValidationsRequest.workspaceId
    };

    const queryParams = {
      "key": listConnectionValidationsRequest.key,
      "name": listConnectionValidationsRequest.name,
      "identifier": listConnectionValidationsRequest.identifier,
      "fields": listConnectionValidationsRequest.fields,
      "page": listConnectionValidationsRequest.page,
      "limit": listConnectionValidationsRequest.limit,
      "sortBy": listConnectionValidationsRequest.sortBy,
      "sortOrder": listConnectionValidationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connectionValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionValidationsResponse>{},
        body: await response.json(),
        bodyKey: "connectionValidationSummaryCollection",
        bodyModel: model.ConnectionValidationSummaryCollection,
        type: "model.ConnectionValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all connections.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConnectionsRequest
   * @return ListConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListConnections.ts.html |here} to see how to use ListConnections API.
   */
  public async listConnections(
    listConnectionsRequest: requests.ListConnectionsRequest
  ): Promise<responses.ListConnectionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listConnections.");
    const operationName = "listConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Connection/ListConnections";
    const pathParams = {
      "{workspaceId}": listConnectionsRequest.workspaceId
    };

    const queryParams = {
      "dataAssetKey": listConnectionsRequest.dataAssetKey,
      "name": listConnectionsRequest.name,
      "page": listConnectionsRequest.page,
      "limit": listConnectionsRequest.limit,
      "fields": listConnectionsRequest.fields,
      "type": listConnectionsRequest.type,
      "sortBy": listConnectionsRequest.sortBy,
      "sortOrder": listConnectionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "connectionSummaryCollection",
        bodyModel: model.ConnectionSummaryCollection,
        type: "model.ConnectionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the list of copy object requests.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCopyObjectRequestsRequest
   * @return ListCopyObjectRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListCopyObjectRequests.ts.html |here} to see how to use ListCopyObjectRequests API.
   */
  public async listCopyObjectRequests(
    listCopyObjectRequestsRequest: requests.ListCopyObjectRequestsRequest
  ): Promise<responses.ListCopyObjectRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listCopyObjectRequests.");
    const operationName = "listCopyObjectRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/CopyObjectRequestSummaryCollection/ListCopyObjectRequests";
    const pathParams = {
      "{workspaceId}": listCopyObjectRequestsRequest.workspaceId
    };

    const queryParams = {
      "limit": listCopyObjectRequestsRequest.limit,
      "page": listCopyObjectRequestsRequest.page,
      "name": listCopyObjectRequestsRequest.name,
      "sortOrder": listCopyObjectRequestsRequest.sortOrder,
      "sortBy": listCopyObjectRequestsRequest.sortBy,
      "copyStatus": listCopyObjectRequestsRequest.copyStatus,
      "projection": listCopyObjectRequestsRequest.projection,
      "timeStartedInMillis": listCopyObjectRequestsRequest.timeStartedInMillis,
      "timeEndedInMillis": listCopyObjectRequestsRequest.timeEndedInMillis
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCopyObjectRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCopyObjectRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/copyObjectRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCopyObjectRequestsResponse>{},
        body: await response.json(),
        bodyKey: "copyObjectRequestSummaryCollection",
        bodyModel: model.CopyObjectRequestSummaryCollection,
        type: "model.CopyObjectRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all data asset summaries.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataAssetsRequest
   * @return ListDataAssetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDataAssets.ts.html |here} to see how to use ListDataAssets API.
   */
  public async listDataAssets(
    listDataAssetsRequest: requests.ListDataAssetsRequest
  ): Promise<responses.ListDataAssetsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listDataAssets.");
    const operationName = "listDataAssets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataAsset/ListDataAssets";
    const pathParams = {
      "{workspaceId}": listDataAssetsRequest.workspaceId
    };

    const queryParams = {
      "page": listDataAssetsRequest.page,
      "limit": listDataAssetsRequest.limit,
      "fields": listDataAssetsRequest.fields,
      "type": listDataAssetsRequest.type,
      "sortBy": listDataAssetsRequest.sortBy,
      "sortOrder": listDataAssetsRequest.sortOrder,
      "name": listDataAssetsRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataAssetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataAssetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataAssets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataAssetsResponse>{},
        body: await response.json(),
        bodyKey: "dataAssetSummaryCollection",
        bodyModel: model.DataAssetSummaryCollection,
        type: "model.DataAssetSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists a summary of data entities from the data asset using the specified connection.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataEntitiesRequest
   * @return ListDataEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDataEntities.ts.html |here} to see how to use ListDataEntities API.
   */
  public async listDataEntities(
    listDataEntitiesRequest: requests.ListDataEntitiesRequest
  ): Promise<responses.ListDataEntitiesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listDataEntities.");
    const operationName = "listDataEntities";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataEntity/ListDataEntities";
    const pathParams = {
      "{workspaceId}": listDataEntitiesRequest.workspaceId,
      "{connectionKey}": listDataEntitiesRequest.connectionKey,
      "{schemaResourceName}": listDataEntitiesRequest.schemaResourceName
    };

    const queryParams = {
      "name": listDataEntitiesRequest.name,
      "page": listDataEntitiesRequest.page,
      "type": listDataEntitiesRequest.type,
      "limit": listDataEntitiesRequest.limit,
      "fields": listDataEntitiesRequest.fields,
      "sortBy": listDataEntitiesRequest.sortBy,
      "sortOrder": listDataEntitiesRequest.sortOrder,
      "nameList": listDataEntitiesRequest.nameList,
      "isPattern": listDataEntitiesRequest.isPattern,
      "includeTypes": listDataEntitiesRequest.includeTypes
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/connections/{connectionKey}/schemas/{schemaResourceName}/dataEntities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "dataEntitySummaryCollection",
        bodyModel: model.DataEntitySummaryCollection,
        type: "model.DataEntitySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of data flow validations within the specified workspace.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataFlowValidationsRequest
   * @return ListDataFlowValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDataFlowValidations.ts.html |here} to see how to use ListDataFlowValidations API.
   */
  public async listDataFlowValidations(
    listDataFlowValidationsRequest: requests.ListDataFlowValidationsRequest
  ): Promise<responses.ListDataFlowValidationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listDataFlowValidations.");
    const operationName = "listDataFlowValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlowValidation/ListDataFlowValidations";
    const pathParams = {
      "{workspaceId}": listDataFlowValidationsRequest.workspaceId
    };

    const queryParams = {
      "key": listDataFlowValidationsRequest.key,
      "name": listDataFlowValidationsRequest.name,
      "identifier": listDataFlowValidationsRequest.identifier,
      "fields": listDataFlowValidationsRequest.fields,
      "page": listDataFlowValidationsRequest.page,
      "limit": listDataFlowValidationsRequest.limit,
      "sortBy": listDataFlowValidationsRequest.sortBy,
      "sortOrder": listDataFlowValidationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataFlowValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataFlowValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlowValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataFlowValidationsResponse>{},
        body: await response.json(),
        bodyKey: "dataFlowValidationSummaryCollection",
        bodyModel: model.DataFlowValidationSummaryCollection,
        type: "model.DataFlowValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of data flows in a project or folder.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataFlowsRequest
   * @return ListDataFlowsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDataFlows.ts.html |here} to see how to use ListDataFlows API.
   */
  public async listDataFlows(
    listDataFlowsRequest: requests.ListDataFlowsRequest
  ): Promise<responses.ListDataFlowsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listDataFlows.");
    const operationName = "listDataFlows";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlow/ListDataFlows";
    const pathParams = {
      "{workspaceId}": listDataFlowsRequest.workspaceId
    };

    const queryParams = {
      "folderId": listDataFlowsRequest.folderId,
      "fields": listDataFlowsRequest.fields,
      "name": listDataFlowsRequest.name,
      "identifier": listDataFlowsRequest.identifier,
      "limit": listDataFlowsRequest.limit,
      "page": listDataFlowsRequest.page,
      "sortOrder": listDataFlowsRequest.sortOrder,
      "sortBy": listDataFlowsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataFlowsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataFlowsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlows",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataFlowsResponse>{},
        body: await response.json(),
        bodyKey: "dataFlowSummaryCollection",
        bodyModel: model.DataFlowSummaryCollection,
        type: "model.DataFlowSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all dependent objects for a specific application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDependentObjectsRequest
   * @return ListDependentObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDependentObjects.ts.html |here} to see how to use ListDependentObjects API.
   */
  public async listDependentObjects(
    listDependentObjectsRequest: requests.ListDependentObjectsRequest
  ): Promise<responses.ListDependentObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listDependentObjects.");
    const operationName = "listDependentObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/ListDependentObjects";
    const pathParams = {
      "{workspaceId}": listDependentObjectsRequest.workspaceId,
      "{applicationKey}": listDependentObjectsRequest.applicationKey
    };

    const queryParams = {
      "fields": listDependentObjectsRequest.fields,
      "name": listDependentObjectsRequest.name,
      "nameContains": listDependentObjectsRequest.nameContains,
      "identifier": listDependentObjectsRequest.identifier,
      "type": listDependentObjectsRequest.type,
      "typeInSubtree": listDependentObjectsRequest.typeInSubtree,
      "limit": listDependentObjectsRequest.limit,
      "page": listDependentObjectsRequest.page,
      "sortOrder": listDependentObjectsRequest.sortOrder,
      "sortBy": listDependentObjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDependentObjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDependentObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/dependentObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDependentObjectsResponse>{},
        body: await response.json(),
        bodyKey: "dependentObjectSummaryCollection",
        bodyModel: model.DependentObjectSummaryCollection,
        type: "model.DependentObjectSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to list Task Run Lineages within a given time window.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDisApplicationTaskRunLineagesRequest
   * @return ListDisApplicationTaskRunLineagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDisApplicationTaskRunLineages.ts.html |here} to see how to use ListDisApplicationTaskRunLineages API.
   */
  public async listDisApplicationTaskRunLineages(
    listDisApplicationTaskRunLineagesRequest: requests.ListDisApplicationTaskRunLineagesRequest
  ): Promise<responses.ListDisApplicationTaskRunLineagesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#listDisApplicationTaskRunLineages."
      );
    const operationName = "listDisApplicationTaskRunLineages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRunLineageSummaryCollection/ListDisApplicationTaskRunLineages";
    const pathParams = {
      "{workspaceId}": listDisApplicationTaskRunLineagesRequest.workspaceId,
      "{disApplicationId}": listDisApplicationTaskRunLineagesRequest.disApplicationId
    };

    const queryParams = {
      "fields": listDisApplicationTaskRunLineagesRequest.fields,
      "page": listDisApplicationTaskRunLineagesRequest.page,
      "limit": listDisApplicationTaskRunLineagesRequest.limit,
      "sortOrder": listDisApplicationTaskRunLineagesRequest.sortOrder,
      "sortBy": listDisApplicationTaskRunLineagesRequest.sortBy,
      "filter": listDisApplicationTaskRunLineagesRequest.filter,
      "timeUpdatedGreaterThan": listDisApplicationTaskRunLineagesRequest.timeUpdatedGreaterThan,
      "timeUpdatedGreaterThanOrEqualTo":
        listDisApplicationTaskRunLineagesRequest.timeUpdatedGreaterThanOrEqualTo,
      "timeUpatedLessThan": listDisApplicationTaskRunLineagesRequest.timeUpatedLessThan,
      "timeUpatedLessThanOrEqualTo":
        listDisApplicationTaskRunLineagesRequest.timeUpatedLessThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDisApplicationTaskRunLineagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDisApplicationTaskRunLineagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{disApplicationId}/taskRunLineages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDisApplicationTaskRunLineagesResponse>{},
        body: await response.json(),
        bodyKey: "taskRunLineageSummaryCollection",
        bodyModel: model.TaskRunLineageSummaryCollection,
        type: "model.TaskRunLineageSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of DIS Applications in a compartment and provides options to filter the list.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDisApplicationsRequest
   * @return ListDisApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListDisApplications.ts.html |here} to see how to use ListDisApplications API.
   */
  public async listDisApplications(
    listDisApplicationsRequest: requests.ListDisApplicationsRequest
  ): Promise<responses.ListDisApplicationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listDisApplications.");
    const operationName = "listDisApplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/ListDisApplications";
    const pathParams = {
      "{workspaceId}": listDisApplicationsRequest.workspaceId
    };

    const queryParams = {
      "name": listDisApplicationsRequest.name,
      "nameContains": listDisApplicationsRequest.nameContains,
      "identifier": listDisApplicationsRequest.identifier,
      "fields": listDisApplicationsRequest.fields,
      "limit": listDisApplicationsRequest.limit,
      "page": listDisApplicationsRequest.page,
      "sortOrder": listDisApplicationsRequest.sortOrder,
      "sortBy": listDisApplicationsRequest.sortBy,
      "compartmentId": listDisApplicationsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDisApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDisApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDisApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "disApplicationSummaryCollection",
        bodyModel: model.DisApplicationSummaryCollection,
        type: "model.DisApplicationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the list of export object requests.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListExportRequestsRequest
   * @return ListExportRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListExportRequests.ts.html |here} to see how to use ListExportRequests API.
   */
  public async listExportRequests(
    listExportRequestsRequest: requests.ListExportRequestsRequest
  ): Promise<responses.ListExportRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listExportRequests.");
    const operationName = "listExportRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExportRequestSummaryCollection/ListExportRequests";
    const pathParams = {
      "{workspaceId}": listExportRequestsRequest.workspaceId
    };

    const queryParams = {
      "page": listExportRequestsRequest.page,
      "limit": listExportRequestsRequest.limit,
      "name": listExportRequestsRequest.name,
      "sortOrder": listExportRequestsRequest.sortOrder,
      "sortBy": listExportRequestsRequest.sortBy,
      "exportStatus": listExportRequestsRequest.exportStatus,
      "projection": listExportRequestsRequest.projection,
      "timeStartedInMillis": listExportRequestsRequest.timeStartedInMillis,
      "timeEndedInMillis": listExportRequestsRequest.timeEndedInMillis
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExportRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExportRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/exportRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExportRequestsResponse>{},
        body: await response.json(),
        bodyKey: "exportRequestSummaryCollection",
        bodyModel: model.ExportRequestSummaryCollection,
        type: "model.ExportRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a lists of external publication validations in a workspace and provides options to filter the list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListExternalPublicationValidationsRequest
   * @return ListExternalPublicationValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListExternalPublicationValidations.ts.html |here} to see how to use ListExternalPublicationValidations API.
   */
  public async listExternalPublicationValidations(
    listExternalPublicationValidationsRequest: requests.ListExternalPublicationValidationsRequest
  ): Promise<responses.ListExternalPublicationValidationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#listExternalPublicationValidations."
      );
    const operationName = "listExternalPublicationValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublicationValidation/ListExternalPublicationValidations";
    const pathParams = {
      "{workspaceId}": listExternalPublicationValidationsRequest.workspaceId,
      "{taskKey}": listExternalPublicationValidationsRequest.taskKey
    };

    const queryParams = {
      "fields": listExternalPublicationValidationsRequest.fields,
      "name": listExternalPublicationValidationsRequest.name,
      "identifier": listExternalPublicationValidationsRequest.identifier,
      "page": listExternalPublicationValidationsRequest.page,
      "limit": listExternalPublicationValidationsRequest.limit,
      "sortOrder": listExternalPublicationValidationsRequest.sortOrder,
      "sortBy": listExternalPublicationValidationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExternalPublicationValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExternalPublicationValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublicationValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExternalPublicationValidationsResponse>{},
        body: await response.json(),
        bodyKey: "externalPublicationValidationSummaryCollection",
        bodyModel: model.ExternalPublicationValidationSummaryCollection,
        type: "model.ExternalPublicationValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of external publications in an application and provides options to filter the list.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListExternalPublicationsRequest
   * @return ListExternalPublicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListExternalPublications.ts.html |here} to see how to use ListExternalPublications API.
   */
  public async listExternalPublications(
    listExternalPublicationsRequest: requests.ListExternalPublicationsRequest
  ): Promise<responses.ListExternalPublicationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listExternalPublications.");
    const operationName = "listExternalPublications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublication/ListExternalPublications";
    const pathParams = {
      "{workspaceId}": listExternalPublicationsRequest.workspaceId,
      "{taskKey}": listExternalPublicationsRequest.taskKey
    };

    const queryParams = {
      "fields": listExternalPublicationsRequest.fields,
      "name": listExternalPublicationsRequest.name,
      "limit": listExternalPublicationsRequest.limit,
      "page": listExternalPublicationsRequest.page,
      "sortOrder": listExternalPublicationsRequest.sortOrder,
      "sortBy": listExternalPublicationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExternalPublicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExternalPublicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExternalPublicationsResponse>{},
        body: await response.json(),
        bodyKey: "externalPublicationSummaryCollection",
        bodyModel: model.ExternalPublicationSummaryCollection,
        type: "model.ExternalPublicationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of folders in a project and provides options to filter the list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFoldersRequest
   * @return ListFoldersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListFolders.ts.html |here} to see how to use ListFolders API.
   */
  public async listFolders(
    listFoldersRequest: requests.ListFoldersRequest
  ): Promise<responses.ListFoldersResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listFolders.");
    const operationName = "listFolders";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Folder/ListFolders";
    const pathParams = {
      "{workspaceId}": listFoldersRequest.workspaceId
    };

    const queryParams = {
      "aggregatorKey": listFoldersRequest.aggregatorKey,
      "fields": listFoldersRequest.fields,
      "name": listFoldersRequest.name,
      "nameContains": listFoldersRequest.nameContains,
      "identifier": listFoldersRequest.identifier,
      "page": listFoldersRequest.page,
      "limit": listFoldersRequest.limit,
      "sortOrder": listFoldersRequest.sortOrder,
      "sortBy": listFoldersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFoldersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFoldersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/folders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFoldersResponse>{},
        body: await response.json(),
        bodyKey: "folderSummaryCollection",
        bodyModel: model.FolderSummaryCollection,
        type: "model.FolderSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of function libraries in a project and provides options to filter the list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFunctionLibrariesRequest
   * @return ListFunctionLibrariesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListFunctionLibraries.ts.html |here} to see how to use ListFunctionLibraries API.
   */
  public async listFunctionLibraries(
    listFunctionLibrariesRequest: requests.ListFunctionLibrariesRequest
  ): Promise<responses.ListFunctionLibrariesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listFunctionLibraries.");
    const operationName = "listFunctionLibraries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/FunctionLibrary/ListFunctionLibraries";
    const pathParams = {
      "{workspaceId}": listFunctionLibrariesRequest.workspaceId
    };

    const queryParams = {
      "aggregatorKey": listFunctionLibrariesRequest.aggregatorKey,
      "fields": listFunctionLibrariesRequest.fields,
      "name": listFunctionLibrariesRequest.name,
      "identifier": listFunctionLibrariesRequest.identifier,
      "page": listFunctionLibrariesRequest.page,
      "limit": listFunctionLibrariesRequest.limit,
      "sortOrder": listFunctionLibrariesRequest.sortOrder,
      "sortBy": listFunctionLibrariesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFunctionLibrariesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFunctionLibrariesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/functionLibraries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFunctionLibrariesResponse>{},
        body: await response.json(),
        bodyKey: "functionLibrarySummaryCollection",
        bodyModel: model.FunctionLibrarySummaryCollection,
        type: "model.FunctionLibrarySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the list of import object requests.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListImportRequestsRequest
   * @return ListImportRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListImportRequests.ts.html |here} to see how to use ListImportRequests API.
   */
  public async listImportRequests(
    listImportRequestsRequest: requests.ListImportRequestsRequest
  ): Promise<responses.ListImportRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listImportRequests.");
    const operationName = "listImportRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ImportRequestSummaryCollection/ListImportRequests";
    const pathParams = {
      "{workspaceId}": listImportRequestsRequest.workspaceId
    };

    const queryParams = {
      "page": listImportRequestsRequest.page,
      "limit": listImportRequestsRequest.limit,
      "name": listImportRequestsRequest.name,
      "sortOrder": listImportRequestsRequest.sortOrder,
      "sortBy": listImportRequestsRequest.sortBy,
      "importStatus": listImportRequestsRequest.importStatus,
      "projection": listImportRequestsRequest.projection,
      "timeStartedInMillis": listImportRequestsRequest.timeStartedInMillis,
      "timeEndedInMillis": listImportRequestsRequest.timeEndedInMillis
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listImportRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listImportRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/importRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImportRequestsResponse>{},
        body: await response.json(),
        bodyKey: "importRequestSummaryCollection",
        bodyModel: model.ImportRequestSummaryCollection,
        type: "model.ImportRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of patches in an application and provides options to filter the list.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPatchChangesRequest
   * @return ListPatchChangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListPatchChanges.ts.html |here} to see how to use ListPatchChanges API.
   */
  public async listPatchChanges(
    listPatchChangesRequest: requests.ListPatchChangesRequest
  ): Promise<responses.ListPatchChangesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listPatchChanges.");
    const operationName = "listPatchChanges";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/ListPatchChanges";
    const pathParams = {
      "{workspaceId}": listPatchChangesRequest.workspaceId,
      "{applicationKey}": listPatchChangesRequest.applicationKey
    };

    const queryParams = {
      "name": listPatchChangesRequest.name,
      "sincePatch": listPatchChangesRequest.sincePatch,
      "toPatch": listPatchChangesRequest.toPatch,
      "limit": listPatchChangesRequest.limit,
      "page": listPatchChangesRequest.page,
      "sortOrder": listPatchChangesRequest.sortOrder,
      "sortBy": listPatchChangesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPatchChangesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPatchChangesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/patchChanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPatchChangesResponse>{},
        body: await response.json(),
        bodyKey: "patchChangeSummaryCollection",
        bodyModel: model.PatchChangeSummaryCollection,
        type: "model.PatchChangeSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of patches in an application and provides options to filter the list. For listing changes based on a period and logical objects changed, see ListPatchChanges API.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPatchesRequest
   * @return ListPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListPatches.ts.html |here} to see how to use ListPatches API.
   */
  public async listPatches(
    listPatchesRequest: requests.ListPatchesRequest
  ): Promise<responses.ListPatchesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listPatches.");
    const operationName = "listPatches";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/ListPatches";
    const pathParams = {
      "{workspaceId}": listPatchesRequest.workspaceId,
      "{applicationKey}": listPatchesRequest.applicationKey
    };

    const queryParams = {
      "name": listPatchesRequest.name,
      "identifier": listPatchesRequest.identifier,
      "fields": listPatchesRequest.fields,
      "limit": listPatchesRequest.limit,
      "page": listPatchesRequest.page,
      "sortOrder": listPatchesRequest.sortOrder,
      "sortBy": listPatchesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/patches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPatchesResponse>{},
        body: await response.json(),
        bodyKey: "patchSummaryCollection",
        bodyModel: model.PatchSummaryCollection,
        type: "model.PatchSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of pipeline validations within the specified workspace.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPipelineValidationsRequest
   * @return ListPipelineValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListPipelineValidations.ts.html |here} to see how to use ListPipelineValidations API.
   */
  public async listPipelineValidations(
    listPipelineValidationsRequest: requests.ListPipelineValidationsRequest
  ): Promise<responses.ListPipelineValidationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listPipelineValidations.");
    const operationName = "listPipelineValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/PipelineValidation/ListPipelineValidations";
    const pathParams = {
      "{workspaceId}": listPipelineValidationsRequest.workspaceId
    };

    const queryParams = {
      "key": listPipelineValidationsRequest.key,
      "name": listPipelineValidationsRequest.name,
      "identifier": listPipelineValidationsRequest.identifier,
      "fields": listPipelineValidationsRequest.fields,
      "page": listPipelineValidationsRequest.page,
      "limit": listPipelineValidationsRequest.limit,
      "sortBy": listPipelineValidationsRequest.sortBy,
      "sortOrder": listPipelineValidationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelineValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelineValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelineValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelineValidationsResponse>{},
        body: await response.json(),
        bodyKey: "pipelineValidationSummaryCollection",
        bodyModel: model.PipelineValidationSummaryCollection,
        type: "model.PipelineValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of pipelines in a project or folder from within a workspace, the query parameter specifies the project or folder.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPipelinesRequest
   * @return ListPipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListPipelines.ts.html |here} to see how to use ListPipelines API.
   */
  public async listPipelines(
    listPipelinesRequest: requests.ListPipelinesRequest
  ): Promise<responses.ListPipelinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listPipelines.");
    const operationName = "listPipelines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Pipeline/ListPipelines";
    const pathParams = {
      "{workspaceId}": listPipelinesRequest.workspaceId
    };

    const queryParams = {
      "aggregatorKey": listPipelinesRequest.aggregatorKey,
      "fields": listPipelinesRequest.fields,
      "name": listPipelinesRequest.name,
      "identifier": listPipelinesRequest.identifier,
      "limit": listPipelinesRequest.limit,
      "page": listPipelinesRequest.page,
      "sortOrder": listPipelinesRequest.sortOrder,
      "sortBy": listPipelinesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelinesResponse>{},
        body: await response.json(),
        bodyKey: "pipelineSummaryCollection",
        bodyModel: model.PipelineSummaryCollection,
        type: "model.PipelineSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a lists of projects in a workspace and provides options to filter the list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listProjects.");
    const operationName = "listProjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/ListProjects";
    const pathParams = {
      "{workspaceId}": listProjectsRequest.workspaceId
    };

    const queryParams = {
      "fields": listProjectsRequest.fields,
      "name": listProjectsRequest.name,
      "nameContains": listProjectsRequest.nameContains,
      "identifier": listProjectsRequest.identifier,
      "page": listProjectsRequest.page,
      "limit": listProjectsRequest.limit,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "projectSummaryCollection",
        bodyModel: model.ProjectSummaryCollection,
        type: "model.ProjectSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all the published objects for a specified application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPublishedObjectsRequest
   * @return ListPublishedObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListPublishedObjects.ts.html |here} to see how to use ListPublishedObjects API.
   */
  public async listPublishedObjects(
    listPublishedObjectsRequest: requests.ListPublishedObjectsRequest
  ): Promise<responses.ListPublishedObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listPublishedObjects.");
    const operationName = "listPublishedObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/ListPublishedObjects";
    const pathParams = {
      "{workspaceId}": listPublishedObjectsRequest.workspaceId,
      "{applicationKey}": listPublishedObjectsRequest.applicationKey
    };

    const queryParams = {
      "fields": listPublishedObjectsRequest.fields,
      "name": listPublishedObjectsRequest.name,
      "nameStartsWith": listPublishedObjectsRequest.nameStartsWith,
      "nameContains": listPublishedObjectsRequest.nameContains,
      "identifier": listPublishedObjectsRequest.identifier,
      "type": listPublishedObjectsRequest.type,
      "typeInSubtree": listPublishedObjectsRequest.typeInSubtree,
      "limit": listPublishedObjectsRequest.limit,
      "page": listPublishedObjectsRequest.page,
      "sortOrder": listPublishedObjectsRequest.sortOrder,
      "sortBy": listPublishedObjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublishedObjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublishedObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/publishedObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublishedObjectsResponse>{},
        body: await response.json(),
        bodyKey: "publishedObjectSummaryCollection",
        bodyModel: model.PublishedObjectSummaryCollection,
        type: "model.PublishedObjectSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of references in an application. Reference objects are created when dataflows and tasks use objects, such as data assets and connections.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListReferencesRequest
   * @return ListReferencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListReferences.ts.html |here} to see how to use ListReferences API.
   */
  public async listReferences(
    listReferencesRequest: requests.ListReferencesRequest
  ): Promise<responses.ListReferencesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listReferences.");
    const operationName = "listReferences";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Reference/ListReferences";
    const pathParams = {
      "{workspaceId}": listReferencesRequest.workspaceId,
      "{applicationKey}": listReferencesRequest.applicationKey
    };

    const queryParams = {
      "limit": listReferencesRequest.limit,
      "page": listReferencesRequest.page,
      "name": listReferencesRequest.name,
      "sortOrder": listReferencesRequest.sortOrder,
      "sortBy": listReferencesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReferencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReferencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/references",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReferencesResponse>{},
        body: await response.json(),
        bodyKey: "referenceSummaryCollection",
        bodyModel: model.ReferenceSummaryCollection,
        type: "model.ReferenceSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to list runtime operators with filtering options
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRuntimeOperatorsRequest
   * @return ListRuntimeOperatorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListRuntimeOperators.ts.html |here} to see how to use ListRuntimeOperators API.
   */
  public async listRuntimeOperators(
    listRuntimeOperatorsRequest: requests.ListRuntimeOperatorsRequest
  ): Promise<responses.ListRuntimeOperatorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listRuntimeOperators.");
    const operationName = "listRuntimeOperators";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/RuntimeOperatorSummaryCollection/ListRuntimeOperators";
    const pathParams = {
      "{workspaceId}": listRuntimeOperatorsRequest.workspaceId,
      "{applicationKey}": listRuntimeOperatorsRequest.applicationKey,
      "{runtimePipelineKey}": listRuntimeOperatorsRequest.runtimePipelineKey
    };

    const queryParams = {
      "key": listRuntimeOperatorsRequest.key,
      "fields": listRuntimeOperatorsRequest.fields,
      "name": listRuntimeOperatorsRequest.name,
      "identifier": listRuntimeOperatorsRequest.identifier,
      "page": listRuntimeOperatorsRequest.page,
      "limit": listRuntimeOperatorsRequest.limit,
      "sortOrder": listRuntimeOperatorsRequest.sortOrder,
      "sortBy": listRuntimeOperatorsRequest.sortBy,
      "aggregatorType": listRuntimeOperatorsRequest.aggregatorType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRuntimeOperatorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRuntimeOperatorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/runtimePipelines/{runtimePipelineKey}/runtimeOperators",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRuntimeOperatorsResponse>{},
        body: await response.json(),
        bodyKey: "runtimeOperatorSummaryCollection",
        bodyModel: model.RuntimeOperatorSummaryCollection,
        type: "model.RuntimeOperatorSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to list runtime pipelines with filtering options
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRuntimePipelinesRequest
   * @return ListRuntimePipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListRuntimePipelines.ts.html |here} to see how to use ListRuntimePipelines API.
   */
  public async listRuntimePipelines(
    listRuntimePipelinesRequest: requests.ListRuntimePipelinesRequest
  ): Promise<responses.ListRuntimePipelinesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listRuntimePipelines.");
    const operationName = "listRuntimePipelines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/RuntimePipelineSummaryCollection/ListRuntimePipelines";
    const pathParams = {
      "{workspaceId}": listRuntimePipelinesRequest.workspaceId,
      "{applicationKey}": listRuntimePipelinesRequest.applicationKey
    };

    const queryParams = {
      "key": listRuntimePipelinesRequest.key,
      "aggregatorKey": listRuntimePipelinesRequest.aggregatorKey,
      "fields": listRuntimePipelinesRequest.fields,
      "name": listRuntimePipelinesRequest.name,
      "identifier": listRuntimePipelinesRequest.identifier,
      "page": listRuntimePipelinesRequest.page,
      "limit": listRuntimePipelinesRequest.limit,
      "sortOrder": listRuntimePipelinesRequest.sortOrder,
      "sortBy": listRuntimePipelinesRequest.sortBy,
      "aggregatorType": listRuntimePipelinesRequest.aggregatorType,
      "filter": listRuntimePipelinesRequest.filter
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRuntimePipelinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRuntimePipelinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/runtimePipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRuntimePipelinesResponse>{},
        body: await response.json(),
        bodyKey: "runtimePipelineSummaryCollection",
        bodyModel: model.RuntimePipelineSummaryCollection,
        type: "model.RuntimePipelineSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Use this endpoint to list schedules.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSchedulesRequest
   * @return ListSchedulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListSchedules.ts.html |here} to see how to use ListSchedules API.
   */
  public async listSchedules(
    listSchedulesRequest: requests.ListSchedulesRequest
  ): Promise<responses.ListSchedulesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listSchedules.");
    const operationName = "listSchedules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schedule/ListSchedules";
    const pathParams = {
      "{workspaceId}": listSchedulesRequest.workspaceId,
      "{applicationKey}": listSchedulesRequest.applicationKey
    };

    const queryParams = {
      "key": listSchedulesRequest.key,
      "name": listSchedulesRequest.name,
      "identifier": listSchedulesRequest.identifier,
      "type": listSchedulesRequest.type,
      "page": listSchedulesRequest.page,
      "limit": listSchedulesRequest.limit,
      "sortBy": listSchedulesRequest.sortBy,
      "sortOrder": listSchedulesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchedulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchedulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/schedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchedulesResponse>{},
        body: await response.json(),
        bodyKey: "scheduleSummaryCollection",
        bodyModel: model.ScheduleSummaryCollection,
        type: "model.ScheduleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all the schemas that can be accessed using the specified connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSchemasRequest
   * @return ListSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListSchemas.ts.html |here} to see how to use ListSchemas API.
   */
  public async listSchemas(
    listSchemasRequest: requests.ListSchemasRequest
  ): Promise<responses.ListSchemasResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listSchemas.");
    const operationName = "listSchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schema/ListSchemas";
    const pathParams = {
      "{workspaceId}": listSchemasRequest.workspaceId,
      "{connectionKey}": listSchemasRequest.connectionKey
    };

    const queryParams = {
      "page": listSchemasRequest.page,
      "limit": listSchemasRequest.limit,
      "fields": listSchemasRequest.fields,
      "sortBy": listSchemasRequest.sortBy,
      "sortOrder": listSchemasRequest.sortOrder,
      "schemaResourceName": listSchemasRequest.schemaResourceName,
      "name": listSchemasRequest.name,
      "nameList": listSchemasRequest.nameList,
      "includeTypes": listSchemasRequest.includeTypes
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections/{connectionKey}/schemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchemasResponse>{},
        body: await response.json(),
        bodyKey: "schemaSummaryCollection",
        bodyModel: model.SchemaSummaryCollection,
        type: "model.SchemaSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to list Task Run Lineages within a given time window.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTaskRunLineagesRequest
   * @return ListTaskRunLineagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTaskRunLineages.ts.html |here} to see how to use ListTaskRunLineages API.
   */
  public async listTaskRunLineages(
    listTaskRunLineagesRequest: requests.ListTaskRunLineagesRequest
  ): Promise<responses.ListTaskRunLineagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listTaskRunLineages.");
    const operationName = "listTaskRunLineages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRunLineageSummaryCollection/ListTaskRunLineages";
    const pathParams = {
      "{workspaceId}": listTaskRunLineagesRequest.workspaceId,
      "{applicationKey}": listTaskRunLineagesRequest.applicationKey
    };

    const queryParams = {
      "fields": listTaskRunLineagesRequest.fields,
      "page": listTaskRunLineagesRequest.page,
      "limit": listTaskRunLineagesRequest.limit,
      "sortOrder": listTaskRunLineagesRequest.sortOrder,
      "sortBy": listTaskRunLineagesRequest.sortBy,
      "filter": listTaskRunLineagesRequest.filter,
      "timeUpdatedGreaterThan": listTaskRunLineagesRequest.timeUpdatedGreaterThan,
      "timeUpdatedGreaterThanOrEqualTo": listTaskRunLineagesRequest.timeUpdatedGreaterThanOrEqualTo,
      "timeUpatedLessThan": listTaskRunLineagesRequest.timeUpatedLessThan,
      "timeUpatedLessThanOrEqualTo": listTaskRunLineagesRequest.timeUpatedLessThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskRunLineagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskRunLineagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRunLineages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskRunLineagesResponse>{},
        body: await response.json(),
        bodyKey: "taskRunLineageSummaryCollection",
        bodyModel: model.TaskRunLineageSummaryCollection,
        type: "model.TaskRunLineageSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets log entries for task runs using its key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTaskRunLogsRequest
   * @return ListTaskRunLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTaskRunLogs.ts.html |here} to see how to use ListTaskRunLogs API.
   */
  public async listTaskRunLogs(
    listTaskRunLogsRequest: requests.ListTaskRunLogsRequest
  ): Promise<responses.ListTaskRunLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listTaskRunLogs.");
    const operationName = "listTaskRunLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRunLogSummary/ListTaskRunLogs";
    const pathParams = {
      "{workspaceId}": listTaskRunLogsRequest.workspaceId,
      "{applicationKey}": listTaskRunLogsRequest.applicationKey,
      "{taskRunKey}": listTaskRunLogsRequest.taskRunKey
    };

    const queryParams = {
      "page": listTaskRunLogsRequest.page,
      "limit": listTaskRunLogsRequest.limit,
      "sortOrder": listTaskRunLogsRequest.sortOrder,
      "sortBy": listTaskRunLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskRunLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskRunLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns/{taskRunKey}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskRunLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TaskRunLogSummary,
        type: "Array<model.TaskRunLogSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listTaskRunLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TaskRunLogSummary objects
   * contained in responses from the listTaskRunLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTaskRunLogs(
    request: requests.ListTaskRunLogsRequest
  ): AsyncIterableIterator<model.TaskRunLogSummary> {
    return paginateRecords(request, req => this.listTaskRunLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listTaskRunLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listTaskRunLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTaskRunLogsResponses(
    request: requests.ListTaskRunLogsRequest
  ): AsyncIterableIterator<responses.ListTaskRunLogsResponse> {
    return paginateResponses(request, req => this.listTaskRunLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TaskRunLogSummary objects
   * contained in responses from the listTaskRunLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTaskRunLogsRecordIterator(
    request: requests.ListTaskRunLogsRequest
  ): AsyncIterableIterator<model.TaskRunLogSummary> {
    return paginateRecords(request, req => this.listTaskRunLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTaskRunLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTaskRunLogsResponseIterator(
    request: requests.ListTaskRunLogsRequest
  ): AsyncIterableIterator<responses.ListTaskRunLogsResponse> {
    return paginateResponses(request, req => this.listTaskRunLogs(req));
  }

  /**
   * Retrieves a list of task runs and provides options to filter the list.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTaskRunsRequest
   * @return ListTaskRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTaskRuns.ts.html |here} to see how to use ListTaskRuns API.
   */
  public async listTaskRuns(
    listTaskRunsRequest: requests.ListTaskRunsRequest
  ): Promise<responses.ListTaskRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listTaskRuns.");
    const operationName = "listTaskRuns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRun/ListTaskRuns";
    const pathParams = {
      "{workspaceId}": listTaskRunsRequest.workspaceId,
      "{applicationKey}": listTaskRunsRequest.applicationKey
    };

    const queryParams = {
      "key": listTaskRunsRequest.key,
      "aggregatorKey": listTaskRunsRequest.aggregatorKey,
      "fields": listTaskRunsRequest.fields,
      "name": listTaskRunsRequest.name,
      "identifier": listTaskRunsRequest.identifier,
      "page": listTaskRunsRequest.page,
      "limit": listTaskRunsRequest.limit,
      "sortOrder": listTaskRunsRequest.sortOrder,
      "sortBy": listTaskRunsRequest.sortBy,
      "filter": listTaskRunsRequest.filter,
      "nameStartsWith": listTaskRunsRequest.nameStartsWith,
      "nameContains": listTaskRunsRequest.nameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskRunsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskRunsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskRunsResponse>{},
        body: await response.json(),
        bodyKey: "taskRunSummaryCollection",
        bodyModel: model.TaskRunSummaryCollection,
        type: "model.TaskRunSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to get the list of all the TaskSchedule objects.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTaskSchedulesRequest
   * @return ListTaskSchedulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTaskSchedules.ts.html |here} to see how to use ListTaskSchedules API.
   */
  public async listTaskSchedules(
    listTaskSchedulesRequest: requests.ListTaskSchedulesRequest
  ): Promise<responses.ListTaskSchedulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listTaskSchedules.");
    const operationName = "listTaskSchedules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskSchedule/ListTaskSchedules";
    const pathParams = {
      "{workspaceId}": listTaskSchedulesRequest.workspaceId,
      "{applicationKey}": listTaskSchedulesRequest.applicationKey
    };

    const queryParams = {
      "key": listTaskSchedulesRequest.key,
      "name": listTaskSchedulesRequest.name,
      "identifier": listTaskSchedulesRequest.identifier,
      "type": listTaskSchedulesRequest.type,
      "page": listTaskSchedulesRequest.page,
      "limit": listTaskSchedulesRequest.limit,
      "sortBy": listTaskSchedulesRequest.sortBy,
      "sortOrder": listTaskSchedulesRequest.sortOrder,
      "isEnabled": listTaskSchedulesRequest.isEnabled
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskSchedulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskSchedulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskSchedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskSchedulesResponse>{},
        body: await response.json(),
        bodyKey: "taskScheduleSummaryCollection",
        bodyModel: model.TaskScheduleSummaryCollection,
        type: "model.TaskScheduleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of task validations within the specified workspace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTaskValidationsRequest
   * @return ListTaskValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTaskValidations.ts.html |here} to see how to use ListTaskValidations API.
   */
  public async listTaskValidations(
    listTaskValidationsRequest: requests.ListTaskValidationsRequest
  ): Promise<responses.ListTaskValidationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listTaskValidations.");
    const operationName = "listTaskValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskValidation/ListTaskValidations";
    const pathParams = {
      "{workspaceId}": listTaskValidationsRequest.workspaceId
    };

    const queryParams = {
      "key": listTaskValidationsRequest.key,
      "name": listTaskValidationsRequest.name,
      "identifier": listTaskValidationsRequest.identifier,
      "fields": listTaskValidationsRequest.fields,
      "page": listTaskValidationsRequest.page,
      "limit": listTaskValidationsRequest.limit,
      "sortBy": listTaskValidationsRequest.sortBy,
      "sortOrder": listTaskValidationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/taskValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskValidationsResponse>{},
        body: await response.json(),
        bodyKey: "taskValidationSummaryCollection",
        bodyModel: model.TaskValidationSummaryCollection,
        type: "model.TaskValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all tasks in a specified project or folder.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTasksRequest
   * @return ListTasksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTasks.ts.html |here} to see how to use ListTasks API.
   */
  public async listTasks(
    listTasksRequest: requests.ListTasksRequest
  ): Promise<responses.ListTasksResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listTasks.");
    const operationName = "listTasks";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Task/ListTasks";
    const pathParams = {
      "{workspaceId}": listTasksRequest.workspaceId
    };

    const queryParams = {
      "folderId": listTasksRequest.folderId,
      "fields": listTasksRequest.fields,
      "name": listTasksRequest.name,
      "key": listTasksRequest.key,
      "identifier": listTasksRequest.identifier,
      "type": listTasksRequest.type,
      "limit": listTasksRequest.limit,
      "page": listTasksRequest.page,
      "sortOrder": listTasksRequest.sortOrder,
      "sortBy": listTasksRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTasksRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTasksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTasksResponse>{},
        body: await response.json(),
        bodyKey: "taskSummaryCollection",
        bodyModel: model.TaskSummaryCollection,
        type: "model.TaskSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint can be used to list application templates with filtering options.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTemplatesRequest
   * @return ListTemplatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListTemplates.ts.html |here} to see how to use ListTemplates API.
   */
  public async listTemplates(
    listTemplatesRequest: requests.ListTemplatesRequest
  ): Promise<responses.ListTemplatesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listTemplates.");
    const operationName = "listTemplates";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Template/ListTemplates";
    const pathParams = {
      "{workspaceId}": listTemplatesRequest.workspaceId
    };

    const queryParams = {
      "name": listTemplatesRequest.name,
      "identifier": listTemplatesRequest.identifier,
      "fields": listTemplatesRequest.fields,
      "limit": listTemplatesRequest.limit,
      "page": listTemplatesRequest.page,
      "sortOrder": listTemplatesRequest.sortOrder,
      "sortBy": listTemplatesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTemplatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTemplatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/templates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTemplatesResponse>{},
        body: await response.json(),
        bodyKey: "templateSummaryCollection",
        bodyModel: model.TemplateSummaryCollection,
        type: "model.TemplateSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of UserDefinedFunctionvalidations within the specified workspace.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUserDefinedFunctionValidationsRequest
   * @return ListUserDefinedFunctionValidationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListUserDefinedFunctionValidations.ts.html |here} to see how to use ListUserDefinedFunctionValidations API.
   */
  public async listUserDefinedFunctionValidations(
    listUserDefinedFunctionValidationsRequest: requests.ListUserDefinedFunctionValidationsRequest
  ): Promise<responses.ListUserDefinedFunctionValidationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#listUserDefinedFunctionValidations."
      );
    const operationName = "listUserDefinedFunctionValidations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunctionValidation/ListUserDefinedFunctionValidations";
    const pathParams = {
      "{workspaceId}": listUserDefinedFunctionValidationsRequest.workspaceId
    };

    const queryParams = {
      "key": listUserDefinedFunctionValidationsRequest.key,
      "name": listUserDefinedFunctionValidationsRequest.name,
      "identifier": listUserDefinedFunctionValidationsRequest.identifier,
      "fields": listUserDefinedFunctionValidationsRequest.fields,
      "page": listUserDefinedFunctionValidationsRequest.page,
      "limit": listUserDefinedFunctionValidationsRequest.limit,
      "sortBy": listUserDefinedFunctionValidationsRequest.sortBy,
      "sortOrder": listUserDefinedFunctionValidationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserDefinedFunctionValidationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserDefinedFunctionValidationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctionValidations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserDefinedFunctionValidationsResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunctionValidationSummaryCollection",
        bodyModel: model.UserDefinedFunctionValidationSummaryCollection,
        type: "model.UserDefinedFunctionValidationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of UserDefinedFunctions in a function library.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUserDefinedFunctionsRequest
   * @return ListUserDefinedFunctionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListUserDefinedFunctions.ts.html |here} to see how to use ListUserDefinedFunctions API.
   */
  public async listUserDefinedFunctions(
    listUserDefinedFunctionsRequest: requests.ListUserDefinedFunctionsRequest
  ): Promise<responses.ListUserDefinedFunctionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listUserDefinedFunctions.");
    const operationName = "listUserDefinedFunctions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunction/ListUserDefinedFunctions";
    const pathParams = {
      "{workspaceId}": listUserDefinedFunctionsRequest.workspaceId
    };

    const queryParams = {
      "functionLibraryKey": listUserDefinedFunctionsRequest.functionLibraryKey,
      "fields": listUserDefinedFunctionsRequest.fields,
      "name": listUserDefinedFunctionsRequest.name,
      "identifier": listUserDefinedFunctionsRequest.identifier,
      "limit": listUserDefinedFunctionsRequest.limit,
      "page": listUserDefinedFunctionsRequest.page,
      "sortOrder": listUserDefinedFunctionsRequest.sortOrder,
      "sortBy": listUserDefinedFunctionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserDefinedFunctionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserDefinedFunctionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserDefinedFunctionsResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunctionSummaryCollection",
        bodyModel: model.UserDefinedFunctionSummaryCollection,
        type: "model.UserDefinedFunctionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a paginated list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/WorkRequest/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/workRequestErrors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Retrieves a paginated list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/WorkRequest/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workspaceId": listWorkRequestsRequest.workspaceId,
      "workRequestStatus": listWorkRequestsRequest.workRequestStatus,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Retrieves a list of Data Integration workspaces.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkspacesRequest
   * @return ListWorkspacesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/ListWorkspaces.ts.html |here} to see how to use ListWorkspaces API.
   */
  public async listWorkspaces(
    listWorkspacesRequest: requests.ListWorkspacesRequest
  ): Promise<responses.ListWorkspacesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#listWorkspaces.");
    const operationName = "listWorkspaces";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/ListWorkspaces";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkspacesRequest.compartmentId,
      "name": listWorkspacesRequest.name,
      "limit": listWorkspacesRequest.limit,
      "page": listWorkspacesRequest.page,
      "lifecycleState": listWorkspacesRequest.lifecycleState,
      "sortOrder": listWorkspacesRequest.sortOrder,
      "sortBy": listWorkspacesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkspacesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkspacesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkspacesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkspaceSummary,
        type: "Array<model.WorkspaceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkspacesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkspaceSummary objects
   * contained in responses from the listWorkspaces operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkspaces(
    request: requests.ListWorkspacesRequest
  ): AsyncIterableIterator<model.WorkspaceSummary> {
    return paginateRecords(request, req => this.listWorkspaces(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkspacesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkspaces operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkspacesResponses(
    request: requests.ListWorkspacesRequest
  ): AsyncIterableIterator<responses.ListWorkspacesResponse> {
    return paginateResponses(request, req => this.listWorkspaces(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkspaceSummary objects
   * contained in responses from the listWorkspaces operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkspacesRecordIterator(
    request: requests.ListWorkspacesRequest
  ): AsyncIterableIterator<model.WorkspaceSummary> {
    return paginateRecords(request, req => this.listWorkspaces(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkspaces operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkspacesResponseIterator(
    request: requests.ListWorkspacesRequest
  ): AsyncIterableIterator<responses.ListWorkspacesResponse> {
    return paginateResponses(request, req => this.listWorkspaces(req));
  }

  /**
   * Starts a workspace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartWorkspaceRequest
   * @return StartWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/StartWorkspace.ts.html |here} to see how to use StartWorkspace API.
   */
  public async startWorkspace(
    startWorkspaceRequest: requests.StartWorkspaceRequest
  ): Promise<responses.StartWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#startWorkspace.");
    const operationName = "startWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/StartWorkspace";
    const pathParams = {
      "{workspaceId}": startWorkspaceRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startWorkspaceRequest.ifMatch,
      "opc-request-id": startWorkspaceRequest.opcRequestId,
      "opc-retry-token": startWorkspaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartWorkspaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops a workspace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopWorkspaceRequest
   * @return StopWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/StopWorkspace.ts.html |here} to see how to use StopWorkspace API.
   */
  public async stopWorkspace(
    stopWorkspaceRequest: requests.StopWorkspaceRequest
  ): Promise<responses.StopWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#stopWorkspace.");
    const operationName = "stopWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/StopWorkspace";
    const pathParams = {
      "{workspaceId}": stopWorkspaceRequest.workspaceId
    };

    const queryParams = {
      "quiesceTimeout": stopWorkspaceRequest.quiesceTimeout,
      "isForceOperation": stopWorkspaceRequest.isForceOperation
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopWorkspaceRequest.ifMatch,
      "opc-request-id": stopWorkspaceRequest.opcRequestId,
      "opc-retry-token": stopWorkspaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopWorkspaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates an application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateApplicationRequest
   * @return UpdateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateApplication.ts.html |here} to see how to use UpdateApplication API.
   */
  public async updateApplication(
    updateApplicationRequest: requests.UpdateApplicationRequest
  ): Promise<responses.UpdateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateApplication.");
    const operationName = "updateApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Application/UpdateApplication";
    const pathParams = {
      "{workspaceId}": updateApplicationRequest.workspaceId,
      "{applicationKey}": updateApplicationRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateApplicationRequest.ifMatch,
      "opc-request-id": updateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplicationRequest.updateApplicationDetails,
        "UpdateApplicationDetails",
        model.UpdateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the detailed description of an Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateApplicationDetailedDescriptionRequest
   * @return UpdateApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateApplicationDetailedDescription.ts.html |here} to see how to use UpdateApplicationDetailedDescription API.
   */
  public async updateApplicationDetailedDescription(
    updateApplicationDetailedDescriptionRequest: requests.UpdateApplicationDetailedDescriptionRequest
  ): Promise<responses.UpdateApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#updateApplicationDetailedDescription."
      );
    const operationName = "updateApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/UpdateApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": updateApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": updateApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateApplicationDetailedDescriptionRequest.opcRequestId,
      "if-match": updateApplicationDetailedDescriptionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/detailedDescription",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplicationDetailedDescriptionRequest.updateApplicationDetailedDescriptionDetails,
        "UpdateDetailedDescriptionDetails",
        model.UpdateDetailedDescriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a connection under a data asset.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateConnectionRequest
   * @return UpdateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
   */
  public async updateConnection(
    updateConnectionRequest: requests.UpdateConnectionRequest
  ): Promise<responses.UpdateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateConnection.");
    const operationName = "updateConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Connection/UpdateConnection";
    const pathParams = {
      "{workspaceId}": updateConnectionRequest.workspaceId,
      "{connectionKey}": updateConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConnectionRequest.opcRequestId,
      "if-match": updateConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/connections/{connectionKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConnectionRequest.updateConnectionDetails,
        "UpdateConnectionDetails",
        model.UpdateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of a copy object request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateCopyObjectRequestRequest
   * @return UpdateCopyObjectRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateCopyObjectRequest.ts.html |here} to see how to use UpdateCopyObjectRequest API.
   */
  public async updateCopyObjectRequest(
    updateCopyObjectRequestRequest: requests.UpdateCopyObjectRequestRequest
  ): Promise<responses.UpdateCopyObjectRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateCopyObjectRequest.");
    const operationName = "updateCopyObjectRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/UpdateCopyObjectRequest";
    const pathParams = {
      "{workspaceId}": updateCopyObjectRequestRequest.workspaceId,
      "{copyObjectRequestKey}": updateCopyObjectRequestRequest.copyObjectRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateCopyObjectRequestRequest.opcRequestId,
      "if-match": updateCopyObjectRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCopyObjectRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/copyObjectRequests/{copyObjectRequestKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCopyObjectRequestRequest.updateCopyObjectRequestDetails,
        "UpdateCopyObjectRequestDetails",
        model.UpdateCopyObjectRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCopyObjectRequestResponse>{},
        body: await response.json(),
        bodyKey: "copyObjectRequest",
        bodyModel: model.CopyObjectRequest,
        type: "model.CopyObjectRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific data asset with default connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDataAssetRequest
   * @return UpdateDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateDataAsset.ts.html |here} to see how to use UpdateDataAsset API.
   */
  public async updateDataAsset(
    updateDataAssetRequest: requests.UpdateDataAssetRequest
  ): Promise<responses.UpdateDataAssetResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateDataAsset.");
    const operationName = "updateDataAsset";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataAsset/UpdateDataAsset";
    const pathParams = {
      "{workspaceId}": updateDataAssetRequest.workspaceId,
      "{dataAssetKey}": updateDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDataAssetRequest.opcRequestId,
      "if-match": updateDataAssetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataAssets/{dataAssetKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataAssetRequest.updateDataAssetDetails,
        "UpdateDataAssetDetails",
        model.UpdateDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific data flow.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDataFlowRequest
   * @return UpdateDataFlowResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateDataFlow.ts.html |here} to see how to use UpdateDataFlow API.
   */
  public async updateDataFlow(
    updateDataFlowRequest: requests.UpdateDataFlowRequest
  ): Promise<responses.UpdateDataFlowResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateDataFlow.");
    const operationName = "updateDataFlow";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DataFlow/UpdateDataFlow";
    const pathParams = {
      "{workspaceId}": updateDataFlowRequest.workspaceId,
      "{dataFlowKey}": updateDataFlowRequest.dataFlowKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDataFlowRequest.opcRequestId,
      "if-match": updateDataFlowRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataFlowRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/dataFlows/{dataFlowKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataFlowRequest.updateDataFlowDetails,
        "UpdateDataFlowDetails",
        model.UpdateDataFlowDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataFlowResponse>{},
        body: await response.json(),
        bodyKey: "dataFlow",
        bodyModel: model.DataFlow,
        type: "model.DataFlow",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a DIS Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDisApplicationRequest
   * @return UpdateDisApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateDisApplication.ts.html |here} to see how to use UpdateDisApplication API.
   */
  public async updateDisApplication(
    updateDisApplicationRequest: requests.UpdateDisApplicationRequest
  ): Promise<responses.UpdateDisApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateDisApplication.");
    const operationName = "updateDisApplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DisApplication/UpdateDisApplication";
    const pathParams = {
      "{workspaceId}": updateDisApplicationRequest.workspaceId,
      "{disApplicationId}": updateDisApplicationRequest.disApplicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDisApplicationRequest.ifMatch,
      "opc-request-id": updateDisApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDisApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{disApplicationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDisApplicationRequest.updateDisApplicationDetails,
        "UpdateDisApplicationDetails",
        model.UpdateDisApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDisApplicationResponse>{},
        body: await response.json(),
        bodyKey: "disApplication",
        bodyModel: model.DisApplication,
        type: "model.DisApplication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the detailed description of an Application.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDisApplicationDetailedDescriptionRequest
   * @return UpdateDisApplicationDetailedDescriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateDisApplicationDetailedDescription.ts.html |here} to see how to use UpdateDisApplicationDetailedDescription API.
   */
  public async updateDisApplicationDetailedDescription(
    updateDisApplicationDetailedDescriptionRequest: requests.UpdateDisApplicationDetailedDescriptionRequest
  ): Promise<responses.UpdateDisApplicationDetailedDescriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataIntegrationClient#updateDisApplicationDetailedDescription."
      );
    const operationName = "updateDisApplicationDetailedDescription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/DetailedDescription/UpdateDisApplicationDetailedDescription";
    const pathParams = {
      "{workspaceId}": updateDisApplicationDetailedDescriptionRequest.workspaceId,
      "{applicationKey}": updateDisApplicationDetailedDescriptionRequest.applicationKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDisApplicationDetailedDescriptionRequest.opcRequestId,
      "if-match": updateDisApplicationDetailedDescriptionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDisApplicationDetailedDescriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/disApplications/{applicationKey}/detailedDescription",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDisApplicationDetailedDescriptionRequest.updateDisApplicationDetailedDescriptionDetails,
        "UpdateDetailedDescriptionDetails",
        model.UpdateDetailedDescriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDisApplicationDetailedDescriptionResponse>{},
        body: await response.json(),
        bodyKey: "detailedDescription",
        bodyModel: model.DetailedDescription,
        type: "model.DetailedDescription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of a export object request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateExportRequestRequest
   * @return UpdateExportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateExportRequest.ts.html |here} to see how to use UpdateExportRequest API.
   */
  public async updateExportRequest(
    updateExportRequestRequest: requests.UpdateExportRequestRequest
  ): Promise<responses.UpdateExportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateExportRequest.");
    const operationName = "updateExportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/UpdateExportRequest";
    const pathParams = {
      "{workspaceId}": updateExportRequestRequest.workspaceId,
      "{exportRequestKey}": updateExportRequestRequest.exportRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateExportRequestRequest.opcRequestId,
      "if-match": updateExportRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateExportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/exportRequests/{exportRequestKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateExportRequestRequest.updateExportRequestDetails,
        "UpdateExportRequestDetails",
        model.UpdateExportRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateExportRequestResponse>{},
        body: await response.json(),
        bodyKey: "exportRequest",
        bodyModel: model.ExportRequest,
        type: "model.ExportRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the external publication object.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateExternalPublicationRequest
   * @return UpdateExternalPublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateExternalPublication.ts.html |here} to see how to use UpdateExternalPublication API.
   */
  public async updateExternalPublication(
    updateExternalPublicationRequest: requests.UpdateExternalPublicationRequest
  ): Promise<responses.UpdateExternalPublicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateExternalPublication.");
    const operationName = "updateExternalPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/ExternalPublication/UpdateExternalPublication";
    const pathParams = {
      "{workspaceId}": updateExternalPublicationRequest.workspaceId,
      "{taskKey}": updateExternalPublicationRequest.taskKey,
      "{externalPublicationsKey}": updateExternalPublicationRequest.externalPublicationsKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateExternalPublicationRequest.opcRequestId,
      "if-match": updateExternalPublicationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateExternalPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/tasks/{taskKey}/externalPublications/{externalPublicationsKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateExternalPublicationRequest.updateExternalPublicationDetails,
        "UpdateExternalPublicationDetails",
        model.UpdateExternalPublicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateExternalPublicationResponse>{},
        body: await response.json(),
        bodyKey: "externalPublication",
        bodyModel: model.ExternalPublication,
        type: "model.ExternalPublication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific folder.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateFolderRequest
   * @return UpdateFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateFolder.ts.html |here} to see how to use UpdateFolder API.
   */
  public async updateFolder(
    updateFolderRequest: requests.UpdateFolderRequest
  ): Promise<responses.UpdateFolderResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateFolder.");
    const operationName = "updateFolder";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Folder/UpdateFolder";
    const pathParams = {
      "{workspaceId}": updateFolderRequest.workspaceId,
      "{folderKey}": updateFolderRequest.folderKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateFolderRequest.opcRequestId,
      "if-match": updateFolderRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/folders/{folderKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFolderRequest.updateFolderDetails,
        "UpdateFolderDetails",
        model.UpdateFolderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific Function Library.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateFunctionLibraryRequest
   * @return UpdateFunctionLibraryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateFunctionLibrary.ts.html |here} to see how to use UpdateFunctionLibrary API.
   */
  public async updateFunctionLibrary(
    updateFunctionLibraryRequest: requests.UpdateFunctionLibraryRequest
  ): Promise<responses.UpdateFunctionLibraryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateFunctionLibrary.");
    const operationName = "updateFunctionLibrary";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/FunctionLibrary/UpdateFunctionLibrary";
    const pathParams = {
      "{workspaceId}": updateFunctionLibraryRequest.workspaceId,
      "{functionLibraryKey}": updateFunctionLibraryRequest.functionLibraryKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateFunctionLibraryRequest.opcRequestId,
      "if-match": updateFunctionLibraryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFunctionLibraryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/functionLibraries/{functionLibraryKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFunctionLibraryRequest.updateFunctionLibraryDetails,
        "UpdateFunctionLibraryDetails",
        model.UpdateFunctionLibraryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFunctionLibraryResponse>{},
        body: await response.json(),
        bodyKey: "functionLibrary",
        bodyModel: model.FunctionLibrary,
        type: "model.FunctionLibrary",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of a import object request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateImportRequestRequest
   * @return UpdateImportRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateImportRequest.ts.html |here} to see how to use UpdateImportRequest API.
   */
  public async updateImportRequest(
    updateImportRequestRequest: requests.UpdateImportRequestRequest
  ): Promise<responses.UpdateImportRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateImportRequest.");
    const operationName = "updateImportRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/UpdateImportRequest";
    const pathParams = {
      "{workspaceId}": updateImportRequestRequest.workspaceId,
      "{importRequestKey}": updateImportRequestRequest.importRequestKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateImportRequestRequest.opcRequestId,
      "if-match": updateImportRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateImportRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/importRequests/{importRequestKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateImportRequestRequest.updateImportRequestDetails,
        "UpdateImportRequestDetails",
        model.UpdateImportRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateImportRequestResponse>{},
        body: await response.json(),
        bodyKey: "importRequest",
        bodyModel: model.ImportRequest,
        type: "model.ImportRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific pipeline.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdatePipelineRequest
   * @return UpdatePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdatePipeline.ts.html |here} to see how to use UpdatePipeline API.
   */
  public async updatePipeline(
    updatePipelineRequest: requests.UpdatePipelineRequest
  ): Promise<responses.UpdatePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updatePipeline.");
    const operationName = "updatePipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Pipeline/UpdatePipeline";
    const pathParams = {
      "{workspaceId}": updatePipelineRequest.workspaceId,
      "{pipelineKey}": updatePipelineRequest.pipelineKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePipelineRequest.opcRequestId,
      "if-match": updatePipelineRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/pipelines/{pipelineKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePipelineRequest.updatePipelineDetails,
        "UpdatePipelineDetails",
        model.UpdatePipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePipelineResponse>{},
        body: await response.json(),
        bodyKey: "pipeline",
        bodyModel: model.Pipeline,
        type: "model.Pipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific project.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateProject.");
    const operationName = "updateProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Project/UpdateProject";
    const pathParams = {
      "{workspaceId}": updateProjectRequest.workspaceId,
      "{projectKey}": updateProjectRequest.projectKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateProjectRequest.opcRequestId,
      "if-match": updateProjectRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/projects/{projectKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the application references. For example, to map a data asset to a different target object.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateReferenceRequest
   * @return UpdateReferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateReference.ts.html |here} to see how to use UpdateReference API.
   */
  public async updateReference(
    updateReferenceRequest: requests.UpdateReferenceRequest
  ): Promise<responses.UpdateReferenceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateReference.");
    const operationName = "updateReference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Reference/UpdateReference";
    const pathParams = {
      "{workspaceId}": updateReferenceRequest.workspaceId,
      "{applicationKey}": updateReferenceRequest.applicationKey,
      "{referenceKey}": updateReferenceRequest.referenceKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateReferenceRequest.opcRequestId,
      "if-match": updateReferenceRequest.ifMatch,
      "opc-retry-token": updateReferenceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateReferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/references/{referenceKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateReferenceRequest.updateReferenceDetails,
        "UpdateReferenceDetails",
        model.UpdateReferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateReferenceResponse>{},
        body: await response.json(),
        bodyKey: "reference",
        bodyModel: model.Reference,
        type: "model.Reference",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint used to update the schedule
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateScheduleRequest
   * @return UpdateScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateSchedule.ts.html |here} to see how to use UpdateSchedule API.
   */
  public async updateSchedule(
    updateScheduleRequest: requests.UpdateScheduleRequest
  ): Promise<responses.UpdateScheduleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateSchedule.");
    const operationName = "updateSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Schedule/UpdateSchedule";
    const pathParams = {
      "{workspaceId}": updateScheduleRequest.workspaceId,
      "{applicationKey}": updateScheduleRequest.applicationKey,
      "{scheduleKey}": updateScheduleRequest.scheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateScheduleRequest.ifMatch,
      "opc-request-id": updateScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/schedules/{scheduleKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduleRequest.updateScheduleDetails,
        "UpdateScheduleDetails",
        model.UpdateScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduleResponse>{},
        body: await response.json(),
        bodyKey: "schedule",
        bodyModel: model.Schedule,
        type: "model.Schedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific task. For example, you can update the task description or move the task to a different folder by changing the `aggregatorKey` to a different folder in the registry.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTaskRequest
   * @return UpdateTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateTask.ts.html |here} to see how to use UpdateTask API.
   */
  public async updateTask(
    updateTaskRequest: requests.UpdateTaskRequest
  ): Promise<responses.UpdateTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateTask.");
    const operationName = "updateTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Task/UpdateTask";
    const pathParams = {
      "{workspaceId}": updateTaskRequest.workspaceId,
      "{taskKey}": updateTaskRequest.taskKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTaskRequest.opcRequestId,
      "if-match": updateTaskRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/tasks/{taskKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTaskRequest.updateTaskDetails,
        "UpdateTaskDetails",
        model.UpdateTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTaskResponse>{},
        body: await response.json(),
        bodyKey: "task",
        bodyModel: model.Task,
        type: "model.Task",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of the task run. For example, aborts a task run.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTaskRunRequest
   * @return UpdateTaskRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateTaskRun.ts.html |here} to see how to use UpdateTaskRun API.
   */
  public async updateTaskRun(
    updateTaskRunRequest: requests.UpdateTaskRunRequest
  ): Promise<responses.UpdateTaskRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateTaskRun.");
    const operationName = "updateTaskRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskRun/UpdateTaskRun";
    const pathParams = {
      "{workspaceId}": updateTaskRunRequest.workspaceId,
      "{applicationKey}": updateTaskRunRequest.applicationKey,
      "{taskRunKey}": updateTaskRunRequest.taskRunKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTaskRunRequest.opcRequestId,
      "if-match": updateTaskRunRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTaskRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/applications/{applicationKey}/taskRuns/{taskRunKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTaskRunRequest.updateTaskRunDetails,
        "UpdateTaskRunDetails",
        model.UpdateTaskRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTaskRunResponse>{},
        body: await response.json(),
        bodyKey: "taskRunDetails",
        bodyModel: model.TaskRunDetails,
        type: "model.TaskRunDetails",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Endpoint used to update the TaskSchedule
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTaskScheduleRequest
   * @return UpdateTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateTaskSchedule.ts.html |here} to see how to use UpdateTaskSchedule API.
   */
  public async updateTaskSchedule(
    updateTaskScheduleRequest: requests.UpdateTaskScheduleRequest
  ): Promise<responses.UpdateTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateTaskSchedule.");
    const operationName = "updateTaskSchedule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/TaskSchedule/UpdateTaskSchedule";
    const pathParams = {
      "{workspaceId}": updateTaskScheduleRequest.workspaceId,
      "{applicationKey}": updateTaskScheduleRequest.applicationKey,
      "{taskScheduleKey}": updateTaskScheduleRequest.taskScheduleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTaskScheduleRequest.ifMatch,
      "opc-request-id": updateTaskScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/workspaces/{workspaceId}/applications/{applicationKey}/taskSchedules/{taskScheduleKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTaskScheduleRequest.updateTaskScheduleDetails,
        "UpdateTaskScheduleDetails",
        model.UpdateTaskScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific UserDefinedFunction.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateUserDefinedFunctionRequest
   * @return UpdateUserDefinedFunctionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateUserDefinedFunction.ts.html |here} to see how to use UpdateUserDefinedFunction API.
   */
  public async updateUserDefinedFunction(
    updateUserDefinedFunctionRequest: requests.UpdateUserDefinedFunctionRequest
  ): Promise<responses.UpdateUserDefinedFunctionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataIntegrationClient#updateUserDefinedFunction.");
    const operationName = "updateUserDefinedFunction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/UserDefinedFunction/UpdateUserDefinedFunction";
    const pathParams = {
      "{workspaceId}": updateUserDefinedFunctionRequest.workspaceId,
      "{userDefinedFunctionKey}": updateUserDefinedFunctionRequest.userDefinedFunctionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateUserDefinedFunctionRequest.opcRequestId,
      "if-match": updateUserDefinedFunctionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateUserDefinedFunctionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}/userDefinedFunctions/{userDefinedFunctionKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUserDefinedFunctionRequest.updateUserDefinedFunctionDetails,
        "UpdateUserDefinedFunctionDetails",
        model.UpdateUserDefinedFunctionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUserDefinedFunctionResponse>{},
        body: await response.json(),
        bodyKey: "userDefinedFunction",
        bodyModel: model.UserDefinedFunction,
        type: "model.UserDefinedFunction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Data Integration workspace.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateWorkspaceRequest
   * @return UpdateWorkspaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataintegration/UpdateWorkspace.ts.html |here} to see how to use UpdateWorkspace API.
   */
  public async updateWorkspace(
    updateWorkspaceRequest: requests.UpdateWorkspaceRequest
  ): Promise<responses.UpdateWorkspaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataIntegrationClient#updateWorkspace.");
    const operationName = "updateWorkspace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-integration/20200430/Workspace/UpdateWorkspace";
    const pathParams = {
      "{workspaceId}": updateWorkspaceRequest.workspaceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateWorkspaceRequest.ifMatch,
      "opc-request-id": updateWorkspaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateWorkspaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workspaces/{workspaceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWorkspaceRequest.updateWorkspaceDetails,
        "UpdateWorkspaceDetails",
        model.UpdateWorkspaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWorkspaceResponse>{},
        body: await response.json(),
        bodyKey: "workspace",
        bodyModel: model.Workspace,
        type: "model.Workspace",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
