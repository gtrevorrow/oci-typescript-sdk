/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage distributed databases.
 * OpenAPI spec version: 20230301
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ShardedDatabaseServiceWaiter } from "./shardeddatabaseservice-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ShardedDatabaseServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ShardedDatabaseServiceClient {
  protected static serviceEndpointTemplate = "https://globaldb.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ShardedDatabaseServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ShardedDatabaseService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("globallydistributeddatabase")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("globallydistributeddatabase");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230301";
    if (this.logger)
      this.logger.info(`ShardedDatabaseServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ShardedDatabaseServiceClient.serviceEndpointTemplate,
        this._region,
        ShardedDatabaseServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ShardedDatabaseServiceClient.serviceEndpointTemplate,
        this._regionId,
        ShardedDatabaseServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ShardedDatabaseServiceClient.serviceEndpointTemplate,
      region,
      ShardedDatabaseServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ShardedDatabaseServiceClient.serviceEndpointTemplate,
      regionId,
      ShardedDatabaseServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ShardedDatabaseServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ShardedDatabaseServiceWaiter {
    this._waiters = new ShardedDatabaseServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ShardedDatabaseServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Move the private endpoint to the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangePrivateEndpointCompartmentRequest
   * @return ChangePrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ChangePrivateEndpointCompartment.ts.html |here} to see how to use ChangePrivateEndpointCompartment API.
   */
  public async changePrivateEndpointCompartment(
    changePrivateEndpointCompartmentRequest: requests.ChangePrivateEndpointCompartmentRequest
  ): Promise<responses.ChangePrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#changePrivateEndpointCompartment."
      );
    const operationName = "changePrivateEndpointCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateEndpointId}": changePrivateEndpointCompartmentRequest.privateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changePrivateEndpointCompartmentRequest.ifMatch,
      "opc-retry-token": changePrivateEndpointCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints/{privateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePrivateEndpointCompartmentRequest.changePrivateEndpointCompartmentDetails,
        "ChangePrivateEndpointCompartmentDetails",
        model.ChangePrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the sharded database database and its dependent resources to the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeShardedDatabaseCompartmentRequest
   * @return ChangeShardedDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ChangeShardedDatabaseCompartment.ts.html |here} to see how to use ChangeShardedDatabaseCompartment API.
   */
  public async changeShardedDatabaseCompartment(
    changeShardedDatabaseCompartmentRequest: requests.ChangeShardedDatabaseCompartmentRequest
  ): Promise<responses.ChangeShardedDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#changeShardedDatabaseCompartment."
      );
    const operationName = "changeShardedDatabaseCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": changeShardedDatabaseCompartmentRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeShardedDatabaseCompartmentRequest.opcRequestId,
      "if-match": changeShardedDatabaseCompartmentRequest.ifMatch,
      "opc-retry-token": changeShardedDatabaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeShardedDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeShardedDatabaseCompartmentRequest.changeShardedDatabaseCompartmentDetails,
        "ChangeShardedDatabaseCompartmentDetails",
        model.ChangeShardedDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeShardedDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Configure new Global Service Manager(GSM aka shard manager) instances for the sharded database. Specify the names
   * of old GSM instances that need to be replaced via parameter oldGsmNames in the request payload. Also specify
   * whether rotated GSM instances shall be provisioned with latest image of GSM software or the image used by
   * existing GSM instances shall be used.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureShardedDatabaseGsmsRequest
   * @return ConfigureShardedDatabaseGsmsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ConfigureShardedDatabaseGsms.ts.html |here} to see how to use ConfigureShardedDatabaseGsms API.
   */
  public async configureShardedDatabaseGsms(
    configureShardedDatabaseGsmsRequest: requests.ConfigureShardedDatabaseGsmsRequest
  ): Promise<responses.ConfigureShardedDatabaseGsmsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#configureShardedDatabaseGsms."
      );
    const operationName = "configureShardedDatabaseGsms";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": configureShardedDatabaseGsmsRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureShardedDatabaseGsmsRequest.opcRetryToken,
      "opc-request-id": configureShardedDatabaseGsmsRequest.opcRequestId,
      "if-match": configureShardedDatabaseGsmsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureShardedDatabaseGsmsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/configureGsms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        configureShardedDatabaseGsmsRequest.configureShardedDatabaseGsmsDetails,
        "ConfigureShardedDatabaseGsmsDetails",
        model.ConfigureShardedDatabaseGsmsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureShardedDatabaseGsmsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Once all components of sharded database are provisioned, and signed GSM certificates are successfully uploaded, this
   * api shall be invoked to configure sharding on the sharded database. Note that this 'ConfigureSharding' API also needs to be
   * invoked after successfully adding a new shard to the sharded database using PATCH api. If this API is not
   * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
   * the sharded database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConfigureShardingRequest
   * @return ConfigureShardingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ConfigureSharding.ts.html |here} to see how to use ConfigureSharding API.
   */
  public async configureSharding(
    configureShardingRequest: requests.ConfigureShardingRequest
  ): Promise<responses.ConfigureShardingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#configureSharding.");
    const operationName = "configureSharding";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": configureShardingRequest.shardedDatabaseId
    };

    const queryParams = {
      "isRebalanceRequired": configureShardingRequest.isRebalanceRequired
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": configureShardingRequest.opcRetryToken,
      "opc-request-id": configureShardingRequest.opcRequestId,
      "if-match": configureShardingRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureShardingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/configureSharding",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureShardingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a PrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePrivateEndpointRequest
   * @return CreatePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/CreatePrivateEndpoint.ts.html |here} to see how to use CreatePrivateEndpoint API.
   */
  public async createPrivateEndpoint(
    createPrivateEndpointRequest: requests.CreatePrivateEndpointRequest
  ): Promise<responses.CreatePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#createPrivateEndpoint.");
    const operationName = "createPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPrivateEndpointRequest.createPrivateEndpointDetails,
        "CreatePrivateEndpointDetails",
        model.CreatePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "privateEndpoint",
        bodyModel: model.PrivateEndpoint,
        type: "model.PrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Sharded Database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateShardedDatabaseRequest
   * @return CreateShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/CreateShardedDatabase.ts.html |here} to see how to use CreateShardedDatabase API.
   */
  public async createShardedDatabase(
    createShardedDatabaseRequest: requests.CreateShardedDatabaseRequest
  ): Promise<responses.CreateShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#createShardedDatabase.");
    const operationName = "createShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createShardedDatabaseRequest.opcRetryToken,
      "opc-request-id": createShardedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createShardedDatabaseRequest.createShardedDatabaseDetails,
        "CreateShardedDatabaseDetails",
        model.CreateShardedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateShardedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "shardedDatabase",
        bodyModel: model.ShardedDatabase,
        type: "model.ShardedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the given private endpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePrivateEndpointRequest
   * @return DeletePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DeletePrivateEndpoint.ts.html |here} to see how to use DeletePrivateEndpoint API.
   */
  public async deletePrivateEndpoint(
    deletePrivateEndpointRequest: requests.DeletePrivateEndpointRequest
  ): Promise<responses.DeletePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#deletePrivateEndpoint.");
    const operationName = "deletePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateEndpointId}": deletePrivateEndpointRequest.privateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deletePrivateEndpointRequest.opcRequestId,
      "opc-retry-token": deletePrivateEndpointRequest.opcRetryToken,
      "if-match": deletePrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints/{privateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Terminate the given sharded databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteShardedDatabaseRequest
   * @return DeleteShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DeleteShardedDatabase.ts.html |here} to see how to use DeleteShardedDatabase API.
   */
  public async deleteShardedDatabase(
    deleteShardedDatabaseRequest: requests.DeleteShardedDatabaseRequest
  ): Promise<responses.DeleteShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#deleteShardedDatabase.");
    const operationName = "deleteShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": deleteShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteShardedDatabaseRequest.opcRequestId,
      "opc-retry-token": deleteShardedDatabaseRequest.opcRetryToken,
      "if-match": deleteShardedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteShardedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the common certificate signing request for GSMs. Download the <sdb-prefix>.csr file from
   * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
   * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
   * generate wallets for the GSM instances of the sharded database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadGsmCertificateSigningRequestRequest
   * @return DownloadGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DownloadGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadGsmCertificateSigningRequest API.
   */
  public async downloadGsmCertificateSigningRequest(
    downloadGsmCertificateSigningRequestRequest: requests.DownloadGsmCertificateSigningRequestRequest
  ): Promise<responses.DownloadGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#downloadGsmCertificateSigningRequest."
      );
    const operationName = "downloadGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": downloadGsmCertificateSigningRequestRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": downloadGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token": downloadGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/downloadGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadGsmCertificateSigningRequestResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Sharded Database Connection Strings.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param FetchConnectionStringRequest
   * @return FetchConnectionStringResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/FetchConnectionString.ts.html |here} to see how to use FetchConnectionString API.
   */
  public async fetchConnectionString(
    fetchConnectionStringRequest: requests.FetchConnectionStringRequest
  ): Promise<responses.FetchConnectionStringResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#fetchConnectionString.");
    const operationName = "fetchConnectionString";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": fetchConnectionStringRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": fetchConnectionStringRequest.opcRetryToken,
      "opc-request-id": fetchConnectionStringRequest.opcRequestId,
      "if-match": fetchConnectionStringRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      fetchConnectionStringRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/getConnectionString",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.FetchConnectionStringResponse>{},
        body: await response.json(),
        bodyKey: "connectionString",
        bodyModel: model.ConnectionString,
        type: "model.ConnectionString",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of cloudAutonomousVMClusters for the given tenancy, that can be sharded.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param FetchShardableCloudAutonomousVmClustersRequest
   * @return FetchShardableCloudAutonomousVmClustersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/FetchShardableCloudAutonomousVmClusters.ts.html |here} to see how to use FetchShardableCloudAutonomousVmClusters API.
   */
  public async fetchShardableCloudAutonomousVmClusters(
    fetchShardableCloudAutonomousVmClustersRequest: requests.FetchShardableCloudAutonomousVmClustersRequest
  ): Promise<responses.FetchShardableCloudAutonomousVmClustersResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#fetchShardableCloudAutonomousVmClusters."
      );
    const operationName = "fetchShardableCloudAutonomousVmClusters";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": fetchShardableCloudAutonomousVmClustersRequest.opcRetryToken,
      "opc-request-id": fetchShardableCloudAutonomousVmClustersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      fetchShardableCloudAutonomousVmClustersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/actions/listShardableCloudAutonomousVmClusters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        fetchShardableCloudAutonomousVmClustersRequest.fetchShardableCloudAutonomousVmClustersDetails,
        "FetchShardableCloudAutonomousVmClustersDetails",
        model.FetchShardableCloudAutonomousVmClustersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.FetchShardableCloudAutonomousVmClustersResponse>{},
        body: await response.json(),
        bodyKey: "shardableCloudAutonomousVmClusters",
        bodyModel: model.ShardableCloudAutonomousVmClusters,
        type: "model.ShardableCloudAutonomousVmClusters",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the certificate signing request for GSM instances of the sharded database. Once certificate signing
   * request is generated, then customers can download the certificate signing request using
   * 'downloadGsmCertificateSigningRequest' api call.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateGsmCertificateSigningRequestRequest
   * @return GenerateGsmCertificateSigningRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GenerateGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateGsmCertificateSigningRequest API.
   */
  public async generateGsmCertificateSigningRequest(
    generateGsmCertificateSigningRequestRequest: requests.GenerateGsmCertificateSigningRequestRequest
  ): Promise<responses.GenerateGsmCertificateSigningRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#generateGsmCertificateSigningRequest."
      );
    const operationName = "generateGsmCertificateSigningRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": generateGsmCertificateSigningRequestRequest.shardedDatabaseId
    };

    const queryParams = {
      "caBundleId": generateGsmCertificateSigningRequestRequest.caBundleId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateGsmCertificateSigningRequestRequest.opcRequestId,
      "if-match": generateGsmCertificateSigningRequestRequest.ifMatch,
      "opc-retry-token": generateGsmCertificateSigningRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateGsmCertificateSigningRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/generateGsmCertificateSigningRequest",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateGsmCertificateSigningRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generate the wallet associated with sharded database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateWalletRequest
   * @return GenerateWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GenerateWallet.ts.html |here} to see how to use GenerateWallet API.
   */
  public async generateWallet(
    generateWalletRequest: requests.GenerateWalletRequest
  ): Promise<responses.GenerateWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#generateWallet.");
    const operationName = "generateWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": generateWalletRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateWalletRequest.opcRequestId,
      "if-match": generateWalletRequest.ifMatch,
      "opc-retry-token": generateWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/generateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateWalletRequest.generateWalletDetails,
        "GenerateWalletDetails",
        model.GenerateWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateWalletResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the PrivateEndpoint resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPrivateEndpointRequest
   * @return GetPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetPrivateEndpoint.ts.html |here} to see how to use GetPrivateEndpoint API.
   */
  public async getPrivateEndpoint(
    getPrivateEndpointRequest: requests.GetPrivateEndpointRequest
  ): Promise<responses.GetPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#getPrivateEndpoint.");
    const operationName = "getPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateEndpointId}": getPrivateEndpointRequest.privateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getPrivateEndpointRequest.ifNoneMatch,
      "opc-request-id": getPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints/{privateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "privateEndpoint",
        bodyModel: model.PrivateEndpoint,
        type: "model.PrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Sharded database identified by given id.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetShardedDatabaseRequest
   * @return GetShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetShardedDatabase.ts.html |here} to see how to use GetShardedDatabase API.
   */
  public async getShardedDatabase(
    getShardedDatabaseRequest: requests.GetShardedDatabaseRequest
  ): Promise<responses.GetShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#getShardedDatabase.");
    const operationName = "getShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": getShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {
      "metadata": getShardedDatabaseRequest.metadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getShardedDatabaseRequest.ifNoneMatch,
      "opc-request-id": getShardedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetShardedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "shardedDatabase",
        bodyModel: model.ShardedDatabase,
        type: "model.ShardedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of PrivateEndpoints.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPrivateEndpointsRequest
   * @return ListPrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListPrivateEndpoints.ts.html |here} to see how to use ListPrivateEndpoints API.
   */
  public async listPrivateEndpoints(
    listPrivateEndpointsRequest: requests.ListPrivateEndpointsRequest
  ): Promise<responses.ListPrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#listPrivateEndpoints.");
    const operationName = "listPrivateEndpoints";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPrivateEndpointsRequest.compartmentId,
      "lifecycleState": listPrivateEndpointsRequest.lifecycleState,
      "limit": listPrivateEndpointsRequest.limit,
      "page": listPrivateEndpointsRequest.page,
      "sortOrder": listPrivateEndpointsRequest.sortOrder,
      "sortBy": listPrivateEndpointsRequest.sortBy,
      "displayName": listPrivateEndpointsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "privateEndpointCollection",
        bodyModel: model.PrivateEndpointCollection,
        type: "model.PrivateEndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of Sharded databases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListShardedDatabasesRequest
   * @return ListShardedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListShardedDatabases.ts.html |here} to see how to use ListShardedDatabases API.
   */
  public async listShardedDatabases(
    listShardedDatabasesRequest: requests.ListShardedDatabasesRequest
  ): Promise<responses.ListShardedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#listShardedDatabases.");
    const operationName = "listShardedDatabases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listShardedDatabasesRequest.compartmentId,
      "lifecycleState": listShardedDatabasesRequest.lifecycleState,
      "limit": listShardedDatabasesRequest.limit,
      "page": listShardedDatabasesRequest.page,
      "sortOrder": listShardedDatabasesRequest.sortOrder,
      "sortBy": listShardedDatabasesRequest.sortBy,
      "displayName": listShardedDatabasesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listShardedDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listShardedDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListShardedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "shardedDatabaseCollection",
        bodyModel: model.ShardedDatabaseCollection,
        type: "model.ShardedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patch operation to add, remove or update shards to the sharded database topology. In single patch
   * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
   * and remove in single operation is not allowed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchShardedDatabaseRequest
   * @return PatchShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/PatchShardedDatabase.ts.html |here} to see how to use PatchShardedDatabase API.
   */
  public async patchShardedDatabase(
    patchShardedDatabaseRequest: requests.PatchShardedDatabaseRequest
  ): Promise<responses.PatchShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#patchShardedDatabase.");
    const operationName = "patchShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": patchShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchShardedDatabaseRequest.ifMatch,
      "opc-request-id": patchShardedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchShardedDatabaseRequest.patchShardedDatabaseDetails,
        "PatchShardedDatabaseDetails",
        model.PatchShardedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchShardedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sharded database pre-validation request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PrevalidateShardedDatabaseRequest
   * @return PrevalidateShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/PrevalidateShardedDatabase.ts.html |here} to see how to use PrevalidateShardedDatabase API.
   */
  public async prevalidateShardedDatabase(
    prevalidateShardedDatabaseRequest: requests.PrevalidateShardedDatabaseRequest
  ): Promise<responses.PrevalidateShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#prevalidateShardedDatabase."
      );
    const operationName = "prevalidateShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": prevalidateShardedDatabaseRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": prevalidateShardedDatabaseRequest.opcRetryToken,
      "opc-request-id": prevalidateShardedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      prevalidateShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/actions/prevalidate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        prevalidateShardedDatabaseRequest.prevalidateShardedDatabaseDetails,
        "PrevalidateShardedDatabaseDetails",
        model.PrevalidateShardedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PrevalidateShardedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "prevalidateShardedDatabaseResult",
        bodyModel: model.PrevalidateShardedDatabaseResult,
        type: "model.PrevalidateShardedDatabaseResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to reinstate the proxy instances associated with the private endpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ReinstateProxyInstanceRequest
   * @return ReinstateProxyInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ReinstateProxyInstance.ts.html |here} to see how to use ReinstateProxyInstance API.
   */
  public async reinstateProxyInstance(
    reinstateProxyInstanceRequest: requests.ReinstateProxyInstanceRequest
  ): Promise<responses.ReinstateProxyInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#reinstateProxyInstance.");
    const operationName = "reinstateProxyInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateEndpointId}": reinstateProxyInstanceRequest.privateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": reinstateProxyInstanceRequest.opcRequestId,
      "if-match": reinstateProxyInstanceRequest.ifMatch,
      "opc-retry-token": reinstateProxyInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      reinstateProxyInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints/{privateEndpointId}/actions/reinstateProxyInstance",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ReinstateProxyInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start the shards, catalog and GSMs of Sharded Database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartShardedDatabaseRequest
   * @return StartShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/StartShardedDatabase.ts.html |here} to see how to use StartShardedDatabase API.
   */
  public async startShardedDatabase(
    startShardedDatabaseRequest: requests.StartShardedDatabaseRequest
  ): Promise<responses.StartShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#startShardedDatabase.");
    const operationName = "startShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": startShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startShardedDatabaseRequest.opcRetryToken,
      "opc-request-id": startShardedDatabaseRequest.opcRequestId,
      "if-match": startShardedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/startDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartShardedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stop the shards, catalog and GSM instances for the sharded database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopShardedDatabaseRequest
   * @return StopShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/StopShardedDatabase.ts.html |here} to see how to use StopShardedDatabase API.
   */
  public async stopShardedDatabase(
    stopShardedDatabaseRequest: requests.StopShardedDatabaseRequest
  ): Promise<responses.StopShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#stopShardedDatabase.");
    const operationName = "stopShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": stopShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopShardedDatabaseRequest.opcRetryToken,
      "opc-request-id": stopShardedDatabaseRequest.opcRequestId,
      "if-match": stopShardedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/stopDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopShardedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of privateendpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePrivateEndpointRequest
   * @return UpdatePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UpdatePrivateEndpoint.ts.html |here} to see how to use UpdatePrivateEndpoint API.
   */
  public async updatePrivateEndpoint(
    updatePrivateEndpointRequest: requests.UpdatePrivateEndpointRequest
  ): Promise<responses.UpdatePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#updatePrivateEndpoint.");
    const operationName = "updatePrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateEndpointId}": updatePrivateEndpointRequest.privateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updatePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": updatePrivateEndpointRequest.opcRequestId,
      "if-match": updatePrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateEndpoints/{privateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePrivateEndpointRequest.updatePrivateEndpointDetails,
        "UpdatePrivateEndpointDetails",
        model.UpdatePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "privateEndpoint",
        bodyModel: model.PrivateEndpoint,
        type: "model.PrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of sharded database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateShardedDatabaseRequest
   * @return UpdateShardedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UpdateShardedDatabase.ts.html |here} to see how to use UpdateShardedDatabase API.
   */
  public async updateShardedDatabase(
    updateShardedDatabaseRequest: requests.UpdateShardedDatabaseRequest
  ): Promise<responses.UpdateShardedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#updateShardedDatabase.");
    const operationName = "updateShardedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": updateShardedDatabaseRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateShardedDatabaseRequest.opcRequestId,
      "if-match": updateShardedDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateShardedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateShardedDatabaseRequest.updateShardedDatabaseDetails,
        "UpdateShardedDatabaseDetails",
        model.UpdateShardedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateShardedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "shardedDatabase",
        bodyModel: model.ShardedDatabase,
        type: "model.ShardedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
   * sharded database. Customer shall provide the CA signed certificate key details by adding the certificate
   * in request body.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadSignedCertificateAndGenerateWalletRequest
   * @return UploadSignedCertificateAndGenerateWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UploadSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadSignedCertificateAndGenerateWallet API.
   */
  public async uploadSignedCertificateAndGenerateWallet(
    uploadSignedCertificateAndGenerateWalletRequest: requests.UploadSignedCertificateAndGenerateWalletRequest
  ): Promise<responses.UploadSignedCertificateAndGenerateWalletResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ShardedDatabaseServiceClient#uploadSignedCertificateAndGenerateWallet."
      );
    const operationName = "uploadSignedCertificateAndGenerateWallet";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": uploadSignedCertificateAndGenerateWalletRequest.shardedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": uploadSignedCertificateAndGenerateWalletRequest.opcRequestId,
      "if-match": uploadSignedCertificateAndGenerateWalletRequest.ifMatch,
      "opc-retry-token": uploadSignedCertificateAndGenerateWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadSignedCertificateAndGenerateWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/shardedDatabases/{shardedDatabaseId}/actions/uploadSignedCertificateAndGenerateWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        uploadSignedCertificateAndGenerateWalletRequest.uploadSignedCertificateAndGenerateWalletDetails,
        "UploadSignedCertificateAndGenerateWalletDetails",
        model.UploadSignedCertificateAndGenerateWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadSignedCertificateAndGenerateWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validate the network connectivity between components of sharded database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ValidateNetworkRequest
   * @return ValidateNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ValidateNetwork.ts.html |here} to see how to use ValidateNetwork API.
   */
  public async validateNetwork(
    validateNetworkRequest: requests.ValidateNetworkRequest
  ): Promise<responses.ValidateNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShardedDatabaseServiceClient#validateNetwork.");
    const operationName = "validateNetwork";
    const apiReferenceLink = "";
    const pathParams = {
      "{shardedDatabaseId}": validateNetworkRequest.shardedDatabaseId
    };

    const queryParams = {
      "isSurrogate": validateNetworkRequest.isSurrogate,
      "resourceName": validateNetworkRequest.resourceName,
      "isPrimary": validateNetworkRequest.isPrimary
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": validateNetworkRequest.ifMatch,
      "opc-retry-token": validateNetworkRequest.opcRetryToken,
      "opc-request-id": validateNetworkRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shardedDatabases/{shardedDatabaseId}/actions/validateNetwork",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateNetworkResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
