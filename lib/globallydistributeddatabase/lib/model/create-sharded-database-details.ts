/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage distributed databases.
 * OpenAPI spec version: 20230301
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details required for Sharded database creation.
 */
export interface CreateShardedDatabaseDetails {
  /**
   * Identifier of the compartment where sharded database is to be created.
   */
  "compartmentId": string;
  /**
   * Oracle sharded database display name.
   */
  "displayName": string;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };

  "dbDeploymentType": string;
}

export namespace CreateShardedDatabaseDetails {
  export function getJsonObj(obj: CreateShardedDatabaseDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "dbDeploymentType" in obj && obj.dbDeploymentType) {
      switch (obj.dbDeploymentType) {
        case "DEDICATED":
          return model.CreateDedicatedShardedDatabase.getJsonObj(
            <model.CreateDedicatedShardedDatabase>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.dbDeploymentType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateShardedDatabaseDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "dbDeploymentType" in obj && obj.dbDeploymentType) {
      switch (obj.dbDeploymentType) {
        case "DEDICATED":
          return model.CreateDedicatedShardedDatabase.getDeserializedJsonObj(
            <model.CreateDedicatedShardedDatabase>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.dbDeploymentType}`);
      }
    }
    return jsonObj;
  }
}
