/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.cloud.oracle.com/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * OPSI data object.
 */
export interface OpsiDataObject {
  /**
   * Unique identifier of OPSI data object.
   */
  "identifier": string;
  /**
   * User-friendly name of OPSI data object.
   */
  "displayName": string;
  /**
   * Description of OPSI data object.
   */
  "description"?: string;
  /**
   * Name of the data object, which can be used in data object queries just like how view names are used in a query.
   */
  "name"?: string;
  /**
   * Names of all the groups to which the data object belongs to.
   */
  "groupNames"?: Array<string>;
  /**
   * Time period supported by the data object for quering data.
   * Time period is in ISO 8601 format with respect to current time. Default is last 30 days represented by P30D.
   * Examples: P90D (last 90 days), P4W (last 4 weeks), P2M (last 2 months), P1Y (last 12 months).
   *
   */
  "supportedQueryTimePeriod"?: string;
  /**
   * Metadata of columns in a data object.
   */
  "columnsMetadata": Array<model.DataObjectColumnMetadata>;
  /**
   * Supported query parameters by this OPSI data object that can be configured while a data object query involving this data object is executed.
   */
  "supportedQueryParams"?: Array<model.OpsiDataObjectSupportedQueryParam>;

  "dataObjectType": string;
}

export namespace OpsiDataObject {
  export function getJsonObj(obj: OpsiDataObject): object {
    const jsonObj = {
      ...obj,
      ...{
        "columnsMetadata": obj.columnsMetadata
          ? obj.columnsMetadata.map(item => {
              return model.DataObjectColumnMetadata.getJsonObj(item);
            })
          : undefined,
        "supportedQueryParams": obj.supportedQueryParams
          ? obj.supportedQueryParams.map(item => {
              return model.OpsiDataObjectSupportedQueryParam.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "dataObjectType" in obj && obj.dataObjectType) {
      switch (obj.dataObjectType) {
        case "HOST_INSIGHTS_DATA_OBJECT":
          return model.HostInsightsDataObject.getJsonObj(
            <model.HostInsightsDataObject>(<object>jsonObj),
            true
          );
        case "EXADATA_INSIGHTS_DATA_OBJECT":
          return model.ExadataInsightsDataObject.getJsonObj(
            <model.ExadataInsightsDataObject>(<object>jsonObj),
            true
          );
        case "DATABASE_INSIGHTS_DATA_OBJECT":
          return model.DatabaseInsightsDataObject.getJsonObj(
            <model.DatabaseInsightsDataObject>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.dataObjectType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: OpsiDataObject): object {
    const jsonObj = {
      ...obj,
      ...{
        "columnsMetadata": obj.columnsMetadata
          ? obj.columnsMetadata.map(item => {
              return model.DataObjectColumnMetadata.getDeserializedJsonObj(item);
            })
          : undefined,
        "supportedQueryParams": obj.supportedQueryParams
          ? obj.supportedQueryParams.map(item => {
              return model.OpsiDataObjectSupportedQueryParam.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "dataObjectType" in obj && obj.dataObjectType) {
      switch (obj.dataObjectType) {
        case "HOST_INSIGHTS_DATA_OBJECT":
          return model.HostInsightsDataObject.getDeserializedJsonObj(
            <model.HostInsightsDataObject>(<object>jsonObj),
            true
          );
        case "EXADATA_INSIGHTS_DATA_OBJECT":
          return model.ExadataInsightsDataObject.getDeserializedJsonObj(
            <model.ExadataInsightsDataObject>(<object>jsonObj),
            true
          );
        case "DATABASE_INSIGHTS_DATA_OBJECT":
          return model.DatabaseInsightsDataObject.getDeserializedJsonObj(
            <model.DatabaseInsightsDataObject>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.dataObjectType}`);
      }
    }
    return jsonObj;
  }
}
