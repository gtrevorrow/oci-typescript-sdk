/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.oracle.com/iaas/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Contains recommendations depending of resource metric received.
 *
 */
export interface HostInsightHostRecommendations {
  "metricRecommendationName": string;
}

export namespace HostInsightHostRecommendations {
  export function getJsonObj(obj: HostInsightHostRecommendations): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "metricRecommendationName" in obj && obj.metricRecommendationName) {
      switch (obj.metricRecommendationName) {
        case "HOST_CPU_RECOMMENDATIONS":
          return model.HostCpuRecommendations.getJsonObj(
            <model.HostCpuRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_NETWORK_RECOMMENDATIONS":
          return model.HostNetworkRecommendations.getJsonObj(
            <model.HostNetworkRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_MEMORY_RECOMMENDATIONS":
          return model.HostMemoryRecommendations.getJsonObj(
            <model.HostMemoryRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_STORAGE_RECOMMENDATIONS":
          return model.HostStorageRecommendations.getJsonObj(
            <model.HostStorageRecommendations>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.metricRecommendationName}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: HostInsightHostRecommendations): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "metricRecommendationName" in obj && obj.metricRecommendationName) {
      switch (obj.metricRecommendationName) {
        case "HOST_CPU_RECOMMENDATIONS":
          return model.HostCpuRecommendations.getDeserializedJsonObj(
            <model.HostCpuRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_NETWORK_RECOMMENDATIONS":
          return model.HostNetworkRecommendations.getDeserializedJsonObj(
            <model.HostNetworkRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_MEMORY_RECOMMENDATIONS":
          return model.HostMemoryRecommendations.getDeserializedJsonObj(
            <model.HostMemoryRecommendations>(<object>jsonObj),
            true
          );
        case "HOST_STORAGE_RECOMMENDATIONS":
          return model.HostStorageRecommendations.getDeserializedJsonObj(
            <model.HostStorageRecommendations>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.metricRecommendationName}`);
      }
    }
    return jsonObj;
  }
}
