/**
 * Artifacts and Container Images API
 * API covering the Artifacts and [Registry](/iaas/Content/Registry/Concepts/registryoverview.htm) services.
Use this API to manage resources such as generic artifacts and container images.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ArtifactsClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class ArtifactsWaiter {
  public constructor(
    private client: ArtifactsClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forContainerImage till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetContainerImageResponse | null (null in case of 404 response)
   */
  public async forContainerImage(
    request: serviceRequests.GetContainerImageRequest,
    ...targetStates: models.ContainerImage.LifecycleState[]
  ): Promise<serviceResponses.GetContainerImageResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getContainerImage(request),
      response => targetStates.includes(response.containerImage.lifecycleState!),
      targetStates.includes(models.ContainerImage.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forContainerImageSignature till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetContainerImageSignatureResponse | null (null in case of 404 response)
   */
  public async forContainerImageSignature(
    request: serviceRequests.GetContainerImageSignatureRequest,
    ...targetStates: models.ContainerImageSignature.LifecycleState[]
  ): Promise<serviceResponses.GetContainerImageSignatureResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getContainerImageSignature(request),
      response => targetStates.includes(response.containerImageSignature.lifecycleState!),
      targetStates.includes(models.ContainerImageSignature.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forContainerRepository till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetContainerRepositoryResponse | null (null in case of 404 response)
   */
  public async forContainerRepository(
    request: serviceRequests.GetContainerRepositoryRequest,
    ...targetStates: models.ContainerRepository.LifecycleState[]
  ): Promise<serviceResponses.GetContainerRepositoryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getContainerRepository(request),
      response => targetStates.includes(response.containerRepository.lifecycleState!),
      targetStates.includes(models.ContainerRepository.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forGenericArtifact till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetGenericArtifactResponse | null (null in case of 404 response)
   */
  public async forGenericArtifact(
    request: serviceRequests.GetGenericArtifactRequest,
    ...targetStates: models.GenericArtifact.LifecycleState[]
  ): Promise<serviceResponses.GetGenericArtifactResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getGenericArtifact(request),
      response => targetStates.includes(response.genericArtifact.lifecycleState!),
      targetStates.includes(models.GenericArtifact.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forRepository till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetRepositoryResponse | null (null in case of 404 response)
   */
  public async forRepository(
    request: serviceRequests.GetRepositoryRequest,
    ...targetStates: models.Repository.LifecycleState[]
  ): Promise<serviceResponses.GetRepositoryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getRepository(request),
      response => targetStates.includes(response.repository.lifecycleState!),
      targetStates.includes(models.Repository.LifecycleState.Deleted)
    );
  }
}
