/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* Statistics showing the number of findings for each category grouped by risk levels for all
* the targets in the specified security assessment.
* <p>
The categories include Auditing, Authorization Control, Data Encryption, Database Configuration,
* Fine-Grained Access Control, Privileges and Roles, and User Accounts.
* The risk levels include High Risk, Medium Risk, Low Risk, Advisory, Evaluate, and Pass.
* 
*/
export interface SecurityAssessmentStatistics {
  /**
   * The total number of targets in this security assessment. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "targetsCount"?: number;
  "highRisk"?: model.SectionStatistics;
  "mediumRisk"?: model.SectionStatistics;
  "lowRisk"?: model.SectionStatistics;
  "advisory"?: model.SectionStatistics;
  "evaluate"?: model.SectionStatistics;
  "pass"?: model.SectionStatistics;
  "deferred"?: model.SectionStatistics;
}

export namespace SecurityAssessmentStatistics {
  export function getJsonObj(obj: SecurityAssessmentStatistics): object {
    const jsonObj = {
      ...obj,
      ...{
        "highRisk": obj.highRisk ? model.SectionStatistics.getJsonObj(obj.highRisk) : undefined,
        "mediumRisk": obj.mediumRisk
          ? model.SectionStatistics.getJsonObj(obj.mediumRisk)
          : undefined,
        "lowRisk": obj.lowRisk ? model.SectionStatistics.getJsonObj(obj.lowRisk) : undefined,
        "advisory": obj.advisory ? model.SectionStatistics.getJsonObj(obj.advisory) : undefined,
        "evaluate": obj.evaluate ? model.SectionStatistics.getJsonObj(obj.evaluate) : undefined,
        "pass": obj.pass ? model.SectionStatistics.getJsonObj(obj.pass) : undefined,
        "deferred": obj.deferred ? model.SectionStatistics.getJsonObj(obj.deferred) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SecurityAssessmentStatistics): object {
    const jsonObj = {
      ...obj,
      ...{
        "highRisk": obj.highRisk
          ? model.SectionStatistics.getDeserializedJsonObj(obj.highRisk)
          : undefined,
        "mediumRisk": obj.mediumRisk
          ? model.SectionStatistics.getDeserializedJsonObj(obj.mediumRisk)
          : undefined,
        "lowRisk": obj.lowRisk
          ? model.SectionStatistics.getDeserializedJsonObj(obj.lowRisk)
          : undefined,
        "advisory": obj.advisory
          ? model.SectionStatistics.getDeserializedJsonObj(obj.advisory)
          : undefined,
        "evaluate": obj.evaluate
          ? model.SectionStatistics.getDeserializedJsonObj(obj.evaluate)
          : undefined,
        "pass": obj.pass ? model.SectionStatistics.getDeserializedJsonObj(obj.pass) : undefined,
        "deferred": obj.deferred
          ? model.SectionStatistics.getDeserializedJsonObj(obj.deferred)
          : undefined
      }
    };

    return jsonObj;
  }
}
