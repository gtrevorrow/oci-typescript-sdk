/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* The Deterministic Substitution masking format uses the specified substitution column 
* as the source of masked values. It performs hash-based substitution to replace the 
* original data in a column with values from the substitution column. As a masking 
* operation renames tables temporarily, the substitution column must be in a table 
* that has no masking column. Also, you may want to ensure that the substitution column 
* has sufficient values to uniquely mask the target column.
* <p>
Deterministic Substitution requires a seed value while submitting a masking work 
* request. Passing the same seed value when masking multiple times or masking different 
* databases ensures that the data is masked deterministically. To learn more, check 
* Deterministic Substitution in the Data Safe documentation. 
* 
*/
export interface DeterministicSubstitutionFormatEntry extends model.FormatEntry {
  /**
   * The name of the schema that contains the substitution column.
   */
  "schemaName": string;
  /**
   * The name of the table that contains the substitution column.
   */
  "tableName": string;
  /**
   * The name of the substitution column.
   */
  "columnName": string;

  "type": string;
}

export namespace DeterministicSubstitutionFormatEntry {
  export function getJsonObj(
    obj: DeterministicSubstitutionFormatEntry,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.FormatEntry.getJsonObj(obj) as DeterministicSubstitutionFormatEntry)),
      ...{}
    };

    return jsonObj;
  }
  export const type = "DETERMINISTIC_SUBSTITUTION";
  export function getDeserializedJsonObj(
    obj: DeterministicSubstitutionFormatEntry,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.FormatEntry.getDeserializedJsonObj(obj) as DeterministicSubstitutionFormatEntry)),
      ...{}
    };

    return jsonObj;
  }
}
