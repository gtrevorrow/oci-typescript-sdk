/**
 * WebLogic Management Service API
 * WebLogic Management Service is an OCI service that enables a unified view and management of WebLogic domains
in Oracle Cloud Infrastructure. Features include on-demand patching of WebLogic domains, rollback of the
last applied patch, discovery and management of WebLogic instances on a compute host.

 * OpenAPI spec version: 20241101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { WeblogicManagementServiceWaiter } from "./weblogicmanagementservice-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum WeblogicManagementServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class WeblogicManagementServiceClient {
  protected static serviceEndpointTemplate =
    "https://api.weblogicmanagement.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WeblogicManagementServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "WeblogicManagementService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("wlms")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("wlms");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20241101";
    if (this.logger)
      this.logger.info(`WeblogicManagementServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        WeblogicManagementServiceClient.serviceEndpointTemplate,
        this._region,
        WeblogicManagementServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        WeblogicManagementServiceClient.serviceEndpointTemplate,
        this._regionId,
        WeblogicManagementServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WeblogicManagementServiceClient.serviceEndpointTemplate,
      region,
      WeblogicManagementServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WeblogicManagementServiceClient.serviceEndpointTemplate,
      regionId,
      WeblogicManagementServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new WeblogicManagementServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WeblogicManagementServiceWaiter {
    this._waiters = new WeblogicManagementServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WeblogicManagementServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a WebLogic domain into a different compartment within the same tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeWlsDomainCompartmentRequest
   * @return ChangeWlsDomainCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ChangeWlsDomainCompartment.ts.html |here} to see how to use ChangeWlsDomainCompartment API.
   */
  public async changeWlsDomainCompartment(
    changeWlsDomainCompartmentRequest: requests.ChangeWlsDomainCompartmentRequest
  ): Promise<responses.ChangeWlsDomainCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#changeWlsDomainCompartment."
      );
    const operationName = "changeWlsDomainCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": changeWlsDomainCompartmentRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeWlsDomainCompartmentRequest.ifMatch,
      "opc-request-id": changeWlsDomainCompartmentRequest.opcRequestId,
      "opc-retry-token": changeWlsDomainCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeWlsDomainCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeWlsDomainCompartmentRequest.changeWlsDomainCompartmentDetails,
        "ChangeWlsDomainCompartmentDetails",
        model.ChangeWlsDomainCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeWlsDomainCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a terms of use agreement record for a WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAgreementRecordRequest
   * @return CreateAgreementRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/CreateAgreementRecord.ts.html |here} to see how to use CreateAgreementRecord API.
   */
  public async createAgreementRecord(
    createAgreementRecordRequest: requests.CreateAgreementRecordRequest
  ): Promise<responses.CreateAgreementRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#createAgreementRecord.");
    const operationName = "createAgreementRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": createAgreementRecordRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": createAgreementRecordRequest.ifMatch,
      "opc-request-id": createAgreementRecordRequest.opcRequestId,
      "opc-retry-token": createAgreementRecordRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAgreementRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/agreementRecords",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAgreementRecordRequest.createAgreementRecordDetails,
        "CreateAgreementRecordDetails",
        model.CreateAgreementRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAgreementRecordResponse>{},
        body: await response.json(),
        bodyKey: "agreementRecord",
        bodyModel: model.AgreementRecord,
        type: "model.AgreementRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteWlsDomainRequest
   * @return DeleteWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/DeleteWlsDomain.ts.html |here} to see how to use DeleteWlsDomain API.
   */
  public async deleteWlsDomain(
    deleteWlsDomainRequest: requests.DeleteWlsDomainRequest
  ): Promise<responses.DeleteWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#deleteWlsDomain.");
    const operationName = "deleteWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": deleteWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWlsDomainRequest.ifMatch,
      "opc-request-id": deleteWlsDomainRequest.opcRequestId,
      "opc-retry-token": deleteWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the terms and conditions of use agreement.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAgreementRequest
   * @return GetAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetAgreement.ts.html |here} to see how to use GetAgreement API.
   */
  public async getAgreement(
    getAgreementRequest: requests.GetAgreementRequest
  ): Promise<responses.GetAgreementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#getAgreement.");
    const operationName = "getAgreement";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAgreementRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/agreement",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAgreementResponse>{},
        body: await response.json(),
        bodyKey: "agreement",
        bodyModel: model.Agreement,
        type: "model.Agreement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceRequest
   * @return GetManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetManagedInstance.ts.html |here} to see how to use GetManagedInstance API.
   */
  public async getManagedInstance(
    getManagedInstanceRequest: requests.GetManagedInstanceRequest
  ): Promise<responses.GetManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#getManagedInstance.");
    const operationName = "getManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": getManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "managedInstance",
        bodyModel: model.ManagedInstance,
        type: "model.ManagedInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified server in a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetManagedInstanceServerRequest
   * @return GetManagedInstanceServerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetManagedInstanceServer.ts.html |here} to see how to use GetManagedInstanceServer API.
   */
  public async getManagedInstanceServer(
    getManagedInstanceServerRequest: requests.GetManagedInstanceServerRequest
  ): Promise<responses.GetManagedInstanceServerResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#getManagedInstanceServer."
      );
    const operationName = "getManagedInstanceServer";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": getManagedInstanceServerRequest.managedInstanceId,
      "{serverId}": getManagedInstanceServerRequest.serverId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedInstanceServerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedInstanceServerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/servers/{serverId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedInstanceServerResponse>{},
        body: await response.json(),
        bodyKey: "server",
        bodyModel: model.Server,
        type: "model.Server",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWlsDomainRequest
   * @return GetWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWlsDomain.ts.html |here} to see how to use GetWlsDomain API.
   */
  public async getWlsDomain(
    getWlsDomainRequest: requests.GetWlsDomainRequest
  ): Promise<responses.GetWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#getWlsDomain.");
    const operationName = "getWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": getWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWlsDomainRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWlsDomainResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomain",
        bodyModel: model.WlsDomain,
        type: "model.WlsDomain",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets WebLogic and Node Manager credentials of a specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWlsDomainCredentialRequest
   * @return GetWlsDomainCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWlsDomainCredential.ts.html |here} to see how to use GetWlsDomainCredential API.
   */
  public async getWlsDomainCredential(
    getWlsDomainCredentialRequest: requests.GetWlsDomainCredentialRequest
  ): Promise<responses.GetWlsDomainCredentialResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#getWlsDomainCredential."
      );
    const operationName = "getWlsDomainCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": getWlsDomainCredentialRequest.wlsDomainId,
      "{credentialType}": getWlsDomainCredentialRequest.credentialType
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWlsDomainCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWlsDomainCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/credentials/{credentialType}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWlsDomainCredentialResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomainCredential",
        bodyModel: model.WlsDomainCredential,
        type: "model.WlsDomainCredential",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified server in a WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWlsDomainServerRequest
   * @return GetWlsDomainServerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWlsDomainServer.ts.html |here} to see how to use GetWlsDomainServer API.
   */
  public async getWlsDomainServer(
    getWlsDomainServerRequest: requests.GetWlsDomainServerRequest
  ): Promise<responses.GetWlsDomainServerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#getWlsDomainServer.");
    const operationName = "getWlsDomainServer";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": getWlsDomainServerRequest.wlsDomainId,
      "{serverId}": getWlsDomainServerRequest.serverId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWlsDomainServerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWlsDomainServerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers/{serverId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWlsDomainServerResponse>{},
        body: await response.json(),
        bodyKey: "server",
        bodyModel: model.Server,
        type: "model.Server",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of specific backup for the WebLogic Domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWlsDomainServerBackupRequest
   * @return GetWlsDomainServerBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWlsDomainServerBackup.ts.html |here} to see how to use GetWlsDomainServerBackup API.
   */
  public async getWlsDomainServerBackup(
    getWlsDomainServerBackupRequest: requests.GetWlsDomainServerBackupRequest
  ): Promise<responses.GetWlsDomainServerBackupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#getWlsDomainServerBackup."
      );
    const operationName = "getWlsDomainServerBackup";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": getWlsDomainServerBackupRequest.wlsDomainId,
      "{serverId}": getWlsDomainServerBackupRequest.serverId,
      "{backupId}": getWlsDomainServerBackupRequest.backupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWlsDomainServerBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWlsDomainServerBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers/{serverId}/backups/{backupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWlsDomainServerBackupResponse>{},
        body: await response.json(),
        bodyKey: "backup",
        bodyModel: model.Backup,
        type: "model.Backup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of specific backup for the WebLogic Domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWlsDomainServerBackupContentRequest
   * @return GetWlsDomainServerBackupContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWlsDomainServerBackupContent.ts.html |here} to see how to use GetWlsDomainServerBackupContent API.
   */
  public async getWlsDomainServerBackupContent(
    getWlsDomainServerBackupContentRequest: requests.GetWlsDomainServerBackupContentRequest
  ): Promise<responses.GetWlsDomainServerBackupContentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#getWlsDomainServerBackupContent."
      );
    const operationName = "getWlsDomainServerBackupContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": getWlsDomainServerBackupContentRequest.wlsDomainId,
      "{serverId}": getWlsDomainServerBackupContentRequest.serverId,
      "{backupId}": getWlsDomainServerBackupContentRequest.backupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWlsDomainServerBackupContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWlsDomainServerBackupContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers/{serverId}/backups/{backupId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWlsDomainServerBackupContentResponse>{},
        body: await response.json(),
        bodyKey: "backupContent",
        bodyModel: model.BackupContent,
        type: "model.BackupContent",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Install the latest patches on a WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param InstallLatestPatchesOnWlsDomainRequest
   * @return InstallLatestPatchesOnWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/InstallLatestPatchesOnWlsDomain.ts.html |here} to see how to use InstallLatestPatchesOnWlsDomain API.
   */
  public async installLatestPatchesOnWlsDomain(
    installLatestPatchesOnWlsDomainRequest: requests.InstallLatestPatchesOnWlsDomainRequest
  ): Promise<responses.InstallLatestPatchesOnWlsDomainResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#installLatestPatchesOnWlsDomain."
      );
    const operationName = "installLatestPatchesOnWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": installLatestPatchesOnWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": installLatestPatchesOnWlsDomainRequest.ifMatch,
      "opc-request-id": installLatestPatchesOnWlsDomainRequest.opcRequestId,
      "opc-retry-token": installLatestPatchesOnWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installLatestPatchesOnWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/installLatestPatches",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installLatestPatchesOnWlsDomainRequest.installLatestPatchesOnWlsDomainDetails,
        "InstallLatestPatchesOnWlsDomainDetails",
        model.InstallLatestPatchesOnWlsDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallLatestPatchesOnWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the terms of use agreement record for the WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAgreementRecordsRequest
   * @return ListAgreementRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListAgreementRecords.ts.html |here} to see how to use ListAgreementRecords API.
   */
  public async listAgreementRecords(
    listAgreementRecordsRequest: requests.ListAgreementRecordsRequest
  ): Promise<responses.ListAgreementRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listAgreementRecords.");
    const operationName = "listAgreementRecords";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listAgreementRecordsRequest.wlsDomainId
    };

    const queryParams = {
      "limit": listAgreementRecordsRequest.limit,
      "page": listAgreementRecordsRequest.page,
      "sortOrder": listAgreementRecordsRequest.sortOrder,
      "sortBy": listAgreementRecordsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAgreementRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAgreementRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/agreementRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAgreementRecordsResponse>{},
        body: await response.json(),
        bodyKey: "agreementRecordCollection",
        bodyModel: model.AgreementRecordCollection,
        type: "model.AgreementRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the latest patches that can be installed to the WebLogic domains.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListApplicablePatchesRequest
   * @return ListApplicablePatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListApplicablePatches.ts.html |here} to see how to use ListApplicablePatches API.
   */
  public async listApplicablePatches(
    listApplicablePatchesRequest: requests.ListApplicablePatchesRequest
  ): Promise<responses.ListApplicablePatchesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listApplicablePatches.");
    const operationName = "listApplicablePatches";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listApplicablePatchesRequest.wlsDomainId
    };

    const queryParams = {
      "limit": listApplicablePatchesRequest.limit,
      "page": listApplicablePatchesRequest.page,
      "sortOrder": listApplicablePatchesRequest.sortOrder,
      "sortBy": listApplicablePatchesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicablePatchesRequest.opcRequestId,
      "opc-retry-token": listApplicablePatchesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicablePatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/applicablePatches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicablePatchesResponse>{},
        body: await response.json(),
        bodyKey: "applicablePatchCollection",
        bodyModel: model.ApplicablePatchCollection,
        type: "model.ApplicablePatchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all the scan results for all WebLogic servers in the managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceScanResultsRequest
   * @return ListManagedInstanceScanResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListManagedInstanceScanResults.ts.html |here} to see how to use ListManagedInstanceScanResults API.
   */
  public async listManagedInstanceScanResults(
    listManagedInstanceScanResultsRequest: requests.ListManagedInstanceScanResultsRequest
  ): Promise<responses.ListManagedInstanceScanResultsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listManagedInstanceScanResults."
      );
    const operationName = "listManagedInstanceScanResults";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceScanResultsRequest.managedInstanceId
    };

    const queryParams = {
      "limit": listManagedInstanceScanResultsRequest.limit,
      "page": listManagedInstanceScanResultsRequest.page,
      "sortOrder": listManagedInstanceScanResultsRequest.sortOrder,
      "sortBy": listManagedInstanceScanResultsRequest.sortBy,
      "wlsDomainId": listManagedInstanceScanResultsRequest.wlsDomainId,
      "serverName": listManagedInstanceScanResultsRequest.serverName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceScanResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceScanResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/scanResults",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceScanResultsResponse>{},
        body: await response.json(),
        bodyKey: "scanResultCollection",
        bodyModel: model.ScanResultCollection,
        type: "model.ScanResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of installed patches on a server in a managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceServerInstalledPatchesRequest
   * @return ListManagedInstanceServerInstalledPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListManagedInstanceServerInstalledPatches.ts.html |here} to see how to use ListManagedInstanceServerInstalledPatches API.
   */
  public async listManagedInstanceServerInstalledPatches(
    listManagedInstanceServerInstalledPatchesRequest: requests.ListManagedInstanceServerInstalledPatchesRequest
  ): Promise<responses.ListManagedInstanceServerInstalledPatchesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listManagedInstanceServerInstalledPatches."
      );
    const operationName = "listManagedInstanceServerInstalledPatches";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceServerInstalledPatchesRequest.managedInstanceId,
      "{serverId}": listManagedInstanceServerInstalledPatchesRequest.serverId
    };

    const queryParams = {
      "limit": listManagedInstanceServerInstalledPatchesRequest.limit,
      "page": listManagedInstanceServerInstalledPatchesRequest.page,
      "sortOrder": listManagedInstanceServerInstalledPatchesRequest.sortOrder,
      "sortBy": listManagedInstanceServerInstalledPatchesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceServerInstalledPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceServerInstalledPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/servers/{serverId}/installedPatches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceServerInstalledPatchesResponse>{},
        body: await response.json(),
        bodyKey: "installedPatchCollection",
        bodyModel: model.InstalledPatchCollection,
        type: "model.InstalledPatchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of servers in a specific managed instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstanceServersRequest
   * @return ListManagedInstanceServersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListManagedInstanceServers.ts.html |here} to see how to use ListManagedInstanceServers API.
   */
  public async listManagedInstanceServers(
    listManagedInstanceServersRequest: requests.ListManagedInstanceServersRequest
  ): Promise<responses.ListManagedInstanceServersResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listManagedInstanceServers."
      );
    const operationName = "listManagedInstanceServers";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": listManagedInstanceServersRequest.managedInstanceId
    };

    const queryParams = {
      "name": listManagedInstanceServersRequest.name,
      "limit": listManagedInstanceServersRequest.limit,
      "page": listManagedInstanceServersRequest.page,
      "sortOrder": listManagedInstanceServersRequest.sortOrder,
      "sortBy": listManagedInstanceServersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstanceServersRequest.opcRequestId,
      "opc-retry-token": listManagedInstanceServersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstanceServersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/servers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstanceServersResponse>{},
        body: await response.json(),
        bodyKey: "serverCollection",
        bodyModel: model.ServerCollection,
        type: "model.ServerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status and compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListManagedInstancesRequest
   * @return ListManagedInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListManagedInstances.ts.html |here} to see how to use ListManagedInstances API.
   */
  public async listManagedInstances(
    listManagedInstancesRequest: requests.ListManagedInstancesRequest
  ): Promise<responses.ListManagedInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listManagedInstances.");
    const operationName = "listManagedInstances";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedInstancesRequest.compartmentId,
      "displayName": listManagedInstancesRequest.displayName,
      "id": listManagedInstancesRequest.id,
      "pluginStatus": listManagedInstancesRequest.pluginStatus,
      "limit": listManagedInstancesRequest.limit,
      "page": listManagedInstancesRequest.page,
      "sortOrder": listManagedInstancesRequest.sortOrder,
      "sortBy": listManagedInstancesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedInstancesRequest.opcRequestId,
      "opc-retry-token": listManagedInstancesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedInstancesResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceCollection",
        bodyModel: model.ManagedInstanceCollection,
        type: "model.ManagedInstanceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all the required policies for the WebLogic Management Service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRequiredPoliciesRequest
   * @return ListRequiredPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListRequiredPolicies.ts.html |here} to see how to use ListRequiredPolicies API.
   */
  public async listRequiredPolicies(
    listRequiredPoliciesRequest: requests.ListRequiredPoliciesRequest
  ): Promise<responses.ListRequiredPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listRequiredPolicies.");
    const operationName = "listRequiredPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRequiredPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRequiredPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/requiredPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRequiredPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "requiredPolicyCollection",
        bodyModel: model.RequiredPolicyCollection,
        type: "model.RequiredPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets domain credentials of a specific domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainCredentialsRequest
   * @return ListWlsDomainCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainCredentials.ts.html |here} to see how to use ListWlsDomainCredentials API.
   */
  public async listWlsDomainCredentials(
    listWlsDomainCredentialsRequest: requests.ListWlsDomainCredentialsRequest
  ): Promise<responses.ListWlsDomainCredentialsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listWlsDomainCredentials."
      );
    const operationName = "listWlsDomainCredentials";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainCredentialsRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainCredentialsRequest.opcRequestId,
      "opc-retry-token": listWlsDomainCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/credentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomainCredentialCollection",
        bodyModel: model.WlsDomainCredentialCollection,
        type: "model.WlsDomainCredentialCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get all scan results for a server in a specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainScanResultsRequest
   * @return ListWlsDomainScanResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainScanResults.ts.html |here} to see how to use ListWlsDomainScanResults API.
   */
  public async listWlsDomainScanResults(
    listWlsDomainScanResultsRequest: requests.ListWlsDomainScanResultsRequest
  ): Promise<responses.ListWlsDomainScanResultsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listWlsDomainScanResults."
      );
    const operationName = "listWlsDomainScanResults";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainScanResultsRequest.wlsDomainId
    };

    const queryParams = {
      "serverName": listWlsDomainScanResultsRequest.serverName,
      "limit": listWlsDomainScanResultsRequest.limit,
      "page": listWlsDomainScanResultsRequest.page,
      "sortOrder": listWlsDomainScanResultsRequest.sortOrder,
      "sortBy": listWlsDomainScanResultsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainScanResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainScanResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/scanResults",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainScanResultsResponse>{},
        body: await response.json(),
        bodyKey: "scanResultCollection",
        bodyModel: model.ScanResultCollection,
        type: "model.ScanResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of backups for the server of a specific WebLogic Domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainServerBackupsRequest
   * @return ListWlsDomainServerBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainServerBackups.ts.html |here} to see how to use ListWlsDomainServerBackups API.
   */
  public async listWlsDomainServerBackups(
    listWlsDomainServerBackupsRequest: requests.ListWlsDomainServerBackupsRequest
  ): Promise<responses.ListWlsDomainServerBackupsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listWlsDomainServerBackups."
      );
    const operationName = "listWlsDomainServerBackups";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainServerBackupsRequest.wlsDomainId,
      "{serverId}": listWlsDomainServerBackupsRequest.serverId
    };

    const queryParams = {
      "limit": listWlsDomainServerBackupsRequest.limit,
      "page": listWlsDomainServerBackupsRequest.page,
      "sortOrder": listWlsDomainServerBackupsRequest.sortOrder,
      "sortBy": listWlsDomainServerBackupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainServerBackupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainServerBackupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers/{serverId}/backups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainServerBackupsResponse>{},
        body: await response.json(),
        bodyKey: "backupCollection",
        bodyModel: model.BackupCollection,
        type: "model.BackupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of installed patches on a server for a domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainServerInstalledPatchesRequest
   * @return ListWlsDomainServerInstalledPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainServerInstalledPatches.ts.html |here} to see how to use ListWlsDomainServerInstalledPatches API.
   */
  public async listWlsDomainServerInstalledPatches(
    listWlsDomainServerInstalledPatchesRequest: requests.ListWlsDomainServerInstalledPatchesRequest
  ): Promise<responses.ListWlsDomainServerInstalledPatchesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listWlsDomainServerInstalledPatches."
      );
    const operationName = "listWlsDomainServerInstalledPatches";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainServerInstalledPatchesRequest.wlsDomainId,
      "{serverId}": listWlsDomainServerInstalledPatchesRequest.serverId
    };

    const queryParams = {
      "limit": listWlsDomainServerInstalledPatchesRequest.limit,
      "page": listWlsDomainServerInstalledPatchesRequest.page,
      "sortOrder": listWlsDomainServerInstalledPatchesRequest.sortOrder,
      "sortBy": listWlsDomainServerInstalledPatchesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainServerInstalledPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainServerInstalledPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers/{serverId}/installedPatches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainServerInstalledPatchesResponse>{},
        body: await response.json(),
        bodyKey: "installedPatchCollection",
        bodyModel: model.InstalledPatchCollection,
        type: "model.InstalledPatchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of servers in a specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainServersRequest
   * @return ListWlsDomainServersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainServers.ts.html |here} to see how to use ListWlsDomainServers API.
   */
  public async listWlsDomainServers(
    listWlsDomainServersRequest: requests.ListWlsDomainServersRequest
  ): Promise<responses.ListWlsDomainServersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listWlsDomainServers.");
    const operationName = "listWlsDomainServers";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainServersRequest.wlsDomainId
    };

    const queryParams = {
      "name": listWlsDomainServersRequest.name,
      "limit": listWlsDomainServersRequest.limit,
      "page": listWlsDomainServersRequest.page,
      "sortOrder": listWlsDomainServersRequest.sortOrder,
      "sortBy": listWlsDomainServersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainServersRequest.opcRequestId,
      "opc-retry-token": listWlsDomainServersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainServersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/servers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainServersResponse>{},
        body: await response.json(),
        bodyKey: "serverCollection",
        bodyModel: model.ServerCollection,
        type: "model.ServerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all WebLogic domains in a given compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainsRequest
   * @return ListWlsDomainsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomains.ts.html |here} to see how to use ListWlsDomains API.
   */
  public async listWlsDomains(
    listWlsDomainsRequest: requests.ListWlsDomainsRequest
  ): Promise<responses.ListWlsDomainsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listWlsDomains.");
    const operationName = "listWlsDomains";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWlsDomainsRequest.compartmentId,
      "lifecycleState": listWlsDomainsRequest.lifecycleState,
      "displayName": listWlsDomainsRequest.displayName,
      "id": listWlsDomainsRequest.id,
      "weblogicVersion": listWlsDomainsRequest.weblogicVersion,
      "middlewareType": listWlsDomainsRequest.middlewareType,
      "patchReadinessStatus": listWlsDomainsRequest.patchReadinessStatus,
      "limit": listWlsDomainsRequest.limit,
      "page": listWlsDomainsRequest.page,
      "sortOrder": listWlsDomainsRequest.sortOrder,
      "sortBy": listWlsDomainsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainsRequest.opcRequestId,
      "opc-retry-token": listWlsDomainsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainsResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomainCollection",
        bodyModel: model.WlsDomainCollection,
        type: "model.WlsDomainCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of WebLogic domains that share middleware with a specific domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWlsDomainsSharingMiddlewaresRequest
   * @return ListWlsDomainsSharingMiddlewaresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomainsSharingMiddlewares.ts.html |here} to see how to use ListWlsDomainsSharingMiddlewares API.
   */
  public async listWlsDomainsSharingMiddlewares(
    listWlsDomainsSharingMiddlewaresRequest: requests.ListWlsDomainsSharingMiddlewaresRequest
  ): Promise<responses.ListWlsDomainsSharingMiddlewaresResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#listWlsDomainsSharingMiddlewares."
      );
    const operationName = "listWlsDomainsSharingMiddlewares";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": listWlsDomainsSharingMiddlewaresRequest.wlsDomainId
    };

    const queryParams = {
      "limit": listWlsDomainsSharingMiddlewaresRequest.limit,
      "page": listWlsDomainsSharingMiddlewaresRequest.page,
      "sortOrder": listWlsDomainsSharingMiddlewaresRequest.sortOrder,
      "sortBy": listWlsDomainsSharingMiddlewaresRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWlsDomainsSharingMiddlewaresRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWlsDomainsSharingMiddlewaresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/wlsDomainsSharingMiddleware",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWlsDomainsSharingMiddlewaresResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomainCollection",
        bodyModel: model.WlsDomainCollection,
        type: "model.WlsDomainCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the errors for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the logs for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restarts all the servers in the WebLogic domains. Servers that are already stopped are ignored.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RestartWlsDomainRequest
   * @return RestartWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/RestartWlsDomain.ts.html |here} to see how to use RestartWlsDomain API.
   */
  public async restartWlsDomain(
    restartWlsDomainRequest: requests.RestartWlsDomainRequest
  ): Promise<responses.RestartWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#restartWlsDomain.");
    const operationName = "restartWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": restartWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": restartWlsDomainRequest.ifMatch,
      "opc-request-id": restartWlsDomainRequest.opcRequestId,
      "opc-retry-token": restartWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      restartWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/restart",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restartWlsDomainRequest.restartWlsDomainDetails,
        "RestartWlsDomainDetails",
        model.RestartWlsDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RestartWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restore a domain from backup. If the backup contains a MIDDLEWARE asset, then the middleware of the domain, including patches, will be restored.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RestoreWlsDomainRequest
   * @return RestoreWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/RestoreWlsDomain.ts.html |here} to see how to use RestoreWlsDomain API.
   */
  public async restoreWlsDomain(
    restoreWlsDomainRequest: requests.RestoreWlsDomainRequest
  ): Promise<responses.RestoreWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#restoreWlsDomain.");
    const operationName = "restoreWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": restoreWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": restoreWlsDomainRequest.ifMatch,
      "opc-request-id": restoreWlsDomainRequest.opcRequestId,
      "opc-retry-token": restoreWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      restoreWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/restore",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restoreWlsDomainRequest.restoreWlsDomainDetails,
        "RestoreWlsDomainDetails",
        model.RestoreWlsDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RestoreWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Scans a managed instance for WebLogic domains.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScanManagedInstanceRequest
   * @return ScanManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ScanManagedInstance.ts.html |here} to see how to use ScanManagedInstance API.
   */
  public async scanManagedInstance(
    scanManagedInstanceRequest: requests.ScanManagedInstanceRequest
  ): Promise<responses.ScanManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#scanManagedInstance.");
    const operationName = "scanManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": scanManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": scanManagedInstanceRequest.opcRequestId,
      "opc-retry-token": scanManagedInstanceRequest.opcRetryToken,
      "if-match": scanManagedInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scanManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}/actions/scan",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScanManagedInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Runs a series of checks in the WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScanWlsDomainRequest
   * @return ScanWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ScanWlsDomain.ts.html |here} to see how to use ScanWlsDomain API.
   */
  public async scanWlsDomain(
    scanWlsDomainRequest: requests.ScanWlsDomainRequest
  ): Promise<responses.ScanWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#scanWlsDomain.");
    const operationName = "scanWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": scanWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scanWlsDomainRequest.ifMatch,
      "opc-request-id": scanWlsDomainRequest.opcRequestId,
      "opc-retry-token": scanWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scanWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/scan",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScanWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sets restart order of servers in specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SetRestartOrderRequest
   * @return SetRestartOrderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/SetRestartOrder.ts.html |here} to see how to use SetRestartOrder API.
   */
  public async setRestartOrder(
    setRestartOrderRequest: requests.SetRestartOrderRequest
  ): Promise<responses.SetRestartOrderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#setRestartOrder.");
    const operationName = "setRestartOrder";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": setRestartOrderRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": setRestartOrderRequest.ifMatch,
      "opc-request-id": setRestartOrderRequest.opcRequestId,
      "opc-retry-token": setRestartOrderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setRestartOrderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/setRestartOrder",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setRestartOrderRequest.setRestartOrderDetails,
        "SetRestartOrderDetails",
        model.SetRestartOrderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SetRestartOrderResponse>{},
        body: await response.json(),
        bodyKey: "serverCollection",
        bodyModel: model.ServerCollection,
        type: "model.ServerCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts all the servers in the WebLogic domain. Servers that are already started are ignored.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartWlsDomainRequest
   * @return StartWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/StartWlsDomain.ts.html |here} to see how to use StartWlsDomain API.
   */
  public async startWlsDomain(
    startWlsDomainRequest: requests.StartWlsDomainRequest
  ): Promise<responses.StartWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#startWlsDomain.");
    const operationName = "startWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": startWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startWlsDomainRequest.ifMatch,
      "opc-request-id": startWlsDomainRequest.opcRequestId,
      "opc-retry-token": startWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops all the servers in the WebLogic domain. Servers that are already stopped are ignored.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopWlsDomainRequest
   * @return StopWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/StopWlsDomain.ts.html |here} to see how to use StopWlsDomain API.
   */
  public async stopWlsDomain(
    stopWlsDomainRequest: requests.StopWlsDomainRequest
  ): Promise<responses.StopWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#stopWlsDomain.");
    const operationName = "stopWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": stopWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopWlsDomainRequest.ifMatch,
      "opc-request-id": stopWlsDomainRequest.opcRequestId,
      "opc-retry-token": stopWlsDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/actions/stop",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        stopWlsDomainRequest.stopWlsDomainDetails,
        "StopWlsDomainDetails",
        model.StopWlsDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopWlsDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the data to be shown in the Overview page of the service in a given compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeResourceInventoryRequest
   * @return SummarizeResourceInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/SummarizeResourceInventory.ts.html |here} to see how to use SummarizeResourceInventory API.
   */
  public async summarizeResourceInventory(
    summarizeResourceInventoryRequest: requests.SummarizeResourceInventoryRequest
  ): Promise<responses.SummarizeResourceInventoryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#summarizeResourceInventory."
      );
    const operationName = "summarizeResourceInventory";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeResourceInventoryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeResourceInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeResourceInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceInventory",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeResourceInventoryResponse>{},
        body: await response.json(),
        bodyKey: "resourceInventory",
        bodyModel: model.ResourceInventory,
        type: "model.ResourceInventory",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified managed instance information, such as discovery interval and domain search path.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateManagedInstanceRequest
   * @return UpdateManagedInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/UpdateManagedInstance.ts.html |here} to see how to use UpdateManagedInstance API.
   */
  public async updateManagedInstance(
    updateManagedInstanceRequest: requests.UpdateManagedInstanceRequest
  ): Promise<responses.UpdateManagedInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#updateManagedInstance.");
    const operationName = "updateManagedInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{managedInstanceId}": updateManagedInstanceRequest.managedInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateManagedInstanceRequest.opcRequestId,
      "opc-retry-token": updateManagedInstanceRequest.opcRetryToken,
      "if-match": updateManagedInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagedInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedInstances/{managedInstanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedInstanceRequest.updateManagedInstanceDetails,
        "UpdateManagedInstanceDetails",
        model.UpdateManagedInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedInstanceResponse>{},
        body: await response.json(),
        bodyKey: "managedInstance",
        bodyModel: model.ManagedInstance,
        type: "model.ManagedInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateWlsDomainRequest
   * @return UpdateWlsDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/UpdateWlsDomain.ts.html |here} to see how to use UpdateWlsDomain API.
   */
  public async updateWlsDomain(
    updateWlsDomainRequest: requests.UpdateWlsDomainRequest
  ): Promise<responses.UpdateWlsDomainResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WeblogicManagementServiceClient#updateWlsDomain.");
    const operationName = "updateWlsDomain";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": updateWlsDomainRequest.wlsDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateWlsDomainRequest.ifMatch,
      "opc-request-id": updateWlsDomainRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateWlsDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWlsDomainRequest.updateWlsDomainDetails,
        "UpdateWlsDomainDetails",
        model.UpdateWlsDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWlsDomainResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomain",
        bodyModel: model.WlsDomain,
        type: "model.WlsDomain",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates WebLogic domain credentials of specific WebLogic domain.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateWlsDomainCredentialRequest
   * @return UpdateWlsDomainCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/UpdateWlsDomainCredential.ts.html |here} to see how to use UpdateWlsDomainCredential API.
   */
  public async updateWlsDomainCredential(
    updateWlsDomainCredentialRequest: requests.UpdateWlsDomainCredentialRequest
  ): Promise<responses.UpdateWlsDomainCredentialResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceClient#updateWlsDomainCredential."
      );
    const operationName = "updateWlsDomainCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{wlsDomainId}": updateWlsDomainCredentialRequest.wlsDomainId,
      "{credentialType}": updateWlsDomainCredentialRequest.credentialType
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateWlsDomainCredentialRequest.ifMatch,
      "opc-request-id": updateWlsDomainCredentialRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateWlsDomainCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/wlsDomains/{wlsDomainId}/credentials/{credentialType}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateWlsDomainCredentialRequest.updateWlsDomainCredentialDetails,
        "UpdateWlsDomainCredentialDetails",
        model.UpdateWlsDomainCredentialDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateWlsDomainCredentialResponse>{},
        body: await response.json(),
        bodyKey: "wlsDomainCredential",
        bodyModel: model.WlsDomainCredential,
        type: "model.WlsDomainCredential",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum WeblogicManagementServiceConfigurationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class WeblogicManagementServiceConfigurationClient {
  protected static serviceEndpointTemplate =
    "https://api.weblogicmanagement.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "WeblogicManagementServiceConfiguration";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("wlms")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("wlms");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20241101";
    if (this.logger)
      this.logger.info(
        `WeblogicManagementServiceConfigurationClient endpoint set to ${this._endpoint}`
      );
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        WeblogicManagementServiceConfigurationClient.serviceEndpointTemplate,
        this._region,
        WeblogicManagementServiceConfigurationClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        WeblogicManagementServiceConfigurationClient.serviceEndpointTemplate,
        this._regionId,
        WeblogicManagementServiceConfigurationClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WeblogicManagementServiceConfigurationClient.serviceEndpointTemplate,
      region,
      WeblogicManagementServiceConfigurationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WeblogicManagementServiceConfigurationClient.serviceEndpointTemplate,
      regionId,
      WeblogicManagementServiceConfigurationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets service configuration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConfigurationRequest
   * @return GetConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
   */
  public async getConfiguration(
    getConfigurationRequest: requests.GetConfigurationRequest
  ): Promise<responses.GetConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceConfigurationClient#getConfiguration."
      );
    const operationName = "getConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates service configuration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConfigurationRequest
   * @return UpdateConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
   */
  public async updateConfiguration(
    updateConfigurationRequest: requests.UpdateConfigurationRequest
  ): Promise<responses.UpdateConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation WeblogicManagementServiceConfigurationClient#updateConfiguration."
      );
    const operationName = "updateConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": updateConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConfigurationRequest.opcRequestId,
      "opc-retry-token": updateConfigurationRequest.opcRetryToken,
      "if-match": updateConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConfigurationRequest.updateConfigurationDetails,
        "UpdateConfigurationDetails",
        model.UpdateConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
