/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { BlockstorageClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";
import { waitForWorkRequest, WorkRequestClient, responses } from "oci-workrequests";

export class BlockstorageWaiter {
  public constructor(
    private client: BlockstorageClient,
    private workRequestClient: WorkRequestClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forCopyBootVolumeBackup
   *
   * @param request the request to send
   * @return response returns CopyBootVolumeBackupResponse, GetWorkRequestResponse tuple
   */
  public async forCopyBootVolumeBackup(
    request: serviceRequests.CopyBootVolumeBackupRequest
  ): Promise<{
    response: serviceResponses.CopyBootVolumeBackupResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const copyBootVolumeBackupResponse = await this.client.copyBootVolumeBackup(request);
    if (copyBootVolumeBackupResponse.opcWorkRequestId === undefined)
      return { response: copyBootVolumeBackupResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      copyBootVolumeBackupResponse.opcWorkRequestId
    );
    return { response: copyBootVolumeBackupResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCopyVolumeBackup
   *
   * @param request the request to send
   * @return response returns CopyVolumeBackupResponse, GetWorkRequestResponse tuple
   */
  public async forCopyVolumeBackup(
    request: serviceRequests.CopyVolumeBackupRequest
  ): Promise<{
    response: serviceResponses.CopyVolumeBackupResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const copyVolumeBackupResponse = await this.client.copyVolumeBackup(request);
    if (copyVolumeBackupResponse.opcWorkRequestId === undefined)
      return { response: copyVolumeBackupResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      copyVolumeBackupResponse.opcWorkRequestId
    );
    return { response: copyVolumeBackupResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forBlockVolumeReplica till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBlockVolumeReplicaResponse | null (null in case of 404 response)
   */
  public async forBlockVolumeReplica(
    request: serviceRequests.GetBlockVolumeReplicaRequest,
    ...targetStates: models.BlockVolumeReplica.LifecycleState[]
  ): Promise<serviceResponses.GetBlockVolumeReplicaResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBlockVolumeReplica(request),
      response => targetStates.includes(response.blockVolumeReplica.lifecycleState!),
      targetStates.includes(models.BlockVolumeReplica.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forBootVolume till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBootVolumeResponse | null (null in case of 404 response)
   */
  public async forBootVolume(
    request: serviceRequests.GetBootVolumeRequest,
    ...targetStates: models.BootVolume.LifecycleState[]
  ): Promise<serviceResponses.GetBootVolumeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBootVolume(request),
      response => targetStates.includes(response.bootVolume.lifecycleState!),
      targetStates.includes(models.BootVolume.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forBootVolumeBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBootVolumeBackupResponse | null (null in case of 404 response)
   */
  public async forBootVolumeBackup(
    request: serviceRequests.GetBootVolumeBackupRequest,
    ...targetStates: models.BootVolumeBackup.LifecycleState[]
  ): Promise<serviceResponses.GetBootVolumeBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBootVolumeBackup(request),
      response => targetStates.includes(response.bootVolumeBackup.lifecycleState!),
      targetStates.includes(models.BootVolumeBackup.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forBootVolumeReplica till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBootVolumeReplicaResponse | null (null in case of 404 response)
   */
  public async forBootVolumeReplica(
    request: serviceRequests.GetBootVolumeReplicaRequest,
    ...targetStates: models.BootVolumeReplica.LifecycleState[]
  ): Promise<serviceResponses.GetBootVolumeReplicaResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBootVolumeReplica(request),
      response => targetStates.includes(response.bootVolumeReplica.lifecycleState!),
      targetStates.includes(models.BootVolumeReplica.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVolume till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeResponse | null (null in case of 404 response)
   */
  public async forVolume(
    request: serviceRequests.GetVolumeRequest,
    ...targetStates: models.Volume.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolume(request),
      response => targetStates.includes(response.volume.lifecycleState!),
      targetStates.includes(models.Volume.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVolumeBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeBackupResponse | null (null in case of 404 response)
   */
  public async forVolumeBackup(
    request: serviceRequests.GetVolumeBackupRequest,
    ...targetStates: models.VolumeBackup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeBackup(request),
      response => targetStates.includes(response.volumeBackup.lifecycleState!),
      targetStates.includes(models.VolumeBackup.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVolumeGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeGroupResponse | null (null in case of 404 response)
   */
  public async forVolumeGroup(
    request: serviceRequests.GetVolumeGroupRequest,
    ...targetStates: models.VolumeGroup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeGroupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeGroup(request),
      response => targetStates.includes(response.volumeGroup.lifecycleState!),
      targetStates.includes(models.VolumeGroup.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVolumeGroupBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeGroupBackupResponse | null (null in case of 404 response)
   */
  public async forVolumeGroupBackup(
    request: serviceRequests.GetVolumeGroupBackupRequest,
    ...targetStates: models.VolumeGroupBackup.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeGroupBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeGroupBackup(request),
      response => targetStates.includes(response.volumeGroupBackup.lifecycleState!),
      targetStates.includes(models.VolumeGroupBackup.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVolumeGroupReplica till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVolumeGroupReplicaResponse | null (null in case of 404 response)
   */
  public async forVolumeGroupReplica(
    request: serviceRequests.GetVolumeGroupReplicaRequest,
    ...targetStates: models.VolumeGroupReplica.LifecycleState[]
  ): Promise<serviceResponses.GetVolumeGroupReplicaResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVolumeGroupReplica(request),
      response => targetStates.includes(response.volumeGroupReplica.lifecycleState!),
      targetStates.includes(models.VolumeGroupReplica.LifecycleState.Terminated)
    );
  }
}
