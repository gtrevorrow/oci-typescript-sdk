/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Defines the {@code AssociatedWith} relationship between virtual network topology entities. An {@code AssociatedWith} relationship
 * is defined when there is no obvious {@code contains} relationship but entities are still related.
 * For example, a DRG is associated with a VCN because a DRG is not managed by VCN but can be
 * attached to a VCN.
 *
 */
export interface TopologyAssociatedWithEntityRelationship extends model.TopologyEntityRelationship {
  "associatedWithDetails"?: model.TopologyAssociatedWithRelationshipDetails;

  "type": string;
}

export namespace TopologyAssociatedWithEntityRelationship {
  export function getJsonObj(
    obj: TopologyAssociatedWithEntityRelationship,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.TopologyEntityRelationship.getJsonObj(
            obj
          ) as TopologyAssociatedWithEntityRelationship)),
      ...{
        "associatedWithDetails": obj.associatedWithDetails
          ? model.TopologyAssociatedWithRelationshipDetails.getJsonObj(obj.associatedWithDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export const type = "ASSOCIATED_WITH";
  export function getDeserializedJsonObj(
    obj: TopologyAssociatedWithEntityRelationship,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.TopologyEntityRelationship.getDeserializedJsonObj(
            obj
          ) as TopologyAssociatedWithEntityRelationship)),
      ...{
        "associatedWithDetails": obj.associatedWithDetails
          ? model.TopologyAssociatedWithRelationshipDetails.getDeserializedJsonObj(
              obj.associatedWithDetails
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
