/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Specifies the boot volume backups (first & second) and block size in bytes.
 */
export interface BootVolumeSourceFromBootVolumeBackupDeltaDetails
  extends model.BootVolumeSourceDetails {
  /**
   * The OCID of the first boot volume backup.
   */
  "firstBackupId": string;
  /**
   * The OCID of the second boot volume backup.
   */
  "secondBackupId": string;
  /**
   * Block size in bytes to be considered while performing volume restore. The value must be a power of 2; ranging from 4KB (4096 bytes) to 1MB (1048576 bytes). If omitted, defaults to 4,096 bytes (4 KiB).
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "changeBlockSizeInBytes"?: number;

  "type": string;
}

export namespace BootVolumeSourceFromBootVolumeBackupDeltaDetails {
  export function getJsonObj(
    obj: BootVolumeSourceFromBootVolumeBackupDeltaDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.BootVolumeSourceDetails.getJsonObj(
            obj
          ) as BootVolumeSourceFromBootVolumeBackupDeltaDetails)),
      ...{}
    };

    return jsonObj;
  }
  export const type = "bootVolumeBackupDelta";
  export function getDeserializedJsonObj(
    obj: BootVolumeSourceFromBootVolumeBackupDeltaDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.BootVolumeSourceDetails.getDeserializedJsonObj(
            obj
          ) as BootVolumeSourceFromBootVolumeBackupDeltaDetails)),
      ...{}
    };

    return jsonObj;
  }
}
