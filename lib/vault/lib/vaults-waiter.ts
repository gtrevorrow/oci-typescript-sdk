/**
 * Vault Secret Management API
 * Use the Secret Management API to manage secrets and secret versions. For more information, see [Managing Secrets](/Content/KeyManagement/Tasks/managingsecrets.htm).
 * OpenAPI spec version: 20180608
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { VaultsClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";
import { waitForWorkRequest, WorkRequestClient, responses } from "oci-workrequests";

export class VaultsWaiter {
  public constructor(
    private client: VaultsClient,
    private workRequestClient: WorkRequestClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forSecret till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecretResponse | null (null in case of 404 response)
   */
  public async forSecret(
    request: serviceRequests.GetSecretRequest,
    ...targetStates: models.Secret.LifecycleState[]
  ): Promise<serviceResponses.GetSecretResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecret(request),
      response => targetStates.includes(response.secret.lifecycleState!),
      targetStates.includes(models.Secret.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forRotateSecret
   *
   * @param request the request to send
   * @return response returns RotateSecretResponse, GetWorkRequestResponse tuple
   */
  public async forRotateSecret(
    request: serviceRequests.RotateSecretRequest
  ): Promise<{
    response: serviceResponses.RotateSecretResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateSecretResponse = await this.client.rotateSecret(request);
    if (rotateSecretResponse.opcWorkRequestId === undefined)
      return { response: rotateSecretResponse, workRequestResponse: undefined as any };
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateSecretResponse.opcWorkRequestId
    );
    return { response: rotateSecretResponse, workRequestResponse: getWorkRequestResponse };
  }
}
