/**
 * Vault Secret Management API
 * Use the Secret Management API to manage secrets and secret versions. For more information, see [Managing Secrets](/Content/KeyManagement/Tasks/managingsecrets.htm).
 * OpenAPI spec version: 20180608
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A rule that you can apply to a secret to enforce certain conditions on the secret's usage and management.
 */
export interface SecretRule {
  "ruleType": string;
}

export namespace SecretRule {
  export function getJsonObj(obj: SecretRule): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "ruleType" in obj && obj.ruleType) {
      switch (obj.ruleType) {
        case "SECRET_EXPIRY_RULE":
          return model.SecretExpiryRule.getJsonObj(<model.SecretExpiryRule>(<object>jsonObj), true);
        case "SECRET_REUSE_RULE":
          return model.SecretReuseRule.getJsonObj(<model.SecretReuseRule>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.ruleType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SecretRule): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "ruleType" in obj && obj.ruleType) {
      switch (obj.ruleType) {
        case "SECRET_EXPIRY_RULE":
          return model.SecretExpiryRule.getDeserializedJsonObj(
            <model.SecretExpiryRule>(<object>jsonObj),
            true
          );
        case "SECRET_REUSE_RULE":
          return model.SecretReuseRule.getDeserializedJsonObj(
            <model.SecretReuseRule>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.ruleType}`);
      }
    }
    return jsonObj;
  }
}
