/**
 * Vault Secret Management API
 * Use the Secret Management API to manage secrets and secret versions. For more information, see [Managing Secrets](/Content/KeyManagement/Tasks/managingsecrets.htm).
 * OpenAPI spec version: 20180608
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The TargetSystemDetails provides the targetSystem type and type-specific connection metadata
 *
 */
export interface TargetSystemDetails {
  "targetSystemType": string;
}

export namespace TargetSystemDetails {
  export function getJsonObj(obj: TargetSystemDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "targetSystemType" in obj && obj.targetSystemType) {
      switch (obj.targetSystemType) {
        case "ADB":
          return model.AdbTargetSystemDetails.getJsonObj(
            <model.AdbTargetSystemDetails>(<object>jsonObj),
            true
          );
        case "FUNCTION":
          return model.FunctionTargetSystemDetails.getJsonObj(
            <model.FunctionTargetSystemDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.targetSystemType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: TargetSystemDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "targetSystemType" in obj && obj.targetSystemType) {
      switch (obj.targetSystemType) {
        case "ADB":
          return model.AdbTargetSystemDetails.getDeserializedJsonObj(
            <model.AdbTargetSystemDetails>(<object>jsonObj),
            true
          );
        case "FUNCTION":
          return model.FunctionTargetSystemDetails.getDeserializedJsonObj(
            <model.FunctionTargetSystemDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.targetSystemType}`);
      }
    }
    return jsonObj;
  }
}
