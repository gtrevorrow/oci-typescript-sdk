/**
 * Vault Secret Management API
 * Use the Secret Management API to manage secrets and secret versions. For more information, see [Managing Secrets](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingsecrets.htm).
 * OpenAPI spec version: 20180608
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Defines the configuration that enables cross-region secret replication.
 */
export interface ReplicationConfig {
  /**
   * List of the secret replication targets. By default, a maximum of 3 targets is allowed. To configure more than 3 targets, an override is required.
   */
  "replicationTargets": Array<model.ReplicationTarget>;
  /**
   * (Optional) A Boolean value to enable forwarding of write requests from replicated secrets to the source secrets. The default value of false disables this option.
   */
  "isWriteForwardEnabled"?: boolean;
}

export namespace ReplicationConfig {
  export function getJsonObj(obj: ReplicationConfig): object {
    const jsonObj = {
      ...obj,
      ...{
        "replicationTargets": obj.replicationTargets
          ? obj.replicationTargets.map(item => {
              return model.ReplicationTarget.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ReplicationConfig): object {
    const jsonObj = {
      ...obj,
      ...{
        "replicationTargets": obj.replicationTargets
          ? obj.replicationTargets.map(item => {
              return model.ReplicationTarget.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
