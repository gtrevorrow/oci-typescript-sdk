/**
 * Autoscaling API
 * Use the Autoscaling API to dynamically scale compute resources to meet application requirements. For more information about
autoscaling, see [Autoscaling](https://docs.oracle.com/iaas/Content/Compute/Tasks/autoscalinginstancepools.htm). For information about the
Compute service, see [Compute](https://docs.oracle.com/iaas/Content/Compute/home.htm).

 * OpenAPI spec version: 20181001
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

export interface MetricBase {
  /**
    * The period of time that the condition defined in the alarm must persist before the alarm state
* changes from \"OK\" to \"FIRING\" or vice versa. For example, a value of 5 minutes means that the
* alarm must persist in breaching the condition for five minutes before the alarm updates its
* state to \"FIRING\"; likewise, the alarm must persist in not breaching the condition for five
* minutes before the alarm updates its state to \"OK.\"
* <p>
The duration is specified as a string in ISO 8601 format ({@code PT10M} for ten minutes or {@code PT1H}
* for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
* 
    */
  "pendingDuration"?: string;

  "metricSource": string;
}

export namespace MetricBase {
  export function getJsonObj(obj: MetricBase): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "metricSource" in obj && obj.metricSource) {
      switch (obj.metricSource) {
        case "CUSTOM_QUERY":
          return model.CustomMetric.getJsonObj(<model.CustomMetric>(<object>jsonObj), true);
        case "COMPUTE_AGENT":
          return model.Metric.getJsonObj(<model.Metric>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.metricSource}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MetricBase): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "metricSource" in obj && obj.metricSource) {
      switch (obj.metricSource) {
        case "CUSTOM_QUERY":
          return model.CustomMetric.getDeserializedJsonObj(
            <model.CustomMetric>(<object>jsonObj),
            true
          );
        case "COMPUTE_AGENT":
          return model.Metric.getDeserializedJsonObj(<model.Metric>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.metricSource}`);
      }
    }
    return jsonObj;
  }
}
