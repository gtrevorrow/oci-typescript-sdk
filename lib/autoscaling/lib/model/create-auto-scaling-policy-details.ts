/**
 * Autoscaling API
 * APIs for dynamically scaling Compute resources to meet application requirements. For more information about
autoscaling, see [Autoscaling](https://docs.oracle.com/iaas/Content/Compute/Tasks/autoscalinginstancepools.htm). For information about the
Compute service, see [Overview of the Compute Service](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).

**Note:** Autoscaling is not available in US Government Cloud tenancies. For more information, see
[Oracle Cloud Infrastructure US Government Cloud](https://docs.oracle.com/iaas/Content/General/Concepts/govoverview.htm).

 * OpenAPI spec version: 20181001
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* Creation details for an autoscaling policy. You can create the following types of autoscaling policies:
* <p>
- **Schedule-based:** Autoscaling events take place at the specific times that you schedule.
* - **Threshold-based:** An autoscaling action is triggered when a performance metric meets
* or exceeds a threshold.
* <p>
An autoscaling configuration can either have multiple schedule-based autoscaling policies, or one
* threshold-based autoscaling policy.
* 
*/
export interface CreateAutoScalingPolicyDetails {
  /**
   * The capacity requirements of the autoscaling policy.
   */
  "capacity"?: model.Capacity;
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   *
   */
  "displayName"?: string;
  /**
   * Whether the autoscaling policy is enabled.
   */
  "isEnabled"?: boolean;

  "policyType": string;
}

export namespace CreateAutoScalingPolicyDetails {
  export function getJsonObj(obj: CreateAutoScalingPolicyDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "capacity": obj.capacity ? model.Capacity.getJsonObj(obj.capacity) : undefined
      }
    };

    if (obj && "policyType" in obj && obj.policyType) {
      switch (obj.policyType) {
        case "scheduled":
          return model.CreateScheduledPolicyDetails.getJsonObj(
            <model.CreateScheduledPolicyDetails>(<object>jsonObj),
            true
          );
        case "threshold":
          return model.CreateThresholdPolicyDetails.getJsonObj(
            <model.CreateThresholdPolicyDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.policyType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateAutoScalingPolicyDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "capacity": obj.capacity ? model.Capacity.getDeserializedJsonObj(obj.capacity) : undefined
      }
    };

    if (obj && "policyType" in obj && obj.policyType) {
      switch (obj.policyType) {
        case "scheduled":
          return model.CreateScheduledPolicyDetails.getDeserializedJsonObj(
            <model.CreateScheduledPolicyDetails>(<object>jsonObj),
            true
          );
        case "threshold":
          return model.CreateThresholdPolicyDetails.getDeserializedJsonObj(
            <model.CreateThresholdPolicyDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.policyType}`);
      }
    }
    return jsonObj;
  }
}
