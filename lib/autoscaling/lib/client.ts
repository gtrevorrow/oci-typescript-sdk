/**
 * Autoscaling API
 * APIs for dynamically scaling Compute resources to meet application requirements. For more information about
autoscaling, see [Autoscaling](https://docs.oracle.com/iaas/Content/Compute/Tasks/autoscalinginstancepools.htm). For information about the
Compute service, see [Overview of the Compute Service](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).

**Note:** Autoscaling is not available in US Government Cloud tenancies. For more information, see
[Oracle Cloud Infrastructure US Government Cloud](https://docs.oracle.com/iaas/Content/General/Concepts/govoverview.htm).

 * OpenAPI spec version: 20181001
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AutoScalingApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AutoScalingClient {
  protected static serviceEndpointTemplate = "https://autoscaling.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "AutoScaling";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("autoscaling")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("autoscaling");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181001";
    if (this.logger) this.logger.info(`AutoScalingClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        AutoScalingClient.serviceEndpointTemplate,
        this._region,
        AutoScalingClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        AutoScalingClient.serviceEndpointTemplate,
        this._regionId,
        AutoScalingClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AutoScalingClient.serviceEndpointTemplate,
      region,
      AutoScalingClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AutoScalingClient.serviceEndpointTemplate,
      regionId,
      AutoScalingClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
     * Moves an autoscaling configuration into a different compartment within the same tenancy. For information
* about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an autoscaling configuration to a different compartment, associated resources such as instance
* pools are not moved.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeAutoScalingConfigurationCompartmentRequest
     * @return ChangeAutoScalingConfigurationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/ChangeAutoScalingConfigurationCompartment.ts.html |here} to see how to use ChangeAutoScalingConfigurationCompartment API.
     */
  public async changeAutoScalingConfigurationCompartment(
    changeAutoScalingConfigurationCompartmentRequest: requests.ChangeAutoScalingConfigurationCompartmentRequest
  ): Promise<responses.ChangeAutoScalingConfigurationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation AutoScalingClient#changeAutoScalingConfigurationCompartment."
      );
    const operationName = "changeAutoScalingConfigurationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfiguration/ChangeAutoScalingConfigurationCompartment";
    const pathParams = {
      "{autoScalingConfigurationId}":
        changeAutoScalingConfigurationCompartmentRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeAutoScalingConfigurationCompartmentRequest.opcRequestId,
      "if-match": changeAutoScalingConfigurationCompartmentRequest.ifMatch,
      "opc-retry-token": changeAutoScalingConfigurationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAutoScalingConfigurationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAutoScalingConfigurationCompartmentRequest.changeCompartmentDetails,
        "ChangeAutoScalingCompartmentDetails",
        model.ChangeAutoScalingCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAutoScalingConfigurationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAutoScalingConfigurationRequest
   * @return CreateAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/CreateAutoScalingConfiguration.ts.html |here} to see how to use CreateAutoScalingConfiguration API.
   */
  public async createAutoScalingConfiguration(
    createAutoScalingConfigurationRequest: requests.CreateAutoScalingConfigurationRequest
  ): Promise<responses.CreateAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#createAutoScalingConfiguration.");
    const operationName = "createAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfiguration/CreateAutoScalingConfiguration";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAutoScalingConfigurationRequest.opcRequestId,
      "opc-retry-token": createAutoScalingConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAutoScalingConfigurationRequest.createAutoScalingConfigurationDetails,
        "CreateAutoScalingConfigurationDetails",
        model.CreateAutoScalingConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAutoScalingConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingConfiguration",
        bodyModel: model.AutoScalingConfiguration,
        type: "model.AutoScalingConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates an autoscaling policy for the specified autoscaling configuration.
* <p>
You can create the following types of autoscaling policies:
* <p>
- **Schedule-based:** Autoscaling events take place at the specific times that you schedule.
* - **Threshold-based:** An autoscaling action is triggered when a performance metric meets or exceeds a threshold.
* <p>
An autoscaling configuration can either have multiple schedule-based autoscaling policies, or one
* threshold-based autoscaling policy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAutoScalingPolicyRequest
     * @return CreateAutoScalingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/CreateAutoScalingPolicy.ts.html |here} to see how to use CreateAutoScalingPolicy API.
     */
  public async createAutoScalingPolicy(
    createAutoScalingPolicyRequest: requests.CreateAutoScalingPolicyRequest
  ): Promise<responses.CreateAutoScalingPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#createAutoScalingPolicy.");
    const operationName = "createAutoScalingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingPolicy/CreateAutoScalingPolicy";
    const pathParams = {
      "{autoScalingConfigurationId}": createAutoScalingPolicyRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAutoScalingPolicyRequest.opcRequestId,
      "opc-retry-token": createAutoScalingPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAutoScalingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAutoScalingPolicyRequest.createAutoScalingPolicyDetails,
        "CreateAutoScalingPolicyDetails",
        model.CreateAutoScalingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAutoScalingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingPolicy",
        bodyModel: model.AutoScalingPolicy,
        type: "model.AutoScalingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAutoScalingConfigurationRequest
   * @return DeleteAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/DeleteAutoScalingConfiguration.ts.html |here} to see how to use DeleteAutoScalingConfiguration API.
   */
  public async deleteAutoScalingConfiguration(
    deleteAutoScalingConfigurationRequest: requests.DeleteAutoScalingConfigurationRequest
  ): Promise<responses.DeleteAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#deleteAutoScalingConfiguration.");
    const operationName = "deleteAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfiguration/DeleteAutoScalingConfiguration";
    const pathParams = {
      "{autoScalingConfigurationId}":
        deleteAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAutoScalingConfigurationRequest.ifMatch,
      "opc-request-id": deleteAutoScalingConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAutoScalingConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an autoscaling policy for the specified autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAutoScalingPolicyRequest
   * @return DeleteAutoScalingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/DeleteAutoScalingPolicy.ts.html |here} to see how to use DeleteAutoScalingPolicy API.
   */
  public async deleteAutoScalingPolicy(
    deleteAutoScalingPolicyRequest: requests.DeleteAutoScalingPolicyRequest
  ): Promise<responses.DeleteAutoScalingPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#deleteAutoScalingPolicy.");
    const operationName = "deleteAutoScalingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingPolicy/DeleteAutoScalingPolicy";
    const pathParams = {
      "{autoScalingConfigurationId}": deleteAutoScalingPolicyRequest.autoScalingConfigurationId,
      "{autoScalingPolicyId}": deleteAutoScalingPolicyRequest.autoScalingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAutoScalingPolicyRequest.ifMatch,
      "opc-request-id": deleteAutoScalingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAutoScalingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAutoScalingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAutoScalingConfigurationRequest
   * @return GetAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/GetAutoScalingConfiguration.ts.html |here} to see how to use GetAutoScalingConfiguration API.
   */
  public async getAutoScalingConfiguration(
    getAutoScalingConfigurationRequest: requests.GetAutoScalingConfigurationRequest
  ): Promise<responses.GetAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#getAutoScalingConfiguration.");
    const operationName = "getAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfiguration/GetAutoScalingConfiguration";
    const pathParams = {
      "{autoScalingConfigurationId}": getAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAutoScalingConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAutoScalingConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingConfiguration",
        bodyModel: model.AutoScalingConfiguration,
        type: "model.AutoScalingConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified autoscaling policy in the specified autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAutoScalingPolicyRequest
   * @return GetAutoScalingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/GetAutoScalingPolicy.ts.html |here} to see how to use GetAutoScalingPolicy API.
   */
  public async getAutoScalingPolicy(
    getAutoScalingPolicyRequest: requests.GetAutoScalingPolicyRequest
  ): Promise<responses.GetAutoScalingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation AutoScalingClient#getAutoScalingPolicy.");
    const operationName = "getAutoScalingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingPolicy/GetAutoScalingPolicy";
    const pathParams = {
      "{autoScalingConfigurationId}": getAutoScalingPolicyRequest.autoScalingConfigurationId,
      "{autoScalingPolicyId}": getAutoScalingPolicyRequest.autoScalingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAutoScalingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAutoScalingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAutoScalingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingPolicy",
        bodyModel: model.AutoScalingPolicy,
        type: "model.AutoScalingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists autoscaling configurations in the specifed compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAutoScalingConfigurationsRequest
   * @return ListAutoScalingConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/ListAutoScalingConfigurations.ts.html |here} to see how to use ListAutoScalingConfigurations API.
   */
  public async listAutoScalingConfigurations(
    listAutoScalingConfigurationsRequest: requests.ListAutoScalingConfigurationsRequest
  ): Promise<responses.ListAutoScalingConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#listAutoScalingConfigurations.");
    const operationName = "listAutoScalingConfigurations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfigurationSummary/ListAutoScalingConfigurations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAutoScalingConfigurationsRequest.compartmentId,
      "displayName": listAutoScalingConfigurationsRequest.displayName,
      "limit": listAutoScalingConfigurationsRequest.limit,
      "page": listAutoScalingConfigurationsRequest.page,
      "sortBy": listAutoScalingConfigurationsRequest.sortBy,
      "sortOrder": listAutoScalingConfigurationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAutoScalingConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAutoScalingConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAutoScalingConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AutoScalingConfigurationSummary,
        type: "Array<model.AutoScalingConfigurationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingConfigurationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AutoScalingConfigurationSummary objects
   * contained in responses from the listAutoScalingConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingConfigurations(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<model.AutoScalingConfigurationSummary> {
    return paginateRecords(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingConfigurationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingConfigurationsResponses(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<responses.ListAutoScalingConfigurationsResponse> {
    return paginateResponses(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AutoScalingConfigurationSummary objects
   * contained in responses from the listAutoScalingConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingConfigurationsRecordIterator(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<model.AutoScalingConfigurationSummary> {
    return paginateRecords(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingConfigurationsResponseIterator(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<responses.ListAutoScalingConfigurationsResponse> {
    return paginateResponses(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Lists the autoscaling policies in the specified autoscaling configuration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAutoScalingPoliciesRequest
   * @return ListAutoScalingPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/ListAutoScalingPolicies.ts.html |here} to see how to use ListAutoScalingPolicies API.
   */
  public async listAutoScalingPolicies(
    listAutoScalingPoliciesRequest: requests.ListAutoScalingPoliciesRequest
  ): Promise<responses.ListAutoScalingPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#listAutoScalingPolicies.");
    const operationName = "listAutoScalingPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingPolicySummary/ListAutoScalingPolicies";
    const pathParams = {
      "{autoScalingConfigurationId}": listAutoScalingPoliciesRequest.autoScalingConfigurationId
    };

    const queryParams = {
      "displayName": listAutoScalingPoliciesRequest.displayName,
      "limit": listAutoScalingPoliciesRequest.limit,
      "page": listAutoScalingPoliciesRequest.page,
      "sortBy": listAutoScalingPoliciesRequest.sortBy,
      "sortOrder": listAutoScalingPoliciesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAutoScalingPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAutoScalingPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAutoScalingPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AutoScalingPolicySummary,
        type: "Array<model.AutoScalingPolicySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AutoScalingPolicySummary objects
   * contained in responses from the listAutoScalingPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingPolicies(
    request: requests.ListAutoScalingPoliciesRequest
  ): AsyncIterableIterator<model.AutoScalingPolicySummary> {
    return paginateRecords(request, req => this.listAutoScalingPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingPoliciesResponses(
    request: requests.ListAutoScalingPoliciesRequest
  ): AsyncIterableIterator<responses.ListAutoScalingPoliciesResponse> {
    return paginateResponses(request, req => this.listAutoScalingPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AutoScalingPolicySummary objects
   * contained in responses from the listAutoScalingPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingPoliciesRecordIterator(
    request: requests.ListAutoScalingPoliciesRequest
  ): AsyncIterableIterator<model.AutoScalingPolicySummary> {
    return paginateRecords(request, req => this.listAutoScalingPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingPoliciesResponseIterator(
    request: requests.ListAutoScalingPoliciesRequest
  ): AsyncIterableIterator<responses.ListAutoScalingPoliciesResponse> {
    return paginateResponses(request, req => this.listAutoScalingPolicies(req));
  }

  /**
   * Updates certain fields on the specified autoscaling configuration, such as the name, the cooldown period,
   * and whether the autoscaling configuration is enabled.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateAutoScalingConfigurationRequest
   * @return UpdateAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/UpdateAutoScalingConfiguration.ts.html |here} to see how to use UpdateAutoScalingConfiguration API.
   */
  public async updateAutoScalingConfiguration(
    updateAutoScalingConfigurationRequest: requests.UpdateAutoScalingConfigurationRequest
  ): Promise<responses.UpdateAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#updateAutoScalingConfiguration.");
    const operationName = "updateAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingConfiguration/UpdateAutoScalingConfiguration";
    const pathParams = {
      "{autoScalingConfigurationId}":
        updateAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAutoScalingConfigurationRequest.ifMatch,
      "opc-request-id": updateAutoScalingConfigurationRequest.opcRequestId,
      "opc-retry-token": updateAutoScalingConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAutoScalingConfigurationRequest.updateAutoScalingConfigurationDetails,
        "UpdateAutoScalingConfigurationDetails",
        model.UpdateAutoScalingConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAutoScalingConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingConfiguration",
        bodyModel: model.AutoScalingConfiguration,
        type: "model.AutoScalingConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates an autoscaling policy in the specified autoscaling configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateAutoScalingPolicyRequest
   * @return UpdateAutoScalingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/autoscaling/UpdateAutoScalingPolicy.ts.html |here} to see how to use UpdateAutoScalingPolicy API.
   */
  public async updateAutoScalingPolicy(
    updateAutoScalingPolicyRequest: requests.UpdateAutoScalingPolicyRequest
  ): Promise<responses.UpdateAutoScalingPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AutoScalingClient#updateAutoScalingPolicy.");
    const operationName = "updateAutoScalingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/autoscaling/20181001/AutoScalingPolicy/UpdateAutoScalingPolicy";
    const pathParams = {
      "{autoScalingConfigurationId}": updateAutoScalingPolicyRequest.autoScalingConfigurationId,
      "{autoScalingPolicyId}": updateAutoScalingPolicyRequest.autoScalingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAutoScalingPolicyRequest.ifMatch,
      "opc-request-id": updateAutoScalingPolicyRequest.opcRequestId,
      "opc-retry-token": updateAutoScalingPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAutoScalingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAutoScalingPolicyRequest.updateAutoScalingPolicyDetails,
        "UpdateAutoScalingPolicyDetails",
        model.UpdateAutoScalingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAutoScalingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingPolicy",
        bodyModel: model.AutoScalingPolicy,
        type: "model.AutoScalingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
