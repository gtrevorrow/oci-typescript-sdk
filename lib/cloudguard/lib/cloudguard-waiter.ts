/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](/iaas/cloud-guard/home.htm) and [Security Zones](/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { CloudGuardClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class CloudGuardWaiter {
  public constructor(
    private client: CloudGuardClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAdhocQuery till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAdhocQueryResponse | null (null in case of 404 response)
   */
  public async forAdhocQuery(
    request: serviceRequests.GetAdhocQueryRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetAdhocQueryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAdhocQuery(request),
      response => targetStates.includes(response.adhocQuery.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDataMaskRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataMaskRuleResponse | null (null in case of 404 response)
   */
  public async forDataMaskRule(
    request: serviceRequests.GetDataMaskRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDataMaskRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataMaskRule(request),
      response => targetStates.includes(response.dataMaskRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDataSource till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataSourceResponse | null (null in case of 404 response)
   */
  public async forDataSource(
    request: serviceRequests.GetDataSourceRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDataSourceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataSource(request),
      response => targetStates.includes(response.dataSource.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorResponse | null (null in case of 404 response)
   */
  public async forDetector(
    request: serviceRequests.GetDetectorRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetector(request),
      response => targetStates.includes(response.detector.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRecipeResponse | null (null in case of 404 response)
   */
  public async forDetectorRecipe(
    request: serviceRequests.GetDetectorRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRecipe(request),
      response => targetStates.includes(response.detectorRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRecipeDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forDetectorRecipeDetectorRule(
    request: serviceRequests.GetDetectorRecipeDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRecipeDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRecipeDetectorRule(request),
      response => targetStates.includes(response.detectorRecipeDetectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forDetectorRule(
    request: serviceRequests.GetDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRule(request),
      response => targetStates.includes(response.detectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forManagedList till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetManagedListResponse | null (null in case of 404 response)
   */
  public async forManagedList(
    request: serviceRequests.GetManagedListRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetManagedListResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getManagedList(request),
      response => targetStates.includes(response.managedList.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forProblem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProblemResponse
   */
  public async forProblem(
    request: serviceRequests.GetProblemRequest,
    ...targetStates: models.ProblemLifecycleState[]
  ): Promise<serviceResponses.GetProblemResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getProblem(request),
      response => targetStates.includes(response.problem.lifecycleState!)
    );
  }

  /**
   * Waits forResponderRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRecipeResponse | null (null in case of 404 response)
   */
  public async forResponderRecipe(
    request: serviceRequests.GetResponderRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRecipe(request),
      response => targetStates.includes(response.responderRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResponderRecipeResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
   */
  public async forResponderRecipeResponderRule(
    request: serviceRequests.GetResponderRecipeResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRecipeResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRecipeResponderRule(request),
      response => targetStates.includes(response.responderRecipeResponderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRuleResponse | null (null in case of 404 response)
   */
  public async forResponderRule(
    request: serviceRequests.GetResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRule(request),
      response => targetStates.includes(response.responderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSavedQuery till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSavedQueryResponse | null (null in case of 404 response)
   */
  public async forSavedQuery(
    request: serviceRequests.GetSavedQueryRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSavedQueryResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSavedQuery(request),
      response => targetStates.includes(response.savedQuery.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityPolicyResponse | null (null in case of 404 response)
   */
  public async forSecurityPolicy(
    request: serviceRequests.GetSecurityPolicyRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSecurityPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityPolicy(request),
      response => targetStates.includes(response.securityPolicy.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityRecipeResponse | null (null in case of 404 response)
   */
  public async forSecurityRecipe(
    request: serviceRequests.GetSecurityRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSecurityRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityRecipe(request),
      response => targetStates.includes(response.securityRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityZone till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityZoneResponse | null (null in case of 404 response)
   */
  public async forSecurityZone(
    request: serviceRequests.GetSecurityZoneRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetSecurityZoneResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityZone(request),
      response => targetStates.includes(response.securityZone.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTarget till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetResponse | null (null in case of 404 response)
   */
  public async forTarget(
    request: serviceRequests.GetTargetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTarget(request),
      response => targetStates.includes(response.target.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetDetectorRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetDetectorRecipeResponse | null (null in case of 404 response)
   */
  public async forTargetDetectorRecipe(
    request: serviceRequests.GetTargetDetectorRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetDetectorRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetDetectorRecipe(request),
      response => targetStates.includes(response.targetDetectorRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetDetectorRecipeDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forTargetDetectorRecipeDetectorRule(
    request: serviceRequests.GetTargetDetectorRecipeDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetDetectorRecipeDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetDetectorRecipeDetectorRule(request),
      response => targetStates.includes(response.targetDetectorRecipeDetectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetResponderRecipeResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
   */
  public async forTargetResponderRecipeResponderRule(
    request: serviceRequests.GetTargetResponderRecipeResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetResponderRecipeResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetResponderRecipeResponderRule(request),
      response =>
        targetStates.includes(response.targetResponderRecipeResponderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
