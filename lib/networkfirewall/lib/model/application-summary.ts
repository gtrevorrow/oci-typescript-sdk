/**
 * Network Firewall API
 * Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
 * OpenAPI spec version: 20230501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary object for application element in the network firewall policy.
 */
export interface ApplicationSummary {
  /**
   * Name of the application.
   */
  "name": string;
  /**
   * OCID of the Network Firewall Policy this application belongs to.
   */
  "parentResourceId": string;

  "type": string;
}

export namespace ApplicationSummary {
  export function getJsonObj(obj: ApplicationSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "ICMP_V6":
          return model.Icmp6ApplicationSummary.getJsonObj(
            <model.Icmp6ApplicationSummary>(<object>jsonObj),
            true
          );
        case "ICMP":
          return model.IcmpApplicationSummary.getJsonObj(
            <model.IcmpApplicationSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ApplicationSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "ICMP_V6":
          return model.Icmp6ApplicationSummary.getDeserializedJsonObj(
            <model.Icmp6ApplicationSummary>(<object>jsonObj),
            true
          );
        case "ICMP":
          return model.IcmpApplicationSummary.getDeserializedJsonObj(
            <model.IcmpApplicationSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
