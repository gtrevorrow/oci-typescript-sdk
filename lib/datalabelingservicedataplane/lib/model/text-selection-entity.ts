/**
 * Data Labeling API
 * Use Data Labeling API to create Annotations on Images, Texts & Documents, and generate snapshots.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * This lets the labeler highlight text, by specifying an offset and a length, and apply labels to it.
 */
export interface TextSelectionEntity extends model.Entity {
  /**
   * A collection of label entities.
   */
  "labels": Array<model.Label>;
  "textSpan": model.TextSpan;
  /**
   * A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
   * For example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "extendedMetadata"?: { [key: string]: string };

  "entityType": string;
}

export namespace TextSelectionEntity {
  export function getJsonObj(obj: TextSelectionEntity, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Entity.getJsonObj(obj) as TextSelectionEntity)),
      ...{
        "labels": obj.labels
          ? obj.labels.map(item => {
              return model.Label.getJsonObj(item);
            })
          : undefined,
        "textSpan": obj.textSpan ? model.TextSpan.getJsonObj(obj.textSpan) : undefined
      }
    };

    return jsonObj;
  }
  export const entityType = "TEXTSELECTION";
  export function getDeserializedJsonObj(
    obj: TextSelectionEntity,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.Entity.getDeserializedJsonObj(obj) as TextSelectionEntity)),
      ...{
        "labels": obj.labels
          ? obj.labels.map(item => {
              return model.Label.getDeserializedJsonObj(item);
            })
          : undefined,
        "textSpan": obj.textSpan ? model.TextSpan.getDeserializedJsonObj(obj.textSpan) : undefined
      }
    };

    return jsonObj;
  }
}
