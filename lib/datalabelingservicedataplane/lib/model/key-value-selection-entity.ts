/**
 * Data Labeling API
 * Use Data Labeling API to create Annotations on Images, Texts & Documents, and generate snapshots.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * This allows the labeler to apply label the highlighted text from OCR, this includes labelled and unlabelled data.
 */
export interface KeyValueSelectionEntity extends model.Entity {
  /**
   * Entity Name.
   */
  "text": string;
  /**
   * A collection of label entities.
   */
  "labels"?: Array<model.Label>;
  "boundingPolygon": model.BoundingPolygon;
  /**
   * Integer value. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "rotation"?: number;
  /**
   * float value, score from OCR. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "confidence": number;
  /**
   * Integer value. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "pageNumber"?: number;

  "entityType": string;
}

export namespace KeyValueSelectionEntity {
  export function getJsonObj(obj: KeyValueSelectionEntity, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Entity.getJsonObj(obj) as KeyValueSelectionEntity)),
      ...{
        "labels": obj.labels
          ? obj.labels.map(item => {
              return model.Label.getJsonObj(item);
            })
          : undefined,
        "boundingPolygon": obj.boundingPolygon
          ? model.BoundingPolygon.getJsonObj(obj.boundingPolygon)
          : undefined
      }
    };

    return jsonObj;
  }
  export const entityType = "KEYVALUESELECTION";
  export function getDeserializedJsonObj(
    obj: KeyValueSelectionEntity,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.Entity.getDeserializedJsonObj(obj) as KeyValueSelectionEntity)),
      ...{
        "labels": obj.labels
          ? obj.labels.map(item => {
              return model.Label.getDeserializedJsonObj(item);
            })
          : undefined,
        "boundingPolygon": obj.boundingPolygon
          ? model.BoundingPolygon.getDeserializedJsonObj(obj.boundingPolygon)
          : undefined
      }
    };

    return jsonObj;
  }
}
