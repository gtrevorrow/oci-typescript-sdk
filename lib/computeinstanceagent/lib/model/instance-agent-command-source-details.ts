/**
 * Oracle Cloud Agent API
 * API for the Oracle Cloud Agent software running on compute instances. Oracle Cloud Agent
is a lightweight process that monitors and manages compute instances.

 * OpenAPI spec version: 20180530
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The source of the command.
 */
export interface InstanceAgentCommandSourceDetails {
  "sourceType": string;
}

export namespace InstanceAgentCommandSourceDetails {
  export function getJsonObj(obj: InstanceAgentCommandSourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sourceType" in obj && obj.sourceType) {
      switch (obj.sourceType) {
        case "OBJECT_STORAGE_TUPLE":
          return model.InstanceAgentCommandSourceViaObjectStorageTupleDetails.getJsonObj(
            <model.InstanceAgentCommandSourceViaObjectStorageTupleDetails>(<object>jsonObj),
            true
          );
        case "OBJECT_STORAGE_URI":
          return model.InstanceAgentCommandSourceViaObjectStorageUriDetails.getJsonObj(
            <model.InstanceAgentCommandSourceViaObjectStorageUriDetails>(<object>jsonObj),
            true
          );
        case "TEXT":
          return model.InstanceAgentCommandSourceViaTextDetails.getJsonObj(
            <model.InstanceAgentCommandSourceViaTextDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sourceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: InstanceAgentCommandSourceDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "sourceType" in obj && obj.sourceType) {
      switch (obj.sourceType) {
        case "OBJECT_STORAGE_TUPLE":
          return model.InstanceAgentCommandSourceViaObjectStorageTupleDetails.getDeserializedJsonObj(
            <model.InstanceAgentCommandSourceViaObjectStorageTupleDetails>(<object>jsonObj),
            true
          );
        case "OBJECT_STORAGE_URI":
          return model.InstanceAgentCommandSourceViaObjectStorageUriDetails.getDeserializedJsonObj(
            <model.InstanceAgentCommandSourceViaObjectStorageUriDetails>(<object>jsonObj),
            true
          );
        case "TEXT":
          return model.InstanceAgentCommandSourceViaTextDetails.getDeserializedJsonObj(
            <model.InstanceAgentCommandSourceViaTextDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.sourceType}`);
      }
    }
    return jsonObj;
  }
}
